; Package uid -> name
(0 low-structures)
(1 debug-low-structures)
(2 alt-features-structures)
(3 cheat-features-structures)
(4 the-interfaces)
(5 meta-module-system)
(6 run-time-structures)
(7 compiler-structures)
(8 initial-structures)
(9 debug-structures)
(10 usual-structures)
(11 alt-low-structures)
(12 compiler-structures)
(13 linker-structures)
(14 scheme-level-0)
(15 scheme-level-1)
(16 records)
(17 define-record-types)
(18 methods)
(19 number-i/o)
(20 fluids)
(21 wind)
(22 session-data)
(23 i/o)
(24 channel-i/o)
(25 conditions)
(26 writing)
(27 reading)
(28 scheme-level-2)
(29 features)
(30 templates)
(31 continuations)
(32 more-types)
(33 enumerated)
(34 architecture)
(35 exceptions)
(36 interrupts)
(37 threads)
(38 scheduler)
(39 root-scheduler)
(40 enum-case)
(41 queues)
(42 linked-queues)
(43 locks)
(44 usual-resumer)
(45 weak)
(46 display-conditions)
(47 tables)
(48 filenames)
(49 meta-types)
(50 interfaces)
(51 syntactic)
(52 usual-macros)
(53 reconstruction)
(54 packages)
(55 scan)
(56 debug-data)
(57 segments)
(58 compiler)
(59 defpackage)
(60 types)
(61 module-system)
(62 inline)
(63 environments)
(64 evaluation)
(65 ensures-loaded)
(66 for-reification)
(67 scheme)
(68 mini-command)
(69 initial-system)
-
; Location uid -> (name . package-uid)
(0 (current-cont . 14))
(1 (closure-template . 14))
(2 (continuation-ref . 14))
(3 (closure? . 14))
(4 (cell-set! . 14))
(5 (port-pending-eof? . 14))
(6 (complex? . 14))
(7 (arithmetic-shift . 14))
(8 (set-port-pending-eof?! . 14))
(9 (port-handler . 14))
(10 (signal-condition . 14))
(11 (integer? . 14))
(12 (session-data . 14))
(13 (make-closure . 14))
(14 (template-ref . 14))
(15 (set-session-data! . 14))
(16 (make-rectangular . 14))
(17 (channel? . 14))
(18 (open-channel . 14))
(19 (string=? . 14))
(20 (cell-ref . 14))
(21 (find-all . 14))
(22 (extended-number? . 14))
(23 (reverse-list->string . 14))
(24 (port-locked? . 14))
(25 (denominator . 14))
(26 (call-with-values . 14))
(27 (weak-pointer-ref . 14))
(28 (find-all-symbols . 14))
(29 (set-port-locked?! . 14))
(30 (code-vector? . 14))
(31 (port-status . 14))
(32 (pop . 14))
(33 (exp . 14))
(34 (sin . 14))
(35 (set-port-status! . 14))
(36 (make-extended-number . 14))
(37 (channel-os-index . 14))
(38 (cos . 14))
(39 (collect . 14))
(40 (external-lookup . 14))
(41 (tan . 14))
(42 (log . 14))
(43 (continuation-length . 14))
(44 (find-all-records . 14))
(45 (make-code-vector . 14))
(46 (cdr . 14))
(47 (bitwise-xor . 14))
(48 (car . 14))
(49 (string? . 14))
(50 (symbol? . 14))
(51 (set-cdr! . 14))
(52 (bitwise-not . 14))
(53 (vector? . 14))
(54 (closure-env . 14))
(55 (set-car! . 14))
(56 (bitwise-ior . 14))
(57 (port-buffer . 14))
(58 (number? . 14))
(59 (template-length . 14))
(60 (string-hash . 14))
(61 (pop-env . 14))
(62 (primitive-catch . 14))
(63 (set-port-buffer! . 14))
(64 (make-string . 14))
(65 (record? . 14))
(66 (make-vector . 14))
(67 (extended-number-set! . 14))
(68 (write-image . 14))
(69 (eq? . 14))
(70 (bitwise-and . 14))
(71 (code-vector-set! . 14))
(72 (location-id . 14))
(73 (set-location-id! . 14))
(74 (make-record . 14))
(75 (vector . 14))
(76 (intern . 14))
(77 (values . 14))
(78 (string-set! . 14))
(79 (unassigned . 14))
(80 (copy-bytes! . 14))
(81 (vector-set! . 14))
(82 (extended-number-ref . 14))
(83 (unspecific . 14))
(84 (channel-maybe-write . 14))
(85 (code-vector-ref . 14))
(86 (schedule-interrupt . 14))
(87 (record . 14))
(88 (set-interrupt-handlers! . 14))
(89 (eof-object? . 14))
(90 (record-set! . 14))
(91 (ascii->char . 14))
(92 (char->ascii . 14))
(93 (port-limit . 14))
(94 (set-enabled-interrupts! . 14))
(95 (external-value . 14))
(96 (make-immutable! . 14))
(97 (port-index . 14))
(98 (set-port-limit! . 14))
(99 (channel-status . 14))
(100 (current-thread . 14))
(101 (set-port-index! . 14))
(102 (string-ref . 14))
(103 (set-exception-handlers! . 14))
(104 (immutable? . 14))
(105 (set-current-thread! . 14))
(106 (vector-ref . 14))
(107 (exact? . 14))
(108 (write-char . 14))
(109 (symbol->string . 14))
(110 (make-polar . 14))
(111 (record-ref . 14))
(112 (eof-object . 14))
(113 (numerator . 14))
(114 (channel-id . 14))
(115 (extended-number-length . 14))
(116 (error . 14))
(117 (exact->inexact . 14))
(118 (inexact->exact . 14))
(119 (checked-record-set! . 14))
(120 (apply . 14))
(121 (memory-status . 14))
(122 (code-vector-length . 14))
(123 (floor . 14))
(124 (with-continuation . 14))
(125 (magnitude . 14))
(126 (nargs . 14))
(127 (char=? . 14))
(128 (char<? . 14))
(129 (continuation? . 14))
(130 (remainder . 14))
(131 (vm-return . 14))
(132 (false . 14))
(133 (angle . 14))
(134 (port? . 14))
(135 (string-length . 14))
(136 (external? . 14))
(137 (make-continuation . 14))
(138 (vector-length . 14))
(139 (port-lock . 14))
(140 (template? . 14))
(141 (rational? . 14))
(142 (add-finalizer! . 14))
(143 (checked-record-ref . 14))
(144 (channel-maybe-read . 14))
(145 (location? . 14))
(146 (set-port-lock! . 14))
(147 (make-port . 14))
(148 (external-name . 14))
(149 (pair? . 14))
(150 (make-external . 14))
(151 (port-data . 14))
(152 (record-length . 14))
(153 (external-call . 14))
(154 (get-cont-from-heap . 14))
(155 (real-part . 14))
(156 (real? . 14))
(157 (make-template . 14))
(158 (set-port-data! . 14))
(159 (imag-part . 14))
(160 (make-location . 14))
(161 (= . 14))
(162 (< . 14))
(163 (char? . 14))
(164 (channel-abort . 14))
(165 (close-channel . 14))
(166 (quotient . 14))
(167 (/ . 14))
(168 (weak-pointer? . 14))
(169 (- . 14))
(170 (continuation-set! . 14))
(171 (peek-char . 14))
(172 (+ . 14))
(173 (* . 14))
(174 (contents . 14))
(175 (sqrt . 14))
(176 (make-cell . 14))
(177 (read-char . 14))
(178 (set-contents! . 14))
(179 (push . 14))
(180 (make-weak-pointer . 14))
(181 (assq . 14))
(182 (trap . 14))
(183 (wait . 14))
(184 (cons . 14))
(185 (template-set! . 14))
(186 (time . 14))
(187 (location-defined? . 14))
(188 (asin . 14))
(189 (vm-extension . 14))
(190 (acos . 14))
(191 (set-location-defined?! . 14))
(192 (atan . 14))
(193 (loophole . 14))
(194 (define-syntax . 14))
(195 (begin . 14))
(196 (letrec-syntax . 14))
(197 (%file-name% . 14))
(198 (structure-ref . 14))
(199 (quote . 14))
(200 (lambda . 14))
(201 (define . 14))
(202 (if . 14))
(203 (let-syntax . 14))
(204 (letrec . 14))
(205 (flat-lambda . 14))
(206 (lap . 14))
(207 (primitive-procedure . 14))
(208 (set! . 14))
(209 (with-aliases . 14))
(210 (call . 14))
(211 (and . 14))
(212 (cond . 14))
(213 (do . 14))
(214 (let . 14))
(215 (let* . 14))
(216 (or . 14))
(217 (char->integer . 14))
(218 (integer->char . 14))
(219 (ascii-limit . 14))
(220 (ascii-whitespaces . 14))
(221 (procedure? . 14))
(222 (invoke-closure . 14))
(223 (primitive-cwcc . 14))
(224 (make-undefined-location . 14))
(225 (vector-unassigned? . 14))
(226 (string-copy . 14))
(227 (string->symbol . 14))
(228 (*the-symbol-table* . 14))
(229 (flush-the-symbol-table! . 14))
(230 (restore-the-symbol-table! . 14))
(231 (input-port? . 14))
(232 (output-port? . 14))
(233 (channel-read . 14))
(234 (buffer-length . 14))
(235 (channel-write . 14))
(236 (make-condition . 14))
(237 (signal . 14))
(238 (warn . 14))
(239 (syntax-error . 14))
(240 (call-error . 14))
(241 (case . 15))
(242 (quasiquote . 15))
(243 (syntax-rules . 15))
(244 (not . 15))
(245 (boolean? . 15))
(246 (eqv? . 15))
(247 (equal? . 15))
(248 (> . 15))
(249 (<= . 15))
(250 (>= . 15))
(251 (max . 15))
(252 (min . 15))
(253 (max-or-min . 15))
(254 (abs . 15))
(255 (zero? . 15))
(256 (positive? . 15))
(257 (negative? . 15))
(258 (even? . 15))
(259 (odd? . 15))
(260 (caar . 15))
(261 (cadr . 15))
(262 (cdar . 15))
(263 (cddr . 15))
(264 (caaar . 15))
(265 (caadr . 15))
(266 (cadar . 15))
(267 (caddr . 15))
(268 (cdaar . 15))
(269 (cdadr . 15))
(270 (cddar . 15))
(271 (cdddr . 15))
(272 (caaaar . 15))
(273 (caaadr . 15))
(274 (caadar . 15))
(275 (caaddr . 15))
(276 (cadaar . 15))
(277 (cadadr . 15))
(278 (caddar . 15))
(279 (cadddr . 15))
(280 (cdaaar . 15))
(281 (cdaadr . 15))
(282 (cdadar . 15))
(283 (cdaddr . 15))
(284 (cddaar . 15))
(285 (cddadr . 15))
(286 (cdddar . 15))
(287 (cddddr . 15))
(288 (null? . 15))
(289 (list . 15))
(290 (length . 15))
(291 (real-length . 15))
(292 (append . 15))
(293 (reverse . 15))
(294 (append-reverse . 15))
(295 (list-tail . 15))
(296 (list-ref . 15))
(297 (mem . 15))
(298 (memq . 15))
(299 (memv . 15))
(300 (member . 15))
(301 (ass . 15))
(302 (assv . 15))
(303 (assoc . 15))
(304 (list? . 15))
(305 (char>? . 15))
(306 (char>=? . 15))
(307 (char<=? . 15))
(308 (char-whitespace? . 15))
(309 (char-lower-case? . 15))
(310 (char-upper-case? . 15))
(311 (char-numeric? . 15))
(312 (char-alphabetic? . 15))
(313 (char-case-delta . 15))
(314 (make-character-map . 15))
(315 (upcase-map . 15))
(316 (char-upcase . 15))
(317 (downcase-map . 15))
(318 (char-downcase . 15))
(319 (char-ci-compare . 15))
(320 (char-ci=? . 15))
(321 (char-ci<? . 15))
(322 (char-ci<=? . 15))
(323 (char-ci>? . 15))
(324 (char-ci>=? . 15))
(325 (string . 15))
(326 (substring . 15))
(327 (string-append . 15))
(328 (string->list . 15))
(329 (list->string . 15))
(330 (string-fill! . 15))
(331 (make-string=? . 15))
(332 (string-ci=? . 15))
(333 (make-string<? . 15))
(334 (string<? . 15))
(335 (string-ci<? . 15))
(336 (string>? . 15))
(337 (string<=? . 15))
(338 (string>=? . 15))
(339 (string-ci>? . 15))
(340 (string-ci<=? . 15))
(341 (string-ci>=? . 15))
(342 (vector->list . 15))
(343 (list->vector . 15))
(344 (vector-fill! . 15))
(345 (map . 15))
(346 (map1 . 15))
(347 (map2+ . 15))
(348 (for-each . 15))
(349 (for-each1 . 15))
(350 (for-each2+ . 15))
(351 (delay . 15))
(352 (make-promise . 15))
(353 (force . 15))
(354 (unspecific . 15))
(355 (reduce . 15))
(356 (filter . 15))
(357 (pos . 15))
(358 (posq . 15))
(359 (posv . 15))
(360 (position . 15))
(361 (any . 15))
(362 (every . 15))
(363 (sublist . 15))
(364 (last . 15))
(365 (insert . 15))
(366 (inexact? . 15))
(367 (modulo . 15))
(368 (ceiling . 15))
(369 (truncate . 15))
(370 (round . 15))
(371 (gcd . 15))
(372 (euclid . 15))
(373 (lcm . 15))
(374 (expt . 15))
(375 (raise-to-integer-power . 15))
(376 (rationalize . 15))
(377 (simplest-rational . 15))
(378 (record-type . 16))
(379 (*record-type-uid* . 16))
(380 (*record-type* . 16))
(381 (make-record-type . 16))
(382 (record-type? . 16))
(383 (record-type-uid . 16))
(384 (record-type-name . 16))
(385 (record-type-field-names . 16))
(386 (record-type-discloser . 16))
(387 (record-field-index . 16))
(388 (record-constructor . 16))
(389 (record-accessor . 16))
(390 (record-modifier . 16))
(391 (record-predicate . 16))
(392 (define-record-discloser . 16))
(393 (disclose-record . 16))
(394 (default-record-discloser . 16))
(395 (:record-type . 16))
(396 (define-record-type . 17))
(397 (define-constructor . 17))
(398 (define-accessors . 17))
(399 (define-accessor . 17))
(400 (:simple-type . 18))
(401 (really-make-simple-type . 18))
(402 (simple-type-id . 18))
(403 (simple-type-priority . 18))
(404 (simple-type-predicate . 18))
(405 (simple-type-superiors . 18))
(406 (simple-type? . 18))
(407 (make-simple-type . 18))
(408 (compute-priority . 18))
(409 (*increment* . 18))
(410 (%type-priority . 18))
(411 (%type-predicate . 18))
(412 (%same-type? . 18))
(413 (define-simple-type . 18))
(414 (:syntax . 18))
(415 (:values . 18))
(416 (value? . 18))
(417 (:value . 18))
(418 (:zero . 18))
(419 (:number . 18))
(420 (:complex . 18))
(421 (:real . 18))
(422 (:rational . 18))
(423 (:integer . 18))
(424 (:exact-integer . 18))
(425 (:boolean . 18))
(426 (:symbol . 18))
(427 (:char . 18))
(428 (:null . 18))
(429 (:pair . 18))
(430 (:vector . 18))
(431 (:string . 18))
(432 (:procedure . 18))
(433 (:input-port . 18))
(434 (:output-port . 18))
(435 (:eof-object . 18))
(436 (:record . 18))
(437 (record-type-priority . 18))
(438 (:method-info . 18))
(439 (really-make-method-info . 18))
(440 (method-info-proc . 18))
(441 (method-info-n-ary? . 18))
(442 (method-info-types . 18))
(443 (method-info? . 18))
(444 (make-method-info . 18))
(445 (empty-method-list . 18))
(446 (insert-method . 18))
(447 (same-applicability? . 18))
(448 (every2 . 18))
(449 (more-specific? . 18))
(450 (more-specific-type? . 18))
(451 (:method-table . 18))
(452 (really-make-method-table . 18))
(453 (method-table-id . 18))
(454 (method-table-set-perform! . 18))
(455 (method-table-get-perform . 18))
(456 (make-generic . 18))
(457 (method-table-prototype . 18))
(458 (method-table-methods . 18))
(459 (set-method-table-methods! . 18))
(460 (method-table? . 18))
(461 (make-method-table . 18))
(462 (make-cell-for-generic . 18))
(463 (add-to-method-table! . 18))
(464 (set-final-method! . 18))
(465 (apply-generic . 18))
(466 (define-generic . 18))
(467 (methods->perform . 18))
(468 (last-action . 18))
(469 (one-action . 18))
(470 (argument-sequence-predicate . 18))
(471 (check-for-next . 18))
(472 (check-next . 18))
(473 (method-info . 18))
(474 (method-internal . 18))
(475 (with-next-method . 18))
(476 (define-method . 18))
(477 (&add-method! . 18))
(478 (add-method! . 18))
(479 (&type-predicate . 18))
(480 (type-predicate . 18))
(481 (&type-priority . 18))
(482 (type-priority . 18))
(483 (&type-superiors . 18))
(484 (type-superiors . 18))
(485 (&same-type? . 18))
(486 (same-type? . 18))
(487 (:singleton . 18))
(488 (singleton . 18))
(489 (singleton-value . 18))
(490 (compare-to . 18))
(491 (&disclose . 18))
(492 (disclose . 18))
(493 (proc->discloser . 18))
(494 (&number->string . 19))
(495 (number->string . 19))
(496 (integer->string . 19))
(497 (string->number . 19))
(498 (&really-string->number . 19))
(499 (really-string->number . 19))
(500 (:integer-string . 19))
(501 (set-exactness . 19))
(502 (string->integer . 19))
(503 (channels . 26))
(504 (code-vectors . 26))
(505 (:thread . 20))
(506 (make-thread . 20))
(507 (thread-dynamic-env . 20))
(508 (get-dynamic-env . 20))
(509 (set-dynamic-env! . 20))
(510 (initialize-dynamic-state! . 20))
(511 (with-dynamic-env . 20))
(512 (empty-dynamic-env . 20))
(513 (:fluid . 20))
(514 (make-fluid . 20))
(515 (fluid-top-level-value . 20))
(516 (set-fluid-top-level-value! . 20))
(517 (fluid . 20))
(518 (set-fluid! . 20))
(519 (let-fluid . 20))
(520 (let-fluids . 20))
(521 (fluid-lookup . 20))
(522 (define-enumeration . 33))
(523 (components . 33))
(524 (enum . 33))
(525 (enumerand->name . 33))
(526 (name->enumerand . 33))
(527 (lookup-enumerand . 33))
(528 (architecture-version . 34))
(529 (bits-used-per-byte . 34))
(530 (maximum-stack-args . 34))
(531 (define-instruction-set . 34))
(532 (op . 34))
(533 (op-enumeration . 34))
(534 (op-count . 34))
(535 (opcode-arg-specs . 34))
(536 (interrupt . 34))
(537 (interrupt-enumeration . 34))
(538 (interrupt-count . 34))
(539 (exception . 34))
(540 (exception-enumeration . 34))
(541 (exception-count . 34))
(542 (time-option . 34))
(543 (time-option-enumeration . 34))
(544 (time-option-count . 34))
(545 (memory-status-option . 34))
(546 (memory-status-option-enumeration . 34))
(547 (memory-status-option-count . 34))
(548 (channel-status-option . 34))
(549 (channel-status-option-enumeration . 34))
(550 (channel-status-option-count . 34))
(551 (port-status-options . 34))
(552 (port-status-options-enumeration . 34))
(553 (port-status-options-count . 34))
(554 (stob . 34))
(555 (stob-enumeration . 34))
(556 (stob-count . 34))
(557 (least-b-vector-type . 34))
(558 (stob-data . 34))
(559 (linked-queues . 37))
(560 (primitives . 37))
(561 (:queue . 41))
(562 (really-make-queue . 41))
(563 (queue-tail . 41))
(564 (set-queue-tail! . 41))
(565 (queue-head . 41))
(566 (set-queue-head! . 41))
(567 (queue-uid . 41))
(568 (queue? . 41))
(569 (*queue-uid* . 41))
(570 (make-queue . 41))
(571 (queue-empty? . 41))
(572 (enqueue! . 41))
(573 (queue-front . 41))
(574 (dequeue! . 41))
(575 (on-queue? . 41))
(576 (delete-from-queue! . 41))
(577 (delete-from-queue-if! . 41))
(578 (queue->list . 41))
(579 (queue-length . 41))
(580 (*condition-types* . 25))
(581 (condition-supertypes . 25))
(582 (define-condition-type . 25))
(583 (condition-predicate . 25))
(584 (condition? . 25))
(585 (condition-type . 25))
(586 (condition-stuff . 25))
(587 (error? . 25))
(588 (call-error? . 25))
(589 (read-error? . 25))
(590 (exception? . 25))
(591 (exception-opcode . 25))
(592 (exception-reason . 25))
(593 (exception-arguments . 25))
(594 (make-exception . 25))
(595 (warning? . 25))
(596 (syntax-error? . 25))
(597 (interrupt? . 25))
(598 (*session-data-initializers* . 22))
(599 (make-session-data-slot! . 22))
(600 (session-data-ref . 22))
(601 (session-data-set! . 22))
(602 (initialize-session-data! . 22))
(603 (initialize-interrupts! . 36))
(604 (interrupt-handlers . 36))
(605 (set-interrupt-handler! . 36))
(606 (no-interrupts . 36))
(607 (all-interrupts . 36))
(608 (with-interrupts-inhibited . 36))
(609 (with-interrupts-allowed . 36))
(610 (disable-interrupts! . 36))
(611 (enable-interrupts! . 36))
(612 (with-interrupts . 36))
(613 (enabled-interrupts . 36))
(614 (*post-gc-procedures* . 36))
(615 (call-after-gc! . 36))
(616 (post-gc-handler . 36))
(617 (required-post-gc-space . 36))
(618 (space-shortage-handler . 36))
(619 (call-before-heap-overflow! . 36))
(620 (dynamic-wind . 21))
(621 (call-with-current-continuation . 21))
(622 (continuation->procedure . 21))
(623 (:point . 21))
(624 (make-point . 21))
(625 (point-parent . 21))
(626 (point-dynamic-env . 21))
(627 (point-out . 21))
(628 (point-in . 21))
(629 (point-depth . 21))
(630 (root-point . 21))
(631 ($dynamic-point . 21))
(632 (get-dynamic-point . 21))
(633 (env-dynamic-point . 21))
(634 (let-dynamic-point . 21))
(635 (travel-to-point! . 21))
(636 (template-overhead . 30))
(637 (template-code . 30))
(638 (template-info . 30))
(639 (set-template-code! . 30))
(640 (set-template-info! . 30))
(641 (:closure . 32))
(642 (:code-vector . 32))
(643 (:location . 32))
(644 (:template . 32))
(645 (:channel . 32))
(646 (:port . 32))
(647 (:weak-pointer . 32))
(648 (:external . 32))
(649 (continuation-cont . 31))
(650 (continuation-pc . 31))
(651 (continuation-template . 31))
(652 (continuation-env . 31))
(653 (continuation-overhead . 31))
(654 (continuation-arg . 31))
(655 (continuation-arg-count . 31))
(656 (continuation-parent . 31))
(657 (:continuation . 31))
(658 (define-exception-handler . 35))
(659 (signal-exception . 35))
(660 (exception-handlers . 35))
(661 (make-opcode-generic! . 35))
(662 (really-signal-condition . 35))
(663 (with-handler . 35))
(664 ($condition-handlers . 35))
(665 (initialize-exceptions! . 35))
(666 (last-resort-condition-handler . 35))
(667 (report-utter-lossage . 35))
(668 (continuation-preview . 35))
(669 (ignore-errors . 35))
(670 (*wna-handlers* . 35))
(671 (define-wna-handler . 35))
(672 (op/check-nargs= . 35))
(673 (wna-lose . 35))
(674 (comparison-wna . 35))
(675 (:q-entry . 42))
(676 (make-q-entry . 42))
(677 (q-entry-next . 42))
(678 (set-q-entry-next! . 42))
(679 (q-entry-prev . 42))
(680 (set-q-entry-prev! . 42))
(681 (q-entry-data . 42))
(682 (q-entry? . 42))
(683 (queue? . 42))
(684 (make-queue . 42))
(685 (queue-empty? . 42))
(686 (enqueue! . 42))
(687 (queue-head . 42))
(688 (dequeue! . 42))
(689 (delete-queue-entry! . 42))
(690 (queue->list . 42))
(691 (queue-length . 42))
(692 (delete-from-queue! . 42))
(693 (:thread . 37))
(694 (really-make-thread . 37))
(695 (thread-name . 37))
(696 (thread-uid . 37))
(697 (thread-current-task . 37))
(698 (set-thread-current-task! . 37))
(699 (thread-events . 37))
(700 (set-thread-events! . 37))
(701 (thread-data . 37))
(702 (set-thread-data! . 37))
(703 (thread-scheduler . 37))
(704 (set-thread-scheduler! . 37))
(705 (thread-time . 37))
(706 (set-thread-time! . 37))
(707 (thread-queues . 37))
(708 (set-thread-queues! . 37))
(709 (thread-continuation . 37))
(710 (set-thread-continuation! . 37))
(711 (thread-dynamic-env . 37))
(712 (thread? . 37))
(713 (*thread-uid* . 37))
(714 (make-thread . 37))
(715 (thread-top-level . 37))
(716 (thread-uid->thread . 37))
(717 (all-threads . 37))
(718 (add-event! . 37))
(719 (thunk->continuation . 37))
(720 (compose-continuation . 37))
(721 (make-thread-queue . 37))
(722 (thread-queue-empty? . 37))
(723 (thread-queue-head . 37))
(724 (enqueue-thread! . 37))
(725 (exclusively-enqueue-thread! . 37))
(726 (dequeue-thread! . 37))
(727 (remove-thread-from-queues! . 37))
(728 (*time-limit* . 37))
(729 (current-thread . 37))
(730 (set-current-thread! . 37))
(731 (event-type . 37))
(732 (event-type-enumeration . 37))
(733 (event-type-count . 37))
(734 (run . 37))
(735 (return-values-to-thread! . 37))
(736 (run-next-thread . 37))
(737 (min . 37))
(738 (switch-to-thread . 37))
(739 (handle-timer-interrupt . 37))
(740 (debit-thread-times! . 37))
(741 (make-ready . 37))
(742 (suspend . 37))
(743 (suspend-to . 37))
(744 (block . 37))
(745 (relinquish-timeslice . 37))
(746 (upcall . 37))
(747 (propogate-upcall . 37))
(748 (kill-thread! . 37))
(749 (wait . 37))
(750 (waiting? . 37))
(751 (interrupt-thread . 37))
(752 (get-next-event! . 37))
(753 (event-pending? . 37))
(754 (schedule-event . 37))
(755 (schedule-wakeup . 37))
(756 (show-running . 37))
(757 (running? . 37))
(758 (spawn . 37))
(759 (spawn-on-root . 37))
(760 (spawn-on-scheduler . 37))
(761 (schedule-interrupt! . 37))
(762 (cancel-timer-interrupt! . 37))
(763 (interrupt-timer-time . 37))
(764 (real-time . 37))
(765 (message . 37))
(766 (with-threads . 37))
(767 (start-multitasking . 37))
(768 (deadlock? . 37))
(769 (terminate? . 37))
(770 (terminate-current-thread . 37))
(771 (root-scheduler-slot . 37))
(772 (root-scheduler . 37))
(773 (sleep . 37))
(774 (*dozers* . 37))
(775 (insert . 37))
(776 (wake-some-threads . 37))
(777 (:lock . 43))
(778 (really-make-lock . 43))
(779 (lock-uid . 43))
(780 (lock-queue . 43))
(781 (lock-owner-uid . 43))
(782 (set-lock-owner-uid! . 43))
(783 (lock? . 43))
(784 (*lock-uid* . 43))
(785 (make-lock . 43))
(786 (obtain-lock . 43))
(787 (maybe-obtain-lock . 43))
(788 (release-lock . 43))
(789 (:port-handler . 23))
(790 (make-port-handler . 23))
(791 (port-handler-buffer-proc . 23))
(792 (port-handler-close . 23))
(793 (port-handler-discloser . 23))
(794 (port-handler? . 23))
(795 (disclose-port . 23))
(796 (obtain-port-lock . 23))
(797 (maybe-obtain-port-lock . 23))
(798 (release-port-lock . 23))
(799 (initialize-i/o-handlers! . 23))
(800 (one-arg-proc->handler . 23))
(801 (two-arg-proc->handler . 23))
(802 (read-char-handler . 23))
(803 (fill-port-buffer! . 23))
(804 (write-char-handler . 23))
(805 (empty-port-buffer! . 23))
(806 (port-flushed? . 23))
(807 (set-port-flushed?! . 23))
(808 (close-input-port . 23))
(809 (close-output-port . 23))
(810 (define-port-op . 23))
(811 (real-char-ready? . 23))
(812 (read-block . 23))
(813 (really-read-block . 23))
(814 (buffer-length . 23))
(815 (read-more . 23))
(816 (okay-limits? . 23))
(817 (write-block . 23))
(818 (write-string . 23))
(819 (write-buffered-block . 23))
(820 (write-unbuffered-block . 23))
(821 (force-output . 23))
(822 (really-force-output . 23))
(823 (default-buffer-size . 23))
(824 (open-port? . 23))
(825 (open-port-mask . 23))
(826 (input-port-mask . 23))
(827 (open-input-port-mask . 23))
(828 (open-input-port-status . 23))
(829 (open-input-port? . 23))
(830 (make-input-port-closed! . 23))
(831 (make-input-port . 23))
(832 (okay-buffer? . 23))
(833 (output-port-mask . 23))
(834 (open-output-port-mask . 23))
(835 (open-output-port-status . 23))
(836 (open-output-port? . 23))
(837 (make-output-port-closed! . 23))
(838 (make-output-port . 23))
(839 (make-unbuffered-output-port . 23))
(840 (null-output-port-handler . 23))
(841 (make-null-output-port . 23))
(842 (*flush-these-ports* . 23))
(843 (initialize-output-port-list! . 23))
(844 (periodically-force-output! . 23))
(845 (output-port-forcers . 23))
(846 (make-forcing-thunk . 23))
(847 ($current-input-port . 23))
(848 ($current-output-port . 23))
(849 ($current-error-port . 23))
(850 ($current-noise-port . 23))
(851 (current-input-port . 23))
(852 (current-output-port . 23))
(853 (current-error-port . 23))
(854 (current-noise-port . 23))
(855 (initialize-i/o . 23))
(856 (with-current-ports . 23))
(857 (call-with-current-input-port . 23))
(858 (call-with-current-output-port . 23))
(859 (call-with-current-noise-port . 23))
(860 (silently . 23))
(861 (newline . 23))
(862 (char-ready? . 23))
(863 (output-port-option . 23))
(864 (input-port-option . 23))
(865 (message . 23))
(866 (write . 26))
(867 (recurring-write . 26))
(868 (write-boolean . 26))
(869 (write-number . 26))
(870 (write-char-literal . 26))
(871 (character-name . 26))
(872 (write-string-literal . 26))
(873 (write-list . 26))
(874 (quotation? . 26))
(875 (write-vector . 26))
(876 (write-other . 26))
(877 (display-type-name . 26))
(878 (display . 26))
(879 (read . 27))
(880 (sub-read-carefully . 27))
(881 (reader-token-marker . 27))
(882 (make-reader-token . 27))
(883 (reader-token? . 27))
(884 (close-paren . 27))
(885 (dot . 27))
(886 (sub-read . 27))
(887 (read-dispatch-vector . 27))
(888 (read-terminating?-vector . 27))
(889 (set-standard-syntax! . 27))
(890 (set-standard-read-macro! . 27))
(891 (sub-read-list . 27))
(892 (gobble-line . 27))
(893 (*sharp-macros* . 27))
(894 (define-sharp-macro . 27))
(895 (sub-read-token . 27))
(896 (parse-token . 27))
(897 (strange-symbol-names . 27))
(898 (p-c-v . 27))
(899 (preferred-case . 27))
(900 (reading-error . 27))
(901 (primitives . 24))
(902 (input-channel-handler . 24))
(903 (input-channel->port . 24))
(904 (output-channel-handler . 24))
(905 (make-unbuffered-output-channel-handler . 24))
(906 (output-channel->port . 24))
(907 (maybe-force-output . 24))
(908 (maybe-open-file . 24))
(909 (open-input-file . 24))
(910 (open-output-file . 24))
(911 (call-with-input-file . 24))
(912 (call-with-output-file . 24))
(913 (with-input-from-file . 24))
(914 (with-output-to-file . 24))
(915 (steal-channel-port! . 24))
(916 (really-steal-channel-port! . 24))
(917 (initialize-channel-i/o! . 24))
(918 (i/o-completion-handler . 24))
(919 (waiting-for-i/o? . 24))
(920 (wait-for-channel . 24))
(921 (steal-channel! . 24))
(922 (i/o-wait-count-slot . 24))
(923 (i/o-wait-count . 24))
(924 (increment-i/o-wait-count! . 24))
(925 (decrement-i/o-wait-count! . 24))
(926 (i/o-wait-queues-slot . 24))
(927 (i/o-wait-queue . 24))
(928 (make-i/o-wait-queues . 24))
(929 (:table . 47))
(930 (really-make-table . 47))
(931 (table-set!-procedure . 47))
(932 (set-table-set!-procedure! . 47))
(933 (table-ref-procedure . 47))
(934 (set-table-ref-procedure! . 47))
(935 (table-data . 47))
(936 (set-table-data! . 47))
(937 (table-size . 47))
(938 (set-table-size! . 47))
(939 (table? . 47))
(940 (table-ref . 47))
(941 (table-set! . 47))
(942 (linear-table-size-limit . 47))
(943 (next-table-size . 47))
(944 (make-table-maker . 47))
(945 (null-entry . 47))
(946 (new-entry . 47))
(947 (entry-value . 47))
(948 (entry-key . 47))
(949 (set-entry-value! . 47))
(950 (make-assoc . 47))
(951 (make-linear-table-ref . 47))
(952 (make-linear-table-set! . 47))
(953 (make->hash-table . 47))
(954 (make-hash-table-ref . 47))
(955 (make-hash-table-set! . 47))
(956 (expand-hash-table! . 47))
(957 (table-enter-alist! . 47))
(958 (table-expand-table! . 47))
(959 (table-walk . 47))
(960 (really-table-walk . 47))
(961 (alist-walk . 47))
(962 (make-table-immutable! . 47))
(963 (table->entry-list . 47))
(964 (default-table-hash-function . 47))
(965 (symbol-hash . 47))
(966 (make-table . 47))
(967 (make-string-table . 47))
(968 (make-symbol-table . 47))
(969 (make-integer-table . 47))
(970 (:meta-type . 49))
(971 (really-make-type . 49))
(972 (type-info . 49))
(973 (type-more . 49))
(974 (type-mask . 49))
(975 (meta-type? . 49))
(976 (make-type . 49))
(977 (name->type-table . 49))
(978 (mask->name-table . 49))
(979 (name->type . 49))
(980 (set-type-name! . 49))
(981 (*mask* . 49))
(982 (new-type-bit . 49))
(983 (mask->type . 49))
(984 (bottom-type . 49))
(985 (error-type . 49))
(986 (bottom-type? . 49))
(987 (new-atomic-type . 49))
(988 (named-atomic-type . 49))
(989 (syntax-type . 49))
(990 (other-static-type . 49))
(991 (empty-rail-type . 49))
(992 (rail-type . 49))
(993 (make-optional-type . 49))
(994 (make-rest-type . 49))
(995 (head-type . 49))
(996 (head-type-really . 49))
(997 (tail-type . 49))
(998 (empty-rail-type? . 49))
(999 (rest-type? . 49))
(1000 (optional-type? . 49))
(1001 (mask/no-values . 49))
(1002 (mask/two-or-more . 49))
(1003 (mask/&rest . 49))
(1004 (value-type . 49))
(1005 (mask/value . 49))
(1006 (value-type? . 49))
(1007 (any-values-type . 49))
(1008 (any-arguments-type . 49))
(1009 (mask/one-or-more . 49))
(1010 (same-type? . 49))
(1011 (subtype? . 49))
(1012 (meet-type . 49))
(1013 (other-type-info . 49))
(1014 (p . 49))
(1015 (meet-rail . 49))
(1016 (meet-procedure . 49))
(1017 (meet? . 49))
(1018 (meet-procedure? . 49))
(1019 (join-type . 49))
(1020 (join-rail . 49))
(1021 (join-procedure . 49))
(1022 (number-hierarchy . 49))
(1023 (integer-type . 49))
(1024 (rational-type . 49))
(1025 (real-type . 49))
(1026 (complex-type . 49))
(1027 (number-type . 49))
(1028 (exact-type . 49))
(1029 (inexact-type . 49))
(1030 (exact-integer-type . 49))
(1031 (boolean-type . 49))
(1032 (pair-type . 49))
(1033 (null-type . 49))
(1034 (record-type . 49))
(1035 (any-procedure-type . 49))
(1036 (other-value-type . 49))
(1037 (mask/other . 49))
(1038 (make-other-type . 49))
(1039 (char-type . 49))
(1040 (unspecific-type . 49))
(1041 (string-type . 49))
(1042 (symbol-type . 49))
(1043 (vector-type . 49))
(1044 (escape-type . 49))
(1045 (structure-type . 49))
(1046 (mask/procedure . 49))
(1047 (procedure-type . 49))
(1048 (make-procedure-type . 49))
(1049 (procedure-type-domain . 49))
(1050 (procedure-type-codomain . 49))
(1051 (restrictive? . 49))
(1052 (sexp->type . 49))
(1053 (sexp->values-type . 49))
(1054 (type->sexp . 49))
(1055 (atomic-type->sexp . 49))
(1056 (rail-type->sexp . 49))
(1057 (disjoin-type . 49))
(1058 (disjoin-rest . 49))
(1059 (mask/number . 49))
(1060 (make-some-values-type . 49))
(1061 (proc . 49))
(1062 (some-values . 49))
(1063 (procedure-type? . 49))
(1064 (fixed-arity-procedure-type? . 49))
(1065 (procedure-type-arity . 49))
(1066 (procedure-type-argument-types . 49))
(1067 (usual-operator-type . 51))
(1068 (:operator . 51))
(1069 (make-operator . 51))
(1070 (operator-name . 51))
(1071 (operator-uid . 51))
(1072 (operator-nargs . 51))
(1073 (operator-type . 51))
(1074 (set-operator-type! . 51))
(1075 (operator? . 51))
(1076 (get-operator . 51))
(1077 (*operator-uid* . 51))
(1078 (operators-table . 51))
(1079 (number-of-operators . 51))
(1080 (the-operators . 51))
(1081 (make-operator-table . 51))
(1082 (operator-table-ref . 51))
(1083 (operator-lookup . 51))
(1084 (operator-define! . 51))
(1085 (:node . 51))
(1086 (really-make-node . 51))
(1087 (node-plist . 51))
(1088 (set-node-plist! . 51))
(1089 (node-form . 51))
(1090 (node-operator-id . 51))
(1091 (node? . 51))
(1092 (make-node . 51))
(1093 (node-ref . 51))
(1094 (node-set! . 51))
(1095 (node-operator . 51))
(1096 (node-predicate . 51))
(1097 (make-similar-node . 51))
(1098 (:generated . 51))
(1099 (make-generated . 51))
(1100 (generated-parent-name . 51))
(1101 (generated-env . 51))
(1102 (generated-token . 51))
(1103 (generated-symbol . 51))
(1104 (generated? . 51))
(1105 (generate-name . 51))
(1106 (generated-uid . 51))
(1107 (*generated-uid* . 51))
(1108 (name->symbol . 51))
(1109 (name-hash . 51))
(1110 (make-name-table . 51))
(1111 (desyntaxify . 51))
(1112 (:transform . 51))
(1113 (really-make-transform . 51))
(1114 (transform-id . 51))
(1115 (transform-source . 51))
(1116 (transform-aux-names . 51))
(1117 (transform-type . 51))
(1118 (transform-env . 51))
(1119 (transform-procedure . 51))
(1120 (transform? . 51))
(1121 (make-transform . 51))
(1122 (maybe-transform . 51))
(1123 (bind-aliases . 51))
(1124 (make-name-generator . 51))
(1125 (same-denotation? . 51))
(1126 (binding? . 51))
(1127 (binding-type . 51))
(1128 (binding-place . 51))
(1129 (binding-static . 51))
(1130 (set-binding-place! . 51))
(1131 (make-binding . 51))
(1132 (clobber-binding! . 51))
(1133 (impose-type . 51))
(1134 (forget-integration . 51))
(1135 (classify . 51))
(1136 (call-node? . 51))
(1137 (name-node? . 51))
(1138 (classify-literal . 51))
(1139 (classify-call . 51))
(1140 (classify-name . 51))
(1141 (operator/name . 51))
(1142 (classify-macro-application . 51))
(1143 (classify-transform-application . 51))
(1144 (maybe-transform-call . 51))
(1145 (classify-operator-form . 51))
(1146 (classifiers . 51))
(1147 (define-classifier . 51))
(1148 (unspecific-node . 51))
(1149 (define-node? . 51))
(1150 (define-syntax-node? . 51))
(1151 (funny-name/source-file-name . 51))
(1152 (bind-source-file-name . 51))
(1153 (names? . 51))
(1154 (this-long? . 51))
(1155 (at-least-this-long? . 51))
(1156 (specs? . 51))
(1157 (lookup . 51))
(1158 (bind1 . 51))
(1159 (bind . 51))
(1160 (bindrec . 51))
(1161 (literal? . 51))
(1162 (number-of-required-args . 51))
(1163 (n-ary? . 51))
(1164 (normalize-formals . 51))
(1165 (syntax? . 51))
(1166 (name? . 51))
(1167 (unbound? . 51))
(1168 (define-usual-suspects . 51))
(1169 (process-syntax . 51))
(1170 (get-funny . 51))
(1171 (funny-name/reflective-tower . 51))
(1172 (reflective-tower . 51))
(1173 (scan-body . 51))
(1174 (scan-body-forms . 51))
(1175 (body-lossage . 51))
(1176 (begin-node? . 51))
(1177 (variable-type . 51))
(1178 (variable-type? . 51))
(1179 (variable-value-type . 51))
(1180 (compatible-types? . 51))
(1181 (usual-variable-type . 51))
(1182 (undeclared-type . 51))
(1183 (funny-name/reader . 51))
(1184 (environment-reader . 51))
(1185 (schemify . 51))
(1186 (schemify1 . 51))
(1187 (schemifiers . 51))
(1188 (define-schemifier . 51))
(1189 (name->qualified . 51))
(1190 (schemify-sexp . 51))
(1191 (make-qualified . 51))
(1192 (qualified? . 51))
(1193 (qualified-parent-name . 51))
(1194 (qualified-symbol . 51))
(1195 (make-population . 45))
(1196 (add-to-population! . 45))
(1197 (weak-memq . 45))
(1198 (population-reduce . 45))
(1199 (population->list . 45))
(1200 (walk-population . 45))
(1201 (:interface . 50))
(1202 (really-make-interface . 50))
(1203 (interface-name . 50))
(1204 (set-interface-name! . 50))
(1205 (interface-clients . 50))
(1206 (walk-method . 50))
(1207 (ref-method . 50))
(1208 (interface? . 50))
(1209 (interface-ref . 50))
(1210 (for-each-declaration . 50))
(1211 (note-reference-to-interface! . 50))
(1212 (make-interface . 50))
(1213 (make-simple-interface . 50))
(1214 (really-make-simple-interface . 50))
(1215 (make-compound-interface . 50))
(1216 (note-interface-name! . 50))
(1217 (:structure . 54))
(1218 (really-make-structure . 54))
(1219 (structure-name . 54))
(1220 (set-structure-name! . 54))
(1221 (structure-clients . 54))
(1222 (structure-package . 54))
(1223 (structure-interface-really . 54))
(1224 (set-structure-interface! . 54))
(1225 (structure-interface-thunk . 54))
(1226 (structure? . 54))
(1227 (structure-interface . 54))
(1228 (initialize-structure! . 54))
(1229 (make-structure . 54))
(1230 (structure-unstable? . 54))
(1231 (for-each-export . 54))
(1232 (note-structure-name! . 54))
(1233 (:package . 54))
(1234 (really-make-package . 54))
(1235 (package-cached . 54))
(1236 (package-clients . 54))
(1237 (package-plist . 54))
(1238 (set-package-plist! . 54))
(1239 (package-accesses-thunk . 54))
(1240 (package-opens-thunk . 54))
(1241 (set-package-opens-thunk! . 54))
(1242 (package->environment . 54))
(1243 (set-package->environment! . 54))
(1244 (package-loaded? . 54))
(1245 (set-package-loaded?! . 54))
(1246 (package-clauses . 54))
(1247 (package-file-name . 54))
(1248 (package-get-location . 54))
(1249 (set-package-get-location! . 54))
(1250 (package-integrate? . 54))
(1251 (set-package-integrate?! . 54))
(1252 (package-unstable? . 54))
(1253 (package-definitions . 54))
(1254 (package-opens-really . 54))
(1255 (set-package-opens! . 54))
(1256 (package-uid . 54))
(1257 (package? . 54))
(1258 (make-package . 54))
(1259 (really-package->environment . 54))
(1260 (new-package-uid . 54))
(1261 (*package-uid* . 54))
(1262 (package-name-table . 54))
(1263 (package-name . 54))
(1264 (note-package-name! . 54))
(1265 (package-opens . 54))
(1266 (initialize-package-if-necessary! . 54))
(1267 (package-accesses . 54))
(1268 (make-simple-package . 54))
(1269 (package-definition . 54))
(1270 (package-define! . 54))
(1271 (really-package-define! . 54))
(1272 (package-lookup . 54))
(1273 (really-package-lookup . 54))
(1274 (structure-lookup . 54))
(1275 (generic-lookup . 54))
(1276 (initialize-package! . 54))
(1277 (define-funny-names! . 54))
(1278 (package-define-funny! . 54))
(1279 (funny-name/the-package . 54))
(1280 (extract-package-from-environment . 54))
(1281 (for-each-definition . 54))
(1282 (get-new-location . 54))
(1283 (make-new-location . 54))
(1284 ($get-location . 54))
(1285 (*location-uid* . 54))
(1286 (location-info-table . 54))
(1287 (flush-location-names . 54))
(1288 (package-get . 54))
(1289 (package-put! . 54))
(1290 (package-note-caching . 54))
(1291 (maybe-fix-place . 54))
(1292 (follow-forwarding-pointers . 54))
(1293 (environment-ref . 63))
(1294 (environment-set! . 63))
(1295 (environment-define! . 63))
(1296 (*structure-ref . 63))
(1297 (carefully . 63))
(1298 ($interaction-environment . 63))
(1299 (interaction-environment . 63))
(1300 (set-interaction-environment! . 63))
(1301 (with-interaction-environment . 63))
(1302 (scheme-report-environment . 63))
(1303 (*scheme-report-environment* . 63))
(1304 (*scheme-report-number* . 63))
(1305 (set-scheme-report-environment! . 63))
(1306 (make-reflective-tower . 63))
(1307 (set-reflective-tower-maker! . 63))
(1308 (the-usual-transforms . 52))
(1309 (define-usual-macro . 52))
(1310 (usual-transform . 52))
(1311 (specs? . 52))
(1312 (process-rules . 52))
(1313 (segment-pattern? . 52))
(1314 (segment-template? . 52))
(1315 (indicators-for-zero-or-more . 52))
(1316 (find-free-names-in-syntax-rules . 52))
(1317 (namestring . 48))
(1318 (directory-component-separator . 48))
(1319 (type-component-separator . 48))
(1320 (namestring-component . 48))
(1321 (file-name-preferred-case . 48))
(1322 (*scheme-file-type* . 48))
(1323 (*load-file-type* . 48))
(1324 (file-name-directory . 48))
(1325 (file-name-nondirectory . 48))
(1326 (file-nondirectory-position . 48))
(1327 (string-posq . 48))
(1328 (*translations* . 48))
(1329 (translations . 48))
(1330 (set-translation! . 48))
(1331 (translate . 48))
(1332 ($note-file-package . 55))
(1333 (scan-forms . 55))
(1334 (really-scan-forms . 55))
(1335 (scan-file . 55))
(1336 (really-scan-file . 55))
(1337 (*standard-optimizer-names* . 55))
(1338 (default-standard-optimizer . 55))
(1339 (*standard-optimizer* . 55))
(1340 (set-standard-optimizers! . 55))
(1341 (make-standard-optimizer . 55))
(1342 (apply-optimizers . 55))
(1343 (scan-form-list . 55))
(1344 (scan-form . 55))
(1345 (process-define-syntax . 55))
(1346 (scan-structures . 55))
(1347 (scan-package . 55))
(1348 (optimize . 55))
(1349 (check-structure . 55))
(1350 (initialize-usual-transforms! . 55))
(1351 (define-all-operators . 55))
(1352 (make-define-primitive-node . 55))
(1353 (optimizers-table . 55))
(1354 (get-optimizer . 55))
(1355 (set-optimizer! . 55))
(1356 ($note-undefined . 55))
(1357 (note-undefined! . 55))
(1358 (noting-undefined-variables . 55))
(1359 (:debug-data . 56))
(1360 (make-debug-data . 56))
(1361 (debug-data-source . 56))
(1362 (set-debug-data-source! . 56))
(1363 (debug-data-env-maps . 56))
(1364 (set-debug-data-env-maps! . 56))
(1365 (debug-data-pc-in-parent . 56))
(1366 (debug-data-parent . 56))
(1367 (debug-data-name . 56))
(1368 (debug-data-uid . 56))
(1369 (debug-data? . 56))
(1370 (new-template-uid . 57))
(1371 (*template-uid* . 57))
(1372 (template-uid . 57))
(1373 (set-template-uid! . 57))
(1374 (debug-flag-names . 57))
(1375 (type/debug-flags . 57))
(1376 (make-debug-flags . 57))
(1377 ($debug-flags . 57))
(1378 (debug-flag-accessor . 57))
(1379 (debug-flag-modifier . 57))
(1380 (keep-source-code? . 57))
(1381 (keep-environment-maps? . 57))
(1382 (keep-procedure-names? . 57))
(1383 (keep-file-names? . 57))
(1384 (tabulate-debug-data? . 57))
(1385 (debug-data-table . 57))
(1386 (with-fresh-compiler-state . 57))
(1387 (saving-and-restoring . 57))
(1388 (debug-data->info . 57))
(1389 (get-debug-data . 57))
(1390 (note-debug-data! . 57))
(1391 (new-debug-data . 57))
(1392 (make-segment . 57))
(1393 (segment-size . 57))
(1394 (segment-emitter . 57))
(1395 (segment->template . 57))
(1396 (segment-data->template . 57))
(1397 (:assembly-state . 57))
(1398 (make-assembly-state . 57))
(1399 (astate-literals . 57))
(1400 (set-astate-literals! . 57))
(1401 (astate-count . 57))
(1402 (set-astate-count! . 57))
(1403 (astate-pc . 57))
(1404 (set-astate-pc! . 57))
(1405 (astate-code-vector . 57))
(1406 (make-astate . 57))
(1407 (emit-byte! . 57))
(1408 (literal->index . 57))
(1409 (emit-literal! . 57))
(1410 (emit-segment! . 57))
(1411 (empty-segment . 57))
(1412 (instruction . 57))
(1413 (sequentially . 57))
(1414 (sequentially-2 . 57))
(1415 (instruction-with-literal . 57))
(1416 (instruction-with-location . 57))
(1417 (instruction-with-template . 57))
(1418 (make-label . 57))
(1419 (instruction-using-label . 57))
(1420 (attach-label . 57))
(1421 (byte-limit . 57))
(1422 (two-byte-limit . 57))
(1423 ($debug-data . 57))
(1424 (note-source-code . 57))
(1425 (note-environment . 57))
(1426 (emit-with-environment-maps! . 57))
(1427 ($environment-maps . 57))
(1428 (environment-maps-table . 57))
(1429 (node-type . 53))
(1430 (reconstruct-type . 53))
(1431 (reconstruct . 53))
(1432 (reconstructors . 53))
(1433 (define-reconstructor . 53))
(1434 (careful-codomain . 53))
(1435 (reconstruct-body . 53))
(1436 (operator/name . 53))
(1437 (reconstruct-name . 53))
(1438 (reconstruct-call . 53))
(1439 (fork-constraints . 53))
(1440 (examine . 53))
(1441 (node->type . 53))
(1442 (call-node? . 53))
(1443 (name-node? . 53))
(1444 (begin-node? . 53))
(1445 (reconstruct-apply . 53))
(1446 (declare-operator-type . 53))
(1447 (constant-type . 53))
(1448 (compile-top . 58))
(1449 (compile . 58))
(1450 (compilators . 58))
(1451 (define-compilator . 58))
(1452 (compile-constant . 58))
(1453 (compile-begin . 58))
(1454 (compile-call . 58))
(1455 (lambda-node? . 58))
(1456 (compile-redex . 58))
(1457 (compile-unknown-call . 58))
(1458 (maybe-push-continuation . 58))
(1459 (push-arguments . 58))
(1460 (push-all-with-names . 58))
(1461 (compile-lambda . 58))
(1462 (compile-lambda-code . 58))
(1463 (lookup-variables . 58))
(1464 (compile-letrec . 58))
(1465 (compile-body . 58))
(1466 (operator/letrec . 58))
(1467 (make-cont . 58))
(1468 (cont-segment . 58))
(1469 (cont-source-info . 58))
(1470 (return-cont-segment . 58))
(1471 (return-cont . 58))
(1472 (return-cont? . 58))
(1473 (fall-through-cont . 58))
(1474 (fall-through-cont? . 58))
(1475 (ignore-values-segment . 58))
(1476 (ignore-values-cont . 58))
(1477 (ignore-values-cont? . 58))
(1478 (deliver-value . 58))
(1479 (named-cont . 58))
(1480 (cont-name . 58))
(1481 (bind-vars . 58))
(1482 (bind-flat-vars . 58))
(1483 (really-bind-vars . 58))
(1484 (initial-cenv . 58))
(1485 (environment-level . 58))
(1486 (funny-name/lexical-level . 58))
(1487 (name-node-binding . 58))
(1488 (generate-trap . 58))
(1489 (careful-sequentially . 58))
(1490 (large-segment-size . 58))
(1491 (shrink-segment . 58))
(1492 (type-check . 58))
(1493 (set-type-check?! . 58))
(1494 (*type-check?* . 58))
(1495 (diagnose-call-error . 58))
(1496 (define-compiler-primitive . 58))
(1497 (closed-compilators . 58))
(1498 (define-closed-compilator . 58))
(1499 (get-closed-compilator . 58))
(1500 (direct-compilator . 58))
(1501 (direct-closed-compilator . 58))
(1502 (nargs->domain . 58))
(1503 (define-simple-primitive . 58))
(1504 (simple-compilator . 58))
(1505 (simple-closed-compilator . 58))
(1506 (symbol-append . 58))
(1507 (define-stob-predicate . 58))
(1508 (define-data-struct-primitives . 58))
(1509 (define-vector-primitives . 58))
(1510 (define-n-ary-compiler-primitive . 58))
(1511 (n-ary-primitive-compilator . 58))
(1512 (define-n-ary-constructor . 58))
(1513 (push-all-but-last . 58))
(1514 (compile-form . 58))
(1515 (compile-file . 58))
(1516 (compile-and-run-forms . 58))
(1517 (compile-and-run-file . 58))
(1518 (maybe-newline-after . 58))
(1519 (compile-and-run-scanned-forms . 58))
(1520 (compile-scanned-forms . 58))
(1521 (compile-scanned-form . 58))
(1522 (compile-definition . 58))
(1523 (location-contents-offset . 58))
(1524 (get-location . 58))
(1525 (get-location-for-undefined . 58))
(1526 (get-location-for-unassignable . 58))
(1527 (package-accessor-on-demand . 58))
(1528 (location-on-demand . 58))
(1529 (package-undefineds . 58))
(1530 (location-for-reference . 58))
(1531 (package-undefined-but-assigneds . 58))
(1532 (location-for-assignment . 58))
(1533 (note-caching . 58))
(1534 (grumble . 58))
(1535 (make-startup-procedure . 58))
(1536 (an-ignore-values-cont . 58))
(1537 (eval . 64))
(1538 (load-into . 64))
(1539 (eval-from-file . 64))
(1540 (eval-scanned-forms . 64))
(1541 (invoke-template . 64))
(1542 (load . 64))
(1543 (display-condition . 46))
(1544 (really-display-condition . 46))
(1545 (*depth* . 46))
(1546 (*length* . 46))
(1547 (&disclose-condition . 46))
(1548 (disclose-condition . 46))
(1549 (limited-write . 46))
(1550 (command-processor . 68))
(1551 (mini-load . 68))
(1552 (read-string . 68))
(1553 (primitives . 39))
(1554 (enum-case . 40))
(1555 (run-threads . 38))
(1556 (run-threads-with-housekeeper . 38))
(1557 (round-robin-event-handler . 38))
(1558 (make-counter . 38))
(1559 (counter-value . 38))
(1560 (increment-counter! . 38))
(1561 (decrement-counter! . 38))
(1562 (root-scheduler . 39))
(1563 (make-root-event-handler . 39))
(1564 (abort-token . 39))
(1565 (root-wait . 39))
(1566 (one-day-of-milliseconds . 39))
(1567 (do-some-waiting . 39))
(1568 (deadlock-handler . 39))
(1569 (call-when-deadlocked! . 39))
(1570 (spawn-output-forcers . 39))
(1571 (unspecific . 39))
(1572 (usual-resumer . 44))
(1573 (initialize-rts . 44))
(1574 (start . 69))
(1575 (make-built-in-structures . 69))
(1576 (initialize-interaction-environment! . 69))
(1577 (make-initial-package . 69))
(1578 (make-tower . 69))
(1579 (inline-transform . 62))
(1580 (make-substitution . 62))
(1581 (substitute . 62))
(1582 (operator/name . 62))
(1583 (qualified->name . 62))
(1584 (get-qualified-env . 62))
(1585 (operator . 66))
(1586 (simple-interface . 66))
(1587 (package . 66))
(1588 (transform . 66))
(1589 (:syntax . 60))
(1590 (:values . 60))
(1591 (:arguments . 60))
(1592 (:value . 60))
(1593 (procedure . 60))
(1594 (:boolean . 60))
(1595 (:char . 60))
(1596 (:null . 60))
(1597 (:unspecific . 60))
(1598 (:number . 60))
(1599 (:complex . 60))
(1600 (:real . 60))
(1601 (:rational . 60))
(1602 (:integer . 60))
(1603 (:exact-integer . 60))
(1604 (:pair . 60))
(1605 (:string . 60))
(1606 (:symbol . 60))
(1607 (:vector . 60))
(1608 (:procedure . 60))
(1609 (:input-port . 60))
(1610 (:output-port . 60))
(1611 (:error . 60))
(1612 (:escape . 60))
(1613 (:structure . 60))
(1614 (:type . 60))
(1615 (def . 59))
(1616 (really-def . 59))
(1617 (define-multiple . 59))
(1618 (define-interface . 59))
(1619 (export . 59))
(1620 (compound-interface . 59))
(1621 (define-structure . 59))
(1622 (define-structures . 59))
(1623 (structure . 59))
(1624 (structures . 59))
(1625 (a-package . 59))
(1626 (receive . 59))
(1627 (define-reflective-tower-maker . 59))
(1628 (export-reflective-tower-maker . 59))
(1629 (define-module . 59))
(1630 (make-a-package . 59))
(1631 (loser . 59))
(1632 (interface-of . 59))
(1633 (*verify-later!* . 59))
(1634 (verify-later! . 59))
(1635 (set-verify-later! . 59))
(1636 (note-name! . 59))
(1637 (ensure-loaded . 65))
-
; Template uid -> name, parent, pc in parent, env maps
(0 #f -14 #f ())
(1 #f -14 #f ())
(2 call-error 1 5 ())
(3 syntax-error 1 15 ())
(4 warn 1 25 ())
(5 signal 1 35 ())
(6 #f -14 #f ())
(7 channel-write 6 5 ())
(8 loop 7 17 ())
(9 buffer-length 6 15 ())
(10 channel-read 6 25 ())
(11 #f 10 5 ())
(12 loop 11 17 ())
(13 output-port? 6 35 ())
(14 input-port? 6 45 ())
(15 restore-the-symbol-table! 6 55 ())
(16 flush-the-symbol-table! 6 65 ())
(17 string-copy 6 75 ())
(18 string->symbol 6 85 ())
(19 vector-unassigned? 6 95 ())
(20 make-undefined-location 6 105 ())
(21 primitive-cwcc 6 115 ())
(22 #f 21 7 ())
(23 invoke-closure 6 125 ())
(24 integer->char 6 135 ())
(25 char->integer 6 145 ())
(26 #f -14 #f ())
(27 current-cont 26 5 ())
(28 closure-template 26 15 ())
(29 continuation-ref 26 25 ())
(30 closure? 26 35 ())
(31 #f -14 #f ())
(32 #f -14 #f ())
(33 cell-set! 32 5 ())
(34 port-pending-eof? 32 15 ())
(35 complex? 32 25 ())
(36 arithmetic-shift 32 35 ())
(37 set-port-pending-eof?! 32 45 ())
(38 port-handler 32 55 ())
(39 signal-condition 32 65 ())
(40 integer? 32 75 ())
(41 session-data 32 85 ())
(42 make-closure 32 95 ())
(43 template-ref 32 105 ())
(44 set-session-data! 32 115 ())
(45 make-rectangular 32 125 ())
(46 channel? 32 135 ())
(47 open-channel 32 145 ())
(48 string=? 32 155 ())
(49 cell-ref 32 165 ())
(50 find-all 32 175 ())
(51 extended-number? 32 185 ())
(52 reverse-list->string 32 195 ())
(53 port-locked? 32 205 ())
(54 denominator 32 215 ())
(55 call-with-values 32 225 ())
(56 weak-pointer-ref 32 235 ())
(57 find-all-symbols 32 245 ())
(58 set-port-locked?! 32 255 ())
(59 code-vector? 32 265 ())
(60 port-status 32 275 ())
(61 pop 32 285 ())
(62 exp 32 295 ())
(63 #f 32 301 ())
(64 sin 63 5 ())
(65 set-port-status! 63 15 ())
(66 make-extended-number 63 25 ())
(67 channel-os-index 63 35 ())
(68 cos 63 45 ())
(69 collect 63 55 ())
(70 external-lookup 63 65 ())
(71 tan 63 75 ())
(72 log 63 85 ())
(73 continuation-length 63 95 ())
(74 find-all-records 63 105 ())
(75 make-code-vector 63 115 ())
(76 cdr 63 125 ())
(77 bitwise-xor 63 135 ())
(78 car 63 145 ())
(79 string? 63 155 ())
(80 symbol? 63 165 ())
(81 set-cdr! 63 175 ())
(82 bitwise-not 63 185 ())
(83 vector? 63 195 ())
(84 closure-env 63 205 ())
(85 set-car! 63 215 ())
(86 bitwise-ior 63 225 ())
(87 port-buffer 63 235 ())
(88 number? 63 245 ())
(89 template-length 63 255 ())
(90 string-hash 63 265 ())
(91 pop-env 63 275 ())
(92 primitive-catch 63 285 ())
(93 set-port-buffer! 63 295 ())
(94 make-string 63 305 ())
(95 record? 63 315 ())
(96 make-vector 63 325 ())
(97 extended-number-set! 63 335 ())
(98 write-image 63 345 ())
(99 eq? 63 355 ())
(100 bitwise-and 63 365 ())
(101 code-vector-set! 63 375 ())
(102 location-id 63 385 ())
(103 set-location-id! 63 395 ())
(104 make-record 63 405 ())
(105 vector 63 415 ())
(106 intern 63 425 ())
(107 values 63 435 ())
(108 string-set! 63 445 ())
(109 unassigned 63 455 ())
(110 copy-bytes! 63 465 ())
(111 vector-set! 63 475 ())
(112 extended-number-ref 63 485 ())
(113 unspecific 63 495 ())
(114 #f 63 501 ())
(115 channel-maybe-write 114 5 ())
(116 code-vector-ref 114 15 ())
(117 schedule-interrupt 114 25 ())
(118 record 114 35 ())
(119 set-interrupt-handlers! 114 45 ())
(120 eof-object? 114 55 ())
(121 record-set! 114 65 ())
(122 ascii->char 114 75 ())
(123 char->ascii 114 85 ())
(124 port-limit 114 95 ())
(125 set-enabled-interrupts! 114 105 ())
(126 external-value 114 115 ())
(127 make-immutable! 114 125 ())
(128 port-index 114 135 ())
(129 set-port-limit! 114 145 ())
(130 channel-status 114 155 ())
(131 current-thread 114 165 ())
(132 set-port-index! 114 175 ())
(133 string-ref 114 185 ())
(134 set-exception-handlers! 114 195 ())
(135 immutable? 114 205 ())
(136 set-current-thread! 114 215 ())
(137 vector-ref 114 225 ())
(138 exact? 114 235 ())
(139 write-char 114 245 ())
(140 symbol->string 114 255 ())
(141 make-polar 114 265 ())
(142 record-ref 114 275 ())
(143 eof-object 114 285 ())
(144 numerator 114 295 ())
(145 channel-id 114 305 ())
(146 extended-number-length 114 315 ())
(147 error 114 325 ())
(148 exact->inexact 114 335 ())
(149 inexact->exact 114 345 ())
(150 checked-record-set! 114 355 ())
(151 apply 114 365 ())
(152 memory-status 114 375 ())
(153 code-vector-length 114 385 ())
(154 floor 114 395 ())
(155 with-continuation 114 405 ())
(156 magnitude 114 415 ())
(157 nargs 114 425 ())
(158 char=? 114 435 ())
(159 char<? 114 445 ())
(160 continuation? 114 455 ())
(161 remainder 114 465 ())
(162 vm-return 114 475 ())
(163 false 114 485 ())
(164 angle 114 495 ())
(165 #f 114 501 ())
(166 port? 165 5 ())
(167 string-length 165 15 ())
(168 external? 165 25 ())
(169 make-continuation 165 35 ())
(170 vector-length 165 45 ())
(171 port-lock 165 55 ())
(172 template? 165 65 ())
(173 rational? 165 75 ())
(174 add-finalizer! 165 85 ())
(175 checked-record-ref 165 95 ())
(176 channel-maybe-read 165 105 ())
(177 location? 165 115 ())
(178 set-port-lock! 165 125 ())
(179 make-port 165 135 ())
(180 external-name 165 145 ())
(181 pair? 165 155 ())
(182 make-external 165 165 ())
(183 port-data 165 175 ())
(184 record-length 165 185 ())
(185 external-call 165 195 ())
(186 get-cont-from-heap 165 205 ())
(187 real-part 165 215 ())
(188 real? 165 225 ())
(189 make-template 165 235 ())
(190 set-port-data! 165 245 ())
(191 imag-part 165 255 ())
(192 make-location 165 265 ())
(193 = 165 275 ())
(194 < 165 285 ())
(195 char? 165 295 ())
(196 channel-abort 165 305 ())
(197 close-channel 165 315 ())
(198 quotient 165 325 ())
(199 / 165 335 ())
(200 weak-pointer? 165 345 ())
(201 - 165 355 ())
(202 continuation-set! 165 365 ())
(203 peek-char 165 375 ())
(204 + 165 385 ())
(205 * 165 395 ())
(206 contents 165 405 ())
(207 sqrt 165 415 ())
(208 make-cell 165 425 ())
(209 read-char 165 435 ())
(210 set-contents! 165 445 ())
(211 push 165 455 ())
(212 make-weak-pointer 165 465 ())
(213 assq 165 475 ())
(214 trap 165 485 ())
(215 wait 165 495 ())
(216 cons 165 505 ())
(217 #f -14 #f ())
(218 #f -14 #f ())
(219 template-set! 218 5 ())
(220 time 218 15 ())
(221 location-defined? 218 25 ())
(222 asin 218 35 ())
(223 vm-extension 218 45 ())
(224 acos 218 55 ())
(225 set-location-defined?! 218 65 ())
(226 atan 218 75 ())
(227 #f -14 #f ())
(228 #f -15 #f ())
(229 not 228 5 ())
(230 positive? 228 15 ())
(231 negative? 228 25 ())
(232 #f -15 #f ())
(233 simplest-rational 232 5 ())
(234 simplest-rational-internal 233 9 ())
(235 #f -15 #f ())
(236 abs 235 5 ())
(237 #f -15 #f ())
(238 rationalize 237 5 ())
(239 #f -15 #f ())
(240 even? 239 5 ())
(241 odd? 239 15 ())
(242 #f -15 #f ())
(243 raise-to-integer-power 242 5 ())
(244 loop 243 37 ())
(245 #f -15 #f ())
(246 >= 245 5 ())
(247 #f -15 #f ())
(248 expt 247 5 ())
(249 #f -15 #f ())
(250 null? 249 5 ())
(251 list 249 15 ())
(252 #f -15 #f ())
(253 reduce 252 5 ())
(254 #f -15 #f ())
(255 inexact? 254 5 ())
(256 euclid 254 15 ())
(257 gcd 254 25 ())
(258 #f 257 6 ())
(259 lcm 254 35 ())
(260 #f 259 6 ())
(261 round 254 45 ())
(262 ceiling 254 55 ())
(263 truncate 254 65 ())
(264 #f -15 #f ())
(265 > 264 5 ())
(266 #f -15 #f ())
(267 modulo 266 5 ())
(268 #f -15 #f ())
(269 insert 268 5 ())
(270 last 268 15 ())
(271 sublist 268 25 ())
(272 recur 271 56 ())
(273 every 268 35 ())
(274 any 268 45 ())
(275 pos 268 55 ())
(276 #f 275 5 ())
(277 loop 276 20 ())
(278 filter 268 65 ())
(279 #f 278 5 ())
(280 unspecific 268 75 ())
(281 #f -15 #f ())
(282 force 281 5 ())
(283 make-promise 281 15 ())
(284 #f 283 9 ())
(285 map1 281 25 ())
(286 map2+ 281 35 ())
(287 map 281 45 ())
(288 for-each2+ 281 55 ())
(289 loop 288 19 ())
(290 for-each1 281 65 ())
(291 loop 290 16 ())
(292 for-each 281 75 ())
(293 vector-fill! 281 85 ())
(294 loop##98 293 16 ())
(295 real-length 281 95 ())
(296 length 281 105 ())
(297 list->vector 281 115 ())
(298 loop##95 297 32 ())
(299 vector->list 281 125 ())
(300 loop##92 299 9 ())
(301 string-ci>=? 281 135 ())
(302 string-ci>? 281 145 ())
(303 #f 281 151 ())
(304 string-ci<=? 303 5 ())
(305 string>=? 303 15 ())
(306 string>? 303 25 ())
(307 string<=? 303 35 ())
(308 max-or-min 303 45 ())
(309 loop 308 33 ())
(310 min 303 55 ())
(311 make-string<? 303 65 ())
(312 #f 311 5 ())
(313 loop 312 45 ())
(314 make-string=? 303 75 ())
(315 #f 314 5 ())
(316 loop 315 33 ())
(317 string-fill! 303 85 ())
(318 loop##79 317 15 ())
(319 list->string 303 95 ())
(320 loop##76 319 33 ())
(321 string->list 303 105 ())
(322 loop##73 321 15 ())
(323 string 303 115 ())
(324 string-append 303 125 ())
(325 #f 324 10 ())
(326 loop 324 54 ())
(327 loop##70 326 36 ())
(328 substring 303 135 ())
(329 loop##61 328 23 ())
(330 char-upcase 303 145 ())
(331 char-ci-compare 303 155 ())
(332 #f 331 5 ())
(333 char-downcase 303 165 ())
(334 make-character-map 303 175 ())
(335 loop##56 334 24 ())
(336 char>=? 303 185 ())
(337 char>? 303 195 ())
(338 char<=? 303 205 ())
(339 char-lower-case? 303 215 ())
(340 char-upper-case? 303 225 ())
(341 char-alphabetic? 303 235 ())
(342 char-numeric? 303 245 ())
(343 char-whitespace? 303 255 ())
(344 cddr 303 265 ())
(345 list? 303 275 ())
(346 recur 345 19 ())
(347 caar 303 285 ())
(348 ass 303 295 ())
(349 #f 348 5 ())
(350 loop 349 16 ())
(351 mem 303 305 ())
(352 #f 351 5 ())
(353 loop 352 16 ())
(354 list-tail 303 315 ())
(355 list-ref 303 325 ())
(356 append-reverse 303 335 ())
(357 reverse 303 345 ())
(358 append 303 355 ())
(359 recur 358 31 ())
(360 cdddr 303 365 ())
(361 cddddr 303 375 ())
(362 cdddar 303 385 ())
(363 cddar 303 395 ())
(364 cddadr 303 405 ())
(365 cddaar 303 415 ())
(366 cdar 303 425 ())
(367 cdadr 303 435 ())
(368 cdaddr 303 445 ())
(369 cdadar 303 455 ())
(370 cdaar 303 465 ())
(371 cdaadr 303 475 ())
(372 cdaaar 303 485 ())
(373 cadr 303 495 ())
(374 #f 303 501 ())
(375 caddr 374 5 ())
(376 cadddr 374 15 ())
(377 caddar 374 25 ())
(378 cadar 374 35 ())
(379 cadadr 374 45 ())
(380 cadaar 374 55 ())
(381 caadr 374 65 ())
(382 caaddr 374 75 ())
(383 caadar 374 85 ())
(384 caaar 374 95 ())
(385 caaadr 374 105 ())
(386 caaaar 374 115 ())
(387 zero? 374 125 ())
(388 max 374 135 ())
(389 <= 374 145 ())
(390 eqv? 374 155 ())
(391 equal? 374 165 ())
(392 loop 391 153 ())
(393 boolean? 374 175 ())
(394 #f 374 306 ())
(395 #f 374 326 ())
(396 #f -15 #f ())
(397 #f -16 #f ())
(398 default-record-discloser 397 23 ())
(399 record-type 397 33 ())
(400 record-type? 397 43 ())
(401 record-type-name 397 53 ())
(402 record-type-discloser 397 63 ())
(403 disclose-record 397 73 ())
(404 define-record-discloser 397 83 ())
(405 record-predicate 397 93 ())
(406 #f 405 5 ())
(407 record-type-field-names 397 103 ())
(408 record-field-index 397 113 ())
(409 loop 408 26 ())
(410 record-modifier 397 123 ())
(411 #f 410 60 ())
(412 record-accessor 397 133 ())
(413 #f 412 60 ())
(414 record-constructor 397 143 ())
(415 #f 414 9 ())
(416 #f 414 52 ())
(417 loop 416 41 ())
(418 record-type-uid 397 153 ())
(419 make-record-type 397 163 ())
(420 #f 397 216 ())
(421 #f -17 #f ())
(422 #f -18 #f ())
(423 proc->discloser 422 15 ())
(424 #f 423 5 ())
(425 #f 424 5 ())
(426 compare-to 422 25 ())
(427 #f 426 5 ())
(428 check-next 422 35 ())
(429 #f 428 5 ())
(430 check-for-next 422 45 ())
(431 #f 430 5 ())
(432 value? 422 55 ())
(433 simple-type? 422 65 ())
(434 %type-predicate 422 75 ())
(435 argument-sequence-predicate 422 85 ())
(436 recur 435 25 ())
(437 one-action 422 95 ())
(438 #f 437 5 ())
(439 #f 438 19 ())
(440 last-action 422 105 ())
(441 #f 440 5 ())
(442 methods->perform 422 115 ())
(443 recur 442 16 ())
(444 apply-generic 422 125 ())
(445 %same-type? 422 135 ())
(446 %type-priority 422 145 ())
(447 more-specific-type? 422 155 ())
(448 more-specific? 422 165 ())
(449 loop 448 143 ())
(450 every2 422 175 ())
(451 same-applicability? 422 185 ())
(452 insert-method 422 195 ())
(453 recur 452 16 ())
(454 add-to-method-table! 422 205 ())
(455 make-method-info 422 215 ())
(456 set-final-method! 422 225 ())
(457 make-cell-for-generic 422 235 ())
(458 #f 457 7 ())
(459 #f 457 11 ())
(460 #f 457 15 ())
(461 make-method-table 422 245 ())
(462 #f 461 52 ())
(463 #f 461 76 ())
(464 method-table? 422 255 ())
(465 empty-method-list 422 265 ())
(466 method-info? 422 275 ())
(467 compute-priority 422 285 ())
(468 make-simple-type 422 295 ())
(469 really-make-simple-type 422 329 ())
(470 #f 422 335 ())
(471 simple-type-id 470 5 ())
(472 simple-type-priority 470 15 ())
(473 simple-type-predicate 470 25 ())
(474 simple-type-superiors 470 35 ())
(475 #f 470 49 ())
(476 #f 470 184 ())
(477 #f 470 412 ())
(478 #f 470 504 ())
(479 record-type-priority 478 428 ())
(480 really-make-method-info 478 463 ())
(481 method-info-proc 478 473 ())
(482 method-info-n-ary? 478 483 ())
(483 #f 478 489 ())
(484 method-info-types 483 5 ())
(485 #f 483 19 ())
(486 really-make-method-table 483 57 ())
(487 method-table-id 483 67 ())
(488 method-table-set-perform! 483 77 ())
(489 method-table-get-perform 483 87 ())
(490 make-generic 483 97 ())
(491 method-table-prototype 483 107 ())
(492 method-table-methods 483 117 ())
(493 set-method-table-methods! 483 127 ())
(494 #f 483 141 ())
(495 add-method! 483 213 ())
(496 add-method! 483 305 ())
(497 type-predicate 483 389 ())
(498 &type-predicate 483 481 ())
(499 #f 483 503 ())
(500 &type-predicate 499 50 ())
(501 type-priority 499 125 ())
(502 &type-priority 499 217 ())
(503 &type-priority 499 288 ())
(504 type-superiors 499 363 ())
(505 &type-superiors 499 455 ())
(506 #f 499 477 ())
(507 &type-superiors 506 50 ())
(508 same-type? 506 129 ())
(509 &same-type? 506 225 ())
(510 &same-type? 506 300 ())
(511 singleton 506 350 ())
(512 singleton-value 506 360 ())
(513 #f 506 374 ())
(514 &type-predicate 506 433 ())
(515 #f 506 455 ())
(516 &type-priority 515 50 ())
(517 &same-type? 515 125 ())
(518 disclose 515 200 ())
(519 &disclose 515 292 ())
(520 &disclose 515 363 ())
(521 &add-method! 515 441 ())
(522 #f -19 #f ())
(523 &number->string 522 89 ())
(524 &number->string 522 164 ())
(525 #f 522 186 ())
(526 &number->string 525 54 ())
(527 integer->digit 525 113 ())
(528 integer->string 525 119 ())
(529 recur 528 50 ())
(530 string->number 525 135 ())
(531 loop 530 194 ())
(532 radix-is 531 73 ())
(533 exactness-is 531 77 ())
(534 loop 531 255 ())
(535 &really-string->number 525 237 ())
(536 #f 525 281 ())
(537 loop 536 29 ())
(538 &really-string->number 525 354 ())
(539 set-exactness 525 380 ())
(540 digit->integer 525 425 ())
(541 do-it 525 431 ())
(542 loop 541 47 ())
(543 string->integer 525 437 ())
(544 #f -20 #f ())
(545 fluid-lookup 544 5 ())
(546 set-dynamic-env! 544 15 ())
(547 get-dynamic-env 544 25 ())
(548 with-dynamic-env 544 35 ())
(549 #f 548 29 ())
(550 let-fluids 544 45 ())
(551 loop 550 25 ())
(552 let-fluid 544 55 ())
(553 set-fluid! 544 65 ())
(554 fluid 544 75 ())
(555 empty-dynamic-env 544 85 ())
(556 initialize-dynamic-state! 544 95 ())
(557 make-thread 544 129 ())
(558 thread-dynamic-env 544 139 ())
(559 make-fluid 544 173 ())
(560 fluid-top-level-value 544 183 ())
(561 set-fluid-top-level-value! 544 193 ())
(562 #f -33 #f ())
(563 lookup-enumerand 562 10 ())
(564 loop 563 24 ())
(565 #f -34 #f ())
(566 #f -41 #f ())
(567 queue-length 566 15 ())
(568 queue->list 566 25 ())
(569 #f 568 5 ())
(570 delete-from-queue-if! 566 35 ())
(571 loop 570 127 ())
(572 delete-from-queue! 566 45 ())
(573 #f 572 8 ())
(574 on-queue? 566 55 ())
(575 dequeue! 566 65 ())
(576 queue-empty? 566 75 ())
(577 queue-front 566 85 ())
(578 enqueue! 566 95 ())
(579 make-queue 566 105 ())
(580 queue? 566 115 ())
(581 really-make-queue 566 149 ())
(582 queue-tail 566 159 ())
(583 set-queue-tail! 566 169 ())
(584 queue-head 566 179 ())
(585 set-queue-head! 566 189 ())
(586 queue-uid 566 199 ())
(587 #f -25 #f ())
(588 condition-supertypes 587 15 ())
(589 define-condition-type 587 25 ())
(590 #f 589 20 ())
(591 condition-predicate 587 35 ())
(592 #f 591 5 ())
(593 condition? 587 45 ())
(594 make-exception 587 257 ())
(595 #f -22 #f ())
(596 initialize-session-data! 595 15 ())
(597 session-data-set! 595 25 ())
(598 session-data-ref 595 35 ())
(599 make-session-data-slot! 595 45 ())
(600 #f -36 #f ())
(601 call-before-heap-overflow! 600 25 ())
(602 enabled-interrupts 600 35 ())
(603 post-gc-handler 600 45 ())
(604 #f 603 5 ())
(605 #f 604 34 ())
(606 #f 604 49 ())
(607 #f 606 7 ())
(608 #f 606 20 ())
(609 call-after-gc! 600 55 ())
(610 with-interrupts 600 65 ())
(611 #f 610 11 ())
(612 enable-interrupts! 600 75 ())
(613 disable-interrupts! 600 85 ())
(614 with-interrupts-allowed 600 95 ())
(615 with-interrupts-inhibited 600 105 ())
(616 set-interrupt-handler! 600 115 ())
(617 initialize-interrupts! 600 125 ())
(618 #f 617 5 ())
(619 loop##554 618 29 ())
(620 #f 619 30 ())
(621 #f 618 72 ())
(622 #f 621 9 ())
(623 #f 600 199 ())
(624 #f -21 #f ())
(625 travel-to-point! 624 5 ())
(626 let-dynamic-point 624 15 ())
(627 env-dynamic-point 624 25 ())
(628 get-dynamic-point 624 35 ())
(629 continuation->procedure 624 45 ())
(630 #f 629 5 ())
(631 #f 630 60 ())
(632 call-with-current-continuation 624 55 ())
(633 #f 632 5 ())
(634 dynamic-wind 624 65 ())
(635 #f 634 98 ())
(636 make-point 624 99 ())
(637 point-parent 624 109 ())
(638 point-dynamic-env 624 119 ())
(639 point-out 624 129 ())
(640 point-in 624 139 ())
(641 point-depth 624 149 ())
(642 #f 624 167 ())
(643 #f 624 171 ())
(644 #f -30 #f ())
(645 set-template-info! 644 15 ())
(646 set-template-code! 644 25 ())
(647 template-info 644 35 ())
(648 template-code 644 45 ())
(649 #f -32 #f ())
(650 &disclose 649 316 ())
(651 &disclose 649 421 ())
(652 #f -31 #f ())
(653 continuation-template 652 15 ())
(654 continuation-pc 652 25 ())
(655 continuation-env 652 35 ())
(656 continuation-cont 652 45 ())
(657 continuation-parent 652 55 ())
(658 loop 657 86 ())
(659 continuation-arg-count 652 65 ())
(660 continuation-arg 652 75 ())
(661 &disclose 652 164 ())
(662 #f -35 #f ())
(663 define-exception-handler 662 5 ())
(664 signal-exception 662 15 ())
(665 #f 662 45 ())
(666 except 662 63 ())
(667 #f 666 5 ())
(668 handler 662 67 ())
(669 #f 668 5 ())
(670 make-opcode-generic! 662 73 ())
(671 really-signal-condition 662 84 ())
(672 loop 671 27 ())
(673 #f 672 8 ())
(674 with-handler 662 94 ())
(675 initialize-exceptions! 662 119 ())
(676 #f 675 5 ())
(677 last-resort-condition-handler 662 129 ())
(678 #f 677 13 ())
(679 #f 678 22 ())
(680 report-utter-lossage 662 139 ())
(681 #f 680 180 ())
(682 continuation-preview 662 149 ())
(683 ignore-errors 662 159 ())
(684 #f 683 5 ())
(685 #f 684 5 ())
(686 &disclose 662 214 ())
(687 &disclose 662 281 ())
(688 #f -35 #f ())
(689 #f 688 9 ())
(690 define-wna-handler 688 33 ())
(691 wna-lose 688 53 ())
(692 #f 688 67 ())
(693 #f 688 85 ())
(694 #f 688 103 ())
(695 #f 688 121 ())
(696 #f 688 139 ())
(697 #f 688 157 ())
(698 #f 688 175 ())
(699 #f 688 193 ())
(700 #f 688 211 ())
(701 #f 688 229 ())
(702 recur 701 60 ())
(703 #f 688 247 ())
(704 comparison-wna 688 261 ())
(705 #f 704 5 ())
(706 loop 705 72 ())
(707 #f -42 #f ())
(708 delete-queue-entry! 707 5 ())
(709 delete-from-queue! 707 15 ())
(710 loop 709 25 ())
(711 queue-length 707 25 ())
(712 loop##646 711 9 ())
(713 queue->list 707 35 ())
(714 loop##644 713 9 ())
(715 dequeue! 707 45 ())
(716 queue-head 707 55 ())
(717 enqueue! 707 65 ())
(718 queue-empty? 707 75 ())
(719 make-queue 707 85 ())
(720 q-entry? 707 95 ())
(721 make-q-entry 707 139 ())
(722 q-entry-next 707 149 ())
(723 set-q-entry-next! 707 159 ())
(724 q-entry-prev 707 169 ())
(725 set-q-entry-prev! 707 179 ())
(726 q-entry-data 707 189 ())
(727 #f -37 #f ())
(728 #f -37 #f ())
(729 waiting? 728 43 ())
(730 remove-thread-from-queues! 728 53 ())
(731 add-event! 728 63 ())
(732 running? 728 73 ())
(733 loop 732 23 ())
(734 switch-to-thread 728 83 ())
(735 #f 734 43 ())
(736 interrupt-timer-time 728 93 ())
(737 suspend-to 728 103 ())
(738 #f 737 5 ())
(739 schedule-wakeup 728 113 ())
(740 compose-continuation 728 123 ())
(741 #f 740 5 ())
(742 #f 741 25 ())
(743 #f 742 10 ())
(744 #f 743 8 ())
(745 return-values-to-thread! 728 133 ())
(746 #f 745 20 ())
(747 schedule-event 728 143 ())
(748 make-ready 728 153 ())
(749 dequeue-thread! 728 163 ())
(750 real-time 728 173 ())
(751 #f -37 #f ())
(752 wake-some-threads 751 5 ())
(753 loop 752 43 ())
(754 insert 751 15 ())
(755 #f -37 #f ())
(756 enqueue-thread! 755 5 ())
(757 suspend 755 15 ())
(758 block 755 25 ())
(759 #f -37 #f ())
(760 sleep 759 5 ())
(761 #f 760 69 ())
(762 #f -37 #f ())
(763 root-scheduler 762 5 ())
(764 terminate-current-thread 762 15 ())
(765 thunk->continuation 762 25 ())
(766 thread-top-level 762 35 ())
(767 #f 766 5 ())
(768 #f 767 3 ())
(769 make-thread 762 45 ())
(770 start-multitasking 762 55 ())
(771 #f 770 5 ())
(772 #f 771 5 ())
(773 #f 771 9 ())
(774 #f 773 7 ())
(775 #f 774 5 ())
(776 #f 774 9 ())
(777 debit-thread-times! 762 65 ())
(778 loop 777 27 ())
(779 schedule-interrupt! 762 75 ())
(780 handle-timer-interrupt 762 85 ())
(781 #f 780 26 ())
(782 #f 781 27 ())
(783 cancel-timer-interrupt! 762 95 ())
(784 with-threads 762 105 ())
(785 #f 784 14 ())
(786 #f 785 3 ())
(787 #f 785 7 ())
(788 #f 785 11 ())
(789 spawn-on-scheduler 762 115 ())
(790 spawn-on-root 762 125 ())
(791 spawn 762 135 ())
(792 show-running 762 145 ())
(793 loop##754 792 19 ())
(794 event-pending? 762 155 ())
(795 get-next-event! 762 165 ())
(796 #f 762 171 ())
(797 thread? 796 5 ())
(798 interrupt-thread 796 15 ())
(799 wait 796 25 ())
(800 kill-thread! 796 35 ())
(801 #f 800 8 ())
(802 propogate-upcall 796 45 ())
(803 #f 802 61 ())
(804 upcall 796 55 ())
(805 relinquish-timeslice 796 65 ())
(806 min 796 75 ())
(807 run-next-thread 796 85 ())
(808 loop 807 28 ())
(809 loop 808 71 ())
(810 run 796 95 ())
(811 #f 810 220 ())
(812 exclusively-enqueue-thread! 796 105 ())
(813 all-threads 796 115 ())
(814 thread-uid->thread 796 125 ())
(815 loop 814 24 ())
(816 really-make-thread 796 159 ())
(817 thread-name 796 169 ())
(818 thread-uid 796 179 ())
(819 thread-current-task 796 189 ())
(820 set-thread-current-task! 796 199 ())
(821 thread-events 796 209 ())
(822 set-thread-events! 796 219 ())
(823 thread-data 796 229 ())
(824 set-thread-data! 796 239 ())
(825 thread-scheduler 796 249 ())
(826 set-thread-scheduler! 796 259 ())
(827 thread-time 796 269 ())
(828 set-thread-time! 796 279 ())
(829 thread-queues 796 289 ())
(830 set-thread-queues! 796 299 ())
(831 thread-continuation 796 309 ())
(832 set-thread-continuation! 796 319 ())
(833 thread-dynamic-env 796 329 ())
(834 #f 796 343 ())
(835 #f -43 #f ())
(836 release-lock 835 15 ())
(837 #f 836 9 ())
(838 maybe-obtain-lock 835 25 ())
(839 #f 838 9 ())
(840 obtain-lock 835 35 ())
(841 #f 840 9 ())
(842 make-lock 835 45 ())
(843 lock? 835 55 ())
(844 really-make-lock 835 89 ())
(845 lock-uid 835 99 ())
(846 lock-queue 835 109 ())
(847 lock-owner-uid 835 119 ())
(848 set-lock-owner-uid! 835 129 ())
(849 #f -23 #f ())
(850 open-output-port? 849 15 ())
(851 okay-limits? 849 25 ())
(852 write-unbuffered-block 849 35 ())
(853 loop##911 852 37 ())
(854 empty-port-buffer! 849 45 ())
(855 really-force-output 849 55 ())
(856 write-buffered-block 849 65 ())
(857 write-block 849 75 ())
(858 write-string 849 85 ())
(859 #f -23 #f ())
(860 current-output-port 859 5 ())
(861 output-port-option 859 15 ())
(862 newline 859 25 ())
(863 current-error-port 859 35 ())
(864 message 859 45 ())
(865 #f 864 10 ())
(866 current-input-port 859 55 ())
(867 input-port-option 859 65 ())
(868 #f -23 #f ())
(869 open-input-port? 868 5 ())
(870 maybe-obtain-port-lock 868 15 ())
(871 open-port? 868 25 ())
(872 release-port-lock 868 35 ())
(873 fill-port-buffer! 868 45 ())
(874 #f -23 #f ())
(875 char-ready? 874 5 ())
(876 #f -23 #f ())
(877 real-char-ready? 876 5 ())
(878 #f -23 #f ())
(879 call-with-current-noise-port 878 5 ())
(880 #f -23 #f ())
(881 make-null-output-port 880 5 ())
(882 #f -23 #f ())
(883 silently 882 5 ())
(884 call-with-current-output-port 882 15 ())
(885 call-with-current-input-port 882 25 ())
(886 with-current-ports 882 35 ())
(887 initialize-i/o 882 45 ())
(888 current-noise-port 882 55 ())
(889 #f -23 #f ())
(890 make-forcing-thunk 889 5 ())
(891 #f 890 5 ())
(892 output-port-forcers 889 15 ())
(893 loop 892 28 ())
(894 periodically-force-output! 889 25 ())
(895 initialize-output-port-list! 889 35 ())
(896 port-handler? 889 45 ())
(897 make-unbuffered-output-port 889 55 ())
(898 okay-buffer? 889 65 ())
(899 make-output-port 889 75 ())
(900 make-output-port-closed! 889 85 ())
(901 make-input-port 889 95 ())
(902 make-input-port-closed! 889 105 ())
(903 force-output 889 115 ())
(904 read-more 889 125 ())
(905 #f 889 131 ())
(906 buffer-length 905 5 ())
(907 really-read-block 905 15 ())
(908 read-block 905 25 ())
(909 obtain-port-lock 905 35 ())
(910 close-output-port 905 45 ())
(911 close-input-port 905 55 ())
(912 write-char-handler 905 65 ())
(913 read-char-handler 905 75 ())
(914 #f 913 5 ())
(915 two-arg-proc->handler 905 85 ())
(916 #f 915 5 ())
(917 one-arg-proc->handler 905 95 ())
(918 #f 917 5 ())
(919 initialize-i/o-handlers! 905 105 ())
(920 disclose-port 905 115 ())
(921 make-port-handler 905 149 ())
(922 port-handler-buffer-proc 905 159 ())
(923 port-handler-close 905 169 ())
(924 port-handler-discloser 905 179 ())
(925 &disclose 905 234 ())
(926 &disclose 905 305 ())
(927 #f 905 471 ())
(928 #f 905 475 ())
(929 #f 905 479 ())
(930 #f -23 #f ())
(931 #f 930 69 ())
(932 #f 930 87 ())
(933 #f 930 101 ())
(934 #f -26 #f ())
(935 write 934 5 ())
(936 recur 935 34 ())
(937 recurring-write 934 15 ())
(938 write-boolean 934 25 ())
(939 write-number 934 35 ())
(940 write-char-literal 934 45 ())
(941 character-name 934 55 ())
(942 write-string-literal 934 65 ())
(943 loop##990 942 22 ())
(944 write-list 934 75 ())
(945 loop 944 84 ())
(946 quotation? 934 85 ())
(947 write-vector 934 95 ())
(948 loop 947 73 ())
(949 write-other 934 105 ())
(950 #f 949 70 ())
(951 display-type-name 934 115 ())
(952 loop##1021 951 81 ())
(953 display 934 125 ())
(954 recur 953 34 ())
(955 #f -27 #f ())
(956 reading-error 955 25 ())
(957 preferred-case 955 35 ())
(958 parse-token 955 45 ())
(959 sub-read-token 955 55 ())
(960 loop 959 36 ())
(961 define-sharp-macro 955 65 ())
(962 gobble-line 955 75 ())
(963 loop 962 13 ())
(964 reader-token? 955 85 ())
(965 sub-read 955 95 ())
(966 sub-read-carefully 955 105 ())
(967 sub-read-list 955 115 ())
(968 recur 967 53 ())
(969 set-standard-syntax! 955 125 ())
(970 set-standard-read-macro! 955 135 ())
(971 make-reader-token 955 145 ())
(972 #f 955 151 ())
(973 read 972 5 ())
(974 loop 973 29 ())
(975 #f 972 73 ())
(976 sub-read-whitespace 972 101 ())
(977 #f 972 107 ())
(978 sub-read-constituent 972 125 ())
(979 #f 972 131 ())
(980 #f 972 203 ())
(981 #f 972 225 ())
(982 #f 972 247 ())
(983 #f 972 269 ())
(984 #f 972 291 ())
(985 loop 984 23 ())
(986 #f 972 313 ())
(987 #f 972 333 ())
(988 #f 972 347 ())
(989 #f 972 367 ())
(990 #f 972 387 ())
(991 #f 972 407 ())
(992 number-sharp-macro 972 427 ())
(993 #f 972 433 ())
(994 loop##1091 972 497 ())
(995 #f -24 #f ())
(996 #f 995 9 ())
(997 #f 995 13 ())
(998 #f 995 17 ())
(999 input-channel->port 995 30 ())
(1000 #f 995 44 ())
(1001 #f 995 48 ())
(1002 #f 995 52 ())
(1003 make-unbuffered-output-channel-handler 995 65 ())
(1004 #f 1003 18 ())
(1005 #f 1003 22 ())
(1006 #f 1003 26 ())
(1007 output-channel->port 995 75 ())
(1008 maybe-force-output 995 85 ())
(1009 maybe-open-file 995 95 ())
(1010 open-input-file 995 105 ())
(1011 open-output-file 995 115 ())
(1012 call-with-input-file 995 125 ())
(1013 call-with-output-file 995 135 ())
(1014 with-input-from-file 995 145 ())
(1015 #f 1014 8 ())
(1016 with-output-to-file 995 155 ())
(1017 #f 1016 8 ())
(1018 steal-channel-port! 995 165 ())
(1019 really-steal-channel-port! 995 175 ())
(1020 #f 1019 145 ())
(1021 #f -24 #f ())
(1022 initialize-channel-i/o! 1021 5 ())
(1023 i/o-completion-handler 1021 15 ())
(1024 #f 1023 35 ())
(1025 waiting-for-i/o? 1021 25 ())
(1026 wait-for-channel 1021 35 ())
(1027 steal-channel! 1021 45 ())
(1028 #f 1021 59 ())
(1029 #f 1021 77 ())
(1030 i/o-wait-count 1021 111 ())
(1031 increment-i/o-wait-count! 1021 121 ())
(1032 decrement-i/o-wait-count! 1021 131 ())
(1033 i/o-wait-queue 1021 159 ())
(1034 make-i/o-wait-queues 1021 169 ())
(1035 #f 1034 9 ())
(1036 loop##1167 1035 75 ())
(1037 loop##1171 1035 98 ())
(1038 #f -47 #f ())
(1039 symbol-hash 1038 25 ())
(1040 default-table-hash-function 1038 35 ())
(1041 alist-walk 1038 45 ())
(1042 loop##1244 1041 9 ())
(1043 really-table-walk 1038 55 ())
(1044 loop##1240 1043 59 ())
(1045 table-walk 1038 65 ())
(1046 #f 1045 5 ())
(1047 table->entry-list 1038 75 ())
(1048 #f 1047 15 ())
(1049 make-table-immutable! 1038 85 ())
(1050 table-expand-table! 1038 95 ())
(1051 table-enter-alist! 1038 105 ())
(1052 loop##1230 1051 23 ())
(1053 next-table-size 1038 115 ())
(1054 expand-hash-table! 1038 125 ())
(1055 loop##1225 1054 49 ())
(1056 new-entry 1038 135 ())
(1057 make-hash-table-set! 1038 145 ())
(1058 #f 1057 5 ())
(1059 make-hash-table-ref 1038 155 ())
(1060 #f 1059 5 ())
(1061 make->hash-table 1038 165 ())
(1062 #f 1061 39 ())
(1063 make-linear-table-set! 1038 175 ())
(1064 #f 1063 5 ())
(1065 make-linear-table-ref 1038 185 ())
(1066 #f 1065 5 ())
(1067 make-assoc 1038 195 ())
(1068 #f 1067 19 ())
(1069 loop 1068 16 ())
(1070 make-table-maker 1038 205 ())
(1071 #f 1070 71 ())
(1072 table-set! 1038 215 ())
(1073 table-ref 1038 225 ())
(1074 table? 1038 235 ())
(1075 really-make-table 1038 269 ())
(1076 table-set!-procedure 1038 279 ())
(1077 set-table-set!-procedure! 1038 289 ())
(1078 table-ref-procedure 1038 299 ())
(1079 set-table-ref-procedure! 1038 309 ())
(1080 table-data 1038 319 ())
(1081 set-table-data! 1038 329 ())
(1082 table-size 1038 339 ())
(1083 set-table-size! 1038 349 ())
(1084 make-table 1038 413 ())
(1085 #f 1038 480 ())
(1086 #f -49 #f ())
(1087 empty-rail-type? 1086 25 ())
(1088 optional-type? 1086 35 ())
(1089 head-type 1086 45 ())
(1090 tail-type 1086 55 ())
(1091 procedure-type-domain 1086 65 ())
(1092 procedure-type-argument-types 1086 75 ())
(1093 recur 1092 26 ())
(1094 procedure-type-arity 1086 85 ())
(1095 loop##1418 1094 9 ())
(1096 procedure-type? 1086 95 ())
(1097 fixed-arity-procedure-type? 1086 105 ())
(1098 loop 1097 41 ())
(1099 bottom-type? 1086 115 ())
(1100 rest-type? 1086 125 ())
(1101 same-type? 1086 135 ())
(1102 make-type 1086 145 ())
(1103 rail-type 1086 155 ())
(1104 make-some-values-type 1086 165 ())
(1105 other-type-info 1086 175 ())
(1106 restrictive? 1086 185 ())
(1107 procedure-type-codomain 1086 195 ())
(1108 meet? 1086 205 ())
(1109 meet-procedure? 1086 215 ())
(1110 make-optional-type 1086 225 ())
(1111 make-rest-type 1086 235 ())
(1112 mask->type 1086 245 ())
(1113 make-procedure-type 1086 255 ())
(1114 meet-type 1086 265 ())
(1115 meet-rail 1086 275 ())
(1116 meet-procedure 1086 285 ())
(1117 subtype? 1086 295 ())
(1118 disjoin-rest 1086 305 ())
(1119 disjoin-type 1086 315 ())
(1120 loop##1413 1119 260 ())
(1121 head-type-really 1086 325 ())
(1122 rail-type->sexp 1086 335 ())
(1123 recur 1122 23 ())
(1124 type->sexp 1086 345 ())
(1125 #f 1124 139 ())
(1126 atomic-type->sexp 1086 355 ())
(1127 set-type-name! 1086 365 ())
(1128 make-other-type 1086 375 ())
(1129 name->type 1086 385 ())
(1130 procedure-type 1086 395 ())
(1131 join-type 1086 405 ())
(1132 join-rail 1086 415 ())
(1133 join-procedure 1086 425 ())
(1134 sexp->values-type 1086 435 ())
(1135 sexp->type 1086 445 ())
(1136 #f 1135 259 ())
(1137 #f 1135 312 ())
(1138 p 1086 455 ())
(1139 value-type? 1086 465 ())
(1140 #f 1086 471 ())
(1141 new-type-bit 1140 5 ())
(1142 new-atomic-type 1140 15 ())
(1143 named-atomic-type 1140 25 ())
(1144 meta-type? 1140 35 ())
(1145 really-make-type 1140 69 ())
(1146 type-info 1140 79 ())
(1147 type-more 1140 89 ())
(1148 type-mask 1140 99 ())
(1149 #f 1140 113 ())
(1150 loop 1140 494 ())
(1151 #f 1140 506 ())
(1152 #f -51 #f ())
(1153 #f -51 #f ())
(1154 qualified-symbol 1153 5 ())
(1155 qualified-parent-name 1153 15 ())
(1156 qualified? 1153 25 ())
(1157 make-qualified 1153 35 ())
(1158 #f -51 #f ())
(1159 generated? 1158 5 ())
(1160 name? 1158 15 ())
(1161 transform? 1158 35 ())
(1162 binding-static 1158 45 ())
(1163 binding-place 1158 55 ())
(1164 same-denotation? 1158 65 ())
(1165 lookup 1158 75 ())
(1166 operator? 1158 85 ())
(1167 desyntaxify 1158 95 ())
(1168 loop 1167 259 ())
(1169 #f -51 #f ())
(1170 name->qualified 1169 5 ())
(1171 recur 1170 110 ())
(1172 schemify-sexp 1169 15 ())
(1173 loop 1172 152 ())
(1174 #f -51 #f ())
(1175 get-operator 1174 5 ())
(1176 operator-define! 1174 15 ())
(1177 #f -51 #f ())
(1178 define-schemifier 1177 5 ())
(1179 #f -51 #f ())
(1180 node? 1179 5 ())
(1181 node-set! 1179 15 ())
(1182 loop 1181 100 ())
(1183 node-ref 1179 25 ())
(1184 #f -51 #f ())
(1185 schemify1 1184 5 ())
(1186 schemify 1184 15 ())
(1187 #f -51 #f ())
(1188 get-funny 1187 5 ())
(1189 environment-reader 1187 15 ())
(1190 variable-type? 1187 25 ())
(1191 compatible-types? 1187 35 ())
(1192 variable-type 1187 45 ())
(1193 body-lossage 1187 55 ())
(1194 bind1 1187 65 ())
(1195 #f 1194 5 ())
(1196 make-node 1187 75 ())
(1197 classify-name 1187 85 ())
(1198 classify-operator-form 1187 95 ())
(1199 binding-type 1187 105 ())
(1200 literal? 1187 115 ())
(1201 classify 1187 125 ())
(1202 classify-macro-application 1187 135 ())
(1203 #f 1202 14 ())
(1204 scan-body-forms 1187 145 ())
(1205 #f 1204 180 ())
(1206 scan-body 1187 155 ())
(1207 #f 1206 62 ())
(1208 reflective-tower 1187 165 ())
(1209 make-transform 1187 175 ())
(1210 process-syntax 1187 185 ())
(1211 bind 1187 195 ())
(1212 bindrec 1187 205 ())
(1213 #f 1212 16 ())
(1214 make-binding 1187 215 ())
(1215 #f 1187 221 ())
(1216 bind-aliases 1215 5 ())
(1217 #f 1216 26 ())
(1218 define-usual-suspects 1215 15 ())
(1219 #f 1218 24 ())
(1220 #f 1219 64 ())
(1221 #f 1218 58 ())
(1222 #f 1221 60 ())
(1223 #f 1222 5 ())
(1224 #f 1218 88 ())
(1225 syntax? 1215 25 ())
(1226 normalize-formals 1215 35 ())
(1227 n-ary? 1215 45 ())
(1228 number-of-required-args 1215 55 ())
(1229 loop##1687 1228 9 ())
(1230 specs? 1215 65 ())
(1231 at-least-this-long? 1215 75 ())
(1232 this-long? 1215 85 ())
(1233 names? 1215 95 ())
(1234 bind-source-file-name 1215 105 ())
(1235 define-classifier 1215 115 ())
(1236 maybe-transform-call 1215 125 ())
(1237 #f 1236 121 ())
(1238 forget-integration 1215 135 ())
(1239 impose-type 1215 145 ())
(1240 set-binding-place! 1215 155 ())
(1241 clobber-binding! 1215 165 ())
(1242 make-name-generator 1215 175 ())
(1243 #f 1242 11 ())
(1244 maybe-transform 1215 185 ())
(1245 compare 1244 77 ())
(1246 name-hash 1215 195 ())
(1247 generated-uid 1215 205 ())
(1248 name->symbol 1215 215 ())
(1249 generate-name 1215 225 ())
(1250 node-operator 1215 235 ())
(1251 make-similar-node 1215 245 ())
(1252 node-predicate 1215 255 ())
(1253 #f 1252 35 ())
(1254 operator-lookup 1215 265 ())
(1255 make-operator-table 1215 275 ())
(1256 make-operator 1215 339 ())
(1257 operator-name 1215 349 ())
(1258 operator-uid 1215 359 ())
(1259 operator-nargs 1215 369 ())
(1260 operator-type 1215 379 ())
(1261 set-operator-type! 1215 389 ())
(1262 #f 1215 403 ())
(1263 really-make-node 1215 481 ())
(1264 node-plist 1215 491 ())
(1265 set-node-plist! 1215 501 ())
(1266 #f 1215 507 ())
(1267 node-form 1266 5 ())
(1268 node-operator-id 1266 15 ())
(1269 #f 1266 29 ())
(1270 make-generated 1266 67 ())
(1271 generated-parent-name 1266 77 ())
(1272 generated-env 1266 87 ())
(1273 generated-token 1266 97 ())
(1274 generated-symbol 1266 107 ())
(1275 #f 1266 121 ())
(1276 really-make-transform 1266 183 ())
(1277 transform-id 1266 193 ())
(1278 transform-source 1266 203 ())
(1279 transform-aux-names 1266 213 ())
(1280 transform-type 1266 223 ())
(1281 transform-env 1266 233 ())
(1282 transform-procedure 1266 243 ())
(1283 #f 1266 257 ())
(1284 classify-literal 1266 353 ())
(1285 classify-call 1266 388 ())
(1286 classify-transform-application 1266 447 ())
(1287 #f 1286 5 ())
(1288 #f 1266 462 ())
(1289 #f 1266 490 ())
(1290 #f 1266 500 ())
(1291 #f 1290 17 ())
(1292 unspecific-node 1290 77 ())
(1293 #f 1290 164 ())
(1294 #f 1290 235 ())
(1295 lose 1294 27 ())
(1296 #f 1290 285 ())
(1297 #f 1290 332 ())
(1298 #f 1290 358 ())
(1299 #f 1290 384 ())
(1300 #f -51 #f ())
(1301 #f 1300 9 ())
(1302 #f 1301 34 ())
(1303 #f 1300 37 ())
(1304 #f 1300 63 ())
(1305 #f 1300 85 ())
(1306 #f 1305 27 ())
(1307 #f 1305 50 ())
(1308 #f -45 #f ())
(1309 make-population 1308 5 ())
(1310 add-to-population! 1308 15 ())
(1311 weak-memq 1308 25 ())
(1312 population-reduce 1308 35 ())
(1313 loop##1857 1312 9 ())
(1314 population->list 1308 45 ())
(1315 walk-population 1308 55 ())
(1316 #f 1315 5 ())
(1317 #f -50 #f ())
(1318 note-interface-name! 1317 5 ())
(1319 note-reference-to-interface! 1317 15 ())
(1320 make-interface 1317 25 ())
(1321 interface-ref 1317 35 ())
(1322 for-each-declaration 1317 45 ())
(1323 make-compound-interface 1317 55 ())
(1324 #f 1323 12 ())
(1325 loop 1324 16 ())
(1326 #f 1323 16 ())
(1327 #f 1326 5 ())
(1328 #f 1323 35 ())
(1329 really-make-simple-interface 1317 65 ())
(1330 #f 1329 5 ())
(1331 #f 1329 9 ())
(1332 make-simple-interface 1317 75 ())
(1333 #f 1332 21 ())
(1334 #f 1333 59 ())
(1335 interface? 1317 85 ())
(1336 really-make-interface 1317 119 ())
(1337 interface-name 1317 129 ())
(1338 set-interface-name! 1317 139 ())
(1339 interface-clients 1317 149 ())
(1340 walk-method 1317 159 ())
(1341 ref-method 1317 169 ())
(1342 #f 1317 179 ())
(1343 #f -54 #f ())
(1344 follow-forwarding-pointers 1343 25 ())
(1345 maybe-fix-place 1343 35 ())
(1346 initialize-structure! 1343 45 ())
(1347 structure-interface 1343 55 ())
(1348 structure-unstable? 1343 65 ())
(1349 get-new-location 1343 75 ())
(1350 really-package-define! 1343 85 ())
(1351 package-accesses 1343 95 ())
(1352 initialize-package! 1343 105 ())
(1353 #f 1352 43 ())
(1354 #f 1352 56 ())
(1355 initialize-package-if-necessary! 1343 115 ())
(1356 package-opens 1343 125 ())
(1357 package-note-caching 1343 135 ())
(1358 loop 1357 81 ())
(1359 package-put! 1343 145 ())
(1360 package-get 1343 155 ())
(1361 flush-location-names 1343 165 ())
(1362 make-new-location 1343 175 ())
(1363 for-each-definition 1343 185 ())
(1364 #f 1363 5 ())
(1365 extract-package-from-environment 1343 195 ())
(1366 package-define-funny! 1343 205 ())
(1367 define-funny-names! 1343 215 ())
(1368 package? 1343 225 ())
(1369 package-definition 1343 235 ())
(1370 structure? 1343 245 ())
(1371 generic-lookup 1343 255 ())
(1372 package-lookup 1343 265 ())
(1373 really-package-lookup 1343 275 ())
(1374 loop 1373 108 ())
(1375 structure-lookup 1343 285 ())
(1376 package-define! 1343 295 ())
(1377 note-package-name! 1343 305 ())
(1378 really-package->environment 1343 315 ())
(1379 #f 1378 5 ())
(1380 new-package-uid 1343 325 ())
(1381 make-package 1343 335 ())
(1382 make-simple-package 1343 345 ())
(1383 #f 1382 65 ())
(1384 #f 1382 69 ())
(1385 #f 1343 351 ())
(1386 package-name 1385 5 ())
(1387 note-structure-name! 1385 15 ())
(1388 for-each-export 1385 25 ())
(1389 #f 1388 20 ())
(1390 make-structure 1385 35 ())
(1391 #f 1390 77 ())
(1392 really-make-structure 1385 69 ())
(1393 structure-name 1385 79 ())
(1394 set-structure-name! 1385 89 ())
(1395 structure-clients 1385 99 ())
(1396 structure-package 1385 109 ())
(1397 structure-interface-really 1385 119 ())
(1398 set-structure-interface! 1385 129 ())
(1399 structure-interface-thunk 1385 139 ())
(1400 #f 1385 153 ())
(1401 really-make-package 1385 191 ())
(1402 package-cached 1385 201 ())
(1403 package-clients 1385 211 ())
(1404 package-plist 1385 221 ())
(1405 set-package-plist! 1385 231 ())
(1406 package-accesses-thunk 1385 241 ())
(1407 package-opens-thunk 1385 251 ())
(1408 set-package-opens-thunk! 1385 261 ())
(1409 package->environment 1385 271 ())
(1410 set-package->environment! 1385 281 ())
(1411 package-loaded? 1385 291 ())
(1412 set-package-loaded?! 1385 301 ())
(1413 package-clauses 1385 311 ())
(1414 package-file-name 1385 321 ())
(1415 package-get-location 1385 331 ())
(1416 set-package-get-location! 1385 341 ())
(1417 package-integrate? 1385 351 ())
(1418 set-package-integrate?! 1385 361 ())
(1419 package-unstable? 1385 371 ())
(1420 package-definitions 1385 381 ())
(1421 package-opens-really 1385 391 ())
(1422 set-package-opens! 1385 401 ())
(1423 package-uid 1385 411 ())
(1424 #f 1385 425 ())
(1425 #f -63 #f ())
(1426 environment-ref 1425 5 ())
(1427 environment-set! 1425 15 ())
(1428 #f 1427 105 ())
(1429 environment-define! 1425 25 ())
(1430 *structure-ref 1425 35 ())
(1431 carefully 1425 45 ())
(1432 interaction-environment 1425 70 ())
(1433 set-interaction-environment! 1425 80 ())
(1434 with-interaction-environment 1425 90 ())
(1435 scheme-report-environment 1425 100 ())
(1436 set-scheme-report-environment! 1425 128 ())
(1437 make-reflective-tower 1425 138 ())
(1438 recur 1437 17 ())
(1439 #f 1438 5 ())
(1440 set-reflective-tower-maker! 1425 168 ())
(1441 #f -52 #f ())
(1442 define-usual-macro 1441 21 ())
(1443 usual-transform 1441 31 ())
(1444 #f 1441 45 ())
(1445 #f 1441 67 ())
(1446 recur 1445 81 ())
(1447 #f 1441 89 ())
(1448 #f 1447 169 ())
(1449 #f 1441 111 ())
(1450 #f 1441 133 ())
(1451 specs? 1441 151 ())
(1452 #f 1441 165 ())
(1453 #f 1441 187 ())
(1454 #f 1453 153 ())
(1455 #f 1441 205 ())
(1456 interesting-to-quasiquote? 1455 33 ())
(1457 descend-quasiquote-vector 1455 39 ())
(1458 #f 1457 21 ())
(1459 descend-quasiquote-pair 1455 45 ())
(1460 #f 1459 14 ())
(1461 #f 1460 14 ())
(1462 descend-quasiquote 1455 51 ())
(1463 finalize-quasiquote 1455 57 ())
(1464 expand-quasiquote 1455 63 ())
(1465 #f -52 #f ())
(1466 #f 1465 9 ())
(1467 process-rules 1465 27 ())
(1468 free-meta-variables 1467 63 ())
(1469 meta-variables 1467 69 ())
(1470 process-template 1467 75 ())
(1471 process-pattern 1467 81 ())
(1472 #f 1471 96 ())
(1473 process-segment-match 1467 87 ())
(1474 process-match 1467 93 ())
(1475 process-rule 1467 99 ())
(1476 #f 1475 100 ())
(1477 make-transformer 1467 105 ())
(1478 segment-pattern? 1465 37 ())
(1479 segment-template? 1465 47 ())
(1480 find-free-names-in-syntax-rules 1465 87 ())
(1481 free-names 1480 11 ())
(1482 meta-variables 1480 17 ())
(1483 loop##2032 1480 27 ())
(1484 #f -48 #f ())
(1485 namestring 1484 5 ())
(1486 #f 1485 181 ())
(1487 namestring-component 1484 35 ())
(1488 file-name-directory 1484 75 ())
(1489 file-name-nondirectory 1484 85 ())
(1490 file-nondirectory-position 1484 95 ())
(1491 loop 1490 22 ())
(1492 string-posq 1484 105 ())
(1493 loop 1492 17 ())
(1494 translations 1484 125 ())
(1495 set-translation! 1484 135 ())
(1496 translate 1484 145 ())
(1497 loop 1496 23 ())
(1498 #f -55 #f ())
(1499 #f -55 #f ())
(1500 noting-undefined-variables 1499 5 ())
(1501 foo 1500 11 ())
(1502 #f 1500 21 ())
(1503 #f 1500 39 ())
(1504 #f 1503 3 ())
(1505 #f 1503 10 ())
(1506 #f 1505 3 ())
(1507 #f 1506 17 ())
(1508 #f 1506 197 ())
(1509 note-undefined! 1499 15 ())
(1510 #f -55 #f ())
(1511 set-optimizer! 1510 5 ())
(1512 get-optimizer 1510 15 ())
(1513 scan-form-list 1510 25 ())
(1514 loop 1513 16 ())
(1515 really-scan-forms 1510 35 ())
(1516 scan-forms 1510 45 ())
(1517 define-all-operators 1510 55 ())
(1518 #f 1517 15 ())
(1519 #f 1517 67 ())
(1520 initialize-usual-transforms! 1510 65 ())
(1521 #f 1520 5 ())
(1522 check-structure 1510 75 ())
(1523 #f 1522 15 ())
(1524 apply-optimizers 1510 85 ())
(1525 #f 1524 5 ())
(1526 optimize 1510 95 ())
(1527 #f 1526 43 ())
(1528 #f 1526 79 ())
(1529 #f 1526 161 ())
(1530 #f 1529 53 ())
(1531 really-scan-file 1510 105 ())
(1532 #f 1531 79 ())
(1533 recur 1532 129 ())
(1534 scan-package 1510 115 ())
(1535 #f 1534 88 ())
(1536 #f 1535 23 ())
(1537 scan-structures 1510 125 ())
(1538 recur 1537 33 ())
(1539 #f 1538 206 ())
(1540 #f 1538 251 ())
(1541 process-define-syntax 1510 135 ())
(1542 make-standard-optimizer 1510 145 ())
(1543 #f 1542 9 ())
(1544 #f 1542 24 ())
(1545 default-standard-optimizer 1510 155 ())
(1546 set-standard-optimizers! 1510 175 ())
(1547 scan-file 1510 185 ())
(1548 scan-form 1510 236 ())
(1549 make-define-primitive-node 1510 289 ())
(1550 #f -55 #f ())
(1551 #f -56 #f ())
(1552 debug-data? 1551 5 ())
(1553 make-debug-data 1551 39 ())
(1554 debug-data-source 1551 49 ())
(1555 set-debug-data-source! 1551 59 ())
(1556 debug-data-env-maps 1551 69 ())
(1557 set-debug-data-env-maps! 1551 79 ())
(1558 debug-data-pc-in-parent 1551 89 ())
(1559 debug-data-parent 1551 99 ())
(1560 debug-data-name 1551 109 ())
(1561 debug-data-uid 1551 119 ())
(1562 #f 1551 129 ())
(1563 #f -57 #f ())
(1564 #f -57 #f ())
(1565 emit-segment! 1564 5 ())
(1566 emit-with-environment-maps! 1564 15 ())
(1567 #f 1566 27 ())
(1568 note-environment 1564 25 ())
(1569 #f 1568 23 ())
(1570 note-source-code 1564 35 ())
(1571 #f 1570 23 ())
(1572 attach-label 1564 45 ())
(1573 #f 1572 11 ())
(1574 #f 1573 35 ())
(1575 emit-byte! 1564 55 ())
(1576 instruction 1564 65 ())
(1577 #f 1576 30 ())
(1578 #f 1577 21 ())
(1579 instruction-using-label 1564 75 ())
(1580 #f 1579 40 ())
(1581 make-label 1564 85 ())
(1582 literal->index 1564 95 ())
(1583 emit-literal! 1564 105 ())
(1584 segment-data->template 1564 115 ())
(1585 loop##2207 1584 61 ())
(1586 #f -57 #f ())
(1587 note-debug-data! 1586 5 ())
(1588 debug-data->info 1586 15 ())
(1589 new-template-uid 1586 25 ())
(1590 new-debug-data 1586 35 ())
(1591 #f -57 #f ())
(1592 make-astate 1591 5 ())
(1593 segment->template 1591 15 ())
(1594 #f 1593 164 ())
(1595 instruction-with-template 1591 25 ())
(1596 #f 1595 9 ())
(1597 instruction-with-location 1591 35 ())
(1598 #f 1597 9 ())
(1599 instruction-with-literal 1591 45 ())
(1600 #f 1599 9 ())
(1601 sequentially-2 1591 55 ())
(1602 #f 1601 44 ())
(1603 sequentially 1591 65 ())
(1604 loop 1603 94 ())
(1605 #f 1603 106 ())
(1606 loop 1605 16 ())
(1607 #f -57 #f ())
(1608 get-debug-data 1607 5 ())
(1609 saving-and-restoring 1607 15 ())
(1610 swap 1609 5 ())
(1611 with-fresh-compiler-state 1607 25 ())
(1612 #f 1611 57 ())
(1613 #f 1612 3 ())
(1614 #f 1612 7 ())
(1615 debug-flag-modifier 1607 35 ())
(1616 #f 1615 24 ())
(1617 debug-flag-accessor 1607 45 ())
(1618 #f 1617 24 ())
(1619 set-template-uid! 1607 55 ())
(1620 template-uid 1607 65 ())
(1621 #f -57 #f ())
(1622 make-assembly-state 1621 59 ())
(1623 astate-literals 1621 69 ())
(1624 set-astate-literals! 1621 79 ())
(1625 astate-count 1621 89 ())
(1626 set-astate-count! 1621 99 ())
(1627 astate-pc 1621 109 ())
(1628 set-astate-pc! 1621 119 ())
(1629 astate-code-vector 1621 129 ())
(1630 #f 1621 143 ())
(1631 #f -53 #f ())
(1632 node-type 1631 5 ())
(1633 reconstruct-type 1631 15 ())
(1634 reconstruct 1631 25 ())
(1635 #f 1631 39 ())
(1636 define-reconstructor 1631 55 ())
(1637 #f 1631 73 ())
(1638 #f 1637 83 ())
(1639 #f 1637 222 ())
(1640 careful-codomain 1631 87 ())
(1641 reconstruct-body 1631 97 ())
(1642 #f 1631 135 ())
(1643 reconstruct-name 1631 149 ())
(1644 reconstruct-call 1631 159 ())
(1645 lose 1644 71 ())
(1646 #f 1645 3 ())
(1647 loop 1644 135 ())
(1648 #f 1631 177 ())
(1649 #f 1631 199 ())
(1650 #f 1631 221 ())
(1651 #f 1650 146 ())
(1652 fork-constraints 1631 235 ())
(1653 #f 1652 12 ())
(1654 #f 1631 253 ())
(1655 loop##2329 1654 9 ())
(1656 examine 1631 267 ())
(1657 #f 1631 285 ())
(1658 #f 1631 307 ())
(1659 #f 1658 58 ())
(1660 #f 1631 329 ())
(1661 #f 1631 351 ())
(1662 node->type 1631 365 ())
(1663 #f 1631 383 ())
(1664 #f 1631 393 ())
(1665 #f 1664 13 ())
(1666 #f 1664 95 ())
(1667 #f 1666 9 ())
(1668 #f 1664 173 ())
(1669 reconstruct-apply 1664 187 ())
(1670 #f 1669 71 ())
(1671 declare-operator-type 1664 329 ())
(1672 #f 1671 20 ())
(1673 #f 1664 503 ())
(1674 #f 1673 497 ())
(1675 constant-type 1674 503 ())
(1676 #f -58 #f ())
(1677 return-cont? 1676 15 ())
(1678 maybe-push-continuation 1676 25 ())
(1679 make-cont 1676 35 ())
(1680 fall-through-cont 1676 45 ())
(1681 #f -58 #f ())
(1682 make-startup-procedure 1681 5 ())
(1683 #f 1682 15 ())
(1684 grumble 1681 15 ())
(1685 note-caching 1681 25 ())
(1686 location-on-demand 1681 35 ())
(1687 #f 1686 5 ())
(1688 package-accessor-on-demand 1681 45 ())
(1689 #f 1688 5 ())
(1690 get-location-for-unassignable 1681 55 ())
(1691 #f 1690 96 ())
(1692 #f 1690 100 ())
(1693 get-location-for-undefined 1681 65 ())
(1694 #f 1693 95 ())
(1695 #f 1693 99 ())
(1696 get-location 1681 75 ())
(1697 win 1696 12 ())
(1698 #f -58 #f ())
(1699 diagnose-call-error 1698 5 ())
(1700 #f 1699 174 ())
(1701 type-check 1698 15 ())
(1702 #f 1701 118 ())
(1703 #f 1701 152 ())
(1704 compile 1698 25 ())
(1705 initial-cenv 1698 35 ())
(1706 compile-top 1698 45 ())
(1707 named-cont 1698 55 ())
(1708 ignore-values-cont? 1698 65 ())
(1709 deliver-value 1698 75 ())
(1710 #f -58 #f ())
(1711 compile-definition 1710 5 ())
(1712 #f 1711 58 ())
(1713 compile-scanned-form 1710 15 ())
(1714 #f -58 #f ())
(1715 shrink-segment 1714 5 ())
(1716 careful-sequentially 1714 15 ())
(1717 return-cont 1714 25 ())
(1718 #f -58 #f ())
(1719 compile-scanned-forms 1718 5 ())
(1720 recur 1719 113 ())
(1721 compile-and-run-scanned-forms 1718 15 ())
(1722 do-it 1721 25 ())
(1723 loop##2686 1721 35 ())
(1724 maybe-newline-after 1718 25 ())
(1725 #f 1724 10 ())
(1726 compile-and-run-file 1718 35 ())
(1727 #f 1726 5 ())
(1728 compile-and-run-forms 1718 45 ())
(1729 #f 1728 5 ())
(1730 compile-file 1718 55 ())
(1731 compile-form 1718 65 ())
(1732 #f -58 #f ())
(1733 push-all-but-last 1732 5 ())
(1734 recur 1733 23 ())
(1735 #f -58 #f ())
(1736 define-compilator 1735 5 ())
(1737 push-arguments 1735 15 ())
(1738 recur 1737 35 ())
(1739 compile-unknown-call 1735 25 ())
(1740 #f -58 #f ())
(1741 define-closed-compilator 1740 5 ())
(1742 define-compiler-primitive 1740 15 ())
(1743 n-ary-primitive-compilator 1740 25 ())
(1744 #f 1743 5 ())
(1745 define-n-ary-compiler-primitive 1740 35 ())
(1746 define-n-ary-constructor 1740 45 ())
(1747 #f 1746 15 ())
(1748 #f 1746 19 ())
(1749 simple-compilator 1740 55 ())
(1750 #f 1749 5 ())
(1751 simple-closed-compilator 1740 65 ())
(1752 #f 1751 5 ())
(1753 define-simple-primitive 1740 75 ())
(1754 define-stob-predicate 1740 85 ())
(1755 symbol-append 1740 95 ())
(1756 define-vector-primitives 1740 105 ())
(1757 def-prim 1756 24 ())
(1758 nargs->domain 1740 115 ())
(1759 loop##2584 1758 9 ())
(1760 define-data-struct-primitives 1740 125 ())
(1761 def-prim 1760 8 ())
(1762 loop##2614 1760 185 ())
(1763 direct-closed-compilator 1740 135 ())
(1764 #f 1763 5 ())
(1765 direct-compilator 1740 145 ())
(1766 #f 1765 5 ())
(1767 get-closed-compilator 1740 155 ())
(1768 #f -58 #f ())
(1769 set-type-check?! 1768 5 ())
(1770 generate-trap 1768 15 ())
(1771 name-node-binding 1768 25 ())
(1772 environment-level 1768 35 ())
(1773 really-bind-vars 1768 45 ())
(1774 #f 1773 25 ())
(1775 loop 1774 32 ())
(1776 bind-flat-vars 1768 55 ())
(1777 bind-vars 1768 65 ())
(1778 cont-name 1768 75 ())
(1779 ignore-values-cont 1768 85 ())
(1780 fall-through-cont? 1768 95 ())
(1781 compile-body 1768 105 ())
(1782 #f 1781 11 ())
(1783 #f 1782 48 ())
(1784 lookup-variables 1768 115 ())
(1785 loop 1784 20 ())
(1786 compile-lambda-code 1768 125 ())
(1787 compile-lambda 1768 135 ())
(1788 push-all-with-names 1768 145 ())
(1789 compile-redex 1768 155 ())
(1790 compile-call 1768 165 ())
(1791 compile-constant 1768 175 ())
(1792 #f 1768 189 ())
(1793 #f 1768 193 ())
(1794 #f 1793 5 ())
(1795 #f 1794 5 ())
(1796 #f 1768 219 ())
(1797 #f 1768 229 ())
(1798 #f 1797 17 ())
(1799 #f 1797 41 ())
(1800 #f 1797 67 ())
(1801 #f 1797 93 ())
(1802 #f 1797 119 ())
(1803 compile-begin 1797 153 ())
(1804 loop 1803 67 ())
(1805 #f 1797 220 ())
(1806 #f 1797 246 ())
(1807 compile-letrec 1797 330 ())
(1808 #f 1807 78 ())
(1809 #f 1807 172 ())
(1810 #f 1797 490 ())
(1811 #f -58 #f ())
(1812 #f 1811 9 ())
(1813 #f 1811 37 ())
(1814 loop##2459 1811 55 ())
(1815 #f 1811 110 ())
(1816 #f 1811 356 ())
(1817 #f 1816 5 ())
(1818 #f 1816 83 ())
(1819 #f 1816 87 ())
(1820 #f 1816 107 ())
(1821 #f 1816 111 ())
(1822 #f 1816 135 ())
(1823 #f 1816 139 ())
(1824 #f 1816 163 ())
(1825 #f 1816 167 ())
(1826 #f 1816 217 ())
(1827 #f 1826 113 ())
(1828 #f 1816 221 ())
(1829 #f 1816 249 ())
(1830 #f -58 #f ())
(1831 loop 1830 54 ())
(1832 location-for-reference 1830 135 ())
(1833 loop 1832 26 ())
(1834 #f -64 #f ())
(1835 eval 1834 5 ())
(1836 #f 1835 23 ())
(1837 load-into 1834 15 ())
(1838 #f 1837 11 ())
(1839 eval-from-file 1834 25 ())
(1840 #f 1839 14 ())
(1841 eval-scanned-forms 1834 35 ())
(1842 #f 1841 14 ())
(1843 invoke-template 1834 45 ())
(1844 load 1834 55 ())
(1845 #f 1844 41 ())
(1846 #f -46 #f ())
(1847 display-condition 1846 19 ())
(1848 #f 1847 9 ())
(1849 really-display-condition 1846 30 ())
(1850 #f 1849 237 ())
(1851 &disclose-condition 1846 144 ())
(1852 limited-write 1846 170 ())
(1853 recur 1852 20 ())
(1854 #f 1853 139 ())
(1855 #f 1854 22 ())
(1856 #f -68 #f ())
(1857 command-processor 1856 5 ())
(1858 loop 1857 74 ())
(1859 #f 1858 7 ())
(1860 #f 1859 5 ())
(1861 #f 1860 66 ())
(1862 #f 1859 9 ())
(1863 #f 1862 74 ())
(1864 #f 1862 175 ())
(1865 #f 1862 215 ())
(1866 #f 1865 10 ())
(1867 mini-load 1856 15 ())
(1868 read-string 1856 25 ())
(1869 loop 1868 21 ())
(1870 #f -40 #f ())
(1871 #f -38 #f ())
(1872 run-threads 1871 5 ())
(1873 #f 1872 5 ())
(1874 loop 1873 27 ())
(1875 #f 1874 5 ())
(1876 #f 1875 8 ())
(1877 run-threads-with-housekeeper 1871 15 ())
(1878 #f 1877 5 ())
(1879 loop 1878 30 ())
(1880 #f 1879 5 ())
(1881 #f 1880 65 ())
(1882 round-robin-event-handler 1871 25 ())
(1883 real-next-thread 1882 15 ())
(1884 next-thread 1882 21 ())
(1885 #f 1884 18 ())
(1886 asynchronous-event-handler 1882 27 ())
(1887 thread-event-handler 1882 33 ())
(1888 #f 1887 113 ())
(1889 make-counter 1871 35 ())
(1890 increment-counter! 1871 55 ())
(1891 decrement-counter! 1871 65 ())
(1892 #f -39 #f ())
(1893 root-scheduler 1892 5 ())
(1894 #f 1893 11 ())
(1895 #f 1894 5 ())
(1896 housekeeper 1895 5 ())
(1897 #f 1895 25 ())
(1898 make-root-event-handler 1892 15 ())
(1899 add-thread! 1898 35 ())
(1900 #f 1898 57 ())
(1901 #f 1898 61 ())
(1902 #f 1898 65 ())
(1903 root-wait 1892 45 ())
(1904 loop 1903 13 ())
(1905 #f 1904 24 ())
(1906 do-some-waiting 1892 80 ())
(1907 call-when-deadlocked! 1892 108 ())
(1908 spawn-output-forcers 1892 118 ())
(1909 #f 1908 36 ())
(1910 #f -44 #f ())
(1911 usual-resumer 1910 5 ())
(1912 #f 1911 5 ())
(1913 #f 1912 14 ())
(1914 initialize-rts 1910 15 ())
(1915 #f 1914 44 ())
(1916 #f 1915 7 ())
(1917 #f 1916 46 ())
(1918 #f 1917 7 ())
(1919 #f -69 #f ())
(1920 start 1919 5 ())
(1921 #f 1920 5 ())
(1922 #f 1921 5 ())
(1923 #f 1922 61 ())
(1924 make-built-in-structures 1919 15 ())
(1925 #f 1924 36 ())
(1926 #f 1924 56 ())
(1927 initialize-interaction-environment! 1919 25 ())
(1928 make-initial-package 1919 35 ())
(1929 #f 1928 16 ())
(1930 make-tower 1919 45 ())
(1931 #f -62 #f ())
(1932 inline-transform 1931 5 ())
(1933 #f 1932 56 ())
(1934 #f 1932 63 ())
(1935 make-substitution 1931 15 ())
(1936 #f 1935 27 ())
(1937 substitute 1931 25 ())
(1938 #f 1937 171 ())
(1939 #f 1937 255 ())
(1940 qualified->name 1931 55 ())
(1941 recur 1940 16 ())
(1942 get-qualified-env 1931 65 ())
(1943 #f -66 #f ())
(1944 operator 1943 5 ())
(1945 simple-interface 1943 15 ())
(1946 #f 1945 11 ())
(1947 package 1943 25 ())
(1948 loop##2868 1947 70 ())
(1949 transform 1943 35 ())
(1950 #f -60 #f ())
(1951 procedure 1950 45 ())
(1952 #f -59 #f ())
(1953 #f -59 #f ())
(1954 make-a-package 1953 5 ())
(1955 loser 1953 15 ())
(1956 *verify-later!* 1953 35 ())
(1957 verify-later! 1953 45 ())
(1958 set-verify-later! 1953 55 ())
(1959 note-name! 1953 65 ())
(1960 #f -65 #f ())
(1961 ensure-loaded 1960 5 ())
(1962 #f 1961 9 ())
(1963 #f 1961 13 ())
(1964 #f 1963 8 ())
(1965 #f 1964 6 ())
(1966 #f 1965 7 ())
(1967 #f -70 #f ())
(1968 #f 1967 1 ())
(1969 get-location 1968 3 ())
(1970 #f 1968 142 ())
(1971 #f 1970 476 ())
(1972 #f 1971 476 ())
(1973 #f 1972 489 ())
(1974 #f 1973 489 ())
(1975 #f 1974 490 ())
(1976 #f 1975 493 ())
(1977 #f 1976 498 ())
(1978 #f 1977 494 ())
(1979 #f 1978 494 ())
(1980 #f 1979 493 ())
(1981 #f 1980 468 ())
(1982 #f 1981 493 ())
(1983 #f 1982 506 ())
(1984 #f 1983 476 ())
(1985 #f 1984 498 ())
(1986 #f 1985 501 ())
(1987 #f 1986 493 ())
(1988 #f 1987 493 ())
(1989 #f 1988 493 ())
(1990 #f 1989 474 ())
(1991 #f 1990 463 ())
(1992 #f 1991 263 ())
(1993 #f 1991 311 ())
(1994 #f 1991 423 ())
(1995 #f 1991 501 ())
(1996 #f 1995 44 ())
(1997 #f 1995 124 ())
(1998 conc 1997 36 ())
(1999 #f 1998 18 ())
(2000 #f 1995 480 ())
(2001 #f 2000 472 ())
(2002 #f 2001 504 ())
(2003 #f 2002 12 ())
(2004 loop 2003 108 ())
(2005 #f 2003 188 ())
(2006 #f 2003 217 ())
(2007 #f 2003 395 ())
(2008 #f 2003 452 ())
(2009 #f 2002 411 ())
(2010 mem? 2009 186 ())
(2011 #f 2009 240 ())
(2012 #f 2002 489 ())
(2013 #f 2012 126 ())
(2014 loop##2871 2013 55 ())
(2015 #f 2012 174 ())
(2016 #f 2012 508 ())
(2017 #f 2016 499 ())
(2018 #f 2017 504 ())
(2019 #f 2018 491 ())
(2020 #f 2019 468 ())
(2021 #f 2020 491 ())
(2022 #f 2021 491 ())
(2023 #f 2022 468 ())
(2024 #f 2023 500 ())
(2025 #f 2024 477 ())
(2026 #f 2025 218 ())
(2027 #f 2025 461 ())
(2028 #f 2027 483 ())
(2029 #f 2028 484 ())
(2030 #f 2029 493 ())
(2031 #f 2030 493 ())
(2032 #f 2031 475 ())
(2033 #f 2032 493 ())
(2034 #f 2033 493 ())
(2035 #f 2034 471 ())
(2036 #f 2035 508 ())
(2037 #f 2036 481 ())
(2038 #f 2037 490 ())
(2039 #f 2038 481 ())
(2040 #f 2039 507 ())
(2041 #f 2040 484 ())
(2042 #f 2041 484 ())
(2043 #f 2042 507 ())
(2044 #f 2043 493 ())
(2045 #f 2044 493 ())
(2046 #f 2045 12 ())
(2047 #f 2046 440 ())
(2048 #f 2045 502 ())
(2049 #f 2048 496 ())
(2050 #f 2049 71 ())
(2051 loop 2050 86 ())
(2052 #f 2049 226 ())
(2053 loop 2052 86 ())
(2054 #f 2049 349 ())
(2055 loop 2054 86 ())
(2056 #f 2049 440 ())
(2057 loop 2056 86 ())
(2058 #f 2049 478 ())
(2059 #f 2058 54 ())
(2060 loop 2059 86 ())
(2061 #f 2058 145 ())
(2062 loop 2061 86 ())
(2063 #f 2058 236 ())
(2064 loop 2063 86 ())
(2065 #f 2058 327 ())
(2066 loop 2065 86 ())
(2067 #f 2058 501 ())
(2068 #f 2067 468 ())
(2069 #f 2068 22 ())
(2070 loop 2069 86 ())
(2071 #f 2068 484 ())
(2072 #f 2071 462 ())
(2073 #f 2072 464 ())
(2074 #f 2073 494 ())
(2075 #f 2074 477 ())
(2076 #f 2075 295 ())
(2077 #f 2075 457 ())
(2078 #f 2075 494 ())
(2079 #f 2078 12 ())
(2080 #f 2078 60 ())
(2081 #f 2078 204 ())
(2082 #f 2078 421 ())
(2083 #f 2078 499 ())
(2084 #f 2083 485 ())
(2085 #f 2084 482 ())
(2086 #f 2085 480 ())
(2087 #f 2086 479 ())
(2088 #f 2087 468 ())
(2089 #f 2088 503 ())
(2090 #f 2089 481 ())
(2091 #f 2090 12 ())
(2092 #f 2090 215 ())
(2093 #f 2090 263 ())
(2094 #f 2090 311 ())
(2095 #f 2094 140 ())
(2096 #f 2090 359 ())
(2097 #f 2096 318 ())
(2098 #f 2096 391 ())
(2099 #f 2090 478 ())
(2100 #f 2099 272 ())
(2101 #f 2099 320 ())
(2102 #f 2101 171 ())
(2103 parse-package-clauses 2099 376 ())
(2104 loop 2103 73 ())
(2105 #f 2099 382 ())
(2106 #f 2105 25 ())
(2107 #f 2106 144 ())
(2108 #f 2099 502 ())
(2109 #f 2108 140 ())
(2110 #f 2108 188 ())
(2111 loop 2110 32 ())
(2112 #f 2108 300 ())
(2113 #f 2108 380 ())
(2114 #f 2108 460 ())
(2115 loop 2114 47 ())
(2116 #f 2114 83 ())
(2117 #f 2114 105 ())
(2118 #f 2108 497 ())
(2119 #f 2118 44 ())
(2120 #f 2118 506 ())
(2121 #f 2120 468 ())
(2122 #f 2121 463 ())
(2123 #f 2122 468 ())
(2124 #f 2123 491 ())
(2125 #f 2124 454 ())
(2126 #f 2125 491 ())
(2127 #f 2126 477 ())
(2128 #f 2127 246 ())
(2129 #f 2127 381 ())
(2130 #f 2127 482 ())
(2131 #f 2130 502 ())
(2132 #f 2131 458 ())
(2133 #f 2132 508 ())
(2134 #f 2133 485 ())
(2135 #f 2134 468 ())
(2136 #f 2135 491 ())
(2137 #f 2136 499 ())
(2138 #f 2137 495 ())
(2139 #f 2138 483 ())
(2140 #f 2139 485 ())
(2141 #f 2140 481 ())
(2142 #f 2141 490 ())
(2143 #f 2142 481 ())
(2144 #f 2143 498 ())
(2145 #f 2144 484 ())
(2146 #f 2145 484 ())
(2147 #f 2146 475 ())
(2148 #f 2147 484 ())
(2149 #f 2148 493 ())
(2150 #f #f #f ())
-
