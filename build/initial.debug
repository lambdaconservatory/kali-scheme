; Package uid -> name
(0 low-structures)
(1 debug-low-structures)
(2 alt-features-structures)
(3 cheat-features-structures)
(4 the-interfaces)
(5 meta-module-system)
(6 run-time-structures)
(7 compiler-structures)
(8 initial-structures)
(9 debug-structures)
(10 usual-structures)
(11 alt-low-structures)
(12 compiler-structures)
(13 linker-structures)
(14 scheme-level-0)
(15 scheme-level-1)
(16 records)
(17 define-record-types)
(18 methods)
(19 number-i/o)
(20 fluids)
(21 wind)
(22 session-data)
(23 i/o)
(24 channel-i/o)
(25 conditions)
(26 writing)
(27 reading)
(28 scheme-level-2)
(29 features)
(30 templates)
(31 continuations)
(32 more-types)
(33 enumerated)
(34 architecture)
(35 exceptions)
(36 interrupts)
(37 threads)
(38 scheduler)
(39 root-scheduler)
(40 enum-case)
(41 queues)
(42 linked-queues)
(43 locks)
(44 usual-resumer)
(45 weak)
(46 display-conditions)
(47 tables)
(48 filenames)
(49 meta-types)
(50 interfaces)
(51 syntactic)
(52 usual-macros)
(53 reconstruction)
(54 packages)
(55 scan)
(56 debug-data)
(57 segments)
(58 compiler)
(59 defpackage)
(60 types)
(61 module-system)
(62 inline)
(63 environments)
(64 evaluation)
(65 ensures-loaded)
(66 for-reification)
(67 scheme)
(68 mini-command)
(69 initial-system)
-
; Location uid -> (name . package-uid)
(0 (current-cont . 14))
(1 (closure-template . 14))
(2 (continuation-ref . 14))
(3 (closure? . 14))
(4 (cell-set! . 14))
(5 (port-pending-eof? . 14))
(6 (complex? . 14))
(7 (arithmetic-shift . 14))
(8 (set-port-pending-eof?! . 14))
(9 (port-handler . 14))
(10 (signal-condition . 14))
(11 (integer? . 14))
(12 (session-data . 14))
(13 (make-closure . 14))
(14 (template-ref . 14))
(15 (set-session-data! . 14))
(16 (make-rectangular . 14))
(17 (channel? . 14))
(18 (open-channel . 14))
(19 (string=? . 14))
(20 (cell-ref . 14))
(21 (find-all . 14))
(22 (extended-number? . 14))
(23 (reverse-list->string . 14))
(24 (port-locked? . 14))
(25 (denominator . 14))
(26 (call-with-values . 14))
(27 (weak-pointer-ref . 14))
(28 (find-all-symbols . 14))
(29 (set-port-locked?! . 14))
(30 (code-vector? . 14))
(31 (port-status . 14))
(32 (pop . 14))
(33 (exp . 14))
(34 (sin . 14))
(35 (set-port-status! . 14))
(36 (make-extended-number . 14))
(37 (channel-os-index . 14))
(38 (cos . 14))
(39 (collect . 14))
(40 (external-lookup . 14))
(41 (tan . 14))
(42 (log . 14))
(43 (continuation-length . 14))
(44 (find-all-records . 14))
(45 (make-code-vector . 14))
(46 (cdr . 14))
(47 (bitwise-xor . 14))
(48 (car . 14))
(49 (string? . 14))
(50 (symbol? . 14))
(51 (set-cdr! . 14))
(52 (bitwise-not . 14))
(53 (vector? . 14))
(54 (closure-env . 14))
(55 (set-car! . 14))
(56 (bitwise-ior . 14))
(57 (port-buffer . 14))
(58 (number? . 14))
(59 (template-length . 14))
(60 (string-hash . 14))
(61 (pop-env . 14))
(62 (primitive-catch . 14))
(63 (set-port-buffer! . 14))
(64 (make-string . 14))
(65 (record? . 14))
(66 (make-vector . 14))
(67 (extended-number-set! . 14))
(68 (write-image . 14))
(69 (eq? . 14))
(70 (bitwise-and . 14))
(71 (code-vector-set! . 14))
(72 (location-id . 14))
(73 (set-location-id! . 14))
(74 (make-record . 14))
(75 (vector . 14))
(76 (intern . 14))
(77 (values . 14))
(78 (string-set! . 14))
(79 (unassigned . 14))
(80 (copy-bytes! . 14))
(81 (vector-set! . 14))
(82 (extended-number-ref . 14))
(83 (unspecific . 14))
(84 (channel-maybe-write . 14))
(85 (code-vector-ref . 14))
(86 (schedule-interrupt . 14))
(87 (record . 14))
(88 (set-interrupt-handlers! . 14))
(89 (eof-object? . 14))
(90 (record-set! . 14))
(91 (ascii->char . 14))
(92 (char->ascii . 14))
(93 (port-limit . 14))
(94 (set-enabled-interrupts! . 14))
(95 (external-value . 14))
(96 (make-immutable! . 14))
(97 (port-index . 14))
(98 (set-port-limit! . 14))
(99 (channel-status . 14))
(100 (current-thread . 14))
(101 (set-port-index! . 14))
(102 (string-ref . 14))
(103 (set-exception-handlers! . 14))
(104 (immutable? . 14))
(105 (set-current-thread! . 14))
(106 (vector-ref . 14))
(107 (exact? . 14))
(108 (write-char . 14))
(109 (symbol->string . 14))
(110 (make-polar . 14))
(111 (record-ref . 14))
(112 (eof-object . 14))
(113 (numerator . 14))
(114 (channel-id . 14))
(115 (extended-number-length . 14))
(116 (error . 14))
(117 (exact->inexact . 14))
(118 (inexact->exact . 14))
(119 (checked-record-set! . 14))
(120 (apply . 14))
(121 (memory-status . 14))
(122 (code-vector-length . 14))
(123 (floor . 14))
(124 (with-continuation . 14))
(125 (magnitude . 14))
(126 (nargs . 14))
(127 (char=? . 14))
(128 (char<? . 14))
(129 (continuation? . 14))
(130 (remainder . 14))
(131 (vm-return . 14))
(132 (false . 14))
(133 (angle . 14))
(134 (port? . 14))
(135 (string-length . 14))
(136 (external? . 14))
(137 (make-continuation . 14))
(138 (vector-length . 14))
(139 (port-lock . 14))
(140 (template? . 14))
(141 (rational? . 14))
(142 (add-finalizer! . 14))
(143 (checked-record-ref . 14))
(144 (channel-maybe-read . 14))
(145 (location? . 14))
(146 (set-port-lock! . 14))
(147 (make-port . 14))
(148 (external-name . 14))
(149 (pair? . 14))
(150 (make-external . 14))
(151 (port-data . 14))
(152 (record-length . 14))
(153 (external-call . 14))
(154 (get-cont-from-heap . 14))
(155 (real-part . 14))
(156 (real? . 14))
(157 (make-template . 14))
(158 (set-port-data! . 14))
(159 (imag-part . 14))
(160 (make-location . 14))
(161 (= . 14))
(162 (< . 14))
(163 (char? . 14))
(164 (channel-abort . 14))
(165 (close-channel . 14))
(166 (quotient . 14))
(167 (/ . 14))
(168 (weak-pointer? . 14))
(169 (- . 14))
(170 (continuation-set! . 14))
(171 (peek-char . 14))
(172 (+ . 14))
(173 (* . 14))
(174 (contents . 14))
(175 (sqrt . 14))
(176 (make-cell . 14))
(177 (read-char . 14))
(178 (set-contents! . 14))
(179 (push . 14))
(180 (make-weak-pointer . 14))
(181 (assq . 14))
(182 (trap . 14))
(183 (wait . 14))
(184 (cons . 14))
(185 (template-set! . 14))
(186 (time . 14))
(187 (location-defined? . 14))
(188 (asin . 14))
(189 (vm-extension . 14))
(190 (acos . 14))
(191 (set-location-defined?! . 14))
(192 (atan . 14))
(193 (loophole . 14))
(194 (define-syntax . 14))
(195 (begin . 14))
(196 (letrec-syntax . 14))
(197 (%file-name% . 14))
(198 (structure-ref . 14))
(199 (quote . 14))
(200 (lambda . 14))
(201 (define . 14))
(202 (if . 14))
(203 (let-syntax . 14))
(204 (letrec . 14))
(205 (flat-lambda . 14))
(206 (lap . 14))
(207 (primitive-procedure . 14))
(208 (set! . 14))
(209 (with-aliases . 14))
(210 (call . 14))
(211 (and . 14))
(212 (cond . 14))
(213 (do . 14))
(214 (let . 14))
(215 (let* . 14))
(216 (or . 14))
(217 (char->integer . 14))
(218 (integer->char . 14))
(219 (ascii-limit . 14))
(220 (ascii-whitespaces . 14))
(221 (procedure? . 14))
(222 (invoke-closure . 14))
(223 (primitive-cwcc . 14))
(224 (make-undefined-location . 14))
(225 (vector-unassigned? . 14))
(226 (string-copy . 14))
(227 (string->symbol . 14))
(228 (*the-symbol-table* . 14))
(229 (flush-the-symbol-table! . 14))
(230 (restore-the-symbol-table! . 14))
(231 (input-port? . 14))
(232 (output-port? . 14))
(233 (channel-read . 14))
(234 (buffer-length . 14))
(235 (channel-write . 14))
(236 (make-condition . 14))
(237 (signal . 14))
(238 (warn . 14))
(239 (syntax-error . 14))
(240 (call-error . 14))
(241 (case . 15))
(242 (quasiquote . 15))
(243 (syntax-rules . 15))
(244 (not . 15))
(245 (boolean? . 15))
(246 (eqv? . 15))
(247 (equal? . 15))
(248 (> . 15))
(249 (<= . 15))
(250 (>= . 15))
(251 (max . 15))
(252 (min . 15))
(253 (max-or-min . 15))
(254 (abs . 15))
(255 (zero? . 15))
(256 (positive? . 15))
(257 (negative? . 15))
(258 (even? . 15))
(259 (odd? . 15))
(260 (caar . 15))
(261 (cadr . 15))
(262 (cdar . 15))
(263 (cddr . 15))
(264 (caaar . 15))
(265 (caadr . 15))
(266 (cadar . 15))
(267 (caddr . 15))
(268 (cdaar . 15))
(269 (cdadr . 15))
(270 (cddar . 15))
(271 (cdddr . 15))
(272 (caaaar . 15))
(273 (caaadr . 15))
(274 (caadar . 15))
(275 (caaddr . 15))
(276 (cadaar . 15))
(277 (cadadr . 15))
(278 (caddar . 15))
(279 (cadddr . 15))
(280 (cdaaar . 15))
(281 (cdaadr . 15))
(282 (cdadar . 15))
(283 (cdaddr . 15))
(284 (cddaar . 15))
(285 (cddadr . 15))
(286 (cdddar . 15))
(287 (cddddr . 15))
(288 (null? . 15))
(289 (list . 15))
(290 (length . 15))
(291 (real-length . 15))
(292 (append . 15))
(293 (reverse . 15))
(294 (append-reverse . 15))
(295 (list-tail . 15))
(296 (list-ref . 15))
(297 (mem . 15))
(298 (memq . 15))
(299 (memv . 15))
(300 (member . 15))
(301 (ass . 15))
(302 (assv . 15))
(303 (assoc . 15))
(304 (list? . 15))
(305 (char>? . 15))
(306 (char>=? . 15))
(307 (char<=? . 15))
(308 (char-whitespace? . 15))
(309 (char-lower-case? . 15))
(310 (char-upper-case? . 15))
(311 (char-numeric? . 15))
(312 (char-alphabetic? . 15))
(313 (char-case-delta . 15))
(314 (make-character-map . 15))
(315 (upcase-map . 15))
(316 (char-upcase . 15))
(317 (downcase-map . 15))
(318 (char-downcase . 15))
(319 (char-ci-compare . 15))
(320 (char-ci=? . 15))
(321 (char-ci<? . 15))
(322 (char-ci<=? . 15))
(323 (char-ci>? . 15))
(324 (char-ci>=? . 15))
(325 (string . 15))
(326 (substring . 15))
(327 (string-append . 15))
(328 (string->list . 15))
(329 (list->string . 15))
(330 (string-fill! . 15))
(331 (make-string=? . 15))
(332 (string-ci=? . 15))
(333 (make-string<? . 15))
(334 (string<? . 15))
(335 (string-ci<? . 15))
(336 (string>? . 15))
(337 (string<=? . 15))
(338 (string>=? . 15))
(339 (string-ci>? . 15))
(340 (string-ci<=? . 15))
(341 (string-ci>=? . 15))
(342 (vector->list . 15))
(343 (list->vector . 15))
(344 (vector-fill! . 15))
(345 (map . 15))
(346 (map1 . 15))
(347 (map2+ . 15))
(348 (for-each . 15))
(349 (for-each1 . 15))
(350 (for-each2+ . 15))
(351 (delay . 15))
(352 (make-promise . 15))
(353 (force . 15))
(354 (unspecific . 15))
(355 (reduce . 15))
(356 (filter . 15))
(357 (pos . 15))
(358 (posq . 15))
(359 (posv . 15))
(360 (position . 15))
(361 (any . 15))
(362 (every . 15))
(363 (sublist . 15))
(364 (last . 15))
(365 (insert . 15))
(366 (inexact? . 15))
(367 (modulo . 15))
(368 (ceiling . 15))
(369 (truncate . 15))
(370 (round . 15))
(371 (gcd . 15))
(372 (euclid . 15))
(373 (lcm . 15))
(374 (expt . 15))
(375 (raise-to-integer-power . 15))
(376 (rationalize . 15))
(377 (simplest-rational . 15))
(378 (record-type . 16))
(379 (*record-type-uid* . 16))
(380 (*record-type* . 16))
(381 (make-record-type . 16))
(382 (record-type? . 16))
(383 (record-type-uid . 16))
(384 (record-type-name . 16))
(385 (record-type-field-names . 16))
(386 (record-type-discloser . 16))
(387 (record-field-index . 16))
(388 (record-constructor . 16))
(389 (record-accessor . 16))
(390 (record-modifier . 16))
(391 (record-predicate . 16))
(392 (define-record-discloser . 16))
(393 (disclose-record . 16))
(394 (default-record-discloser . 16))
(395 (:record-type . 16))
(396 (define-record-type . 17))
(397 (define-constructor . 17))
(398 (define-accessors . 17))
(399 (define-accessor . 17))
(400 (:simple-type . 18))
(401 (really-make-simple-type . 18))
(402 (simple-type-id . 18))
(403 (simple-type-priority . 18))
(404 (simple-type-predicate . 18))
(405 (simple-type-superiors . 18))
(406 (simple-type? . 18))
(407 (make-simple-type . 18))
(408 (compute-priority . 18))
(409 (*increment* . 18))
(410 (%type-priority . 18))
(411 (%type-predicate . 18))
(412 (%same-type? . 18))
(413 (define-simple-type . 18))
(414 (:syntax . 18))
(415 (:values . 18))
(416 (value? . 18))
(417 (:value . 18))
(418 (:zero . 18))
(419 (:number . 18))
(420 (:complex . 18))
(421 (:real . 18))
(422 (:rational . 18))
(423 (:integer . 18))
(424 (:exact-integer . 18))
(425 (:boolean . 18))
(426 (:symbol . 18))
(427 (:char . 18))
(428 (:null . 18))
(429 (:pair . 18))
(430 (:vector . 18))
(431 (:string . 18))
(432 (:procedure . 18))
(433 (:input-port . 18))
(434 (:output-port . 18))
(435 (:eof-object . 18))
(436 (:record . 18))
(437 (record-type-priority . 18))
(438 (:method-info . 18))
(439 (really-make-method-info . 18))
(440 (method-info-proc . 18))
(441 (method-info-n-ary? . 18))
(442 (method-info-types . 18))
(443 (method-info? . 18))
(444 (make-method-info . 18))
(445 (empty-method-list . 18))
(446 (insert-method . 18))
(447 (same-applicability? . 18))
(448 (every2 . 18))
(449 (more-specific? . 18))
(450 (more-specific-type? . 18))
(451 (:method-table . 18))
(452 (really-make-method-table . 18))
(453 (method-table-id . 18))
(454 (method-table-set-perform! . 18))
(455 (method-table-get-perform . 18))
(456 (make-generic . 18))
(457 (method-table-prototype . 18))
(458 (method-table-methods . 18))
(459 (set-method-table-methods! . 18))
(460 (method-table? . 18))
(461 (make-method-table . 18))
(462 (make-cell-for-generic . 18))
(463 (add-to-method-table! . 18))
(464 (set-final-method! . 18))
(465 (apply-generic . 18))
(466 (define-generic . 18))
(467 (methods->perform . 18))
(468 (last-action . 18))
(469 (one-action . 18))
(470 (argument-sequence-predicate . 18))
(471 (check-for-next . 18))
(472 (check-next . 18))
(473 (method-info . 18))
(474 (method-internal . 18))
(475 (with-next-method . 18))
(476 (define-method . 18))
(477 (&add-method! . 18))
(478 (add-method! . 18))
(479 (&type-predicate . 18))
(480 (type-predicate . 18))
(481 (&type-priority . 18))
(482 (type-priority . 18))
(483 (&type-superiors . 18))
(484 (type-superiors . 18))
(485 (&same-type? . 18))
(486 (same-type? . 18))
(487 (:singleton . 18))
(488 (singleton . 18))
(489 (singleton-value . 18))
(490 (compare-to . 18))
(491 (&disclose . 18))
(492 (disclose . 18))
(493 (proc->discloser . 18))
(494 (&number->string . 19))
(495 (number->string . 19))
(496 (integer->string . 19))
(497 (string->number . 19))
(498 (&really-string->number . 19))
(499 (really-string->number . 19))
(500 (:integer-string . 19))
(501 (set-exactness . 19))
(502 (string->integer . 19))
(503 (channels . 26))
(504 (code-vectors . 26))
(505 (:thread . 20))
(506 (make-thread . 20))
(507 (thread-dynamic-env . 20))
(508 (get-dynamic-env . 20))
(509 (set-dynamic-env! . 20))
(510 (initialize-dynamic-state! . 20))
(511 (with-dynamic-env . 20))
(512 (empty-dynamic-env . 20))
(513 (:fluid . 20))
(514 (make-fluid . 20))
(515 (fluid-top-level-value . 20))
(516 (set-fluid-top-level-value! . 20))
(517 (fluid . 20))
(518 (set-fluid! . 20))
(519 (let-fluid . 20))
(520 (let-fluids . 20))
(521 (fluid-lookup . 20))
(522 (define-enumeration . 33))
(523 (components . 33))
(524 (enum . 33))
(525 (enumerand->name . 33))
(526 (name->enumerand . 33))
(527 (lookup-enumerand . 33))
(528 (architecture-version . 34))
(529 (bits-used-per-byte . 34))
(530 (maximum-stack-args . 34))
(531 (define-instruction-set . 34))
(532 (op . 34))
(533 (op-enumeration . 34))
(534 (op-count . 34))
(535 (opcode-arg-specs . 34))
(536 (interrupt . 34))
(537 (interrupt-enumeration . 34))
(538 (interrupt-count . 34))
(539 (exception . 34))
(540 (exception-enumeration . 34))
(541 (exception-count . 34))
(542 (time-option . 34))
(543 (time-option-enumeration . 34))
(544 (time-option-count . 34))
(545 (memory-status-option . 34))
(546 (memory-status-option-enumeration . 34))
(547 (memory-status-option-count . 34))
(548 (channel-status-option . 34))
(549 (channel-status-option-enumeration . 34))
(550 (channel-status-option-count . 34))
(551 (port-status-options . 34))
(552 (port-status-options-enumeration . 34))
(553 (port-status-options-count . 34))
(554 (stob . 34))
(555 (stob-enumeration . 34))
(556 (stob-count . 34))
(557 (least-b-vector-type . 34))
(558 (stob-data . 34))
(559 (linked-queues . 37))
(560 (primitives . 37))
(561 (:queue . 41))
(562 (really-make-queue . 41))
(563 (queue-tail . 41))
(564 (set-queue-tail! . 41))
(565 (queue-head . 41))
(566 (set-queue-head! . 41))
(567 (queue-uid . 41))
(568 (queue? . 41))
(569 (*queue-uid* . 41))
(570 (make-queue . 41))
(571 (queue-empty? . 41))
(572 (enqueue! . 41))
(573 (queue-front . 41))
(574 (dequeue! . 41))
(575 (on-queue? . 41))
(576 (delete-from-queue! . 41))
(577 (delete-from-queue-if! . 41))
(578 (queue->list . 41))
(579 (queue-length . 41))
(580 (*condition-types* . 25))
(581 (condition-supertypes . 25))
(582 (define-condition-type . 25))
(583 (condition-predicate . 25))
(584 (condition? . 25))
(585 (condition-type . 25))
(586 (condition-stuff . 25))
(587 (error? . 25))
(588 (call-error? . 25))
(589 (read-error? . 25))
(590 (exception? . 25))
(591 (exception-opcode . 25))
(592 (exception-reason . 25))
(593 (exception-arguments . 25))
(594 (make-exception . 25))
(595 (warning? . 25))
(596 (syntax-error? . 25))
(597 (interrupt? . 25))
(598 (*session-data-initializers* . 22))
(599 (make-session-data-slot! . 22))
(600 (session-data-ref . 22))
(601 (session-data-set! . 22))
(602 (initialize-session-data! . 22))
(603 (initialize-interrupts! . 36))
(604 (interrupt-handlers . 36))
(605 (set-interrupt-handler! . 36))
(606 (no-interrupts . 36))
(607 (all-interrupts . 36))
(608 (with-interrupts-inhibited . 36))
(609 (with-interrupts-allowed . 36))
(610 (disable-interrupts! . 36))
(611 (enable-interrupts! . 36))
(612 (with-interrupts . 36))
(613 (enabled-interrupts . 36))
(614 (*post-gc-procedures* . 36))
(615 (call-after-gc! . 36))
(616 (post-gc-handler . 36))
(617 (required-post-gc-space . 36))
(618 (space-shortage-handler . 36))
(619 (call-before-heap-overflow! . 36))
(620 (dynamic-wind . 21))
(621 (call-with-current-continuation . 21))
(622 (continuation->procedure . 21))
(623 (:point . 21))
(624 (make-point . 21))
(625 (point-parent . 21))
(626 (point-dynamic-env . 21))
(627 (point-out . 21))
(628 (point-in . 21))
(629 (point-depth . 21))
(630 (root-point . 21))
(631 ($dynamic-point . 21))
(632 (get-dynamic-point . 21))
(633 (env-dynamic-point . 21))
(634 (let-dynamic-point . 21))
(635 (travel-to-point! . 21))
(636 (template-overhead . 30))
(637 (template-code . 30))
(638 (template-info . 30))
(639 (set-template-code! . 30))
(640 (set-template-info! . 30))
(641 (:closure . 32))
(642 (:code-vector . 32))
(643 (:location . 32))
(644 (:template . 32))
(645 (:channel . 32))
(646 (:port . 32))
(647 (:weak-pointer . 32))
(648 (:external . 32))
(649 (continuation-cont . 31))
(650 (continuation-pc . 31))
(651 (continuation-template . 31))
(652 (continuation-env . 31))
(653 (continuation-overhead . 31))
(654 (continuation-arg . 31))
(655 (continuation-arg-count . 31))
(656 (continuation-parent . 31))
(657 (:continuation . 31))
(658 (define-exception-handler . 35))
(659 (signal-exception . 35))
(660 (exception-handlers . 35))
(661 (make-opcode-generic! . 35))
(662 (really-signal-condition . 35))
(663 (with-handler . 35))
(664 ($condition-handlers . 35))
(665 (initialize-exceptions! . 35))
(666 (last-resort-condition-handler . 35))
(667 (report-utter-lossage . 35))
(668 (continuation-preview . 35))
(669 (ignore-errors . 35))
(670 (*wna-handlers* . 35))
(671 (define-wna-handler . 35))
(672 (op/check-nargs= . 35))
(673 (wna-lose . 35))
(674 (comparison-wna . 35))
(675 (:q-entry . 42))
(676 (make-q-entry . 42))
(677 (q-entry-next . 42))
(678 (set-q-entry-next! . 42))
(679 (q-entry-prev . 42))
(680 (set-q-entry-prev! . 42))
(681 (q-entry-data . 42))
(682 (q-entry? . 42))
(683 (queue? . 42))
(684 (make-queue . 42))
(685 (queue-empty? . 42))
(686 (enqueue! . 42))
(687 (queue-head . 42))
(688 (dequeue! . 42))
(689 (delete-queue-entry! . 42))
(690 (queue->list . 42))
(691 (queue-length . 42))
(692 (delete-from-queue! . 42))
(693 (:thread . 37))
(694 (really-make-thread . 37))
(695 (thread-name . 37))
(696 (thread-uid . 37))
(697 (thread-current-task . 37))
(698 (set-thread-current-task! . 37))
(699 (thread-events . 37))
(700 (set-thread-events! . 37))
(701 (thread-data . 37))
(702 (set-thread-data! . 37))
(703 (thread-scheduler . 37))
(704 (set-thread-scheduler! . 37))
(705 (thread-time . 37))
(706 (set-thread-time! . 37))
(707 (thread-queues . 37))
(708 (set-thread-queues! . 37))
(709 (thread-continuation . 37))
(710 (set-thread-continuation! . 37))
(711 (thread-dynamic-env . 37))
(712 (thread? . 37))
(713 (*thread-uid* . 37))
(714 (make-thread . 37))
(715 (thread-top-level . 37))
(716 (thread-uid->thread . 37))
(717 (all-threads . 37))
(718 (add-event! . 37))
(719 (thunk->continuation . 37))
(720 (compose-continuation . 37))
(721 (make-thread-queue . 37))
(722 (thread-queue-empty? . 37))
(723 (thread-queue-head . 37))
(724 (enqueue-thread! . 37))
(725 (exclusively-enqueue-thread! . 37))
(726 (dequeue-thread! . 37))
(727 (remove-thread-from-queues! . 37))
(728 (*time-limit* . 37))
(729 (current-thread . 37))
(730 (set-current-thread! . 37))
(731 (event-type . 37))
(732 (event-type-enumeration . 37))
(733 (event-type-count . 37))
(734 (run . 37))
(735 (return-values-to-thread! . 37))
(736 (run-next-thread . 37))
(737 (min . 37))
(738 (switch-to-thread . 37))
(739 (handle-timer-interrupt . 37))
(740 (debit-thread-times! . 37))
(741 (make-ready . 37))
(742 (suspend . 37))
(743 (suspend-to . 37))
(744 (block . 37))
(745 (relinquish-timeslice . 37))
(746 (upcall . 37))
(747 (propogate-upcall . 37))
(748 (kill-thread! . 37))
(749 (wait . 37))
(750 (waiting? . 37))
(751 (interrupt-thread . 37))
(752 (get-next-event! . 37))
(753 (event-pending? . 37))
(754 (schedule-event . 37))
(755 (schedule-wakeup . 37))
(756 (show-running . 37))
(757 (running? . 37))
(758 (spawn . 37))
(759 (spawn-on-root . 37))
(760 (spawn-on-scheduler . 37))
(761 (schedule-interrupt! . 37))
(762 (cancel-timer-interrupt! . 37))
(763 (interrupt-timer-time . 37))
(764 (real-time . 37))
(765 (message . 37))
(766 (with-threads . 37))
(767 (start-multitasking . 37))
(768 (deadlock? . 37))
(769 (terminate? . 37))
(770 (terminate-current-thread . 37))
(771 (root-scheduler-slot . 37))
(772 (root-scheduler . 37))
(773 (sleep . 37))
(774 (*dozers* . 37))
(775 (insert . 37))
(776 (wake-some-threads . 37))
(777 (:lock . 43))
(778 (really-make-lock . 43))
(779 (lock-uid . 43))
(780 (lock-queue . 43))
(781 (lock-owner-uid . 43))
(782 (set-lock-owner-uid! . 43))
(783 (lock? . 43))
(784 (*lock-uid* . 43))
(785 (make-lock . 43))
(786 (obtain-lock . 43))
(787 (maybe-obtain-lock . 43))
(788 (release-lock . 43))
(789 (:port-handler . 23))
(790 (make-port-handler . 23))
(791 (port-handler-buffer-proc . 23))
(792 (port-handler-close . 23))
(793 (port-handler-discloser . 23))
(794 (port-handler? . 23))
(795 (disclose-port . 23))
(796 (obtain-port-lock . 23))
(797 (maybe-obtain-port-lock . 23))
(798 (release-port-lock . 23))
(799 (initialize-i/o-handlers! . 23))
(800 (one-arg-proc->handler . 23))
(801 (two-arg-proc->handler . 23))
(802 (read-char-handler . 23))
(803 (fill-port-buffer! . 23))
(804 (write-char-handler . 23))
(805 (empty-port-buffer! . 23))
(806 (port-flushed? . 23))
(807 (set-port-flushed?! . 23))
(808 (close-input-port . 23))
(809 (close-output-port . 23))
(810 (define-port-op . 23))
(811 (real-char-ready? . 23))
(812 (read-block . 23))
(813 (really-read-block . 23))
(814 (buffer-length . 23))
(815 (read-more . 23))
(816 (okay-limits? . 23))
(817 (write-block . 23))
(818 (write-string . 23))
(819 (write-buffered-block . 23))
(820 (write-unbuffered-block . 23))
(821 (force-output . 23))
(822 (really-force-output . 23))
(823 (default-buffer-size . 23))
(824 (open-port? . 23))
(825 (open-port-mask . 23))
(826 (input-port-mask . 23))
(827 (open-input-port-mask . 23))
(828 (open-input-port-status . 23))
(829 (open-input-port? . 23))
(830 (make-input-port-closed! . 23))
(831 (make-input-port . 23))
(832 (okay-buffer? . 23))
(833 (output-port-mask . 23))
(834 (open-output-port-mask . 23))
(835 (open-output-port-status . 23))
(836 (open-output-port? . 23))
(837 (make-output-port-closed! . 23))
(838 (make-output-port . 23))
(839 (make-unbuffered-output-port . 23))
(840 (null-output-port-handler . 23))
(841 (make-null-output-port . 23))
(842 (*flush-these-ports* . 23))
(843 (initialize-output-port-list! . 23))
(844 (periodically-force-output! . 23))
(845 (output-port-forcers . 23))
(846 (make-forcing-thunk . 23))
(847 ($current-input-port . 23))
(848 ($current-output-port . 23))
(849 ($current-error-port . 23))
(850 ($current-noise-port . 23))
(851 (current-input-port . 23))
(852 (current-output-port . 23))
(853 (current-error-port . 23))
(854 (current-noise-port . 23))
(855 (initialize-i/o . 23))
(856 (with-current-ports . 23))
(857 (call-with-current-input-port . 23))
(858 (call-with-current-output-port . 23))
(859 (call-with-current-noise-port . 23))
(860 (silently . 23))
(861 (newline . 23))
(862 (char-ready? . 23))
(863 (output-port-option . 23))
(864 (input-port-option . 23))
(865 (message . 23))
(866 (write . 26))
(867 (recurring-write . 26))
(868 (write-boolean . 26))
(869 (write-number . 26))
(870 (write-char-literal . 26))
(871 (character-name . 26))
(872 (write-string-literal . 26))
(873 (write-list . 26))
(874 (quotation? . 26))
(875 (write-vector . 26))
(876 (write-other . 26))
(877 (display-type-name . 26))
(878 (display . 26))
(879 (read . 27))
(880 (sub-read-carefully . 27))
(881 (reader-token-marker . 27))
(882 (make-reader-token . 27))
(883 (reader-token? . 27))
(884 (close-paren . 27))
(885 (dot . 27))
(886 (sub-read . 27))
(887 (read-dispatch-vector . 27))
(888 (read-terminating?-vector . 27))
(889 (set-standard-syntax! . 27))
(890 (set-standard-read-macro! . 27))
(891 (sub-read-list . 27))
(892 (gobble-line . 27))
(893 (*sharp-macros* . 27))
(894 (define-sharp-macro . 27))
(895 (sub-read-token . 27))
(896 (parse-token . 27))
(897 (strange-symbol-names . 27))
(898 (p-c-v . 27))
(899 (preferred-case . 27))
(900 (reading-error . 27))
(901 (primitives . 24))
(902 (input-channel-handler . 24))
(903 (input-channel->port . 24))
(904 (output-channel-handler . 24))
(905 (make-unbuffered-output-channel-handler . 24))
(906 (output-channel->port . 24))
(907 (maybe-force-output . 24))
(908 (maybe-open-file . 24))
(909 (open-input-file . 24))
(910 (open-output-file . 24))
(911 (call-with-input-file . 24))
(912 (call-with-output-file . 24))
(913 (with-input-from-file . 24))
(914 (with-output-to-file . 24))
(915 (steal-channel-port! . 24))
(916 (really-steal-channel-port! . 24))
(917 (initialize-channel-i/o! . 24))
(918 (i/o-completion-handler . 24))
(919 (waiting-for-i/o? . 24))
(920 (wait-for-channel . 24))
(921 (steal-channel! . 24))
(922 (i/o-wait-count-slot . 24))
(923 (i/o-wait-count . 24))
(924 (increment-i/o-wait-count! . 24))
(925 (decrement-i/o-wait-count! . 24))
(926 (i/o-wait-queues-slot . 24))
(927 (i/o-wait-queue . 24))
(928 (make-i/o-wait-queues . 24))
(929 (:table . 47))
(930 (really-make-table . 47))
(931 (table-set!-procedure . 47))
(932 (set-table-set!-procedure! . 47))
(933 (table-ref-procedure . 47))
(934 (set-table-ref-procedure! . 47))
(935 (table-data . 47))
(936 (set-table-data! . 47))
(937 (table-size . 47))
(938 (set-table-size! . 47))
(939 (table? . 47))
(940 (table-ref . 47))
(941 (table-set! . 47))
(942 (linear-table-size-limit . 47))
(943 (next-table-size . 47))
(944 (make-table-maker . 47))
(945 (null-entry . 47))
(946 (new-entry . 47))
(947 (entry-value . 47))
(948 (entry-key . 47))
(949 (set-entry-value! . 47))
(950 (make-assoc . 47))
(951 (make-linear-table-ref . 47))
(952 (make-linear-table-set! . 47))
(953 (make->hash-table . 47))
(954 (make-hash-table-ref . 47))
(955 (make-hash-table-set! . 47))
(956 (expand-hash-table! . 47))
(957 (table-enter-alist! . 47))
(958 (table-expand-table! . 47))
(959 (table-walk . 47))
(960 (really-table-walk . 47))
(961 (alist-walk . 47))
(962 (make-table-immutable! . 47))
(963 (table->entry-list . 47))
(964 (default-table-hash-function . 47))
(965 (symbol-hash . 47))
(966 (make-table . 47))
(967 (make-string-table . 47))
(968 (make-symbol-table . 47))
(969 (make-integer-table . 47))
(970 (:meta-type . 49))
(971 (really-make-type . 49))
(972 (type-info . 49))
(973 (type-more . 49))
(974 (type-mask . 49))
(975 (meta-type? . 49))
(976 (make-type . 49))
(977 (name->type-table . 49))
(978 (mask->name-table . 49))
(979 (name->type . 49))
(980 (set-type-name! . 49))
(981 (*mask* . 49))
(982 (new-type-bit . 49))
(983 (mask->type . 49))
(984 (bottom-type . 49))
(985 (error-type . 49))
(986 (bottom-type? . 49))
(987 (new-atomic-type . 49))
(988 (named-atomic-type . 49))
(989 (syntax-type . 49))
(990 (other-static-type . 49))
(991 (empty-rail-type . 49))
(992 (rail-type . 49))
(993 (make-optional-type . 49))
(994 (make-rest-type . 49))
(995 (head-type . 49))
(996 (head-type-really . 49))
(997 (tail-type . 49))
(998 (empty-rail-type? . 49))
(999 (rest-type? . 49))
(1000 (optional-type? . 49))
(1001 (mask/no-values . 49))
(1002 (mask/two-or-more . 49))
(1003 (mask/&rest . 49))
(1004 (value-type . 49))
(1005 (mask/value . 49))
(1006 (value-type? . 49))
(1007 (any-values-type . 49))
(1008 (any-arguments-type . 49))
(1009 (mask/one-or-more . 49))
(1010 (same-type? . 49))
(1011 (subtype? . 49))
(1012 (meet-type . 49))
(1013 (other-type-info . 49))
(1014 (p . 49))
(1015 (meet-rail . 49))
(1016 (meet-procedure . 49))
(1017 (meet? . 49))
(1018 (meet-procedure? . 49))
(1019 (join-type . 49))
(1020 (join-rail . 49))
(1021 (join-procedure . 49))
(1022 (number-hierarchy . 49))
(1023 (integer-type . 49))
(1024 (rational-type . 49))
(1025 (real-type . 49))
(1026 (complex-type . 49))
(1027 (number-type . 49))
(1028 (exact-type . 49))
(1029 (inexact-type . 49))
(1030 (exact-integer-type . 49))
(1031 (boolean-type . 49))
(1032 (pair-type . 49))
(1033 (null-type . 49))
(1034 (record-type . 49))
(1035 (any-procedure-type . 49))
(1036 (other-value-type . 49))
(1037 (mask/other . 49))
(1038 (make-other-type . 49))
(1039 (char-type . 49))
(1040 (unspecific-type . 49))
(1041 (string-type . 49))
(1042 (symbol-type . 49))
(1043 (vector-type . 49))
(1044 (escape-type . 49))
(1045 (structure-type . 49))
(1046 (mask/procedure . 49))
(1047 (procedure-type . 49))
(1048 (make-procedure-type . 49))
(1049 (procedure-type-domain . 49))
(1050 (procedure-type-codomain . 49))
(1051 (restrictive? . 49))
(1052 (sexp->type . 49))
(1053 (sexp->values-type . 49))
(1054 (type->sexp . 49))
(1055 (atomic-type->sexp . 49))
(1056 (rail-type->sexp . 49))
(1057 (disjoin-type . 49))
(1058 (disjoin-rest . 49))
(1059 (mask/number . 49))
(1060 (make-some-values-type . 49))
(1061 (proc . 49))
(1062 (some-values . 49))
(1063 (procedure-type? . 49))
(1064 (fixed-arity-procedure-type? . 49))
(1065 (procedure-type-arity . 49))
(1066 (procedure-type-argument-types . 49))
(1067 (usual-operator-type . 51))
(1068 (:operator . 51))
(1069 (make-operator . 51))
(1070 (operator-name . 51))
(1071 (operator-uid . 51))
(1072 (operator-nargs . 51))
(1073 (operator-type . 51))
(1074 (set-operator-type! . 51))
(1075 (operator? . 51))
(1076 (get-operator . 51))
(1077 (*operator-uid* . 51))
(1078 (operators-table . 51))
(1079 (number-of-operators . 51))
(1080 (the-operators . 51))
(1081 (make-operator-table . 51))
(1082 (operator-table-ref . 51))
(1083 (operator-lookup . 51))
(1084 (operator-define! . 51))
(1085 (:node . 51))
(1086 (really-make-node . 51))
(1087 (node-plist . 51))
(1088 (set-node-plist! . 51))
(1089 (node-form . 51))
(1090 (node-operator-id . 51))
(1091 (node? . 51))
(1092 (make-node . 51))
(1093 (node-ref . 51))
(1094 (node-set! . 51))
(1095 (node-operator . 51))
(1096 (node-predicate . 51))
(1097 (make-similar-node . 51))
(1098 (:generated . 51))
(1099 (make-generated . 51))
(1100 (generated-parent-name . 51))
(1101 (generated-env . 51))
(1102 (generated-token . 51))
(1103 (generated-symbol . 51))
(1104 (generated? . 51))
(1105 (generate-name . 51))
(1106 (generated-uid . 51))
(1107 (*generated-uid* . 51))
(1108 (name->symbol . 51))
(1109 (name-hash . 51))
(1110 (make-name-table . 51))
(1111 (desyntaxify . 51))
(1112 (:transform . 51))
(1113 (really-make-transform . 51))
(1114 (transform-id . 51))
(1115 (transform-source . 51))
(1116 (transform-aux-names . 51))
(1117 (transform-type . 51))
(1118 (transform-env . 51))
(1119 (transform-procedure . 51))
(1120 (transform? . 51))
(1121 (make-transform . 51))
(1122 (maybe-transform . 51))
(1123 (bind-aliases . 51))
(1124 (make-name-generator . 51))
(1125 (same-denotation? . 51))
(1126 (binding? . 51))
(1127 (binding-type . 51))
(1128 (binding-place . 51))
(1129 (binding-static . 51))
(1130 (set-binding-place! . 51))
(1131 (make-binding . 51))
(1132 (clobber-binding! . 51))
(1133 (impose-type . 51))
(1134 (forget-integration . 51))
(1135 (classify . 51))
(1136 (call-node? . 51))
(1137 (name-node? . 51))
(1138 (classify-literal . 51))
(1139 (classify-call . 51))
(1140 (classify-name . 51))
(1141 (operator/name . 51))
(1142 (classify-macro-application . 51))
(1143 (classify-transform-application . 51))
(1144 (maybe-transform-call . 51))
(1145 (classify-operator-form . 51))
(1146 (classifiers . 51))
(1147 (define-classifier . 51))
(1148 (unspecific-node . 51))
(1149 (define-node? . 51))
(1150 (define-syntax-node? . 51))
(1151 (funny-name/source-file-name . 51))
(1152 (bind-source-file-name . 51))
(1153 (names? . 51))
(1154 (this-long? . 51))
(1155 (at-least-this-long? . 51))
(1156 (specs? . 51))
(1157 (lookup . 51))
(1158 (bind1 . 51))
(1159 (bind . 51))
(1160 (bindrec . 51))
(1161 (literal? . 51))
(1162 (number-of-required-args . 51))
(1163 (n-ary? . 51))
(1164 (normalize-formals . 51))
(1165 (syntax? . 51))
(1166 (name? . 51))
(1167 (unbound? . 51))
(1168 (define-usual-suspects . 51))
(1169 (process-syntax . 51))
(1170 (get-funny . 51))
(1171 (funny-name/reflective-tower . 51))
(1172 (reflective-tower . 51))
(1173 (scan-body . 51))
(1174 (scan-body-forms . 51))
(1175 (body-lossage . 51))
(1176 (begin-node? . 51))
(1177 (variable-type . 51))
(1178 (variable-type? . 51))
(1179 (variable-value-type . 51))
(1180 (compatible-types? . 51))
(1181 (usual-variable-type . 51))
(1182 (undeclared-type . 51))
(1183 (funny-name/reader . 51))
(1184 (environment-reader . 51))
(1185 (schemify . 51))
(1186 (schemify1 . 51))
(1187 (schemifiers . 51))
(1188 (define-schemifier . 51))
(1189 (name->qualified . 51))
(1190 (schemify-sexp . 51))
(1191 (make-qualified . 51))
(1192 (qualified? . 51))
(1193 (qualified-parent-name . 51))
(1194 (qualified-symbol . 51))
(1195 (make-population . 45))
(1196 (add-to-population! . 45))
(1197 (weak-memq . 45))
(1198 (population-reduce . 45))
(1199 (population->list . 45))
(1200 (walk-population . 45))
(1201 (:interface . 50))
(1202 (really-make-interface . 50))
(1203 (interface-name . 50))
(1204 (set-interface-name! . 50))
(1205 (interface-clients . 50))
(1206 (walk-method . 50))
(1207 (ref-method . 50))
(1208 (interface? . 50))
(1209 (interface-ref . 50))
(1210 (for-each-declaration . 50))
(1211 (note-reference-to-interface! . 50))
(1212 (make-interface . 50))
(1213 (make-simple-interface . 50))
(1214 (really-make-simple-interface . 50))
(1215 (make-compound-interface . 50))
(1216 (note-interface-name! . 50))
(1217 (:structure . 54))
(1218 (really-make-structure . 54))
(1219 (structure-name . 54))
(1220 (set-structure-name! . 54))
(1221 (structure-clients . 54))
(1222 (structure-package . 54))
(1223 (structure-interface-really . 54))
(1224 (set-structure-interface! . 54))
(1225 (structure-interface-thunk . 54))
(1226 (structure? . 54))
(1227 (structure-interface . 54))
(1228 (initialize-structure! . 54))
(1229 (make-structure . 54))
(1230 (structure-unstable? . 54))
(1231 (for-each-export . 54))
(1232 (note-structure-name! . 54))
(1233 (:package . 54))
(1234 (really-make-package . 54))
(1235 (package-cached . 54))
(1236 (package-clients . 54))
(1237 (package-plist . 54))
(1238 (set-package-plist! . 54))
(1239 (package-accesses-thunk . 54))
(1240 (package-opens-thunk . 54))
(1241 (set-package-opens-thunk! . 54))
(1242 (package->environment . 54))
(1243 (set-package->environment! . 54))
(1244 (package-loaded? . 54))
(1245 (set-package-loaded?! . 54))
(1246 (package-clauses . 54))
(1247 (package-file-name . 54))
(1248 (package-get-location . 54))
(1249 (set-package-get-location! . 54))
(1250 (package-integrate? . 54))
(1251 (set-package-integrate?! . 54))
(1252 (package-unstable? . 54))
(1253 (package-definitions . 54))
(1254 (package-opens-really . 54))
(1255 (set-package-opens! . 54))
(1256 (package-uid . 54))
(1257 (package? . 54))
(1258 (make-package . 54))
(1259 (really-package->environment . 54))
(1260 (new-package-uid . 54))
(1261 (*package-uid* . 54))
(1262 (package-name-table . 54))
(1263 (package-name . 54))
(1264 (note-package-name! . 54))
(1265 (package-opens . 54))
(1266 (initialize-package-if-necessary! . 54))
(1267 (package-accesses . 54))
(1268 (make-simple-package . 54))
(1269 (package-definition . 54))
(1270 (package-define! . 54))
(1271 (really-package-define! . 54))
(1272 (package-lookup . 54))
(1273 (really-package-lookup . 54))
(1274 (structure-lookup . 54))
(1275 (generic-lookup . 54))
(1276 (initialize-package! . 54))
(1277 (define-funny-names! . 54))
(1278 (package-define-funny! . 54))
(1279 (funny-name/the-package . 54))
(1280 (extract-package-from-environment . 54))
(1281 (for-each-definition . 54))
(1282 (get-new-location . 54))
(1283 (make-new-location . 54))
(1284 ($get-location . 54))
(1285 (*location-uid* . 54))
(1286 (location-info-table . 54))
(1287 (flush-location-names . 54))
(1288 (package-get . 54))
(1289 (package-put! . 54))
(1290 (package-note-caching . 54))
(1291 (maybe-fix-place . 54))
(1292 (follow-forwarding-pointers . 54))
(1293 (environment-ref . 63))
(1294 (environment-set! . 63))
(1295 (environment-define! . 63))
(1296 (*structure-ref . 63))
(1297 (carefully . 63))
(1298 ($interaction-environment . 63))
(1299 (interaction-environment . 63))
(1300 (set-interaction-environment! . 63))
(1301 (with-interaction-environment . 63))
(1302 (scheme-report-environment . 63))
(1303 (*scheme-report-environment* . 63))
(1304 (*scheme-report-number* . 63))
(1305 (set-scheme-report-environment! . 63))
(1306 (make-reflective-tower . 63))
(1307 (set-reflective-tower-maker! . 63))
(1308 (the-usual-transforms . 52))
(1309 (define-usual-macro . 52))
(1310 (usual-transform . 52))
(1311 (specs? . 52))
(1312 (process-rules . 52))
(1313 (segment-pattern? . 52))
(1314 (segment-template? . 52))
(1315 (indicators-for-zero-or-more . 52))
(1316 (find-free-names-in-syntax-rules . 52))
(1317 (namestring . 48))
(1318 (directory-component-separator . 48))
(1319 (type-component-separator . 48))
(1320 (namestring-component . 48))
(1321 (file-name-preferred-case . 48))
(1322 (*scheme-file-type* . 48))
(1323 (*load-file-type* . 48))
(1324 (file-name-directory . 48))
(1325 (file-name-nondirectory . 48))
(1326 (file-nondirectory-position . 48))
(1327 (string-posq . 48))
(1328 (*translations* . 48))
(1329 (translations . 48))
(1330 (set-translation! . 48))
(1331 (translate . 48))
(1332 ($note-file-package . 55))
(1333 (scan-forms . 55))
(1334 (really-scan-forms . 55))
(1335 (scan-file . 55))
(1336 (really-scan-file . 55))
(1337 (*standard-optimizer-names* . 55))
(1338 (default-standard-optimizer . 55))
(1339 (*standard-optimizer* . 55))
(1340 (set-standard-optimizers! . 55))
(1341 (make-standard-optimizer . 55))
(1342 (apply-optimizers . 55))
(1343 (scan-form-list . 55))
(1344 (scan-form . 55))
(1345 (process-define-syntax . 55))
(1346 (scan-structures . 55))
(1347 (scan-package . 55))
(1348 (optimize . 55))
(1349 (check-structure . 55))
(1350 (initialize-usual-transforms! . 55))
(1351 (define-all-operators . 55))
(1352 (make-define-primitive-node . 55))
(1353 (optimizers-table . 55))
(1354 (get-optimizer . 55))
(1355 (set-optimizer! . 55))
(1356 ($note-undefined . 55))
(1357 (note-undefined! . 55))
(1358 (noting-undefined-variables . 55))
(1359 (:debug-data . 56))
(1360 (make-debug-data . 56))
(1361 (debug-data-source . 56))
(1362 (set-debug-data-source! . 56))
(1363 (debug-data-env-maps . 56))
(1364 (set-debug-data-env-maps! . 56))
(1365 (debug-data-pc-in-parent . 56))
(1366 (debug-data-parent . 56))
(1367 (debug-data-name . 56))
(1368 (debug-data-uid . 56))
(1369 (debug-data? . 56))
(1370 (new-template-uid . 57))
(1371 (*template-uid* . 57))
(1372 (template-uid . 57))
(1373 (set-template-uid! . 57))
(1374 (debug-flag-names . 57))
(1375 (type/debug-flags . 57))
(1376 (make-debug-flags . 57))
(1377 ($debug-flags . 57))
(1378 (debug-flag-accessor . 57))
(1379 (debug-flag-modifier . 57))
(1380 (keep-source-code? . 57))
(1381 (keep-environment-maps? . 57))
(1382 (keep-procedure-names? . 57))
(1383 (keep-file-names? . 57))
(1384 (tabulate-debug-data? . 57))
(1385 (debug-data-table . 57))
(1386 (with-fresh-compiler-state . 57))
(1387 (saving-and-restoring . 57))
(1388 (debug-data->info . 57))
(1389 (get-debug-data . 57))
(1390 (note-debug-data! . 57))
(1391 (new-debug-data . 57))
(1392 (make-segment . 57))
(1393 (segment-size . 57))
(1394 (segment-emitter . 57))
(1395 (segment->template . 57))
(1396 (segment-data->template . 57))
(1397 (:assembly-state . 57))
(1398 (make-assembly-state . 57))
(1399 (astate-literals . 57))
(1400 (set-astate-literals! . 57))
(1401 (astate-count . 57))
(1402 (set-astate-count! . 57))
(1403 (astate-pc . 57))
(1404 (set-astate-pc! . 57))
(1405 (astate-code-vector . 57))
(1406 (make-astate . 57))
(1407 (emit-byte! . 57))
(1408 (emit-literal! . 57))
(1409 (emit-segment! . 57))
(1410 (empty-segment . 57))
(1411 (instruction . 57))
(1412 (sequentially . 57))
(1413 (sequentially-2 . 57))
(1414 (instruction-with-literal . 57))
(1415 (instruction-with-location . 57))
(1416 (instruction-with-template . 57))
(1417 (make-label . 57))
(1418 (instruction-using-label . 57))
(1419 (attach-label . 57))
(1420 (byte-limit . 57))
(1421 ($debug-data . 57))
(1422 (note-source-code . 57))
(1423 (note-environment . 57))
(1424 (emit-with-environment-maps! . 57))
(1425 ($environment-maps . 57))
(1426 (environment-maps-table . 57))
(1427 (node-type . 53))
(1428 (reconstruct-type . 53))
(1429 (reconstruct . 53))
(1430 (reconstructors . 53))
(1431 (define-reconstructor . 53))
(1432 (careful-codomain . 53))
(1433 (reconstruct-body . 53))
(1434 (operator/name . 53))
(1435 (reconstruct-name . 53))
(1436 (reconstruct-call . 53))
(1437 (fork-constraints . 53))
(1438 (examine . 53))
(1439 (node->type . 53))
(1440 (call-node? . 53))
(1441 (name-node? . 53))
(1442 (begin-node? . 53))
(1443 (reconstruct-apply . 53))
(1444 (declare-operator-type . 53))
(1445 (constant-type . 53))
(1446 (compile-top . 58))
(1447 (compile . 58))
(1448 (compilators . 58))
(1449 (define-compilator . 58))
(1450 (compile-constant . 58))
(1451 (compile-begin . 58))
(1452 (compile-call . 58))
(1453 (lambda-node? . 58))
(1454 (compile-redex . 58))
(1455 (compile-unknown-call . 58))
(1456 (maybe-push-continuation . 58))
(1457 (push-arguments . 58))
(1458 (push-all-with-names . 58))
(1459 (compile-lambda . 58))
(1460 (compile-lambda-code . 58))
(1461 (lookup-variables . 58))
(1462 (compile-letrec . 58))
(1463 (compile-body . 58))
(1464 (operator/letrec . 58))
(1465 (make-cont . 58))
(1466 (cont-segment . 58))
(1467 (cont-source-info . 58))
(1468 (return-cont-segment . 58))
(1469 (return-cont . 58))
(1470 (return-cont? . 58))
(1471 (fall-through-cont . 58))
(1472 (fall-through-cont? . 58))
(1473 (ignore-values-segment . 58))
(1474 (ignore-values-cont . 58))
(1475 (ignore-values-cont? . 58))
(1476 (deliver-value . 58))
(1477 (named-cont . 58))
(1478 (cont-name . 58))
(1479 (bind-vars . 58))
(1480 (bind-flat-vars . 58))
(1481 (really-bind-vars . 58))
(1482 (initial-cenv . 58))
(1483 (environment-level . 58))
(1484 (funny-name/lexical-level . 58))
(1485 (name-node-binding . 58))
(1486 (generate-trap . 58))
(1487 (careful-sequentially . 58))
(1488 (large-segment-size . 58))
(1489 (shrink-segment . 58))
(1490 (type-check . 58))
(1491 (set-type-check?! . 58))
(1492 (*type-check?* . 58))
(1493 (diagnose-call-error . 58))
(1494 (define-compiler-primitive . 58))
(1495 (closed-compilators . 58))
(1496 (define-closed-compilator . 58))
(1497 (get-closed-compilator . 58))
(1498 (direct-compilator . 58))
(1499 (direct-closed-compilator . 58))
(1500 (nargs->domain . 58))
(1501 (define-simple-primitive . 58))
(1502 (simple-compilator . 58))
(1503 (simple-closed-compilator . 58))
(1504 (symbol-append . 58))
(1505 (define-stob-predicate . 58))
(1506 (define-data-struct-primitives . 58))
(1507 (define-vector-primitives . 58))
(1508 (define-n-ary-compiler-primitive . 58))
(1509 (n-ary-primitive-compilator . 58))
(1510 (define-n-ary-constructor . 58))
(1511 (push-all-but-last . 58))
(1512 (compile-form . 58))
(1513 (compile-file . 58))
(1514 (compile-and-run-forms . 58))
(1515 (compile-and-run-file . 58))
(1516 (maybe-newline-after . 58))
(1517 (compile-and-run-scanned-forms . 58))
(1518 (compile-scanned-forms . 58))
(1519 (compile-scanned-form . 58))
(1520 (compile-definition . 58))
(1521 (location-contents-offset . 58))
(1522 (get-location . 58))
(1523 (get-location-for-undefined . 58))
(1524 (get-location-for-unassignable . 58))
(1525 (package-accessor-on-demand . 58))
(1526 (location-on-demand . 58))
(1527 (package-undefineds . 58))
(1528 (location-for-reference . 58))
(1529 (package-undefined-but-assigneds . 58))
(1530 (location-for-assignment . 58))
(1531 (note-caching . 58))
(1532 (grumble . 58))
(1533 (make-startup-procedure . 58))
(1534 (an-ignore-values-cont . 58))
(1535 (eval . 64))
(1536 (load-into . 64))
(1537 (eval-from-file . 64))
(1538 (eval-scanned-forms . 64))
(1539 (invoke-template . 64))
(1540 (load . 64))
(1541 (display-condition . 46))
(1542 (really-display-condition . 46))
(1543 (*depth* . 46))
(1544 (*length* . 46))
(1545 (&disclose-condition . 46))
(1546 (disclose-condition . 46))
(1547 (limited-write . 46))
(1548 (command-processor . 68))
(1549 (mini-load . 68))
(1550 (read-string . 68))
(1551 (primitives . 39))
(1552 (enum-case . 40))
(1553 (run-threads . 38))
(1554 (run-threads-with-housekeeper . 38))
(1555 (round-robin-event-handler . 38))
(1556 (make-counter . 38))
(1557 (counter-value . 38))
(1558 (increment-counter! . 38))
(1559 (decrement-counter! . 38))
(1560 (root-scheduler . 39))
(1561 (make-root-event-handler . 39))
(1562 (abort-token . 39))
(1563 (root-wait . 39))
(1564 (one-day-of-milliseconds . 39))
(1565 (do-some-waiting . 39))
(1566 (deadlock-handler . 39))
(1567 (call-when-deadlocked! . 39))
(1568 (spawn-output-forcers . 39))
(1569 (unspecific . 39))
(1570 (usual-resumer . 44))
(1571 (initialize-rts . 44))
(1572 (start . 69))
(1573 (make-built-in-structures . 69))
(1574 (initialize-interaction-environment! . 69))
(1575 (make-initial-package . 69))
(1576 (make-tower . 69))
(1577 (inline-transform . 62))
(1578 (make-substitution . 62))
(1579 (substitute . 62))
(1580 (operator/name . 62))
(1581 (qualified->name . 62))
(1582 (get-qualified-env . 62))
(1583 (operator . 66))
(1584 (simple-interface . 66))
(1585 (package . 66))
(1586 (transform . 66))
(1587 (:syntax . 60))
(1588 (:values . 60))
(1589 (:arguments . 60))
(1590 (:value . 60))
(1591 (procedure . 60))
(1592 (:boolean . 60))
(1593 (:char . 60))
(1594 (:null . 60))
(1595 (:unspecific . 60))
(1596 (:number . 60))
(1597 (:complex . 60))
(1598 (:real . 60))
(1599 (:rational . 60))
(1600 (:integer . 60))
(1601 (:exact-integer . 60))
(1602 (:pair . 60))
(1603 (:string . 60))
(1604 (:symbol . 60))
(1605 (:vector . 60))
(1606 (:procedure . 60))
(1607 (:input-port . 60))
(1608 (:output-port . 60))
(1609 (:error . 60))
(1610 (:escape . 60))
(1611 (:structure . 60))
(1612 (:type . 60))
(1613 (def . 59))
(1614 (really-def . 59))
(1615 (define-multiple . 59))
(1616 (define-interface . 59))
(1617 (export . 59))
(1618 (compound-interface . 59))
(1619 (define-structure . 59))
(1620 (define-structures . 59))
(1621 (structure . 59))
(1622 (structures . 59))
(1623 (a-package . 59))
(1624 (receive . 59))
(1625 (define-reflective-tower-maker . 59))
(1626 (export-reflective-tower-maker . 59))
(1627 (define-module . 59))
(1628 (make-a-package . 59))
(1629 (loser . 59))
(1630 (interface-of . 59))
(1631 (*verify-later!* . 59))
(1632 (verify-later! . 59))
(1633 (set-verify-later! . 59))
(1634 (note-name! . 59))
(1635 (ensure-loaded . 65))
-
; Template uid -> name, parent, pc in parent, env maps
(0 #f -14 #f ())
(1 #f -14 #f ())
(2 call-error 1 4 ())
(3 syntax-error 1 12 ())
(4 warn 1 20 ())
(5 signal 1 28 ())
(6 #f -14 #f ())
(7 channel-write 6 4 ())
(8 loop 7 16 ())
(9 buffer-length 6 12 ())
(10 channel-read 6 20 ())
(11 #f 10 5 ())
(12 loop 11 16 ())
(13 output-port? 6 28 ())
(14 input-port? 6 36 ())
(15 restore-the-symbol-table! 6 44 ())
(16 flush-the-symbol-table! 6 52 ())
(17 string-copy 6 60 ())
(18 string->symbol 6 68 ())
(19 vector-unassigned? 6 76 ())
(20 make-undefined-location 6 84 ())
(21 primitive-cwcc 6 92 ())
(22 #f 21 7 ())
(23 invoke-closure 6 100 ())
(24 integer->char 6 108 ())
(25 char->integer 6 116 ())
(26 #f -14 #f ())
(27 current-cont 26 4 ())
(28 closure-template 26 12 ())
(29 continuation-ref 26 20 ())
(30 closure? 26 28 ())
(31 #f -14 #f ())
(32 #f -14 #f ())
(33 cell-set! 32 4 ())
(34 port-pending-eof? 32 12 ())
(35 complex? 32 20 ())
(36 arithmetic-shift 32 28 ())
(37 set-port-pending-eof?! 32 36 ())
(38 port-handler 32 44 ())
(39 signal-condition 32 52 ())
(40 integer? 32 60 ())
(41 session-data 32 68 ())
(42 make-closure 32 76 ())
(43 template-ref 32 84 ())
(44 set-session-data! 32 92 ())
(45 make-rectangular 32 100 ())
(46 channel? 32 108 ())
(47 open-channel 32 116 ())
(48 string=? 32 124 ())
(49 cell-ref 32 132 ())
(50 find-all 32 140 ())
(51 extended-number? 32 148 ())
(52 reverse-list->string 32 156 ())
(53 port-locked? 32 164 ())
(54 denominator 32 172 ())
(55 call-with-values 32 180 ())
(56 weak-pointer-ref 32 188 ())
(57 find-all-symbols 32 196 ())
(58 set-port-locked?! 32 204 ())
(59 code-vector? 32 212 ())
(60 port-status 32 220 ())
(61 pop 32 228 ())
(62 exp 32 236 ())
(63 sin 32 244 ())
(64 set-port-status! 32 252 ())
(65 make-extended-number 32 260 ())
(66 channel-os-index 32 268 ())
(67 cos 32 276 ())
(68 collect 32 284 ())
(69 external-lookup 32 292 ())
(70 tan 32 300 ())
(71 log 32 308 ())
(72 continuation-length 32 316 ())
(73 find-all-records 32 324 ())
(74 make-code-vector 32 332 ())
(75 cdr 32 340 ())
(76 bitwise-xor 32 348 ())
(77 car 32 356 ())
(78 string? 32 364 ())
(79 symbol? 32 372 ())
(80 set-cdr! 32 380 ())
(81 bitwise-not 32 388 ())
(82 vector? 32 396 ())
(83 closure-env 32 404 ())
(84 set-car! 32 412 ())
(85 bitwise-ior 32 420 ())
(86 port-buffer 32 428 ())
(87 number? 32 436 ())
(88 #f 32 441 ())
(89 template-length 88 4 ())
(90 string-hash 88 12 ())
(91 pop-env 88 20 ())
(92 primitive-catch 88 28 ())
(93 set-port-buffer! 88 36 ())
(94 make-string 88 44 ())
(95 record? 88 52 ())
(96 make-vector 88 60 ())
(97 extended-number-set! 88 68 ())
(98 write-image 88 76 ())
(99 eq? 88 84 ())
(100 bitwise-and 88 92 ())
(101 code-vector-set! 88 100 ())
(102 location-id 88 108 ())
(103 set-location-id! 88 116 ())
(104 make-record 88 124 ())
(105 vector 88 132 ())
(106 intern 88 140 ())
(107 values 88 148 ())
(108 string-set! 88 156 ())
(109 unassigned 88 164 ())
(110 copy-bytes! 88 172 ())
(111 vector-set! 88 180 ())
(112 extended-number-ref 88 188 ())
(113 unspecific 88 196 ())
(114 channel-maybe-write 88 204 ())
(115 code-vector-ref 88 212 ())
(116 schedule-interrupt 88 220 ())
(117 record 88 228 ())
(118 set-interrupt-handlers! 88 236 ())
(119 eof-object? 88 244 ())
(120 record-set! 88 252 ())
(121 ascii->char 88 260 ())
(122 char->ascii 88 268 ())
(123 port-limit 88 276 ())
(124 set-enabled-interrupts! 88 284 ())
(125 external-value 88 292 ())
(126 make-immutable! 88 300 ())
(127 port-index 88 308 ())
(128 set-port-limit! 88 316 ())
(129 channel-status 88 324 ())
(130 current-thread 88 332 ())
(131 set-port-index! 88 340 ())
(132 string-ref 88 348 ())
(133 set-exception-handlers! 88 356 ())
(134 immutable? 88 364 ())
(135 set-current-thread! 88 372 ())
(136 vector-ref 88 380 ())
(137 exact? 88 388 ())
(138 write-char 88 396 ())
(139 symbol->string 88 404 ())
(140 make-polar 88 412 ())
(141 record-ref 88 420 ())
(142 eof-object 88 428 ())
(143 numerator 88 436 ())
(144 channel-id 88 444 ())
(145 extended-number-length 88 452 ())
(146 error 88 460 ())
(147 exact->inexact 88 468 ())
(148 inexact->exact 88 476 ())
(149 checked-record-set! 88 484 ())
(150 apply 88 492 ())
(151 memory-status 88 500 ())
(152 #f 88 505 ())
(153 code-vector-length 152 4 ())
(154 floor 152 12 ())
(155 with-continuation 152 20 ())
(156 magnitude 152 28 ())
(157 nargs 152 36 ())
(158 char=? 152 44 ())
(159 char<? 152 52 ())
(160 continuation? 152 60 ())
(161 remainder 152 68 ())
(162 vm-return 152 76 ())
(163 false 152 84 ())
(164 angle 152 92 ())
(165 port? 152 100 ())
(166 string-length 152 108 ())
(167 external? 152 116 ())
(168 make-continuation 152 124 ())
(169 vector-length 152 132 ())
(170 port-lock 152 140 ())
(171 template? 152 148 ())
(172 rational? 152 156 ())
(173 add-finalizer! 152 164 ())
(174 checked-record-ref 152 172 ())
(175 channel-maybe-read 152 180 ())
(176 location? 152 188 ())
(177 set-port-lock! 152 196 ())
(178 make-port 152 204 ())
(179 external-name 152 212 ())
(180 pair? 152 220 ())
(181 make-external 152 228 ())
(182 port-data 152 236 ())
(183 record-length 152 244 ())
(184 external-call 152 252 ())
(185 get-cont-from-heap 152 260 ())
(186 real-part 152 268 ())
(187 real? 152 276 ())
(188 make-template 152 284 ())
(189 set-port-data! 152 292 ())
(190 imag-part 152 300 ())
(191 make-location 152 308 ())
(192 = 152 316 ())
(193 < 152 324 ())
(194 char? 152 332 ())
(195 channel-abort 152 340 ())
(196 close-channel 152 348 ())
(197 quotient 152 356 ())
(198 / 152 364 ())
(199 weak-pointer? 152 372 ())
(200 - 152 380 ())
(201 continuation-set! 152 388 ())
(202 peek-char 152 396 ())
(203 + 152 404 ())
(204 * 152 412 ())
(205 contents 152 420 ())
(206 sqrt 152 428 ())
(207 make-cell 152 436 ())
(208 read-char 152 444 ())
(209 set-contents! 152 452 ())
(210 push 152 460 ())
(211 make-weak-pointer 152 468 ())
(212 assq 152 476 ())
(213 trap 152 484 ())
(214 wait 152 492 ())
(215 cons 152 500 ())
(216 #f -14 #f ())
(217 #f -14 #f ())
(218 template-set! 217 4 ())
(219 time 217 12 ())
(220 location-defined? 217 20 ())
(221 asin 217 28 ())
(222 vm-extension 217 36 ())
(223 acos 217 44 ())
(224 set-location-defined?! 217 52 ())
(225 atan 217 60 ())
(226 #f -14 #f ())
(227 #f -15 #f ())
(228 not 227 4 ())
(229 positive? 227 12 ())
(230 negative? 227 20 ())
(231 #f -15 #f ())
(232 simplest-rational 231 4 ())
(233 simplest-rational-internal 232 9 ())
(234 #f -15 #f ())
(235 abs 234 4 ())
(236 #f -15 #f ())
(237 rationalize 236 4 ())
(238 #f -15 #f ())
(239 even? 238 4 ())
(240 odd? 238 12 ())
(241 #f -15 #f ())
(242 raise-to-integer-power 241 4 ())
(243 loop 242 34 ())
(244 #f -15 #f ())
(245 >= 244 4 ())
(246 #f -15 #f ())
(247 expt 246 4 ())
(248 #f -15 #f ())
(249 null? 248 4 ())
(250 list 248 12 ())
(251 #f -15 #f ())
(252 reduce 251 4 ())
(253 #f -15 #f ())
(254 inexact? 253 4 ())
(255 euclid 253 12 ())
(256 gcd 253 20 ())
(257 #f 256 6 ())
(258 lcm 253 28 ())
(259 #f 258 6 ())
(260 round 253 36 ())
(261 ceiling 253 44 ())
(262 truncate 253 52 ())
(263 #f -15 #f ())
(264 > 263 4 ())
(265 #f -15 #f ())
(266 modulo 265 4 ())
(267 #f -15 #f ())
(268 insert 267 4 ())
(269 last 267 12 ())
(270 sublist 267 20 ())
(271 recur 270 52 ())
(272 every 267 28 ())
(273 any 267 36 ())
(274 pos 267 44 ())
(275 #f 274 5 ())
(276 loop 275 19 ())
(277 filter 267 52 ())
(278 #f 277 5 ())
(279 unspecific 267 60 ())
(280 #f -15 #f ())
(281 force 280 4 ())
(282 make-promise 280 12 ())
(283 #f 282 9 ())
(284 map1 280 20 ())
(285 map2+ 280 28 ())
(286 map 280 36 ())
(287 for-each2+ 280 44 ())
(288 loop 287 19 ())
(289 for-each1 280 52 ())
(290 loop 289 16 ())
(291 for-each 280 60 ())
(292 vector-fill! 280 68 ())
(293 loop##98 292 16 ())
(294 real-length 280 76 ())
(295 length 280 84 ())
(296 list->vector 280 92 ())
(297 loop##95 296 30 ())
(298 vector->list 280 100 ())
(299 loop##92 298 9 ())
(300 string-ci>=? 280 108 ())
(301 string-ci>? 280 116 ())
(302 string-ci<=? 280 124 ())
(303 string>=? 280 132 ())
(304 string>? 280 140 ())
(305 string<=? 280 148 ())
(306 max-or-min 280 156 ())
(307 loop 306 32 ())
(308 min 280 164 ())
(309 make-string<? 280 172 ())
(310 #f 309 5 ())
(311 loop 310 43 ())
(312 make-string=? 280 180 ())
(313 #f 312 5 ())
(314 loop 313 32 ())
(315 string-fill! 280 188 ())
(316 loop##79 315 15 ())
(317 list->string 280 196 ())
(318 loop##76 317 30 ())
(319 string->list 280 204 ())
(320 loop##73 319 15 ())
(321 string 280 212 ())
(322 string-append 280 220 ())
(323 #f 322 10 ())
(324 loop 322 49 ())
(325 loop##70 324 35 ())
(326 substring 280 228 ())
(327 loop##61 326 22 ())
(328 char-upcase 280 236 ())
(329 char-ci-compare 280 244 ())
(330 #f 329 5 ())
(331 char-downcase 280 252 ())
(332 make-character-map 280 260 ())
(333 loop##56 332 22 ())
(334 char>=? 280 268 ())
(335 char>? 280 276 ())
(336 char<=? 280 284 ())
(337 char-lower-case? 280 292 ())
(338 char-upper-case? 280 300 ())
(339 char-alphabetic? 280 308 ())
(340 char-numeric? 280 316 ())
(341 char-whitespace? 280 324 ())
(342 cddr 280 332 ())
(343 list? 280 340 ())
(344 recur 343 19 ())
(345 caar 280 348 ())
(346 ass 280 356 ())
(347 #f 346 5 ())
(348 loop 347 16 ())
(349 mem 280 364 ())
(350 #f 349 5 ())
(351 loop 350 16 ())
(352 list-tail 280 372 ())
(353 list-ref 280 380 ())
(354 append-reverse 280 388 ())
(355 reverse 280 396 ())
(356 append 280 404 ())
(357 recur 356 29 ())
(358 cdddr 280 412 ())
(359 cddddr 280 420 ())
(360 cdddar 280 428 ())
(361 #f 280 433 ())
(362 cddar 361 4 ())
(363 cddadr 361 12 ())
(364 cddaar 361 20 ())
(365 cdar 361 28 ())
(366 cdadr 361 36 ())
(367 cdaddr 361 44 ())
(368 cdadar 361 52 ())
(369 cdaar 361 60 ())
(370 cdaadr 361 68 ())
(371 cdaaar 361 76 ())
(372 cadr 361 84 ())
(373 caddr 361 92 ())
(374 cadddr 361 100 ())
(375 caddar 361 108 ())
(376 cadar 361 116 ())
(377 cadadr 361 124 ())
(378 cadaar 361 132 ())
(379 caadr 361 140 ())
(380 caaddr 361 148 ())
(381 caadar 361 156 ())
(382 caaar 361 164 ())
(383 caaadr 361 172 ())
(384 caaaar 361 180 ())
(385 zero? 361 188 ())
(386 max 361 196 ())
(387 <= 361 204 ())
(388 eqv? 361 212 ())
(389 equal? 361 220 ())
(390 loop 389 148 ())
(391 boolean? 361 228 ())
(392 #f 361 339 ())
(393 #f 361 356 ())
(394 #f -15 #f ())
(395 #f -16 #f ())
(396 default-record-discloser 395 19 ())
(397 record-type 395 27 ())
(398 record-type? 395 35 ())
(399 record-type-name 395 43 ())
(400 record-type-discloser 395 51 ())
(401 disclose-record 395 59 ())
(402 define-record-discloser 395 67 ())
(403 record-predicate 395 75 ())
(404 #f 403 5 ())
(405 record-type-field-names 395 83 ())
(406 record-field-index 395 91 ())
(407 loop 406 24 ())
(408 record-modifier 395 99 ())
(409 #f 408 55 ())
(410 record-accessor 395 107 ())
(411 #f 410 55 ())
(412 record-constructor 395 115 ())
(413 #f 412 9 ())
(414 #f 412 46 ())
(415 loop 414 40 ())
(416 record-type-uid 395 123 ())
(417 make-record-type 395 131 ())
(418 #f 395 173 ())
(419 #f -17 #f ())
(420 #f -18 #f ())
(421 proc->discloser 420 12 ())
(422 #f 421 5 ())
(423 #f 422 5 ())
(424 compare-to 420 20 ())
(425 #f 424 5 ())
(426 check-next 420 28 ())
(427 #f 426 5 ())
(428 check-for-next 420 36 ())
(429 #f 428 5 ())
(430 value? 420 44 ())
(431 simple-type? 420 52 ())
(432 %type-predicate 420 60 ())
(433 argument-sequence-predicate 420 68 ())
(434 recur 433 23 ())
(435 one-action 420 76 ())
(436 #f 435 5 ())
(437 #f 436 19 ())
(438 last-action 420 84 ())
(439 #f 438 5 ())
(440 methods->perform 420 92 ())
(441 recur 440 16 ())
(442 apply-generic 420 100 ())
(443 %same-type? 420 108 ())
(444 %type-priority 420 116 ())
(445 more-specific-type? 420 124 ())
(446 more-specific? 420 132 ())
(447 loop 446 130 ())
(448 every2 420 140 ())
(449 same-applicability? 420 148 ())
(450 insert-method 420 156 ())
(451 recur 450 16 ())
(452 add-to-method-table! 420 164 ())
(453 make-method-info 420 172 ())
(454 set-final-method! 420 180 ())
(455 make-cell-for-generic 420 188 ())
(456 #f 455 7 ())
(457 #f 455 10 ())
(458 #f 455 13 ())
(459 make-method-table 420 196 ())
(460 #f 459 48 ())
(461 #f 459 70 ())
(462 method-table? 420 204 ())
(463 empty-method-list 420 212 ())
(464 #f 420 217 ())
(465 method-info? 464 4 ())
(466 compute-priority 464 12 ())
(467 make-simple-type 464 20 ())
(468 really-make-simple-type 464 48 ())
(469 simple-type-id 464 56 ())
(470 simple-type-priority 464 64 ())
(471 simple-type-predicate 464 72 ())
(472 simple-type-superiors 464 80 ())
(473 #f 464 92 ())
(474 #f 464 208 ())
(475 #f 464 400 ())
(476 #f 464 509 ())
(477 record-type-priority 476 330 ())
(478 really-make-method-info 476 359 ())
(479 method-info-proc 476 367 ())
(480 method-info-n-ary? 476 375 ())
(481 method-info-types 476 383 ())
(482 #f 476 395 ())
(483 really-make-method-table 476 426 ())
(484 method-table-id 476 434 ())
(485 method-table-set-perform! 476 442 ())
(486 method-table-get-perform 476 450 ())
(487 make-generic 476 458 ())
(488 method-table-prototype 476 466 ())
(489 method-table-methods 476 474 ())
(490 set-method-table-methods! 476 482 ())
(491 #f 476 494 ())
(492 #f 476 504 ())
(493 add-method! 492 53 ())
(494 add-method! 492 132 ())
(495 type-predicate 492 205 ())
(496 &type-predicate 492 284 ())
(497 &type-predicate 492 346 ())
(498 type-priority 492 411 ())
(499 &type-priority 492 490 ())
(500 #f 492 509 ())
(501 &type-priority 500 44 ())
(502 type-superiors 500 109 ())
(503 &type-superiors 500 188 ())
(504 &type-superiors 500 250 ())
(505 same-type? 500 318 ())
(506 &same-type? 500 400 ())
(507 &same-type? 500 465 ())
(508 #f 500 484 ())
(509 singleton 508 24 ())
(510 singleton-value 508 32 ())
(511 #f 508 44 ())
(512 &type-predicate 508 95 ())
(513 &type-priority 508 157 ())
(514 &same-type? 508 222 ())
(515 disclose 508 287 ())
(516 &disclose 508 366 ())
(517 &disclose 508 428 ())
(518 &add-method! 508 495 ())
(519 #f -19 #f ())
(520 &number->string 519 76 ())
(521 #f 519 95 ())
(522 &number->string 521 47 ())
(523 &number->string 521 112 ())
(524 integer->digit 521 164 ())
(525 integer->string 521 169 ())
(526 recur 525 46 ())
(527 string->number 521 183 ())
(528 loop 527 176 ())
(529 radix-is 528 69 ())
(530 exactness-is 528 72 ())
(531 loop 528 236 ())
(532 &really-string->number 521 269 ())
(533 #f 521 307 ())
(534 loop 533 28 ())
(535 &really-string->number 521 369 ())
(536 set-exactness 521 391 ())
(537 digit->integer 521 431 ())
(538 do-it 521 436 ())
(539 loop 538 45 ())
(540 string->integer 521 441 ())
(541 #f -20 #f ())
(542 fluid-lookup 541 4 ())
(543 set-dynamic-env! 541 12 ())
(544 get-dynamic-env 541 20 ())
(545 with-dynamic-env 541 28 ())
(546 #f 545 27 ())
(547 let-fluids 541 36 ())
(548 loop 547 24 ())
(549 let-fluid 541 44 ())
(550 set-fluid! 541 52 ())
(551 fluid 541 60 ())
(552 empty-dynamic-env 541 68 ())
(553 initialize-dynamic-state! 541 76 ())
(554 make-thread 541 104 ())
(555 thread-dynamic-env 541 112 ())
(556 make-fluid 541 140 ())
(557 fluid-top-level-value 541 148 ())
(558 set-fluid-top-level-value! 541 156 ())
(559 #f -33 #f ())
(560 lookup-enumerand 559 9 ())
(561 loop 560 23 ())
(562 #f -34 #f ())
(563 #f -41 #f ())
(564 queue-length 563 12 ())
(565 queue->list 563 20 ())
(566 #f 565 5 ())
(567 delete-from-queue-if! 563 28 ())
(568 loop 567 116 ())
(569 delete-from-queue! 563 36 ())
(570 #f 569 8 ())
(571 on-queue? 563 44 ())
(572 dequeue! 563 52 ())
(573 queue-empty? 563 60 ())
(574 queue-front 563 68 ())
(575 enqueue! 563 76 ())
(576 make-queue 563 84 ())
(577 queue? 563 92 ())
(578 really-make-queue 563 120 ())
(579 queue-tail 563 128 ())
(580 set-queue-tail! 563 136 ())
(581 queue-head 563 144 ())
(582 set-queue-head! 563 152 ())
(583 queue-uid 563 160 ())
(584 #f -25 #f ())
(585 condition-supertypes 584 12 ())
(586 define-condition-type 584 20 ())
(587 #f 586 19 ())
(588 condition-predicate 584 28 ())
(589 #f 588 5 ())
(590 condition? 584 36 ())
(591 make-exception 584 212 ())
(592 #f -22 #f ())
(593 initialize-session-data! 592 12 ())
(594 session-data-set! 592 20 ())
(595 session-data-ref 592 28 ())
(596 make-session-data-slot! 592 36 ())
(597 #f -36 #f ())
(598 call-before-heap-overflow! 597 20 ())
(599 enabled-interrupts 597 28 ())
(600 post-gc-handler 597 36 ())
(601 #f 600 5 ())
(602 #f 601 9 ())
(603 #f 602 7 ())
(604 #f 602 18 ())
(605 call-after-gc! 597 44 ())
(606 with-interrupts 597 52 ())
(607 #f 606 11 ())
(608 enable-interrupts! 597 60 ())
(609 disable-interrupts! 597 68 ())
(610 with-interrupts-allowed 597 76 ())
(611 with-interrupts-inhibited 597 84 ())
(612 set-interrupt-handler! 597 92 ())
(613 initialize-interrupts! 597 100 ())
(614 #f 613 5 ())
(615 loop##554 614 27 ())
(616 #f 615 29 ())
(617 #f 614 65 ())
(618 #f 617 9 ())
(619 #f 597 162 ())
(620 #f 597 172 ())
(621 #f -21 #f ())
(622 travel-to-point! 621 4 ())
(623 let-dynamic-point 621 12 ())
(624 env-dynamic-point 621 20 ())
(625 get-dynamic-point 621 28 ())
(626 continuation->procedure 621 36 ())
(627 #f 626 5 ())
(628 #f 627 54 ())
(629 call-with-current-continuation 621 44 ())
(630 #f 629 5 ())
(631 dynamic-wind 621 52 ())
(632 #f 631 89 ())
(633 make-point 621 80 ())
(634 point-parent 621 88 ())
(635 point-dynamic-env 621 96 ())
(636 point-out 621 104 ())
(637 point-in 621 112 ())
(638 point-depth 621 120 ())
(639 #f 621 134 ())
(640 #f 621 137 ())
(641 #f -30 #f ())
(642 set-template-info! 641 12 ())
(643 set-template-code! 641 20 ())
(644 template-info 641 28 ())
(645 template-code 641 36 ())
(646 #f -32 #f ())
(647 &disclose 646 268 ())
(648 &disclose 646 358 ())
(649 #f -31 #f ())
(650 continuation-template 649 12 ())
(651 continuation-pc 649 20 ())
(652 continuation-env 649 28 ())
(653 continuation-cont 649 36 ())
(654 continuation-parent 649 44 ())
(655 loop 654 80 ())
(656 continuation-arg-count 649 52 ())
(657 continuation-arg 649 60 ())
(658 &disclose 649 136 ())
(659 #f -35 #f ())
(660 define-exception-handler 659 4 ())
(661 signal-exception 659 12 ())
(662 #f 659 37 ())
(663 except 659 52 ())
(664 #f 663 5 ())
(665 handler 659 55 ())
(666 #f 665 5 ())
(667 make-opcode-generic! 659 60 ())
(668 really-signal-condition 659 69 ())
(669 loop 668 25 ())
(670 #f 669 8 ())
(671 with-handler 659 77 ())
(672 initialize-exceptions! 659 98 ())
(673 #f 672 5 ())
(674 last-resort-condition-handler 659 106 ())
(675 #f 674 12 ())
(676 #f 675 21 ())
(677 report-utter-lossage 659 114 ())
(678 #f 677 172 ())
(679 continuation-preview 659 122 ())
(680 ignore-errors 659 130 ())
(681 #f 680 5 ())
(682 #f 681 5 ())
(683 &disclose 659 178 ())
(684 &disclose 659 236 ())
(685 #f -35 #f ())
(686 #f 685 8 ())
(687 define-wna-handler 685 27 ())
(688 wna-lose 685 43 ())
(689 #f 685 55 ())
(690 #f 685 70 ())
(691 #f 685 85 ())
(692 #f 685 100 ())
(693 #f 685 115 ())
(694 #f 685 130 ())
(695 #f 685 145 ())
(696 #f 685 160 ())
(697 #f 685 175 ())
(698 #f 685 190 ())
(699 recur 698 57 ())
(700 #f 685 205 ())
(701 comparison-wna 685 216 ())
(702 #f 701 5 ())
(703 loop 702 68 ())
(704 #f -42 #f ())
(705 delete-queue-entry! 704 4 ())
(706 delete-from-queue! 704 12 ())
(707 loop 706 23 ())
(708 queue-length 704 20 ())
(709 loop##646 708 9 ())
(710 queue->list 704 28 ())
(711 loop##644 710 9 ())
(712 dequeue! 704 36 ())
(713 queue-head 704 44 ())
(714 enqueue! 704 52 ())
(715 queue-empty? 704 60 ())
(716 make-queue 704 68 ())
(717 q-entry? 704 76 ())
(718 make-q-entry 704 112 ())
(719 q-entry-next 704 120 ())
(720 set-q-entry-next! 704 128 ())
(721 q-entry-prev 704 136 ())
(722 set-q-entry-prev! 704 144 ())
(723 q-entry-data 704 152 ())
(724 #f -37 #f ())
(725 #f -37 #f ())
(726 waiting? 725 35 ())
(727 remove-thread-from-queues! 725 43 ())
(728 add-event! 725 51 ())
(729 running? 725 59 ())
(730 loop 729 22 ())
(731 switch-to-thread 725 67 ())
(732 #f 731 38 ())
(733 interrupt-timer-time 725 75 ())
(734 suspend-to 725 83 ())
(735 #f 734 5 ())
(736 schedule-wakeup 725 91 ())
(737 compose-continuation 725 99 ())
(738 #f 737 5 ())
(739 #f 738 25 ())
(740 #f 739 10 ())
(741 #f 740 8 ())
(742 return-values-to-thread! 725 107 ())
(743 #f 742 18 ())
(744 schedule-event 725 115 ())
(745 make-ready 725 123 ())
(746 dequeue-thread! 725 131 ())
(747 real-time 725 139 ())
(748 #f -37 #f ())
(749 wake-some-threads 748 4 ())
(750 loop 749 39 ())
(751 insert 748 12 ())
(752 #f -37 #f ())
(753 enqueue-thread! 752 4 ())
(754 suspend 752 12 ())
(755 block 752 20 ())
(756 #f -37 #f ())
(757 sleep 756 4 ())
(758 #f 757 63 ())
(759 #f -37 #f ())
(760 root-scheduler 759 4 ())
(761 terminate-current-thread 759 12 ())
(762 thunk->continuation 759 20 ())
(763 thread-top-level 759 28 ())
(764 #f 763 5 ())
(765 #f 764 3 ())
(766 make-thread 759 36 ())
(767 #f 759 41 ())
(768 start-multitasking 767 4 ())
(769 #f 768 5 ())
(770 #f 769 5 ())
(771 #f 769 8 ())
(772 #f 771 7 ())
(773 #f 772 5 ())
(774 #f 772 8 ())
(775 debit-thread-times! 767 12 ())
(776 loop 775 26 ())
(777 schedule-interrupt! 767 20 ())
(778 handle-timer-interrupt 767 28 ())
(779 #f 778 23 ())
(780 #f 779 26 ())
(781 cancel-timer-interrupt! 767 36 ())
(782 with-threads 767 44 ())
(783 #f 782 12 ())
(784 #f 783 3 ())
(785 #f 783 6 ())
(786 #f 783 9 ())
(787 spawn-on-scheduler 767 52 ())
(788 spawn-on-root 767 60 ())
(789 spawn 767 68 ())
(790 show-running 767 76 ())
(791 loop##754 790 17 ())
(792 event-pending? 767 84 ())
(793 get-next-event! 767 92 ())
(794 thread? 767 100 ())
(795 interrupt-thread 767 108 ())
(796 wait 767 116 ())
(797 kill-thread! 767 124 ())
(798 #f 797 8 ())
(799 propogate-upcall 767 132 ())
(800 #f 799 55 ())
(801 upcall 767 140 ())
(802 relinquish-timeslice 767 148 ())
(803 min 767 156 ())
(804 run-next-thread 767 164 ())
(805 loop 804 26 ())
(806 loop 805 66 ())
(807 run 767 172 ())
(808 #f 807 195 ())
(809 exclusively-enqueue-thread! 767 180 ())
(810 all-threads 767 188 ())
(811 thread-uid->thread 767 196 ())
(812 loop 811 22 ())
(813 really-make-thread 767 224 ())
(814 thread-name 767 232 ())
(815 thread-uid 767 240 ())
(816 thread-current-task 767 248 ())
(817 set-thread-current-task! 767 256 ())
(818 thread-events 767 264 ())
(819 set-thread-events! 767 272 ())
(820 thread-data 767 280 ())
(821 set-thread-data! 767 288 ())
(822 thread-scheduler 767 296 ())
(823 set-thread-scheduler! 767 304 ())
(824 thread-time 767 312 ())
(825 set-thread-time! 767 320 ())
(826 thread-queues 767 328 ())
(827 set-thread-queues! 767 336 ())
(828 thread-continuation 767 344 ())
(829 set-thread-continuation! 767 352 ())
(830 thread-dynamic-env 767 360 ())
(831 #f 767 372 ())
(832 #f -43 #f ())
(833 release-lock 832 12 ())
(834 #f 833 8 ())
(835 loop 834 23 ())
(836 maybe-obtain-lock 832 20 ())
(837 #f 836 8 ())
(838 obtain-lock 832 28 ())
(839 #f 838 8 ())
(840 make-lock 832 36 ())
(841 lock? 832 44 ())
(842 really-make-lock 832 72 ())
(843 lock-uid 832 80 ())
(844 lock-queue 832 88 ())
(845 lock-owner-uid 832 96 ())
(846 set-lock-owner-uid! 832 104 ())
(847 #f -23 #f ())
(848 open-output-port? 847 12 ())
(849 okay-limits? 847 20 ())
(850 write-unbuffered-block 847 28 ())
(851 loop##908 850 35 ())
(852 empty-port-buffer! 847 36 ())
(853 really-force-output 847 44 ())
(854 write-buffered-block 847 52 ())
(855 write-block 847 60 ())
(856 write-string 847 68 ())
(857 #f -23 #f ())
(858 current-output-port 857 4 ())
(859 output-port-option 857 12 ())
(860 newline 857 20 ())
(861 current-error-port 857 28 ())
(862 message 857 36 ())
(863 #f 862 10 ())
(864 current-input-port 857 44 ())
(865 input-port-option 857 52 ())
(866 #f -23 #f ())
(867 open-input-port? 866 4 ())
(868 maybe-obtain-port-lock 866 12 ())
(869 open-port? 866 20 ())
(870 release-port-lock 866 28 ())
(871 fill-port-buffer! 866 36 ())
(872 #f -23 #f ())
(873 char-ready? 872 4 ())
(874 #f -23 #f ())
(875 real-char-ready? 874 4 ())
(876 #f -23 #f ())
(877 call-with-current-noise-port 876 4 ())
(878 #f -23 #f ())
(879 make-null-output-port 878 4 ())
(880 #f -23 #f ())
(881 silently 880 4 ())
(882 call-with-current-output-port 880 12 ())
(883 call-with-current-input-port 880 20 ())
(884 with-current-ports 880 28 ())
(885 initialize-i/o 880 36 ())
(886 current-noise-port 880 44 ())
(887 #f -23 #f ())
(888 make-forcing-thunk 887 4 ())
(889 #f 888 5 ())
(890 #f 887 9 ())
(891 output-port-forcers 890 4 ())
(892 loop 891 25 ())
(893 periodically-force-output! 890 12 ())
(894 initialize-output-port-list! 890 20 ())
(895 port-handler? 890 28 ())
(896 make-unbuffered-output-port 890 36 ())
(897 okay-buffer? 890 44 ())
(898 make-output-port 890 52 ())
(899 make-output-port-closed! 890 60 ())
(900 make-input-port 890 68 ())
(901 make-input-port-closed! 890 76 ())
(902 force-output 890 84 ())
(903 read-more 890 92 ())
(904 buffer-length 890 100 ())
(905 really-read-block 890 108 ())
(906 read-block 890 116 ())
(907 obtain-port-lock 890 124 ())
(908 close-output-port 890 132 ())
(909 close-input-port 890 140 ())
(910 write-char-handler 890 148 ())
(911 read-char-handler 890 156 ())
(912 #f 911 5 ())
(913 two-arg-proc->handler 890 164 ())
(914 #f 913 5 ())
(915 one-arg-proc->handler 890 172 ())
(916 #f 915 5 ())
(917 initialize-i/o-handlers! 890 180 ())
(918 disclose-port 890 188 ())
(919 make-port-handler 890 216 ())
(920 port-handler-buffer-proc 890 224 ())
(921 port-handler-close 890 232 ())
(922 port-handler-discloser 890 240 ())
(923 &disclose 890 288 ())
(924 &disclose 890 350 ())
(925 #f 890 484 ())
(926 #f 890 487 ())
(927 #f 890 490 ())
(928 #f -23 #f ())
(929 #f 928 60 ())
(930 #f 928 75 ())
(931 #f 928 86 ())
(932 #f -26 #f ())
(933 write 932 4 ())
(934 recur 933 33 ())
(935 recurring-write 932 12 ())
(936 write-boolean 932 20 ())
(937 write-number 932 28 ())
(938 write-char-literal 932 36 ())
(939 character-name 932 44 ())
(940 write-string-literal 932 52 ())
(941 loop##989 940 21 ())
(942 write-list 932 60 ())
(943 loop 942 80 ())
(944 quotation? 932 68 ())
(945 write-vector 932 76 ())
(946 loop 945 68 ())
(947 write-other 932 84 ())
(948 #f 947 66 ())
(949 display-type-name 932 92 ())
(950 loop##1020 949 76 ())
(951 display 932 100 ())
(952 recur 951 33 ())
(953 #f -27 #f ())
(954 reading-error 953 20 ())
(955 preferred-case 953 28 ())
(956 #f 953 33 ())
(957 parse-token 956 4 ())
(958 sub-read-token 956 12 ())
(959 loop 958 33 ())
(960 define-sharp-macro 956 20 ())
(961 gobble-line 956 28 ())
(962 loop 961 13 ())
(963 reader-token? 956 36 ())
(964 sub-read 956 44 ())
(965 sub-read-carefully 956 52 ())
(966 sub-read-list 956 60 ())
(967 recur 966 49 ())
(968 set-standard-syntax! 956 68 ())
(969 set-standard-read-macro! 956 76 ())
(970 make-reader-token 956 84 ())
(971 read 956 92 ())
(972 loop 971 28 ())
(973 #f 956 148 ())
(974 sub-read-whitespace 956 172 ())
(975 #f 956 177 ())
(976 sub-read-constituent 956 192 ())
(977 #f 956 197 ())
(978 #f 956 257 ())
(979 #f 956 275 ())
(980 #f 956 293 ())
(981 #f 956 311 ())
(982 #f 956 329 ())
(983 loop 982 21 ())
(984 #f 956 347 ())
(985 #f 956 364 ())
(986 #f 956 375 ())
(987 #f 956 391 ())
(988 #f 956 407 ())
(989 #f 956 423 ())
(990 number-sharp-macro 956 440 ())
(991 #f 956 445 ())
(992 loop##1090 956 498 ())
(993 #f -24 #f ())
(994 #f 993 7 ())
(995 #f 993 10 ())
(996 #f 993 13 ())
(997 input-channel->port 993 24 ())
(998 #f 993 35 ())
(999 #f 993 38 ())
(1000 #f 993 41 ())
(1001 make-unbuffered-output-channel-handler 993 52 ())
(1002 #f 1001 15 ())
(1003 #f 1001 18 ())
(1004 #f 1001 21 ())
(1005 output-channel->port 993 60 ())
(1006 maybe-force-output 993 68 ())
(1007 maybe-open-file 993 76 ())
(1008 open-input-file 993 84 ())
(1009 open-output-file 993 92 ())
(1010 call-with-input-file 993 100 ())
(1011 call-with-output-file 993 108 ())
(1012 with-input-from-file 993 116 ())
(1013 #f 1012 8 ())
(1014 with-output-to-file 993 124 ())
(1015 #f 1014 8 ())
(1016 steal-channel-port! 993 132 ())
(1017 really-steal-channel-port! 993 140 ())
(1018 #f 1017 139 ())
(1019 #f -24 #f ())
(1020 initialize-channel-i/o! 1019 4 ())
(1021 i/o-completion-handler 1019 12 ())
(1022 #f 1021 33 ())
(1023 waiting-for-i/o? 1019 20 ())
(1024 wait-for-channel 1019 28 ())
(1025 steal-channel! 1019 36 ())
(1026 #f 1019 48 ())
(1027 #f 1019 63 ())
(1028 i/o-wait-count 1019 91 ())
(1029 increment-i/o-wait-count! 1019 99 ())
(1030 decrement-i/o-wait-count! 1019 107 ())
(1031 i/o-wait-queue 1019 131 ())
(1032 make-i/o-wait-queues 1019 139 ())
(1033 #f 1032 8 ())
(1034 loop##1166 1033 71 ())
(1035 loop##1170 1033 92 ())
(1036 #f -47 #f ())
(1037 symbol-hash 1036 20 ())
(1038 default-table-hash-function 1036 28 ())
(1039 alist-walk 1036 36 ())
(1040 loop##1243 1039 9 ())
(1041 really-table-walk 1036 44 ())
(1042 loop##1239 1041 55 ())
(1043 table-walk 1036 52 ())
(1044 #f 1043 5 ())
(1045 table->entry-list 1036 60 ())
(1046 #f 1045 14 ())
(1047 make-table-immutable! 1036 68 ())
(1048 table-expand-table! 1036 76 ())
(1049 table-enter-alist! 1036 84 ())
(1050 loop##1229 1049 21 ())
(1051 next-table-size 1036 92 ())
(1052 expand-hash-table! 1036 100 ())
(1053 loop##1224 1052 44 ())
(1054 new-entry 1036 108 ())
(1055 make-hash-table-set! 1036 116 ())
(1056 #f 1055 5 ())
(1057 make-hash-table-ref 1036 124 ())
(1058 #f 1057 5 ())
(1059 make->hash-table 1036 132 ())
(1060 #f 1059 37 ())
(1061 make-linear-table-set! 1036 140 ())
(1062 #f 1061 5 ())
(1063 make-linear-table-ref 1036 148 ())
(1064 #f 1063 5 ())
(1065 make-assoc 1036 156 ())
(1066 #f 1065 17 ())
(1067 loop 1066 16 ())
(1068 make-table-maker 1036 164 ())
(1069 #f 1068 67 ())
(1070 table-set! 1036 172 ())
(1071 table-ref 1036 180 ())
(1072 table? 1036 188 ())
(1073 really-make-table 1036 216 ())
(1074 table-set!-procedure 1036 224 ())
(1075 set-table-set!-procedure! 1036 232 ())
(1076 table-ref-procedure 1036 240 ())
(1077 set-table-ref-procedure! 1036 248 ())
(1078 table-data 1036 256 ())
(1079 set-table-data! 1036 264 ())
(1080 table-size 1036 272 ())
(1081 set-table-size! 1036 280 ())
(1082 make-table 1036 333 ())
(1083 #f 1036 389 ())
(1084 #f -49 #f ())
(1085 empty-rail-type? 1084 20 ())
(1086 optional-type? 1084 28 ())
(1087 head-type 1084 36 ())
(1088 tail-type 1084 44 ())
(1089 procedure-type-domain 1084 52 ())
(1090 procedure-type-argument-types 1084 60 ())
(1091 recur 1090 25 ())
(1092 procedure-type-arity 1084 68 ())
(1093 loop##1417 1092 9 ())
(1094 procedure-type? 1084 76 ())
(1095 fixed-arity-procedure-type? 1084 84 ())
(1096 loop 1095 39 ())
(1097 bottom-type? 1084 92 ())
(1098 rest-type? 1084 100 ())
(1099 same-type? 1084 108 ())
(1100 make-type 1084 116 ())
(1101 rail-type 1084 124 ())
(1102 make-some-values-type 1084 132 ())
(1103 other-type-info 1084 140 ())
(1104 restrictive? 1084 148 ())
(1105 procedure-type-codomain 1084 156 ())
(1106 meet? 1084 164 ())
(1107 meet-procedure? 1084 172 ())
(1108 make-optional-type 1084 180 ())
(1109 make-rest-type 1084 188 ())
(1110 mask->type 1084 196 ())
(1111 make-procedure-type 1084 204 ())
(1112 #f 1084 209 ())
(1113 meet-type 1112 4 ())
(1114 meet-rail 1112 12 ())
(1115 meet-procedure 1112 20 ())
(1116 subtype? 1112 28 ())
(1117 disjoin-rest 1112 36 ())
(1118 disjoin-type 1112 44 ())
(1119 loop##1412 1118 232 ())
(1120 head-type-really 1112 52 ())
(1121 rail-type->sexp 1112 60 ())
(1122 recur 1121 22 ())
(1123 type->sexp 1112 68 ())
(1124 #f 1123 124 ())
(1125 atomic-type->sexp 1112 76 ())
(1126 set-type-name! 1112 84 ())
(1127 make-other-type 1112 92 ())
(1128 name->type 1112 100 ())
(1129 procedure-type 1112 108 ())
(1130 join-type 1112 116 ())
(1131 join-rail 1112 124 ())
(1132 join-procedure 1112 132 ())
(1133 sexp->values-type 1112 140 ())
(1134 sexp->type 1112 148 ())
(1135 #f 1134 242 ())
(1136 #f 1134 290 ())
(1137 p 1112 156 ())
(1138 value-type? 1112 164 ())
(1139 new-type-bit 1112 172 ())
(1140 new-atomic-type 1112 180 ())
(1141 named-atomic-type 1112 188 ())
(1142 meta-type? 1112 196 ())
(1143 really-make-type 1112 224 ())
(1144 type-info 1112 232 ())
(1145 type-more 1112 240 ())
(1146 type-mask 1112 248 ())
(1147 #f 1112 260 ())
(1148 #f 1112 507 ())
(1149 loop 1148 74 ())
(1150 #f -51 #f ())
(1151 #f -51 #f ())
(1152 qualified-symbol 1151 4 ())
(1153 qualified-parent-name 1151 12 ())
(1154 qualified? 1151 20 ())
(1155 make-qualified 1151 28 ())
(1156 #f -51 #f ())
(1157 generated? 1156 4 ())
(1158 name? 1156 12 ())
(1159 transform? 1156 28 ())
(1160 binding-static 1156 36 ())
(1161 binding-place 1156 44 ())
(1162 same-denotation? 1156 52 ())
(1163 lookup 1156 60 ())
(1164 operator? 1156 68 ())
(1165 desyntaxify 1156 76 ())
(1166 loop 1165 249 ())
(1167 #f -51 #f ())
(1168 name->qualified 1167 4 ())
(1169 recur 1168 101 ())
(1170 schemify-sexp 1167 12 ())
(1171 loop 1170 146 ())
(1172 #f -51 #f ())
(1173 get-operator 1172 4 ())
(1174 operator-define! 1172 12 ())
(1175 #f -51 #f ())
(1176 define-schemifier 1175 4 ())
(1177 #f -51 #f ())
(1178 node? 1177 4 ())
(1179 node-set! 1177 12 ())
(1180 loop 1179 92 ())
(1181 node-ref 1177 20 ())
(1182 #f -51 #f ())
(1183 schemify1 1182 4 ())
(1184 schemify 1182 12 ())
(1185 #f -51 #f ())
(1186 get-funny 1185 4 ())
(1187 environment-reader 1185 12 ())
(1188 variable-type? 1185 20 ())
(1189 compatible-types? 1185 28 ())
(1190 variable-type 1185 36 ())
(1191 body-lossage 1185 44 ())
(1192 bind1 1185 52 ())
(1193 #f 1192 5 ())
(1194 make-node 1185 60 ())
(1195 classify-name 1185 68 ())
(1196 classify-operator-form 1185 76 ())
(1197 binding-type 1185 84 ())
(1198 literal? 1185 92 ())
(1199 classify 1185 100 ())
(1200 classify-macro-application 1185 108 ())
(1201 #f 1200 14 ())
(1202 scan-body-forms 1185 116 ())
(1203 #f 1202 167 ())
(1204 scan-body 1185 124 ())
(1205 #f 1204 58 ())
(1206 reflective-tower 1185 132 ())
(1207 make-transform 1185 140 ())
(1208 process-syntax 1185 148 ())
(1209 bind 1185 156 ())
(1210 bindrec 1185 164 ())
(1211 #f 1210 16 ())
(1212 make-binding 1185 172 ())
(1213 bind-aliases 1185 180 ())
(1214 #f 1213 24 ())
(1215 define-usual-suspects 1185 188 ())
(1216 #f 1215 22 ())
(1217 #f 1216 60 ())
(1218 #f 1215 52 ())
(1219 #f 1218 56 ())
(1220 #f 1219 5 ())
(1221 #f 1215 78 ())
(1222 syntax? 1185 196 ())
(1223 normalize-formals 1185 204 ())
(1224 n-ary? 1185 212 ())
(1225 number-of-required-args 1185 220 ())
(1226 loop##1686 1225 9 ())
(1227 specs? 1185 228 ())
(1228 at-least-this-long? 1185 236 ())
(1229 this-long? 1185 244 ())
(1230 names? 1185 252 ())
(1231 bind-source-file-name 1185 260 ())
(1232 define-classifier 1185 268 ())
(1233 maybe-transform-call 1185 276 ())
(1234 #f 1233 112 ())
(1235 forget-integration 1185 284 ())
(1236 impose-type 1185 292 ())
(1237 set-binding-place! 1185 300 ())
(1238 clobber-binding! 1185 308 ())
(1239 make-name-generator 1185 316 ())
(1240 #f 1239 10 ())
(1241 maybe-transform 1185 324 ())
(1242 compare 1241 71 ())
(1243 name-hash 1185 332 ())
(1244 generated-uid 1185 340 ())
(1245 name->symbol 1185 348 ())
(1246 generate-name 1185 356 ())
(1247 node-operator 1185 364 ())
(1248 make-similar-node 1185 372 ())
(1249 node-predicate 1185 380 ())
(1250 #f 1249 32 ())
(1251 operator-lookup 1185 388 ())
(1252 make-operator-table 1185 396 ())
(1253 #f 1185 426 ())
(1254 make-operator 1253 24 ())
(1255 operator-name 1253 32 ())
(1256 operator-uid 1253 40 ())
(1257 operator-nargs 1253 48 ())
(1258 operator-type 1253 56 ())
(1259 set-operator-type! 1253 64 ())
(1260 #f 1253 76 ())
(1261 really-make-node 1253 141 ())
(1262 node-plist 1253 149 ())
(1263 set-node-plist! 1253 157 ())
(1264 node-form 1253 165 ())
(1265 node-operator-id 1253 173 ())
(1266 #f 1253 185 ())
(1267 make-generated 1253 216 ())
(1268 generated-parent-name 1253 224 ())
(1269 generated-env 1253 232 ())
(1270 generated-token 1253 240 ())
(1271 generated-symbol 1253 248 ())
(1272 #f 1253 260 ())
(1273 really-make-transform 1253 311 ())
(1274 transform-id 1253 319 ())
(1275 transform-source 1253 327 ())
(1276 transform-aux-names 1253 335 ())
(1277 transform-type 1253 343 ())
(1278 transform-env 1253 351 ())
(1279 transform-procedure 1253 359 ())
(1280 #f 1253 371 ())
(1281 classify-literal 1253 451 ())
(1282 classify-call 1253 481 ())
(1283 #f 1253 487 ())
(1284 classify-transform-application 1283 45 ())
(1285 #f 1284 5 ())
(1286 #f 1283 58 ())
(1287 #f 1283 81 ())
(1288 #f 1283 102 ())
(1289 unspecific-node 1283 152 ())
(1290 #f 1283 225 ())
(1291 #f 1283 284 ())
(1292 lose 1291 26 ())
(1293 #f 1283 326 ())
(1294 #f 1283 365 ())
(1295 #f 1283 386 ())
(1296 #f 1283 407 ())
(1297 #f -51 #f ())
(1298 #f 1297 8 ())
(1299 #f 1298 31 ())
(1300 #f 1297 31 ())
(1301 #f 1297 52 ())
(1302 #f 1297 69 ())
(1303 #f 1302 24 ())
(1304 #f 1302 45 ())
(1305 #f -45 #f ())
(1306 make-population 1305 4 ())
(1307 add-to-population! 1305 12 ())
(1308 weak-memq 1305 20 ())
(1309 population-reduce 1305 28 ())
(1310 loop##1856 1309 9 ())
(1311 population->list 1305 36 ())
(1312 walk-population 1305 44 ())
(1313 #f 1312 5 ())
(1314 #f -50 #f ())
(1315 note-interface-name! 1314 4 ())
(1316 note-reference-to-interface! 1314 12 ())
(1317 make-interface 1314 20 ())
(1318 interface-ref 1314 28 ())
(1319 for-each-declaration 1314 36 ())
(1320 make-compound-interface 1314 44 ())
(1321 #f 1320 12 ())
(1322 loop 1321 16 ())
(1323 #f 1320 15 ())
(1324 #f 1323 5 ())
(1325 #f 1320 32 ())
(1326 really-make-simple-interface 1314 52 ())
(1327 #f 1326 5 ())
(1328 #f 1326 8 ())
(1329 make-simple-interface 1314 60 ())
(1330 #f 1329 20 ())
(1331 #f 1330 58 ())
(1332 interface? 1314 68 ())
(1333 really-make-interface 1314 96 ())
(1334 interface-name 1314 104 ())
(1335 set-interface-name! 1314 112 ())
(1336 interface-clients 1314 120 ())
(1337 walk-method 1314 128 ())
(1338 ref-method 1314 136 ())
(1339 #f 1314 144 ())
(1340 #f -54 #f ())
(1341 follow-forwarding-pointers 1340 20 ())
(1342 maybe-fix-place 1340 28 ())
(1343 initialize-structure! 1340 36 ())
(1344 structure-interface 1340 44 ())
(1345 structure-unstable? 1340 52 ())
(1346 get-new-location 1340 60 ())
(1347 really-package-define! 1340 68 ())
(1348 package-accesses 1340 76 ())
(1349 initialize-package! 1340 84 ())
(1350 #f 1349 39 ())
(1351 #f 1349 50 ())
(1352 initialize-package-if-necessary! 1340 92 ())
(1353 package-opens 1340 100 ())
(1354 package-note-caching 1340 108 ())
(1355 loop 1354 74 ())
(1356 package-put! 1340 116 ())
(1357 package-get 1340 124 ())
(1358 flush-location-names 1340 132 ())
(1359 make-new-location 1340 140 ())
(1360 for-each-definition 1340 148 ())
(1361 #f 1360 5 ())
(1362 extract-package-from-environment 1340 156 ())
(1363 package-define-funny! 1340 164 ())
(1364 define-funny-names! 1340 172 ())
(1365 package? 1340 180 ())
(1366 #f 1340 185 ())
(1367 package-definition 1366 4 ())
(1368 structure? 1366 12 ())
(1369 generic-lookup 1366 20 ())
(1370 package-lookup 1366 28 ())
(1371 really-package-lookup 1366 36 ())
(1372 loop 1371 98 ())
(1373 structure-lookup 1366 44 ())
(1374 package-define! 1366 52 ())
(1375 note-package-name! 1366 60 ())
(1376 really-package->environment 1366 68 ())
(1377 #f 1376 5 ())
(1378 new-package-uid 1366 76 ())
(1379 make-package 1366 84 ())
(1380 make-simple-package 1366 92 ())
(1381 #f 1380 60 ())
(1382 #f 1380 63 ())
(1383 package-name 1366 100 ())
(1384 note-structure-name! 1366 108 ())
(1385 for-each-export 1366 116 ())
(1386 #f 1385 19 ())
(1387 make-structure 1366 124 ())
(1388 #f 1387 71 ())
(1389 really-make-structure 1366 152 ())
(1390 structure-name 1366 160 ())
(1391 set-structure-name! 1366 168 ())
(1392 structure-clients 1366 176 ())
(1393 structure-package 1366 184 ())
(1394 structure-interface-really 1366 192 ())
(1395 set-structure-interface! 1366 200 ())
(1396 structure-interface-thunk 1366 208 ())
(1397 #f 1366 220 ())
(1398 really-make-package 1366 251 ())
(1399 package-cached 1366 259 ())
(1400 package-clients 1366 267 ())
(1401 package-plist 1366 275 ())
(1402 set-package-plist! 1366 283 ())
(1403 package-accesses-thunk 1366 291 ())
(1404 package-opens-thunk 1366 299 ())
(1405 set-package-opens-thunk! 1366 307 ())
(1406 package->environment 1366 315 ())
(1407 set-package->environment! 1366 323 ())
(1408 package-loaded? 1366 331 ())
(1409 set-package-loaded?! 1366 339 ())
(1410 package-clauses 1366 347 ())
(1411 package-file-name 1366 355 ())
(1412 package-get-location 1366 363 ())
(1413 set-package-get-location! 1366 371 ())
(1414 package-integrate? 1366 379 ())
(1415 set-package-integrate?! 1366 387 ())
(1416 package-unstable? 1366 395 ())
(1417 package-definitions 1366 403 ())
(1418 package-opens-really 1366 411 ())
(1419 set-package-opens! 1366 419 ())
(1420 package-uid 1366 427 ())
(1421 #f 1366 439 ())
(1422 #f -63 #f ())
(1423 environment-ref 1422 4 ())
(1424 environment-set! 1422 12 ())
(1425 #f 1424 98 ())
(1426 environment-define! 1422 20 ())
(1427 *structure-ref 1422 28 ())
(1428 carefully 1422 36 ())
(1429 interaction-environment 1422 57 ())
(1430 set-interaction-environment! 1422 65 ())
(1431 with-interaction-environment 1422 73 ())
(1432 scheme-report-environment 1422 81 ())
(1433 set-scheme-report-environment! 1422 104 ())
(1434 make-reflective-tower 1422 112 ())
(1435 recur 1434 16 ())
(1436 #f 1435 5 ())
(1437 set-reflective-tower-maker! 1422 138 ())
(1438 #f -52 #f ())
(1439 define-usual-macro 1438 18 ())
(1440 usual-transform 1438 26 ())
(1441 #f 1438 38 ())
(1442 #f 1438 56 ())
(1443 recur 1442 77 ())
(1444 #f 1438 74 ())
(1445 #f 1444 162 ())
(1446 #f 1438 92 ())
(1447 #f 1438 110 ())
(1448 specs? 1438 124 ())
(1449 #f 1438 136 ())
(1450 #f 1438 154 ())
(1451 #f 1450 144 ())
(1452 #f 1438 168 ())
(1453 interesting-to-quasiquote? 1452 33 ())
(1454 descend-quasiquote-vector 1452 38 ())
(1455 #f 1454 20 ())
(1456 descend-quasiquote-pair 1452 43 ())
(1457 #f 1456 14 ())
(1458 #f 1457 14 ())
(1459 descend-quasiquote 1452 48 ())
(1460 finalize-quasiquote 1452 53 ())
(1461 expand-quasiquote 1452 58 ())
(1462 #f -52 #f ())
(1463 #f 1462 8 ())
(1464 process-rules 1462 22 ())
(1465 free-meta-variables 1464 63 ())
(1466 meta-variables 1464 68 ())
(1467 process-template 1464 73 ())
(1468 process-pattern 1464 78 ())
(1469 #f 1468 90 ())
(1470 process-segment-match 1464 83 ())
(1471 process-match 1464 88 ())
(1472 process-rule 1464 93 ())
(1473 #f 1472 99 ())
(1474 make-transformer 1464 98 ())
(1475 segment-pattern? 1462 30 ())
(1476 segment-template? 1462 38 ())
(1477 find-free-names-in-syntax-rules 1462 72 ())
(1478 free-names 1477 11 ())
(1479 meta-variables 1477 16 ())
(1480 loop##2031 1477 25 ())
(1481 #f -48 #f ())
(1482 namestring 1481 4 ())
(1483 #f 1482 173 ())
(1484 namestring-component 1481 28 ())
(1485 file-name-directory 1481 60 ())
(1486 file-name-nondirectory 1481 68 ())
(1487 file-nondirectory-position 1481 76 ())
(1488 loop 1487 21 ())
(1489 string-posq 1481 84 ())
(1490 loop 1489 16 ())
(1491 translations 1481 100 ())
(1492 set-translation! 1481 108 ())
(1493 translate 1481 116 ())
(1494 loop 1493 22 ())
(1495 #f -55 #f ())
(1496 #f -55 #f ())
(1497 noting-undefined-variables 1496 4 ())
(1498 foo 1497 10 ())
(1499 #f 1497 18 ())
(1500 #f 1497 34 ())
(1501 #f 1500 3 ())
(1502 #f 1500 9 ())
(1503 #f 1502 3 ())
(1504 #f 1503 17 ())
(1505 #f 1503 182 ())
(1506 note-undefined! 1496 12 ())
(1507 #f -55 #f ())
(1508 set-optimizer! 1507 4 ())
(1509 get-optimizer 1507 12 ())
(1510 scan-form-list 1507 20 ())
(1511 loop 1510 16 ())
(1512 really-scan-forms 1507 28 ())
(1513 scan-forms 1507 36 ())
(1514 define-all-operators 1507 44 ())
(1515 #f 1514 14 ())
(1516 #f 1514 60 ())
(1517 initialize-usual-transforms! 1507 52 ())
(1518 #f 1517 5 ())
(1519 check-structure 1507 60 ())
(1520 #f 1519 14 ())
(1521 apply-optimizers 1507 68 ())
(1522 #f 1521 5 ())
(1523 optimize 1507 76 ())
(1524 #f 1523 39 ())
(1525 #f 1523 70 ())
(1526 #f 1523 144 ())
(1527 #f 1526 48 ())
(1528 really-scan-file 1507 84 ())
(1529 #f 1528 73 ())
(1530 recur 1529 121 ())
(1531 scan-package 1507 92 ())
(1532 #f 1531 81 ())
(1533 #f 1532 22 ())
(1534 scan-structures 1507 100 ())
(1535 recur 1534 29 ())
(1536 #f 1535 192 ())
(1537 #f 1535 233 ())
(1538 process-define-syntax 1507 108 ())
(1539 make-standard-optimizer 1507 116 ())
(1540 #f 1539 9 ())
(1541 #f 1539 22 ())
(1542 default-standard-optimizer 1507 124 ())
(1543 set-standard-optimizers! 1507 140 ())
(1544 scan-file 1507 148 ())
(1545 scan-form 1507 191 ())
(1546 make-define-primitive-node 1507 236 ())
(1547 #f -55 #f ())
(1548 #f -56 #f ())
(1549 debug-data? 1548 4 ())
(1550 make-debug-data 1548 32 ())
(1551 debug-data-source 1548 40 ())
(1552 set-debug-data-source! 1548 48 ())
(1553 debug-data-env-maps 1548 56 ())
(1554 set-debug-data-env-maps! 1548 64 ())
(1555 debug-data-pc-in-parent 1548 72 ())
(1556 debug-data-parent 1548 80 ())
(1557 debug-data-name 1548 88 ())
(1558 debug-data-uid 1548 96 ())
(1559 #f 1548 104 ())
(1560 #f -57 #f ())
(1561 #f -57 #f ())
(1562 emit-segment! 1561 4 ())
(1563 emit-with-environment-maps! 1561 12 ())
(1564 #f 1563 24 ())
(1565 note-environment 1561 20 ())
(1566 #f 1565 22 ())
(1567 note-source-code 1561 28 ())
(1568 #f 1567 22 ())
(1569 attach-label 1561 36 ())
(1570 #f 1569 11 ())
(1571 #f 1570 31 ())
(1572 emit-byte! 1561 44 ())
(1573 instruction 1561 52 ())
(1574 #f 1573 27 ())
(1575 #f 1574 20 ())
(1576 instruction-using-label 1561 60 ())
(1577 #f 1576 37 ())
(1578 make-label 1561 68 ())
(1579 emit-literal! 1561 76 ())
(1580 segment-data->template 1561 84 ())
(1581 loop##2206 1580 55 ())
(1582 #f -57 #f ())
(1583 note-debug-data! 1582 4 ())
(1584 debug-data->info 1582 12 ())
(1585 new-template-uid 1582 20 ())
(1586 new-debug-data 1582 28 ())
(1587 #f -57 #f ())
(1588 make-astate 1587 4 ())
(1589 segment->template 1587 12 ())
(1590 #f 1589 151 ())
(1591 instruction-with-template 1587 20 ())
(1592 #f 1591 8 ())
(1593 instruction-with-location 1587 28 ())
(1594 #f 1593 8 ())
(1595 instruction-with-literal 1587 36 ())
(1596 #f 1595 8 ())
(1597 sequentially-2 1587 44 ())
(1598 #f 1597 42 ())
(1599 sequentially 1587 52 ())
(1600 loop 1599 88 ())
(1601 #f 1599 99 ())
(1602 loop 1601 16 ())
(1603 #f -57 #f ())
(1604 get-debug-data 1603 4 ())
(1605 saving-and-restoring 1603 12 ())
(1606 swap 1605 5 ())
(1607 with-fresh-compiler-state 1603 20 ())
(1608 #f 1607 51 ())
(1609 #f 1608 3 ())
(1610 #f 1608 6 ())
(1611 debug-flag-modifier 1603 28 ())
(1612 #f 1611 22 ())
(1613 debug-flag-accessor 1603 36 ())
(1614 #f 1613 22 ())
(1615 set-template-uid! 1603 44 ())
(1616 template-uid 1603 52 ())
(1617 #f -57 #f ())
(1618 make-assembly-state 1617 48 ())
(1619 astate-literals 1617 56 ())
(1620 set-astate-literals! 1617 64 ())
(1621 astate-count 1617 72 ())
(1622 set-astate-count! 1617 80 ())
(1623 astate-pc 1617 88 ())
(1624 set-astate-pc! 1617 96 ())
(1625 astate-code-vector 1617 104 ())
(1626 #f 1617 115 ())
(1627 #f -53 #f ())
(1628 node-type 1627 4 ())
(1629 reconstruct-type 1627 12 ())
(1630 reconstruct 1627 20 ())
(1631 #f 1627 32 ())
(1632 define-reconstructor 1627 45 ())
(1633 #f 1627 60 ())
(1634 #f 1633 76 ())
(1635 #f 1633 201 ())
(1636 careful-codomain 1627 71 ())
(1637 reconstruct-body 1627 79 ())
(1638 #f 1627 101 ())
(1639 #f 1638 11 ())
(1640 reconstruct-name 1638 22 ())
(1641 reconstruct-call 1638 30 ())
(1642 lose 1641 65 ())
(1643 #f 1642 3 ())
(1644 loop 1641 125 ())
(1645 #f 1638 45 ())
(1646 #f 1638 63 ())
(1647 #f 1638 81 ())
(1648 #f 1647 138 ())
(1649 fork-constraints 1638 92 ())
(1650 #f 1649 12 ())
(1651 #f 1638 107 ())
(1652 loop##2325 1651 9 ())
(1653 examine 1638 118 ())
(1654 #f 1638 133 ())
(1655 #f 1638 151 ())
(1656 #f 1655 52 ())
(1657 #f 1638 169 ())
(1658 #f 1638 187 ())
(1659 node->type 1638 198 ())
(1660 #f 1638 213 ())
(1661 #f 1638 231 ())
(1662 #f 1638 300 ())
(1663 #f 1662 9 ())
(1664 #f 1638 365 ())
(1665 reconstruct-apply 1638 376 ())
(1666 #f 1665 65 ())
(1667 declare-operator-type 1638 494 ())
(1668 #f 1667 19 ())
(1669 #f 1638 499 ())
(1670 #f 1669 507 ())
(1671 constant-type 1670 463 ())
(1672 #f -58 #f ())
(1673 return-cont? 1672 12 ())
(1674 maybe-push-continuation 1672 20 ())
(1675 make-cont 1672 28 ())
(1676 fall-through-cont 1672 36 ())
(1677 #f -58 #f ())
(1678 make-startup-procedure 1677 4 ())
(1679 #f 1678 14 ())
(1680 grumble 1677 12 ())
(1681 note-caching 1677 20 ())
(1682 location-on-demand 1677 28 ())
(1683 #f 1682 5 ())
(1684 package-accessor-on-demand 1677 36 ())
(1685 #f 1684 5 ())
(1686 get-location-for-unassignable 1677 44 ())
(1687 #f 1686 86 ())
(1688 #f 1686 89 ())
(1689 get-location-for-undefined 1677 52 ())
(1690 #f 1689 86 ())
(1691 #f 1689 89 ())
(1692 get-location 1677 60 ())
(1693 win 1692 12 ())
(1694 #f -58 #f ())
(1695 diagnose-call-error 1694 4 ())
(1696 #f 1695 156 ())
(1697 type-check 1694 12 ())
(1698 #f 1697 109 ())
(1699 #f 1697 141 ())
(1700 compile 1694 20 ())
(1701 initial-cenv 1694 28 ())
(1702 compile-top 1694 36 ())
(1703 named-cont 1694 44 ())
(1704 ignore-values-cont? 1694 52 ())
(1705 deliver-value 1694 60 ())
(1706 #f -58 #f ())
(1707 compile-definition 1706 4 ())
(1708 #f 1707 54 ())
(1709 compile-scanned-form 1706 12 ())
(1710 #f -58 #f ())
(1711 shrink-segment 1710 4 ())
(1712 careful-sequentially 1710 12 ())
(1713 return-cont 1710 20 ())
(1714 #f -58 #f ())
(1715 compile-scanned-forms 1714 4 ())
(1716 recur 1715 104 ())
(1717 compile-and-run-scanned-forms 1714 12 ())
(1718 do-it 1717 23 ())
(1719 loop##2682 1717 32 ())
(1720 maybe-newline-after 1714 20 ())
(1721 #f 1720 10 ())
(1722 compile-and-run-file 1714 28 ())
(1723 #f 1722 5 ())
(1724 compile-and-run-forms 1714 36 ())
(1725 #f 1724 5 ())
(1726 compile-file 1714 44 ())
(1727 compile-form 1714 52 ())
(1728 #f -58 #f ())
(1729 push-all-but-last 1728 4 ())
(1730 recur 1729 22 ())
(1731 #f -58 #f ())
(1732 define-compilator 1731 4 ())
(1733 push-arguments 1731 12 ())
(1734 recur 1733 32 ())
(1735 compile-unknown-call 1731 20 ())
(1736 #f -58 #f ())
(1737 define-closed-compilator 1736 4 ())
(1738 define-compiler-primitive 1736 12 ())
(1739 n-ary-primitive-compilator 1736 20 ())
(1740 #f 1739 5 ())
(1741 define-n-ary-compiler-primitive 1736 28 ())
(1742 define-n-ary-constructor 1736 36 ())
(1743 #f 1742 14 ())
(1744 #f 1742 17 ())
(1745 simple-compilator 1736 44 ())
(1746 #f 1745 5 ())
(1747 simple-closed-compilator 1736 52 ())
(1748 #f 1747 5 ())
(1749 define-simple-primitive 1736 60 ())
(1750 define-stob-predicate 1736 68 ())
(1751 symbol-append 1736 76 ())
(1752 define-vector-primitives 1736 84 ())
(1753 def-prim 1752 22 ())
(1754 nargs->domain 1736 92 ())
(1755 loop##2580 1754 9 ())
(1756 define-data-struct-primitives 1736 100 ())
(1757 def-prim 1756 8 ())
(1758 loop##2610 1756 168 ())
(1759 direct-closed-compilator 1736 108 ())
(1760 #f 1759 5 ())
(1761 direct-compilator 1736 116 ())
(1762 #f 1761 5 ())
(1763 get-closed-compilator 1736 124 ())
(1764 #f -58 #f ())
(1765 set-type-check?! 1764 4 ())
(1766 generate-trap 1764 12 ())
(1767 name-node-binding 1764 20 ())
(1768 environment-level 1764 28 ())
(1769 really-bind-vars 1764 36 ())
(1770 #f 1769 23 ())
(1771 loop 1770 31 ())
(1772 bind-flat-vars 1764 44 ())
(1773 bind-vars 1764 52 ())
(1774 cont-name 1764 60 ())
(1775 ignore-values-cont 1764 68 ())
(1776 fall-through-cont? 1764 76 ())
(1777 compile-body 1764 84 ())
(1778 #f 1777 11 ())
(1779 #f 1778 44 ())
(1780 #f 1764 89 ())
(1781 lookup-variables 1780 4 ())
(1782 loop 1781 19 ())
(1783 compile-lambda-code 1780 12 ())
(1784 compile-lambda 1780 20 ())
(1785 push-all-with-names 1780 28 ())
(1786 compile-redex 1780 36 ())
(1787 compile-call 1780 44 ())
(1788 compile-constant 1780 52 ())
(1789 #f 1780 64 ())
(1790 #f 1780 67 ())
(1791 #f 1790 5 ())
(1792 #f 1791 5 ())
(1793 #f 1780 89 ())
(1794 #f 1780 110 ())
(1795 #f 1780 130 ())
(1796 #f 1780 151 ())
(1797 #f 1780 172 ())
(1798 #f 1780 193 ())
(1799 compile-begin 1780 222 ())
(1800 loop 1799 61 ())
(1801 #f 1780 278 ())
(1802 #f 1780 299 ())
(1803 compile-letrec 1780 370 ())
(1804 #f 1803 73 ())
(1805 #f 1803 157 ())
(1806 #f 1780 502 ())
(1807 #f -58 #f ())
(1808 #f 1807 8 ())
(1809 #f 1807 31 ())
(1810 #f 1807 39 ())
(1811 loop##2455 1810 9 ())
(1812 #f 1810 56 ())
(1813 #f 1810 268 ())
(1814 #f 1810 333 ())
(1815 #f 1810 336 ())
(1816 #f 1810 353 ())
(1817 #f 1810 356 ())
(1818 #f 1810 376 ())
(1819 #f 1810 379 ())
(1820 #f 1810 399 ())
(1821 #f 1810 402 ())
(1822 #f 1810 443 ())
(1823 #f 1822 100 ())
(1824 #f 1810 446 ())
(1825 #f 1810 469 ())
(1826 #f -58 #f ())
(1827 loop 1826 50 ())
(1828 location-for-reference 1826 120 ())
(1829 loop 1828 25 ())
(1830 #f -64 #f ())
(1831 eval 1830 4 ())
(1832 #f 1831 22 ())
(1833 load-into 1830 12 ())
(1834 #f 1833 11 ())
(1835 eval-from-file 1830 20 ())
(1836 #f 1835 14 ())
(1837 eval-scanned-forms 1830 28 ())
(1838 #f 1837 14 ())
(1839 invoke-template 1830 36 ())
(1840 load 1830 44 ())
(1841 #f 1840 39 ())
(1842 #f -46 #f ())
(1843 display-condition 1842 16 ())
(1844 #f 1843 9 ())
(1845 really-display-condition 1842 25 ())
(1846 #f 1845 220 ())
(1847 &disclose-condition 1842 121 ())
(1848 limited-write 1842 143 ())
(1849 recur 1848 19 ())
(1850 #f 1849 134 ())
(1851 #f 1850 21 ())
(1852 #f -68 #f ())
(1853 command-processor 1852 4 ())
(1854 loop 1853 66 ())
(1855 #f 1854 7 ())
(1856 #f 1855 5 ())
(1857 #f 1856 63 ())
(1858 #f 1855 8 ())
(1859 #f 1858 69 ())
(1860 #f 1858 164 ())
(1861 #f 1858 200 ())
(1862 #f 1861 10 ())
(1863 mini-load 1852 12 ())
(1864 read-string 1852 20 ())
(1865 loop 1864 19 ())
(1866 #f -40 #f ())
(1867 #f -38 #f ())
(1868 run-threads 1867 4 ())
(1869 #f 1868 5 ())
(1870 loop 1869 27 ())
(1871 #f 1870 5 ())
(1872 #f 1871 8 ())
(1873 run-threads-with-housekeeper 1867 12 ())
(1874 #f 1873 5 ())
(1875 loop 1874 30 ())
(1876 #f 1875 5 ())
(1877 #f 1876 63 ())
(1878 round-robin-event-handler 1867 20 ())
(1879 real-next-thread 1878 15 ())
(1880 next-thread 1878 20 ())
(1881 #f 1880 17 ())
(1882 asynchronous-event-handler 1878 25 ())
(1883 thread-event-handler 1878 30 ())
(1884 #f 1883 105 ())
(1885 make-counter 1867 28 ())
(1886 increment-counter! 1867 44 ())
(1887 decrement-counter! 1867 52 ())
(1888 #f -39 #f ())
(1889 root-scheduler 1888 4 ())
(1890 #f 1889 10 ())
(1891 #f 1890 5 ())
(1892 housekeeper 1891 5 ())
(1893 #f 1891 23 ())
(1894 make-root-event-handler 1888 12 ())
(1895 add-thread! 1894 32 ())
(1896 #f 1894 53 ())
(1897 #f 1894 56 ())
(1898 #f 1894 59 ())
(1899 root-wait 1888 37 ())
(1900 loop 1899 13 ())
(1901 #f 1900 6 ())
(1902 #f 1901 19 ())
(1903 do-some-waiting 1888 65 ())
(1904 call-when-deadlocked! 1888 89 ())
(1905 spawn-output-forcers 1888 97 ())
(1906 #f 1905 34 ())
(1907 #f -44 #f ())
(1908 usual-resumer 1907 4 ())
(1909 #f 1908 5 ())
(1910 #f 1909 14 ())
(1911 initialize-rts 1907 12 ())
(1912 #f 1911 38 ())
(1913 #f 1912 6 ())
(1914 #f 1913 42 ())
(1915 #f 1914 6 ())
(1916 #f -69 #f ())
(1917 start 1916 4 ())
(1918 #f 1917 5 ())
(1919 #f 1918 5 ())
(1920 #f 1919 58 ())
(1921 make-built-in-structures 1916 12 ())
(1922 #f 1921 33 ())
(1923 #f 1921 50 ())
(1924 initialize-interaction-environment! 1916 20 ())
(1925 make-initial-package 1916 28 ())
(1926 #f 1925 16 ())
(1927 make-tower 1916 36 ())
(1928 #f -62 #f ())
(1929 inline-transform 1928 4 ())
(1930 #f 1929 55 ())
(1931 #f 1929 61 ())
(1932 make-substitution 1928 12 ())
(1933 #f 1932 25 ())
(1934 substitute 1928 20 ())
(1935 #f 1934 157 ())
(1936 #f 1934 233 ())
(1937 qualified->name 1928 45 ())
(1938 recur 1937 16 ())
(1939 get-qualified-env 1928 53 ())
(1940 #f -66 #f ())
(1941 operator 1940 4 ())
(1942 simple-interface 1940 12 ())
(1943 #f 1942 11 ())
(1944 package 1940 20 ())
(1945 loop##2864 1944 62 ())
(1946 transform 1940 28 ())
(1947 #f -60 #f ())
(1948 procedure 1947 36 ())
(1949 #f -59 #f ())
(1950 #f -59 #f ())
(1951 make-a-package 1950 4 ())
(1952 loser 1950 12 ())
(1953 *verify-later!* 1950 28 ())
(1954 verify-later! 1950 36 ())
(1955 set-verify-later! 1950 44 ())
(1956 note-name! 1950 52 ())
(1957 #f -65 #f ())
(1958 ensure-loaded 1957 4 ())
(1959 #f 1958 9 ())
(1960 #f 1958 12 ())
(1961 #f 1960 8 ())
(1962 #f 1961 6 ())
(1963 #f 1962 7 ())
(1964 #f -70 #f ())
(1965 #f 1964 1 ())
(1966 get-location 1965 3 ())
(1967 #f 1965 346 ())
(1968 #f 1967 477 ())
(1969 #f 1968 497 ())
(1970 #f 1969 482 ())
(1971 #f 1970 498 ())
(1972 #f 1971 491 ())
(1973 #f 1972 498 ())
(1974 #f 1973 493 ())
(1975 #f 1974 491 ())
(1976 #f 1975 505 ())
(1977 #f 1976 491 ())
(1978 #f 1977 475 ())
(1979 #f 1978 503 ())
(1980 #f 1979 505 ())
(1981 #f 1980 491 ())
(1982 #f 1981 491 ())
(1983 #f 1982 491 ())
(1984 #f 1983 485 ())
(1985 #f 1984 404 ())
(1986 #f 1984 445 ())
(1987 #f 1984 476 ())
(1988 #f 1987 67 ())
(1989 #f 1987 171 ())
(1990 #f 1987 240 ())
(1991 conc 1990 35 ())
(1992 #f 1991 17 ())
(1993 #f 1987 509 ())
(1994 #f 1993 476 ())
(1995 #f 1994 406 ())
(1996 loop 1995 107 ())
(1997 #f 1995 186 ())
(1998 #f 1995 213 ())
(1999 #f 1995 379 ())
(2000 #f 1995 432 ())
(2001 #f 1994 500 ())
(2002 #f 2001 249 ())
(2003 mem? 2002 176 ())
(2004 #f 2002 227 ())
(2005 #f 2001 423 ())
(2006 loop##2867 2005 53 ())
(2007 #f 2001 464 ())
(2008 #f 2001 495 ())
(2009 #f 2008 491 ())
(2010 #f 2009 480 ())
(2011 #f 2010 479 ())
(2012 #f 2011 498 ())
(2013 #f 2012 479 ())
(2014 #f 2013 498 ())
(2015 #f 2014 507 ())
(2016 #f 2015 498 ())
(2017 #f 2016 299 ())
(2018 #f 2016 480 ())
(2019 #f 2018 473 ())
(2020 #f 2019 491 ())
(2021 #f 2020 491 ())
(2022 #f 2021 484 ())
(2023 #f 2022 484 ())
(2024 #f 2023 484 ())
(2025 #f 2024 494 ())
(2026 #f 2025 505 ())
(2027 #f 2026 505 ())
(2028 #f 2027 484 ())
(2029 #f 2028 498 ())
(2030 #f 2029 484 ())
(2031 #f 2030 484 ())
(2032 #f 2031 505 ())
(2033 #f 2032 491 ())
(2034 #f 2033 256 ())
(2035 #f 2034 426 ())
(2036 #f 2033 488 ())
(2037 #f 2036 489 ())
(2038 #f 2037 188 ())
(2039 loop 2038 82 ())
(2040 #f 2037 323 ())
(2041 loop 2040 82 ())
(2042 #f 2037 430 ())
(2043 loop 2042 82 ())
(2044 #f 2037 490 ())
(2045 #f 2044 20 ())
(2046 loop 2045 82 ())
(2047 #f 2044 99 ())
(2048 loop 2047 82 ())
(2049 #f 2044 178 ())
(2050 loop 2049 82 ())
(2051 #f 2044 257 ())
(2052 loop 2051 82 ())
(2053 #f 2044 336 ())
(2054 loop 2053 82 ())
(2055 #f 2044 485 ())
(2056 #f 2055 423 ())
(2057 loop 2056 82 ())
(2058 #f 2055 483 ())
(2059 #f 2058 490 ())
(2060 #f 2059 497 ())
(2061 #f 2060 497 ())
(2062 #f 2061 486 ())
(2063 #f 2062 254 ())
(2064 #f 2062 393 ())
(2065 #f 2062 434 ())
(2066 #f 2062 475 ())
(2067 #f 2062 506 ())
(2068 #f 2067 95 ())
(2069 #f 2067 283 ())
(2070 #f 2067 508 ())
(2071 #f 2070 494 ())
(2072 #f 2071 492 ())
(2073 #f 2072 508 ())
(2074 #f 2073 474 ())
(2075 #f 2074 492 ())
(2076 #f 2075 294 ())
(2077 #f 2075 468 ())
(2078 #f 2075 499 ())
(2079 #f 2078 11 ())
(2080 #f 2078 52 ())
(2081 #f 2080 136 ())
(2082 #f 2078 93 ())
(2083 #f 2082 307 ())
(2084 #f 2082 374 ())
(2085 #f 2078 428 ())
(2086 #f 2078 469 ())
(2087 #f 2086 162 ())
(2088 #f 2078 500 ())
(2089 parse-package-clauses 2088 19 ())
(2090 loop 2089 66 ())
(2091 #f 2088 24 ())
(2092 #f 2091 25 ())
(2093 #f 2092 134 ())
(2094 #f 2088 248 ())
(2095 #f 2088 289 ())
(2096 loop 2095 30 ())
(2097 #f 2088 386 ())
(2098 #f 2088 455 ())
(2099 #f 2088 486 ())
(2100 #f 2099 39 ())
(2101 loop 2100 47 ())
(2102 #f 2100 81 ())
(2103 #f 2100 101 ())
(2104 #f 2099 108 ())
(2105 #f 2099 504 ())
(2106 #f 2105 479 ())
(2107 #f 2106 502 ())
(2108 #f 2107 498 ())
(2109 #f 2108 486 ())
(2110 #f 2109 479 ())
(2111 #f 2110 486 ())
(2112 #f 2111 137 ())
(2113 #f 2111 253 ())
(2114 #f 2111 480 ())
(2115 #f 2114 497 ())
(2116 #f 2115 491 ())
(2117 #f 2116 483 ())
(2118 #f 2117 479 ())
(2119 #f 2118 498 ())
(2120 #f 2119 471 ())
(2121 #f 2120 489 ())
(2122 #f 2121 484 ())
(2123 #f 2122 505 ())
(2124 #f 2123 484 ())
(2125 #f 2124 505 ())
(2126 #f 2125 505 ())
(2127 #f 2126 484 ())
(2128 #f 2127 484 ())
(2129 #f 2128 477 ())
(2130 #f 2129 491 ())
(2131 #f #f #f ())
-
