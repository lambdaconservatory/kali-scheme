; Package uid -> name
(0 low-structures)
(1 debug-low-structures)
(2 alt-features-structures)
(3 cheat-features-structures)
(4 the-interfaces)
(5 meta-module-system)
(6 run-time-structures)
(7 compiler-structures)
(8 initial-structures)
(9 debug-structures)
(10 usual-structures)
(11 alt-low-structures)
(12 compiler-structures)
(13 linker-structures)
(14 scheme-level-0)
(15 scheme-level-1)
(16 records)
(17 define-record-types)
(18 methods)
(19 number-i/o)
(20 fluids)
(21 wind)
(22 session-data)
(23 i/o)
(24 channel-i/o)
(25 conditions)
(26 writing)
(27 reading)
(28 scheme-level-2)
(29 features)
(30 templates)
(31 continuations)
(32 more-types)
(33 enumerated)
(34 architecture)
(35 exceptions)
(36 interrupts)
(37 threads)
(38 scheduler)
(39 root-scheduler)
(40 enum-case)
(41 queues)
(42 locks)
(43 usual-resumer)
(44 weak)
(45 display-conditions)
(46 tables)
(47 filenames)
(48 meta-types)
(49 interfaces)
(50 syntactic)
(51 usual-macros)
(52 reconstruction)
(53 packages)
(54 scan)
(55 debug-data)
(56 stack-check)
(57 segments)
(58 compiler)
(59 defpackage)
(60 types)
(61 module-system)
(62 inline)
(63 environments)
(64 evaluation)
(65 ensures-loaded)
(66 for-reification)
(67 scheme)
(68 mini-command)
(69 initial-system)
-
; Location uid -> (name . package-uid)
(0 (current-cont . 14))
(1 (closure-template . 14))
(2 (continuation-ref . 14))
(3 (binary-comparison-reduce2 . 14))
(4 (closure? . 14))
(5 (cell-set! . 14))
(6 (port-pending-eof? . 14))
(7 (complex? . 14))
(8 (arithmetic-shift . 14))
(9 (set-port-pending-eof?! . 14))
(10 (port-handler . 14))
(11 (signal-condition . 14))
(12 (integer? . 14))
(13 (session-data . 14))
(14 (make-closure . 14))
(15 (template-ref . 14))
(16 (set-session-data! . 14))
(17 (make-rectangular . 14))
(18 (channel? . 14))
(19 (open-channel . 14))
(20 (string=? . 14))
(21 (cell-ref . 14))
(22 (find-all . 14))
(23 (extended-number? . 14))
(24 (reverse-list->string . 14))
(25 (port-locked? . 14))
(26 (denominator . 14))
(27 (call-with-values . 14))
(28 (weak-pointer-ref . 14))
(29 (find-all-symbols . 14))
(30 (set-port-locked?! . 14))
(31 (code-vector? . 14))
(32 (port-status . 14))
(33 (pop . 14))
(34 (exp . 14))
(35 (sin . 14))
(36 (set-port-status! . 14))
(37 (make-extended-number . 14))
(38 (channel-os-index . 14))
(39 (cos . 14))
(40 (collect . 14))
(41 (external-lookup . 14))
(42 (tan . 14))
(43 (message . 14))
(44 (log . 14))
(45 (continuation-length . 14))
(46 (find-all-records . 14))
(47 (make-code-vector . 14))
(48 (cdr . 14))
(49 (bitwise-xor . 14))
(50 (car . 14))
(51 (string? . 14))
(52 (symbol? . 14))
(53 (bitwise-not . 14))
(54 (set-cdr! . 14))
(55 (vector? . 14))
(56 (closure-env . 14))
(57 (set-car! . 14))
(58 (bitwise-ior . 14))
(59 (port-buffer . 14))
(60 (number? . 14))
(61 (template-length . 14))
(62 (string-hash . 14))
(63 (primitive-catch . 14))
(64 (set-port-buffer! . 14))
(65 (make-string . 14))
(66 (record? . 14))
(67 (make-vector . 14))
(68 (extended-number-set! . 14))
(69 (write-image . 14))
(70 (eq? . 14))
(71 (bitwise-and . 14))
(72 (code-vector-set! . 14))
(73 (location-id . 14))
(74 (set-location-id! . 14))
(75 (make-record . 14))
(76 (vector . 14))
(77 (intern . 14))
(78 (values . 14))
(79 (string-set! . 14))
(80 (unassigned . 14))
(81 (copy-bytes! . 14))
(82 (vector-set! . 14))
(83 (extended-number-ref . 14))
(84 (unspecific . 14))
(85 (channel-maybe-write . 14))
(86 (code-vector-ref . 14))
(87 (schedule-interrupt . 14))
(88 (record . 14))
(89 (set-interrupt-handlers! . 14))
(90 (eof-object? . 14))
(91 (record-set! . 14))
(92 (ascii->char . 14))
(93 (char->ascii . 14))
(94 (port-limit . 14))
(95 (set-enabled-interrupts! . 14))
(96 (external-value . 14))
(97 (make-immutable! . 14))
(98 (port-index . 14))
(99 (set-port-limit! . 14))
(100 (channel-status . 14))
(101 (current-thread . 14))
(102 (set-port-index! . 14))
(103 (string-ref . 14))
(104 (set-exception-handlers! . 14))
(105 (immutable? . 14))
(106 (set-current-thread! . 14))
(107 (vector-ref . 14))
(108 (exact? . 14))
(109 (symbol->string . 14))
(110 (write-char . 14))
(111 (make-polar . 14))
(112 (record-ref . 14))
(113 (eof-object . 14))
(114 (numerator . 14))
(115 (channel-id . 14))
(116 (extended-number-length . 14))
(117 (error . 14))
(118 (exact->inexact . 14))
(119 (inexact->exact . 14))
(120 (checked-record-set! . 14))
(121 (apply . 14))
(122 (memory-status . 14))
(123 (code-vector-length . 14))
(124 (floor . 14))
(125 (with-continuation . 14))
(126 (>= . 14))
(127 (magnitude . 14))
(128 (<= . 14))
(129 (char=? . 14))
(130 (char<? . 14))
(131 (binary-reduce2 . 14))
(132 (binary-reduce1 . 14))
(133 (continuation? . 14))
(134 (remainder . 14))
(135 (vm-return . 14))
(136 (false . 14))
(137 (angle . 14))
(138 (port? . 14))
(139 (string-length . 14))
(140 (external? . 14))
(141 (make-continuation . 14))
(142 (vector-length . 14))
(143 (port-lock . 14))
(144 (template? . 14))
(145 (rational? . 14))
(146 (add-finalizer! . 14))
(147 (checked-record-ref . 14))
(148 (channel-maybe-read . 14))
(149 (location? . 14))
(150 (return-from-exception . 14))
(151 (set-port-lock! . 14))
(152 (make-port . 14))
(153 (external-name . 14))
(154 (pair? . 14))
(155 (make-external . 14))
(156 (port-data . 14))
(157 (record-length . 14))
(158 (external-call . 14))
(159 (get-cont-from-heap . 14))
(160 (real-part . 14))
(161 (real? . 14))
(162 (make-template . 14))
(163 (set-port-data! . 14))
(164 (> . 14))
(165 (imag-part . 14))
(166 (make-location . 14))
(167 (= . 14))
(168 (< . 14))
(169 (char? . 14))
(170 (channel-abort . 14))
(171 (close-channel . 14))
(172 (quotient . 14))
(173 (/ . 14))
(174 (weak-pointer? . 14))
(175 (- . 14))
(176 (continuation-set! . 14))
(177 (peek-char . 14))
(178 (+ . 14))
(179 (* . 14))
(180 (contents . 14))
(181 (sqrt . 14))
(182 (make-cell . 14))
(183 (read-char . 14))
(184 (set-contents! . 14))
(185 (push . 14))
(186 (make-weak-pointer . 14))
(187 (assq . 14))
(188 (trap . 14))
(189 (wait . 14))
(190 (cons . 14))
(191 (template-set! . 14))
(192 (time . 14))
(193 (location-defined? . 14))
(194 (asin . 14))
(195 (vm-extension . 14))
(196 (acos . 14))
(197 (set-location-defined?! . 14))
(198 (atan . 14))
(199 (loophole . 14))
(200 (define-syntax . 14))
(201 (begin . 14))
(202 (letrec-syntax . 14))
(203 (%file-name% . 14))
(204 (structure-ref . 14))
(205 (quote . 14))
(206 (lambda . 14))
(207 (define . 14))
(208 (if . 14))
(209 (let-syntax . 14))
(210 (letrec . 14))
(211 (flat-lambda . 14))
(212 (lap . 14))
(213 (primitive-procedure . 14))
(214 (set! . 14))
(215 (with-aliases . 14))
(216 (call . 14))
(217 (and . 14))
(218 (cond . 14))
(219 (do . 14))
(220 (let . 14))
(221 (let* . 14))
(222 (or . 14))
(223 (char->integer . 14))
(224 (integer->char . 14))
(225 (ascii-limit . 14))
(226 (ascii-whitespaces . 14))
(227 (procedure? . 14))
(228 (invoke-closure . 14))
(229 (primitive-cwcc . 14))
(230 (make-undefined-location . 14))
(231 (vector-unassigned? . 14))
(232 (string-copy . 14))
(233 (string->symbol . 14))
(234 (*the-symbol-table* . 14))
(235 (flush-the-symbol-table! . 14))
(236 (restore-the-symbol-table! . 14))
(237 (input-port? . 14))
(238 (output-port? . 14))
(239 (channel-read . 14))
(240 (buffer-length . 14))
(241 (channel-write . 14))
(242 (user-message . 14))
(243 (make-condition . 14))
(244 (signal . 14))
(245 (warn . 14))
(246 (syntax-error . 14))
(247 (call-error . 14))
(248 (case . 15))
(249 (quasiquote . 15))
(250 (syntax-rules . 15))
(251 (not . 15))
(252 (boolean? . 15))
(253 (eqv? . 15))
(254 (equal? . 15))
(255 (max . 15))
(256 (min . 15))
(257 (max-or-min . 15))
(258 (abs . 15))
(259 (zero? . 15))
(260 (positive? . 15))
(261 (negative? . 15))
(262 (even? . 15))
(263 (odd? . 15))
(264 (caar . 15))
(265 (cadr . 15))
(266 (cdar . 15))
(267 (cddr . 15))
(268 (caaar . 15))
(269 (caadr . 15))
(270 (cadar . 15))
(271 (caddr . 15))
(272 (cdaar . 15))
(273 (cdadr . 15))
(274 (cddar . 15))
(275 (cdddr . 15))
(276 (caaaar . 15))
(277 (caaadr . 15))
(278 (caadar . 15))
(279 (caaddr . 15))
(280 (cadaar . 15))
(281 (cadadr . 15))
(282 (caddar . 15))
(283 (cadddr . 15))
(284 (cdaaar . 15))
(285 (cdaadr . 15))
(286 (cdadar . 15))
(287 (cdaddr . 15))
(288 (cddaar . 15))
(289 (cddadr . 15))
(290 (cdddar . 15))
(291 (cddddr . 15))
(292 (null? . 15))
(293 (list . 15))
(294 (length . 15))
(295 (real-length . 15))
(296 (append . 15))
(297 (reverse . 15))
(298 (append-reverse . 15))
(299 (list-tail . 15))
(300 (list-ref . 15))
(301 (mem . 15))
(302 (memq . 15))
(303 (memv . 15))
(304 (member . 15))
(305 (ass . 15))
(306 (assv . 15))
(307 (assoc . 15))
(308 (list? . 15))
(309 (char>? . 15))
(310 (char>=? . 15))
(311 (char<=? . 15))
(312 (char-whitespace? . 15))
(313 (char-lower-case? . 15))
(314 (char-upper-case? . 15))
(315 (char-numeric? . 15))
(316 (char-alphabetic? . 15))
(317 (char-case-delta . 15))
(318 (make-character-map . 15))
(319 (upcase-map . 15))
(320 (char-upcase . 15))
(321 (downcase-map . 15))
(322 (char-downcase . 15))
(323 (char-ci-compare . 15))
(324 (char-ci=? . 15))
(325 (char-ci<? . 15))
(326 (char-ci<=? . 15))
(327 (char-ci>? . 15))
(328 (char-ci>=? . 15))
(329 (string . 15))
(330 (substring . 15))
(331 (string-append . 15))
(332 (string->list . 15))
(333 (list->string . 15))
(334 (string-fill! . 15))
(335 (make-string=? . 15))
(336 (string-ci=? . 15))
(337 (make-string<? . 15))
(338 (string<? . 15))
(339 (string-ci<? . 15))
(340 (string>? . 15))
(341 (string<=? . 15))
(342 (string>=? . 15))
(343 (string-ci>? . 15))
(344 (string-ci<=? . 15))
(345 (string-ci>=? . 15))
(346 (vector->list . 15))
(347 (list->vector . 15))
(348 (vector-fill! . 15))
(349 (map . 15))
(350 (map1 . 15))
(351 (map2+ . 15))
(352 (for-each . 15))
(353 (for-each1 . 15))
(354 (for-each2+ . 15))
(355 (delay . 15))
(356 (make-promise . 15))
(357 (force . 15))
(358 (unspecific . 15))
(359 (reduce . 15))
(360 (filter . 15))
(361 (pos . 15))
(362 (posq . 15))
(363 (posv . 15))
(364 (position . 15))
(365 (any . 15))
(366 (every . 15))
(367 (sublist . 15))
(368 (last . 15))
(369 (insert . 15))
(370 (inexact? . 15))
(371 (modulo . 15))
(372 (ceiling . 15))
(373 (truncate . 15))
(374 (round . 15))
(375 (gcd . 15))
(376 (euclid . 15))
(377 (lcm . 15))
(378 (expt . 15))
(379 (raise-to-integer-power . 15))
(380 (rationalize . 15))
(381 (simplest-rational . 15))
(382 (record-type . 16))
(383 (*record-type-uid* . 16))
(384 (*record-type* . 16))
(385 (make-record-type . 16))
(386 (record-type? . 16))
(387 (record-type-uid . 16))
(388 (record-type-name . 16))
(389 (record-type-field-names . 16))
(390 (record-type-discloser . 16))
(391 (record-field-index . 16))
(392 (record-constructor . 16))
(393 (record-accessor . 16))
(394 (record-modifier . 16))
(395 (record-predicate . 16))
(396 (define-record-discloser . 16))
(397 (disclose-record . 16))
(398 (default-record-discloser . 16))
(399 (:record-type . 16))
(400 (define-record-type . 17))
(401 (define-constructor . 17))
(402 (define-accessors . 17))
(403 (define-accessor . 17))
(404 (:simple-type . 18))
(405 (really-make-simple-type . 18))
(406 (simple-type-id . 18))
(407 (simple-type-priority . 18))
(408 (simple-type-predicate . 18))
(409 (simple-type-superiors . 18))
(410 (simple-type? . 18))
(411 (make-simple-type . 18))
(412 (compute-priority . 18))
(413 (*increment* . 18))
(414 (%type-priority . 18))
(415 (%type-predicate . 18))
(416 (%same-type? . 18))
(417 (define-simple-type . 18))
(418 (:syntax . 18))
(419 (:values . 18))
(420 (value? . 18))
(421 (:value . 18))
(422 (:zero . 18))
(423 (:number . 18))
(424 (:complex . 18))
(425 (:real . 18))
(426 (:rational . 18))
(427 (:integer . 18))
(428 (:exact-integer . 18))
(429 (:boolean . 18))
(430 (:symbol . 18))
(431 (:char . 18))
(432 (:null . 18))
(433 (:pair . 18))
(434 (:vector . 18))
(435 (:string . 18))
(436 (:procedure . 18))
(437 (:input-port . 18))
(438 (:output-port . 18))
(439 (:eof-object . 18))
(440 (:record . 18))
(441 (record-type-priority . 18))
(442 (:method-info . 18))
(443 (really-make-method-info . 18))
(444 (method-info-proc . 18))
(445 (method-info-n-ary? . 18))
(446 (method-info-types . 18))
(447 (method-info? . 18))
(448 (make-method-info . 18))
(449 (empty-method-list . 18))
(450 (insert-method . 18))
(451 (same-applicability? . 18))
(452 (every2 . 18))
(453 (more-specific? . 18))
(454 (more-specific-type? . 18))
(455 (:method-table . 18))
(456 (really-make-method-table . 18))
(457 (method-table-id . 18))
(458 (method-table-set-perform! . 18))
(459 (method-table-get-perform . 18))
(460 (make-generic . 18))
(461 (method-table-prototype . 18))
(462 (method-table-methods . 18))
(463 (set-method-table-methods! . 18))
(464 (method-table? . 18))
(465 (make-method-table . 18))
(466 (make-cell-for-generic . 18))
(467 (add-to-method-table! . 18))
(468 (set-final-method! . 18))
(469 (apply-generic . 18))
(470 (define-generic . 18))
(471 (methods->perform . 18))
(472 (last-action . 18))
(473 (one-action . 18))
(474 (argument-sequence-predicate . 18))
(475 (check-for-next . 18))
(476 (check-next . 18))
(477 (method-info . 18))
(478 (method-internal . 18))
(479 (with-next-method . 18))
(480 (define-method . 18))
(481 (&add-method! . 18))
(482 (add-method! . 18))
(483 (&type-predicate . 18))
(484 (type-predicate . 18))
(485 (&type-priority . 18))
(486 (type-priority . 18))
(487 (&type-superiors . 18))
(488 (type-superiors . 18))
(489 (&same-type? . 18))
(490 (same-type? . 18))
(491 (:singleton . 18))
(492 (singleton . 18))
(493 (singleton-value . 18))
(494 (compare-to . 18))
(495 (&disclose . 18))
(496 (disclose . 18))
(497 (proc->discloser . 18))
(498 (&number->string . 19))
(499 (number->string . 19))
(500 (integer->string . 19))
(501 (string->number . 19))
(502 (&really-string->number . 19))
(503 (really-string->number . 19))
(504 (:integer-string . 19))
(505 (set-exactness . 19))
(506 (string->integer . 19))
(507 (channels . 26))
(508 (code-vectors . 26))
(509 (:thread . 20))
(510 (make-thread . 20))
(511 (thread-dynamic-point . 20))
(512 (thread-dynamic-env . 20))
(513 (get-dynamic-env . 20))
(514 (set-dynamic-env! . 20))
(515 (get-dynamic-point . 20))
(516 (set-dynamic-point! . 20))
(517 (initialize-dynamic-state! . 20))
(518 (with-dynamic-env . 20))
(519 (empty-dynamic-env . 20))
(520 (:fluid . 20))
(521 (make-fluid . 20))
(522 (fluid-top-level-value . 20))
(523 (set-fluid-top-level-value! . 20))
(524 (fluid . 20))
(525 (set-fluid! . 20))
(526 (let-fluid . 20))
(527 (let-fluids . 20))
(528 (define-enumeration . 33))
(529 (components . 33))
(530 (enum . 33))
(531 (enumerand->name . 33))
(532 (name->enumerand . 33))
(533 (lookup-enumerand . 33))
(534 (architecture-version . 34))
(535 (bits-used-per-byte . 34))
(536 (byte-limit . 34))
(537 (define-instruction-set . 34))
(538 (op . 34))
(539 (op-enumeration . 34))
(540 (op-count . 34))
(541 (opcode-arg-specs . 34))
(542 (interrupt . 34))
(543 (interrupt-enumeration . 34))
(544 (interrupt-count . 34))
(545 (exception . 34))
(546 (exception-enumeration . 34))
(547 (exception-count . 34))
(548 (current-port-marker . 34))
(549 (current-port-marker-enumeration . 34))
(550 (current-port-marker-count . 34))
(551 (maximum-stack-args . 34))
(552 (*last-protocol* . 34))
(553 (next-protocol . 34))
(554 (two-byte-nargs-protocol . 34))
(555 (two-byte-nargs+list-protocol . 34))
(556 (big-stack-protocol . 34))
(557 (args+nargs-protocol . 34))
(558 (nary-dispatch-protocol . 34))
(559 (default-stack-space . 34))
(560 (environment-stack-size . 34))
(561 (continuation-stack-size . 34))
(562 (available-stack-space . 34))
(563 (time-option . 34))
(564 (time-option-enumeration . 34))
(565 (time-option-count . 34))
(566 (memory-status-option . 34))
(567 (memory-status-option-enumeration . 34))
(568 (memory-status-option-count . 34))
(569 (channel-status-option . 34))
(570 (channel-status-option-enumeration . 34))
(571 (channel-status-option-count . 34))
(572 (port-status-options . 34))
(573 (port-status-options-enumeration . 34))
(574 (port-status-options-count . 34))
(575 (stob . 34))
(576 (stob-enumeration . 34))
(577 (stob-count . 34))
(578 (least-b-vector-type . 34))
(579 (stob-data . 34))
(580 (primitives . 37))
(581 (:queue . 41))
(582 (really-make-queue . 41))
(583 (queue-tail . 41))
(584 (set-queue-tail! . 41))
(585 (queue-head . 41))
(586 (set-queue-head! . 41))
(587 (queue-uid . 41))
(588 (queue? . 41))
(589 (*queue-uid* . 41))
(590 (make-queue . 41))
(591 (queue-empty? . 41))
(592 (enqueue! . 41))
(593 (queue-front . 41))
(594 (dequeue! . 41))
(595 (on-queue? . 41))
(596 (delete-from-queue! . 41))
(597 (delete-from-queue-if! . 41))
(598 (queue->list . 41))
(599 (queue-length . 41))
(600 (*condition-types* . 25))
(601 (condition-supertypes . 25))
(602 (define-condition-type . 25))
(603 (condition-predicate . 25))
(604 (condition? . 25))
(605 (condition-type . 25))
(606 (condition-stuff . 25))
(607 (error? . 25))
(608 (call-error? . 25))
(609 (read-error? . 25))
(610 (exception? . 25))
(611 (exception-opcode . 25))
(612 (exception-reason . 25))
(613 (exception-arguments . 25))
(614 (make-exception . 25))
(615 (warning? . 25))
(616 (syntax-error? . 25))
(617 (interrupt? . 25))
(618 (*session-data-initializers* . 22))
(619 (make-session-data-slot! . 22))
(620 (session-data-ref . 22))
(621 (session-data-set! . 22))
(622 (initialize-session-data! . 22))
(623 (initialize-interrupts! . 36))
(624 (interrupt-handlers . 36))
(625 (set-interrupt-handler! . 36))
(626 (no-interrupts . 36))
(627 (all-interrupts . 36))
(628 (with-interrupts-inhibited . 36))
(629 (with-interrupts-allowed . 36))
(630 (disable-interrupts! . 36))
(631 (enable-interrupts! . 36))
(632 (with-interrupts . 36))
(633 (enabled-interrupts . 36))
(634 (*post-gc-procedures* . 36))
(635 (call-after-gc! . 36))
(636 (post-gc-handler . 36))
(637 (required-post-gc-space . 36))
(638 (space-shortage-handler . 36))
(639 (call-before-heap-overflow! . 36))
(640 (dynamic-wind . 21))
(641 (call-with-current-continuation . 21))
(642 (continuation->procedure . 21))
(643 (:point . 21))
(644 (make-point . 21))
(645 (point-parent . 21))
(646 (point-dynamic-env . 21))
(647 (point-out . 21))
(648 (point-in . 21))
(649 (point-depth . 21))
(650 (travel-to-point! . 21))
(651 (template-overhead . 30))
(652 (template-code . 30))
(653 (template-info . 30))
(654 (set-template-code! . 30))
(655 (set-template-info! . 30))
(656 (:closure . 32))
(657 (:code-vector . 32))
(658 (:location . 32))
(659 (:template . 32))
(660 (:channel . 32))
(661 (:port . 32))
(662 (:weak-pointer . 32))
(663 (:external . 32))
(664 (continuation-cont . 31))
(665 (real-continuation-pc . 31))
(666 (real-continuation-template . 31))
(667 (continuation-env . 31))
(668 (exception-continuation-pc . 31))
(669 (exception-continuation-template . 31))
(670 (exception-continuation-exception . 31))
(671 (exception-continuation? . 31))
(672 (continuation-pc . 31))
(673 (continuation-template . 31))
(674 (normal-continuation-overhead . 31))
(675 (exception-continuation-overhead . 31))
(676 (continuation-arg . 31))
(677 (continuation-arg-count . 31))
(678 (:continuation . 31))
(679 (continuation-parent . 31))
(680 (define-exception-handler . 35))
(681 (signal-exception . 35))
(682 (exception-handlers . 35))
(683 (extend-opcode! . 35))
(684 (really-signal-condition . 35))
(685 (with-handler . 35))
(686 ($condition-handlers . 35))
(687 (initialize-exceptions! . 35))
(688 (last-resort-condition-handler . 35))
(689 (report-utter-lossage . 35))
(690 (continuation-preview . 35))
(691 (ignore-errors . 35))
(692 (report-errors-as-warnings . 35))
(693 (:thread . 37))
(694 (really-make-thread . 37))
(695 (thread-name . 37))
(696 (thread-uid . 37))
(697 (thread-current-task . 37))
(698 (set-thread-current-task! . 37))
(699 (thread-events . 37))
(700 (set-thread-events! . 37))
(701 (thread-data . 37))
(702 (set-thread-data! . 37))
(703 (thread-scheduler . 37))
(704 (set-thread-scheduler! . 37))
(705 (thread-time . 37))
(706 (set-thread-time! . 37))
(707 (thread-arguments . 37))
(708 (set-thread-arguments! . 37))
(709 (thread-queue . 37))
(710 (set-thread-queue! . 37))
(711 (thread-continuation . 37))
(712 (set-thread-continuation! . 37))
(713 (thread-dynamic-point . 37))
(714 (set-thread-dynamic-point! . 37))
(715 (thread-dynamic-env . 37))
(716 (thread? . 37))
(717 (*thread-uid* . 37))
(718 (make-thread . 37))
(719 (thread-top-level . 37))
(720 (thread-uid->thread . 37))
(721 (all-threads . 37))
(722 (add-event! . 37))
(723 (thunk->continuation . 37))
(724 (compose-continuation . 37))
(725 (make-thread-queue . 37))
(726 (thread-queue-empty? . 37))
(727 (enqueue-thread! . 37))
(728 (dequeue-thread! . 37))
(729 (remove-thread-from-queue! . 37))
(730 (current-thread . 37))
(731 (set-current-thread! . 37))
(732 (event-type . 37))
(733 (event-type-enumeration . 37))
(734 (event-type-count . 37))
(735 (run . 37))
(736 (get-next-thread . 37))
(737 (debit-up! . 37))
(738 (min . 37))
(739 (switch-to-thread . 37))
(740 (run-thread . 37))
(741 (handle-timer-interrupt . 37))
(742 (debit-thread-times! . 37))
(743 (suspend . 37))
(744 (suspend-to . 37))
(745 (debit-down! . 37))
(746 (exit . 37))
(747 (wait . 37))
(748 (waiting? . 37))
(749 (block . 37))
(750 (relinquish-timeslice . 37))
(751 (upcall . 37))
(752 (propogate-upcall . 37))
(753 (kill-thread! . 37))
(754 (interrupt-thread . 37))
(755 (get-next-event! . 37))
(756 (event-pending? . 37))
(757 (schedule-event . 37))
(758 (schedule-wakeup . 37))
(759 (show-running . 37))
(760 (running? . 37))
(761 (spawn . 37))
(762 (spawn-on-root . 37))
(763 (spawn-on-scheduler . 37))
(764 (make-ready . 37))
(765 (schedule-interrupt! . 37))
(766 (cancel-timer-interrupt! . 37))
(767 (interrupt-timer-time . 37))
(768 (real-time . 37))
(769 (with-threads . 37))
(770 (start-multitasking . 37))
(771 (deadlock? . 37))
(772 (terminate? . 37))
(773 (terminate-current-thread . 37))
(774 (root-scheduler-slot . 37))
(775 (root-scheduler . 37))
(776 (sleep . 37))
(777 (*dozers* . 37))
(778 (insert . 37))
(779 (wake-some-threads . 37))
(780 (:lock . 42))
(781 (really-make-lock . 42))
(782 (lock-uid . 42))
(783 (lock-queue . 42))
(784 (lock-owner-uid . 42))
(785 (set-lock-owner-uid! . 42))
(786 (lock? . 42))
(787 (*lock-uid* . 42))
(788 (make-lock . 42))
(789 (obtain-lock . 42))
(790 (maybe-obtain-lock . 42))
(791 (release-lock . 42))
(792 (:port-handler . 23))
(793 (make-port-handler . 23))
(794 (port-handler-buffer-proc . 23))
(795 (port-handler-close . 23))
(796 (port-handler-discloser . 23))
(797 (port-handler? . 23))
(798 (disclose-port . 23))
(799 (obtain-port-lock . 23))
(800 (maybe-obtain-port-lock . 23))
(801 (release-port-lock . 23))
(802 (initialize-i/o-handlers! . 23))
(803 (one-arg-proc->handler . 23))
(804 (two-arg-proc->handler . 23))
(805 (read-char-handler . 23))
(806 (fill-port-buffer! . 23))
(807 (write-char-handler . 23))
(808 (empty-port-buffer! . 23))
(809 (port-flushed? . 23))
(810 (set-port-flushed?! . 23))
(811 (close-input-port . 23))
(812 (close-output-port . 23))
(813 (define-port-op . 23))
(814 (real-char-ready? . 23))
(815 (read-block . 23))
(816 (really-read-block . 23))
(817 (buffer-length . 23))
(818 (read-more . 23))
(819 (okay-limits? . 23))
(820 (write-block . 23))
(821 (write-string . 23))
(822 (write-buffered-block . 23))
(823 (write-unbuffered-block . 23))
(824 (force-output . 23))
(825 (really-force-output . 23))
(826 (default-buffer-size . 23))
(827 (open-port? . 23))
(828 (open-port-mask . 23))
(829 (input-port-mask . 23))
(830 (open-input-port-mask . 23))
(831 (open-input-port-status . 23))
(832 (open-input-port? . 23))
(833 (make-input-port-closed! . 23))
(834 (make-input-port . 23))
(835 (okay-buffer? . 23))
(836 (output-port-mask . 23))
(837 (open-output-port-mask . 23))
(838 (open-output-port-status . 23))
(839 (open-output-port? . 23))
(840 (make-output-port-closed! . 23))
(841 (make-output-port . 23))
(842 (make-unbuffered-output-port . 23))
(843 (null-output-port-handler . 23))
(844 (make-null-output-port . 23))
(845 (*flush-these-ports* . 23))
(846 (initialize-output-port-list! . 23))
(847 (periodically-force-output! . 23))
(848 (output-port-forcers . 23))
(849 (make-forcing-thunk . 23))
(850 ($current-input-port . 23))
(851 ($current-output-port . 23))
(852 ($current-error-port . 23))
(853 ($current-noise-port . 23))
(854 (current-input-port . 23))
(855 (current-output-port . 23))
(856 (current-error-port . 23))
(857 (current-noise-port . 23))
(858 (initialize-i/o . 23))
(859 (with-current-ports . 23))
(860 (call-with-current-input-port . 23))
(861 (call-with-current-output-port . 23))
(862 (call-with-current-noise-port . 23))
(863 (silently . 23))
(864 (newline . 23))
(865 (char-ready? . 23))
(866 (output-port-option . 23))
(867 (input-port-option . 23))
(868 (write . 26))
(869 (recurring-write . 26))
(870 (write-boolean . 26))
(871 (write-number . 26))
(872 (write-char-literal . 26))
(873 (character-name . 26))
(874 (write-string-literal . 26))
(875 (write-list . 26))
(876 (quotation? . 26))
(877 (write-vector . 26))
(878 (write-other . 26))
(879 (display-type-name . 26))
(880 (display . 26))
(881 (read . 27))
(882 (sub-read-carefully . 27))
(883 (reader-token-marker . 27))
(884 (make-reader-token . 27))
(885 (reader-token? . 27))
(886 (close-paren . 27))
(887 (dot . 27))
(888 (sub-read . 27))
(889 (read-dispatch-vector . 27))
(890 (read-terminating?-vector . 27))
(891 (set-standard-syntax! . 27))
(892 (set-standard-read-macro! . 27))
(893 (sub-read-list . 27))
(894 (gobble-line . 27))
(895 (*sharp-macros* . 27))
(896 (define-sharp-macro . 27))
(897 (sub-read-token . 27))
(898 (parse-token . 27))
(899 (strange-symbol-names . 27))
(900 (p-c-v . 27))
(901 (preferred-case . 27))
(902 (reading-error . 27))
(903 (primitives . 24))
(904 (input-channel-handler . 24))
(905 (input-channel->port . 24))
(906 (output-channel-handler . 24))
(907 (make-unbuffered-output-channel-handler . 24))
(908 (output-channel->port . 24))
(909 (maybe-force-output . 24))
(910 (maybe-open-file . 24))
(911 (open-input-file . 24))
(912 (open-output-file . 24))
(913 (call-with-input-file . 24))
(914 (call-with-output-file . 24))
(915 (with-input-from-file . 24))
(916 (with-output-to-file . 24))
(917 (steal-channel-port! . 24))
(918 (really-steal-channel-port! . 24))
(919 (initialize-channel-i/o! . 24))
(920 (i/o-completion-handler . 24))
(921 (waiting-for-i/o? . 24))
(922 (wait-for-channel . 24))
(923 (steal-channel! . 24))
(924 (i/o-wait-count-slot . 24))
(925 (i/o-wait-count . 24))
(926 (increment-i/o-wait-count! . 24))
(927 (decrement-i/o-wait-count! . 24))
(928 (i/o-wait-queues-slot . 24))
(929 (i/o-wait-queue . 24))
(930 (make-i/o-wait-queues . 24))
(931 (:table . 46))
(932 (really-make-table . 46))
(933 (table-set!-procedure . 46))
(934 (set-table-set!-procedure! . 46))
(935 (table-ref-procedure . 46))
(936 (set-table-ref-procedure! . 46))
(937 (table-data . 46))
(938 (set-table-data! . 46))
(939 (table-size . 46))
(940 (set-table-size! . 46))
(941 (table? . 46))
(942 (table-ref . 46))
(943 (table-set! . 46))
(944 (linear-table-size-limit . 46))
(945 (next-table-size . 46))
(946 (make-table-maker . 46))
(947 (null-entry . 46))
(948 (new-entry . 46))
(949 (entry-value . 46))
(950 (entry-key . 46))
(951 (set-entry-value! . 46))
(952 (make-assoc . 46))
(953 (make-linear-table-ref . 46))
(954 (make-linear-table-set! . 46))
(955 (make->hash-table . 46))
(956 (make-hash-table-ref . 46))
(957 (make-hash-table-set! . 46))
(958 (expand-hash-table! . 46))
(959 (table-enter-alist! . 46))
(960 (table-expand-table! . 46))
(961 (table-walk . 46))
(962 (really-table-walk . 46))
(963 (alist-walk . 46))
(964 (make-table-immutable! . 46))
(965 (table->entry-list . 46))
(966 (default-table-hash-function . 46))
(967 (symbol-hash . 46))
(968 (make-table . 46))
(969 (make-string-table . 46))
(970 (make-symbol-table . 46))
(971 (make-integer-table . 46))
(972 (:meta-type . 48))
(973 (really-make-type . 48))
(974 (type-info . 48))
(975 (type-more . 48))
(976 (type-mask . 48))
(977 (meta-type? . 48))
(978 (make-type . 48))
(979 (name->type-table . 48))
(980 (mask->name-table . 48))
(981 (name->type . 48))
(982 (set-type-name! . 48))
(983 (*mask* . 48))
(984 (new-type-bit . 48))
(985 (mask->type . 48))
(986 (bottom-type . 48))
(987 (error-type . 48))
(988 (bottom-type? . 48))
(989 (new-atomic-type . 48))
(990 (named-atomic-type . 48))
(991 (syntax-type . 48))
(992 (other-static-type . 48))
(993 (empty-rail-type . 48))
(994 (rail-type . 48))
(995 (make-optional-type . 48))
(996 (make-rest-type . 48))
(997 (head-type . 48))
(998 (head-type-really . 48))
(999 (tail-type . 48))
(1000 (empty-rail-type? . 48))
(1001 (rest-type? . 48))
(1002 (optional-type? . 48))
(1003 (mask/no-values . 48))
(1004 (mask/two-or-more . 48))
(1005 (mask/&rest . 48))
(1006 (value-type . 48))
(1007 (mask/value . 48))
(1008 (value-type? . 48))
(1009 (any-values-type . 48))
(1010 (any-arguments-type . 48))
(1011 (mask/one-or-more . 48))
(1012 (same-type? . 48))
(1013 (subtype? . 48))
(1014 (meet-type . 48))
(1015 (other-type-info . 48))
(1016 (p . 48))
(1017 (meet-rail . 48))
(1018 (meet-procedure . 48))
(1019 (meet? . 48))
(1020 (meet-procedure? . 48))
(1021 (join-type . 48))
(1022 (join-rail . 48))
(1023 (join-procedure . 48))
(1024 (number-hierarchy . 48))
(1025 (integer-type . 48))
(1026 (rational-type . 48))
(1027 (real-type . 48))
(1028 (complex-type . 48))
(1029 (number-type . 48))
(1030 (exact-type . 48))
(1031 (inexact-type . 48))
(1032 (exact-integer-type . 48))
(1033 (boolean-type . 48))
(1034 (pair-type . 48))
(1035 (null-type . 48))
(1036 (record-type . 48))
(1037 (any-procedure-type . 48))
(1038 (other-value-type . 48))
(1039 (mask/other . 48))
(1040 (make-other-type . 48))
(1041 (char-type . 48))
(1042 (unspecific-type . 48))
(1043 (string-type . 48))
(1044 (symbol-type . 48))
(1045 (vector-type . 48))
(1046 (escape-type . 48))
(1047 (structure-type . 48))
(1048 (mask/procedure . 48))
(1049 (procedure-type . 48))
(1050 (make-procedure-type . 48))
(1051 (procedure-type-domain . 48))
(1052 (procedure-type-codomain . 48))
(1053 (restrictive? . 48))
(1054 (sexp->type . 48))
(1055 (sexp->values-type . 48))
(1056 (type->sexp . 48))
(1057 (atomic-type->sexp . 48))
(1058 (rail-type->sexp . 48))
(1059 (disjoin-type . 48))
(1060 (disjoin-rest . 48))
(1061 (mask/number . 48))
(1062 (make-some-values-type . 48))
(1063 (proc . 48))
(1064 (some-values . 48))
(1065 (procedure-type? . 48))
(1066 (fixed-arity-procedure-type? . 48))
(1067 (procedure-type-arity . 48))
(1068 (procedure-type-argument-types . 48))
(1069 (usual-operator-type . 50))
(1070 (:operator . 50))
(1071 (make-operator . 50))
(1072 (operator-name . 50))
(1073 (operator-uid . 50))
(1074 (operator-nargs . 50))
(1075 (operator-type . 50))
(1076 (set-operator-type! . 50))
(1077 (operator? . 50))
(1078 (get-operator . 50))
(1079 (*operator-uid* . 50))
(1080 (operators-table . 50))
(1081 (number-of-operators . 50))
(1082 (the-operators . 50))
(1083 (make-operator-table . 50))
(1084 (operator-table-ref . 50))
(1085 (operator-lookup . 50))
(1086 (operator-define! . 50))
(1087 (:node . 50))
(1088 (really-make-node . 50))
(1089 (node-plist . 50))
(1090 (set-node-plist! . 50))
(1091 (node-form . 50))
(1092 (node-operator-id . 50))
(1093 (node? . 50))
(1094 (make-node . 50))
(1095 (node-ref . 50))
(1096 (node-set! . 50))
(1097 (node-operator . 50))
(1098 (node-predicate . 50))
(1099 (make-similar-node . 50))
(1100 (:generated . 50))
(1101 (make-generated . 50))
(1102 (generated-parent-name . 50))
(1103 (generated-env . 50))
(1104 (generated-token . 50))
(1105 (generated-symbol . 50))
(1106 (generated? . 50))
(1107 (generate-name . 50))
(1108 (generated-uid . 50))
(1109 (*generated-uid* . 50))
(1110 (name->symbol . 50))
(1111 (name-hash . 50))
(1112 (make-name-table . 50))
(1113 (desyntaxify . 50))
(1114 (:transform . 50))
(1115 (really-make-transform . 50))
(1116 (transform-id . 50))
(1117 (transform-source . 50))
(1118 (transform-aux-names . 50))
(1119 (transform-type . 50))
(1120 (transform-env . 50))
(1121 (transform-procedure . 50))
(1122 (transform? . 50))
(1123 (make-transform . 50))
(1124 (maybe-transform . 50))
(1125 (bind-aliases . 50))
(1126 (make-name-generator . 50))
(1127 (same-denotation? . 50))
(1128 (binding? . 50))
(1129 (binding-type . 50))
(1130 (binding-place . 50))
(1131 (binding-static . 50))
(1132 (set-binding-place! . 50))
(1133 (make-binding . 50))
(1134 (clobber-binding! . 50))
(1135 (impose-type . 50))
(1136 (forget-integration . 50))
(1137 (classify . 50))
(1138 (call-node? . 50))
(1139 (name-node? . 50))
(1140 (classify-literal . 50))
(1141 (classify-call . 50))
(1142 (classify-name . 50))
(1143 (operator/name . 50))
(1144 (classify-macro-application . 50))
(1145 (classify-transform-application . 50))
(1146 (maybe-transform-call . 50))
(1147 (classify-operator-form . 50))
(1148 (classifiers . 50))
(1149 (define-classifier . 50))
(1150 (unspecific-node . 50))
(1151 (define-node? . 50))
(1152 (define-syntax-node? . 50))
(1153 (funny-name/source-file-name . 50))
(1154 (bind-source-file-name . 50))
(1155 (names? . 50))
(1156 (this-long? . 50))
(1157 (at-least-this-long? . 50))
(1158 (specs? . 50))
(1159 (lookup . 50))
(1160 (bind1 . 50))
(1161 (bind . 50))
(1162 (bindrec . 50))
(1163 (literal? . 50))
(1164 (number-of-required-args . 50))
(1165 (n-ary? . 50))
(1166 (normalize-formals . 50))
(1167 (syntax? . 50))
(1168 (name? . 50))
(1169 (unbound? . 50))
(1170 (define-usual-suspects . 50))
(1171 (process-syntax . 50))
(1172 (get-funny . 50))
(1173 (funny-name/reflective-tower . 50))
(1174 (reflective-tower . 50))
(1175 (scan-body . 50))
(1176 (scan-body-forms . 50))
(1177 (body-lossage . 50))
(1178 (begin-node? . 50))
(1179 (variable-type . 50))
(1180 (variable-type? . 50))
(1181 (variable-value-type . 50))
(1182 (compatible-types? . 50))
(1183 (usual-variable-type . 50))
(1184 (undeclared-type . 50))
(1185 (funny-name/reader . 50))
(1186 (environment-reader . 50))
(1187 (schemify . 50))
(1188 (schemify1 . 50))
(1189 (schemifiers . 50))
(1190 (define-schemifier . 50))
(1191 (name->qualified . 50))
(1192 (schemify-sexp . 50))
(1193 (make-qualified . 50))
(1194 (qualified? . 50))
(1195 (qualified-parent-name . 50))
(1196 (qualified-symbol . 50))
(1197 (make-population . 44))
(1198 (add-to-population! . 44))
(1199 (weak-memq . 44))
(1200 (population-reduce . 44))
(1201 (population->list . 44))
(1202 (walk-population . 44))
(1203 (:interface . 49))
(1204 (really-make-interface . 49))
(1205 (interface-name . 49))
(1206 (set-interface-name! . 49))
(1207 (interface-clients . 49))
(1208 (walk-method . 49))
(1209 (ref-method . 49))
(1210 (interface? . 49))
(1211 (interface-ref . 49))
(1212 (for-each-declaration . 49))
(1213 (note-reference-to-interface! . 49))
(1214 (make-interface . 49))
(1215 (make-simple-interface . 49))
(1216 (really-make-simple-interface . 49))
(1217 (make-compound-interface . 49))
(1218 (note-interface-name! . 49))
(1219 (:structure . 53))
(1220 (really-make-structure . 53))
(1221 (structure-name . 53))
(1222 (set-structure-name! . 53))
(1223 (structure-clients . 53))
(1224 (structure-package . 53))
(1225 (structure-interface-really . 53))
(1226 (set-structure-interface! . 53))
(1227 (structure-interface-thunk . 53))
(1228 (structure? . 53))
(1229 (structure-interface . 53))
(1230 (initialize-structure! . 53))
(1231 (make-structure . 53))
(1232 (structure-unstable? . 53))
(1233 (for-each-export . 53))
(1234 (note-structure-name! . 53))
(1235 (:package . 53))
(1236 (really-make-package . 53))
(1237 (package-cached . 53))
(1238 (package-clients . 53))
(1239 (package-plist . 53))
(1240 (set-package-plist! . 53))
(1241 (package-accesses-thunk . 53))
(1242 (package-opens-thunk . 53))
(1243 (set-package-opens-thunk! . 53))
(1244 (package->environment . 53))
(1245 (set-package->environment! . 53))
(1246 (package-loaded? . 53))
(1247 (set-package-loaded?! . 53))
(1248 (package-clauses . 53))
(1249 (package-file-name . 53))
(1250 (package-get-location . 53))
(1251 (set-package-get-location! . 53))
(1252 (package-integrate? . 53))
(1253 (set-package-integrate?! . 53))
(1254 (package-unstable? . 53))
(1255 (package-definitions . 53))
(1256 (package-opens-really . 53))
(1257 (set-package-opens! . 53))
(1258 (package-uid . 53))
(1259 (package? . 53))
(1260 (make-package . 53))
(1261 (really-package->environment . 53))
(1262 (new-package-uid . 53))
(1263 (*package-uid* . 53))
(1264 (package-name-table . 53))
(1265 (package-name . 53))
(1266 (note-package-name! . 53))
(1267 (package-opens . 53))
(1268 (initialize-package-if-necessary! . 53))
(1269 (package-accesses . 53))
(1270 (make-simple-package . 53))
(1271 (package-definition . 53))
(1272 (package-define! . 53))
(1273 (really-package-define! . 53))
(1274 (package-lookup . 53))
(1275 (really-package-lookup . 53))
(1276 (structure-lookup . 53))
(1277 (generic-lookup . 53))
(1278 (initialize-package! . 53))
(1279 (define-funny-names! . 53))
(1280 (package-define-funny! . 53))
(1281 (funny-name/the-package . 53))
(1282 (extract-package-from-environment . 53))
(1283 (for-each-definition . 53))
(1284 (get-new-location . 53))
(1285 (make-new-location . 53))
(1286 ($get-location . 53))
(1287 (*location-uid* . 53))
(1288 (location-info-table . 53))
(1289 (flush-location-names . 53))
(1290 (package-get . 53))
(1291 (package-put! . 53))
(1292 (package-note-caching . 53))
(1293 (maybe-fix-place . 53))
(1294 (follow-forwarding-pointers . 53))
(1295 (environment-ref . 63))
(1296 (environment-set! . 63))
(1297 (environment-define! . 63))
(1298 (*structure-ref . 63))
(1299 (carefully . 63))
(1300 ($interaction-environment . 63))
(1301 (interaction-environment . 63))
(1302 (set-interaction-environment! . 63))
(1303 (with-interaction-environment . 63))
(1304 (scheme-report-environment . 63))
(1305 (*scheme-report-environment* . 63))
(1306 (*scheme-report-number* . 63))
(1307 (set-scheme-report-environment! . 63))
(1308 (make-reflective-tower . 63))
(1309 (set-reflective-tower-maker! . 63))
(1310 (the-usual-transforms . 51))
(1311 (define-usual-macro . 51))
(1312 (usual-transform . 51))
(1313 (do-spec? . 51))
(1314 (specs? . 51))
(1315 (case-clause? . 51))
(1316 (process-rules . 51))
(1317 (segment-pattern? . 51))
(1318 (segment-template? . 51))
(1319 (indicators-for-zero-or-more . 51))
(1320 (find-free-names-in-syntax-rules . 51))
(1321 (namestring . 47))
(1322 (directory-component-separator . 47))
(1323 (type-component-separator . 47))
(1324 (namestring-component . 47))
(1325 (file-name-preferred-case . 47))
(1326 (*scheme-file-type* . 47))
(1327 (*load-file-type* . 47))
(1328 (file-name-directory . 47))
(1329 (file-name-nondirectory . 47))
(1330 (file-nondirectory-position . 47))
(1331 (string-posq . 47))
(1332 (*translations* . 47))
(1333 (translations . 47))
(1334 (set-translation! . 47))
(1335 (translate . 47))
(1336 ($note-file-package . 54))
(1337 (scan-forms . 54))
(1338 (really-scan-forms . 54))
(1339 (scan-file . 54))
(1340 (really-scan-file . 54))
(1341 (*standard-optimizer-names* . 54))
(1342 (default-standard-optimizer . 54))
(1343 (*standard-optimizer* . 54))
(1344 (set-standard-optimizers! . 54))
(1345 (make-standard-optimizer . 54))
(1346 (apply-optimizers . 54))
(1347 (scan-form-list . 54))
(1348 (scan-form . 54))
(1349 (process-define-syntax . 54))
(1350 (scan-structures . 54))
(1351 (scan-package . 54))
(1352 (optimize . 54))
(1353 (check-structure . 54))
(1354 (initialize-usual-transforms! . 54))
(1355 (define-all-operators . 54))
(1356 (make-define-primitive-node . 54))
(1357 (optimizers-table . 54))
(1358 (get-optimizer . 54))
(1359 (set-optimizer! . 54))
(1360 ($note-undefined . 54))
(1361 (note-undefined! . 54))
(1362 (noting-undefined-variables . 54))
(1363 (:debug-data . 55))
(1364 (make-debug-data . 55))
(1365 (debug-data-source . 55))
(1366 (set-debug-data-source! . 55))
(1367 (debug-data-env-maps . 55))
(1368 (set-debug-data-env-maps! . 55))
(1369 (debug-data-pc-in-parent . 55))
(1370 (debug-data-parent . 55))
(1371 (debug-data-name . 55))
(1372 (debug-data-uid . 55))
(1373 (debug-data? . 55))
(1374 (maximum-stack-use . 56))
(1375 (protocol-skip . 56))
(1376 (stack-delta . 56))
(1377 (define-delta . 56))
(1378 (stack-max . 56))
(1379 (nothing . 56))
(1380 (popper . 56))
(1381 (pusher . 56))
(1382 (continue . 56))
(1383 (continuer . 56))
(1384 (do-make-cont . 56))
(1385 (stack-function . 56))
(1386 (arg-spec-size . 56))
(1387 (imax . 56))
(1388 (get-offset . 56))
(1389 (new-template-uid . 57))
(1390 (*template-uid* . 57))
(1391 (template-uid . 57))
(1392 (set-template-uid! . 57))
(1393 (debug-flag-names . 57))
(1394 (type/debug-flags . 57))
(1395 (make-debug-flags . 57))
(1396 ($debug-flags . 57))
(1397 (debug-flag-accessor . 57))
(1398 (debug-flag-modifier . 57))
(1399 (keep-source-code? . 57))
(1400 (keep-environment-maps? . 57))
(1401 (keep-procedure-names? . 57))
(1402 (keep-file-names? . 57))
(1403 (tabulate-debug-data? . 57))
(1404 (debug-data-table . 57))
(1405 (with-fresh-compiler-state . 57))
(1406 (saving-and-restoring . 57))
(1407 (debug-data->info . 57))
(1408 (get-debug-data . 57))
(1409 (note-debug-data! . 57))
(1410 (new-debug-data . 57))
(1411 (make-segment . 57))
(1412 (segment-size . 57))
(1413 (segment-emitter . 57))
(1414 (segment->template . 57))
(1415 (segment-data->template . 57))
(1416 (check-stack-use . 57))
(1417 (:assembly-state . 57))
(1418 (make-assembly-state . 57))
(1419 (astate-literals . 57))
(1420 (set-astate-literals! . 57))
(1421 (astate-count . 57))
(1422 (set-astate-count! . 57))
(1423 (astate-pc . 57))
(1424 (set-astate-pc! . 57))
(1425 (astate-code-vector . 57))
(1426 (make-astate . 57))
(1427 (emit-byte! . 57))
(1428 (literal->index . 57))
(1429 (emit-literal! . 57))
(1430 (emit-segment! . 57))
(1431 (empty-segment . 57))
(1432 (instruction . 57))
(1433 (sequentially . 57))
(1434 (sequentially-2 . 57))
(1435 (instruction-with-literal . 57))
(1436 (instruction-with-location . 57))
(1437 (instruction-with-template . 57))
(1438 (make-label . 57))
(1439 (instruction-using-label . 57))
(1440 (computed-goto-label-size . 57))
(1441 (computed-goto-instruction . 57))
(1442 (attach-label . 57))
(1443 (insert-label! . 57))
(1444 (code-vector-set2! . 57))
(1445 (two-byte-limit . 57))
(1446 (high-byte . 57))
(1447 (low-byte . 57))
(1448 ($debug-data . 57))
(1449 (note-source-code . 57))
(1450 (note-environment . 57))
(1451 (emit-with-environment-maps! . 57))
(1452 ($environment-maps . 57))
(1453 (environment-maps-table . 57))
(1454 (node-type . 52))
(1455 (reconstruct-type . 52))
(1456 (reconstruct . 52))
(1457 (reconstructors . 52))
(1458 (define-reconstructor . 52))
(1459 (careful-codomain . 52))
(1460 (reconstruct-body . 52))
(1461 (operator/name . 52))
(1462 (reconstruct-name . 52))
(1463 (reconstruct-call . 52))
(1464 (fork-constraints . 52))
(1465 (examine . 52))
(1466 (node->type . 52))
(1467 (call-node? . 52))
(1468 (name-node? . 52))
(1469 (begin-node? . 52))
(1470 (reconstruct-apply . 52))
(1471 (declare-operator-type . 52))
(1472 (constant-type . 52))
(1473 (compile-top . 58))
(1474 (compile . 58))
(1475 (compilators . 58))
(1476 (define-compilator . 58))
(1477 (compile-constant . 58))
(1478 (compile-begin . 58))
(1479 (compile-call . 58))
(1480 (lambda-node? . 58))
(1481 (compile-redex . 58))
(1482 (compile-unknown-call . 58))
(1483 (maybe-push-continuation . 58))
(1484 (push-arguments . 58))
(1485 (push-all-with-names . 58))
(1486 (compile-lambda . 58))
(1487 (compile-lambda-code . 58))
(1488 (lookup-variables . 58))
(1489 (compile-letrec . 58))
(1490 (compile-body . 58))
(1491 (operator/letrec . 58))
(1492 (make-cont . 58))
(1493 (cont-segment . 58))
(1494 (cont-source-info . 58))
(1495 (return-cont-segment . 58))
(1496 (return-cont . 58))
(1497 (return-cont? . 58))
(1498 (fall-through-cont . 58))
(1499 (fall-through-cont? . 58))
(1500 (ignore-values-segment . 58))
(1501 (ignore-values-cont . 58))
(1502 (ignore-values-cont? . 58))
(1503 (deliver-value . 58))
(1504 (named-cont . 58))
(1505 (cont-name . 58))
(1506 (bind-vars . 58))
(1507 (bind-flat-vars . 58))
(1508 (really-bind-vars . 58))
(1509 (initial-cenv . 58))
(1510 (environment-level . 58))
(1511 (funny-name/lexical-level . 58))
(1512 (name-node-binding . 58))
(1513 (generate-trap . 58))
(1514 (careful-sequentially . 58))
(1515 (large-segment-size . 58))
(1516 (shrink-segment . 58))
(1517 (type-check . 58))
(1518 (set-type-check?! . 58))
(1519 (*type-check?* . 58))
(1520 (diagnose-call-error . 58))
(1521 (define-compiler-primitive . 58))
(1522 (closed-compilators . 58))
(1523 (define-closed-compilator . 58))
(1524 (get-closed-compilator . 58))
(1525 (direct-compilator . 58))
(1526 (direct-closed-compilator . 58))
(1527 (nargs->domain . 58))
(1528 (define-simple-primitive . 58))
(1529 (simple-compilator . 58))
(1530 (simple-closed-compilator . 58))
(1531 (symbol-append . 58))
(1532 (define-stob-predicate . 58))
(1533 (define-data-struct-primitives . 58))
(1534 (define-vector-primitives . 58))
(1535 (define-n-ary-compiler-primitive . 58))
(1536 (n-ary-primitive-compilator . 58))
(1537 (call-on-arg-and-id . 58))
(1538 (call-on-args . 58))
(1539 (op/unspecific . 58))
(1540 (op/literal . 58))
(1541 (push-all-but-last . 58))
(1542 (dispatch-protocol-size . 58))
(1543 (make-dispatch-protocol . 58))
(1544 (compile-form . 58))
(1545 (compile-file . 58))
(1546 (compile-and-run-forms . 58))
(1547 (compile-and-run-file . 58))
(1548 (maybe-newline-after . 58))
(1549 (compile-and-run-scanned-forms . 58))
(1550 (compile-scanned-forms . 58))
(1551 (compile-scanned-form . 58))
(1552 (compile-definition . 58))
(1553 (location-contents-offset . 58))
(1554 (get-location . 58))
(1555 (get-location-for-undefined . 58))
(1556 (get-location-for-unassignable . 58))
(1557 (package-accessor-on-demand . 58))
(1558 (location-on-demand . 58))
(1559 (package-undefineds . 58))
(1560 (location-for-reference . 58))
(1561 (package-undefined-but-assigneds . 58))
(1562 (location-for-assignment . 58))
(1563 (note-caching . 58))
(1564 (grumble . 58))
(1565 (make-startup-procedure . 58))
(1566 (an-ignore-values-cont . 58))
(1567 (eval . 64))
(1568 (load-into . 64))
(1569 (eval-from-file . 64))
(1570 (eval-scanned-forms . 64))
(1571 (invoke-template . 64))
(1572 (load . 64))
(1573 (display-condition . 45))
(1574 (really-display-condition . 45))
(1575 (*depth* . 45))
(1576 (*length* . 45))
(1577 (&disclose-condition . 45))
(1578 (disclose-condition . 45))
(1579 (limited-write . 45))
(1580 (command-processor . 68))
(1581 (mini-load . 68))
(1582 (read-string . 68))
(1583 (primitives . 39))
(1584 (enum-case . 40))
(1585 (run-threads . 38))
(1586 (run-threads-with-housekeeper . 38))
(1587 (round-robin-event-handler . 38))
(1588 (make-counter . 38))
(1589 (counter-value . 38))
(1590 (increment-counter! . 38))
(1591 (decrement-counter! . 38))
(1592 (root-scheduler . 39))
(1593 (make-root-event-handler . 39))
(1594 (root-handler . 39))
(1595 (cheap-display-condition . 39))
(1596 (abort-token . 39))
(1597 (scheme-exit-now . 39))
(1598 (root-wait . 39))
(1599 (one-day-of-milliseconds . 39))
(1600 (do-some-waiting . 39))
(1601 (deadlock-handler . 39))
(1602 (call-when-deadlocked! . 39))
(1603 (spawn-output-forcers . 39))
(1604 (unspecific . 39))
(1605 (usual-resumer . 43))
(1606 (initialize-rts . 43))
(1607 (start . 69))
(1608 (make-built-in-structures . 69))
(1609 (initialize-interaction-environment! . 69))
(1610 (make-initial-package . 69))
(1611 (make-tower . 69))
(1612 (inline-transform . 62))
(1613 (make-substitution . 62))
(1614 (substitute . 62))
(1615 (operator/name . 62))
(1616 (qualified->name . 62))
(1617 (get-qualified-env . 62))
(1618 (operator . 66))
(1619 (simple-interface . 66))
(1620 (package . 66))
(1621 (transform . 66))
(1622 (:syntax . 60))
(1623 (:values . 60))
(1624 (:arguments . 60))
(1625 (:value . 60))
(1626 (procedure . 60))
(1627 (:boolean . 60))
(1628 (:char . 60))
(1629 (:null . 60))
(1630 (:unspecific . 60))
(1631 (:number . 60))
(1632 (:complex . 60))
(1633 (:real . 60))
(1634 (:rational . 60))
(1635 (:integer . 60))
(1636 (:exact-integer . 60))
(1637 (:pair . 60))
(1638 (:string . 60))
(1639 (:symbol . 60))
(1640 (:vector . 60))
(1641 (:procedure . 60))
(1642 (:input-port . 60))
(1643 (:output-port . 60))
(1644 (:error . 60))
(1645 (:escape . 60))
(1646 (:structure . 60))
(1647 (:type . 60))
(1648 (def . 59))
(1649 (really-def . 59))
(1650 (define-multiple . 59))
(1651 (define-interface . 59))
(1652 (export . 59))
(1653 (compound-interface . 59))
(1654 (define-structure . 59))
(1655 (define-structures . 59))
(1656 (structure . 59))
(1657 (structures . 59))
(1658 (a-package . 59))
(1659 (receive . 59))
(1660 (define-reflective-tower-maker . 59))
(1661 (export-reflective-tower-maker . 59))
(1662 (define-module . 59))
(1663 (make-a-package . 59))
(1664 (loser . 59))
(1665 (interface-of . 59))
(1666 (*verify-later!* . 59))
(1667 (verify-later! . 59))
(1668 (set-verify-later! . 59))
(1669 (note-name! . 59))
(1670 (ensure-loaded . 65))
-
; Template uid -> name, parent, pc in parent, env maps
(0 #f -14 #f ())
(1 #f -14 #f ())
(2 call-error 1 7 ())
(3 syntax-error 1 17 ())
(4 warn 1 27 ())
(5 signal 1 37 ())
(6 #f -14 #f ())
(7 user-message 6 7 ())
(8 channel-write 6 17 ())
(9 loop 8 19 ())
(10 buffer-length 6 27 ())
(11 channel-read 6 37 ())
(12 #f 11 6 ())
(13 loop 12 19 ())
(14 output-port? 6 47 ())
(15 input-port? 6 57 ())
(16 restore-the-symbol-table! 6 67 ())
(17 flush-the-symbol-table! 6 77 ())
(18 string-copy 6 87 ())
(19 string->symbol 6 97 ())
(20 vector-unassigned? 6 107 ())
(21 make-undefined-location 6 117 ())
(22 primitive-cwcc 6 127 ())
(23 #f 22 8 ())
(24 invoke-closure 6 137 ())
(25 integer->char 6 147 ())
(26 char->integer 6 157 ())
(27 #f -14 #f ())
(28 current-cont 27 7 ())
(29 closure-template 27 17 ())
(30 continuation-ref 27 27 ())
(31 binary-comparison-reduce2 27 37 ())
(32 closure? 27 47 ())
(33 #f -14 #f ())
(34 #f -14 #f ())
(35 cell-set! 34 7 ())
(36 port-pending-eof? 34 17 ())
(37 complex? 34 27 ())
(38 arithmetic-shift 34 37 ())
(39 set-port-pending-eof?! 34 47 ())
(40 port-handler 34 57 ())
(41 signal-condition 34 67 ())
(42 integer? 34 77 ())
(43 session-data 34 87 ())
(44 make-closure 34 97 ())
(45 template-ref 34 107 ())
(46 set-session-data! 34 117 ())
(47 make-rectangular 34 127 ())
(48 channel? 34 137 ())
(49 open-channel 34 147 ())
(50 string=? 34 157 ())
(51 cell-ref 34 167 ())
(52 find-all 34 177 ())
(53 extended-number? 34 187 ())
(54 reverse-list->string 34 197 ())
(55 port-locked? 34 207 ())
(56 denominator 34 217 ())
(57 call-with-values 34 227 ())
(58 weak-pointer-ref 34 237 ())
(59 find-all-symbols 34 247 ())
(60 set-port-locked?! 34 257 ())
(61 code-vector? 34 267 ())
(62 port-status 34 277 ())
(63 pop 34 287 ())
(64 exp 34 297 ())
(65 sin 34 307 ())
(66 set-port-status! 34 317 ())
(67 make-extended-number 34 327 ())
(68 channel-os-index 34 337 ())
(69 cos 34 347 ())
(70 #f 34 353 ())
(71 collect 70 7 ())
(72 external-lookup 70 17 ())
(73 tan 70 27 ())
(74 message 70 37 ())
(75 log 70 47 ())
(76 continuation-length 70 57 ())
(77 find-all-records 70 67 ())
(78 make-code-vector 70 77 ())
(79 cdr 70 87 ())
(80 bitwise-xor 70 97 ())
(81 car 70 107 ())
(82 string? 70 117 ())
(83 symbol? 70 127 ())
(84 bitwise-not 70 137 ())
(85 set-cdr! 70 147 ())
(86 vector? 70 157 ())
(87 closure-env 70 167 ())
(88 set-car! 70 177 ())
(89 bitwise-ior 70 187 ())
(90 port-buffer 70 197 ())
(91 number? 70 207 ())
(92 template-length 70 217 ())
(93 string-hash 70 227 ())
(94 primitive-catch 70 237 ())
(95 set-port-buffer! 70 247 ())
(96 make-string 70 257 ())
(97 record? 70 267 ())
(98 make-vector 70 277 ())
(99 extended-number-set! 70 287 ())
(100 write-image 70 297 ())
(101 eq? 70 307 ())
(102 bitwise-and 70 317 ())
(103 code-vector-set! 70 327 ())
(104 location-id 70 337 ())
(105 set-location-id! 70 347 ())
(106 make-record 70 357 ())
(107 vector 70 367 ())
(108 intern 70 377 ())
(109 values 70 387 ())
(110 string-set! 70 397 ())
(111 unassigned 70 407 ())
(112 copy-bytes! 70 417 ())
(113 vector-set! 70 427 ())
(114 extended-number-ref 70 437 ())
(115 unspecific 70 447 ())
(116 channel-maybe-write 70 457 ())
(117 code-vector-ref 70 467 ())
(118 schedule-interrupt 70 477 ())
(119 record 70 487 ())
(120 set-interrupt-handlers! 70 497 ())
(121 #f 70 503 ())
(122 eof-object? 121 7 ())
(123 record-set! 121 17 ())
(124 ascii->char 121 27 ())
(125 char->ascii 121 37 ())
(126 port-limit 121 47 ())
(127 set-enabled-interrupts! 121 57 ())
(128 external-value 121 67 ())
(129 make-immutable! 121 77 ())
(130 port-index 121 87 ())
(131 set-port-limit! 121 97 ())
(132 channel-status 121 107 ())
(133 current-thread 121 117 ())
(134 set-port-index! 121 127 ())
(135 string-ref 121 137 ())
(136 set-exception-handlers! 121 147 ())
(137 immutable? 121 157 ())
(138 set-current-thread! 121 167 ())
(139 vector-ref 121 177 ())
(140 exact? 121 187 ())
(141 symbol->string 121 197 ())
(142 write-char 121 207 ())
(143 make-polar 121 217 ())
(144 record-ref 121 227 ())
(145 eof-object 121 237 ())
(146 numerator 121 247 ())
(147 channel-id 121 257 ())
(148 extended-number-length 121 267 ())
(149 error 121 277 ())
(150 exact->inexact 121 287 ())
(151 inexact->exact 121 297 ())
(152 checked-record-set! 121 307 ())
(153 apply 121 317 ())
(154 memory-status 121 327 ())
(155 code-vector-length 121 337 ())
(156 floor 121 347 ())
(157 with-continuation 121 357 ())
(158 >= 121 367 ())
(159 magnitude 121 377 ())
(160 <= 121 387 ())
(161 char=? 121 397 ())
(162 char<? 121 407 ())
(163 binary-reduce2 121 417 ())
(164 binary-reduce1 121 427 ())
(165 continuation? 121 437 ())
(166 remainder 121 447 ())
(167 vm-return 121 457 ())
(168 false 121 467 ())
(169 angle 121 477 ())
(170 port? 121 487 ())
(171 string-length 121 497 ())
(172 #f 121 503 ())
(173 external? 172 7 ())
(174 make-continuation 172 17 ())
(175 vector-length 172 27 ())
(176 port-lock 172 37 ())
(177 template? 172 47 ())
(178 rational? 172 57 ())
(179 add-finalizer! 172 67 ())
(180 checked-record-ref 172 77 ())
(181 channel-maybe-read 172 87 ())
(182 location? 172 97 ())
(183 return-from-exception 172 107 ())
(184 set-port-lock! 172 117 ())
(185 make-port 172 127 ())
(186 external-name 172 137 ())
(187 pair? 172 147 ())
(188 make-external 172 157 ())
(189 port-data 172 167 ())
(190 record-length 172 177 ())
(191 external-call 172 187 ())
(192 get-cont-from-heap 172 197 ())
(193 real-part 172 207 ())
(194 real? 172 217 ())
(195 make-template 172 227 ())
(196 set-port-data! 172 237 ())
(197 > 172 247 ())
(198 imag-part 172 257 ())
(199 make-location 172 267 ())
(200 = 172 277 ())
(201 < 172 287 ())
(202 char? 172 297 ())
(203 channel-abort 172 307 ())
(204 close-channel 172 317 ())
(205 quotient 172 327 ())
(206 / 172 337 ())
(207 weak-pointer? 172 347 ())
(208 - 172 357 ())
(209 continuation-set! 172 367 ())
(210 peek-char 172 377 ())
(211 + 172 387 ())
(212 * 172 397 ())
(213 contents 172 407 ())
(214 sqrt 172 417 ())
(215 make-cell 172 427 ())
(216 read-char 172 437 ())
(217 set-contents! 172 447 ())
(218 push 172 457 ())
(219 make-weak-pointer 172 467 ())
(220 assq 172 477 ())
(221 trap 172 487 ())
(222 wait 172 497 ())
(223 cons 172 507 ())
(224 #f -14 #f ())
(225 #f -14 #f ())
(226 template-set! 225 7 ())
(227 time 225 17 ())
(228 location-defined? 225 27 ())
(229 asin 225 37 ())
(230 vm-extension 225 47 ())
(231 acos 225 57 ())
(232 set-location-defined?! 225 67 ())
(233 atan 225 77 ())
(234 #f -14 #f ())
(235 #f -15 #f ())
(236 not 235 7 ())
(237 positive? 235 17 ())
(238 negative? 235 27 ())
(239 #f -15 #f ())
(240 simplest-rational 239 7 ())
(241 simplest-rational-internal 240 11 ())
(242 #f -15 #f ())
(243 abs 242 7 ())
(244 #f -15 #f ())
(245 rationalize 244 7 ())
(246 #f -15 #f ())
(247 even? 246 7 ())
(248 odd? 246 17 ())
(249 #f -15 #f ())
(250 raise-to-integer-power 249 7 ())
(251 loop 250 39 ())
(252 expt 249 17 ())
(253 #f -15 #f ())
(254 null? 253 7 ())
(255 list 253 17 ())
(256 #f -15 #f ())
(257 reduce 256 7 ())
(258 #f -15 #f ())
(259 inexact? 258 7 ())
(260 euclid 258 17 ())
(261 gcd 258 27 ())
(262 #f 261 8 ())
(263 lcm 258 37 ())
(264 #f 263 8 ())
(265 round 258 47 ())
(266 ceiling 258 57 ())
(267 truncate 258 67 ())
(268 modulo 258 77 ())
(269 #f -15 #f ())
(270 insert 269 7 ())
(271 last 269 17 ())
(272 sublist 269 27 ())
(273 recur 272 58 ())
(274 every 269 37 ())
(275 any 269 47 ())
(276 pos 269 57 ())
(277 #f 276 6 ())
(278 loop 277 22 ())
(279 filter 269 67 ())
(280 #f 279 6 ())
(281 unspecific 269 77 ())
(282 #f -15 #f ())
(283 force 282 7 ())
(284 make-promise 282 17 ())
(285 #f 284 11 ())
(286 map1 282 27 ())
(287 map2+ 282 37 ())
(288 map 282 47 ())
(289 for-each2+ 282 57 ())
(290 loop 289 21 ())
(291 for-each1 282 67 ())
(292 loop 291 18 ())
(293 for-each 282 77 ())
(294 vector-fill! 282 87 ())
(295 loop##94 294 19 ())
(296 real-length 282 97 ())
(297 length 282 107 ())
(298 list->vector 282 117 ())
(299 loop##91 298 35 ())
(300 vector->list 282 127 ())
(301 loop##88 300 11 ())
(302 string-ci>=? 282 137 ())
(303 #f 282 143 ())
(304 string-ci>? 303 7 ())
(305 string-ci<=? 303 17 ())
(306 string>=? 303 27 ())
(307 string>? 303 37 ())
(308 string<=? 303 47 ())
(309 max-or-min 303 57 ())
(310 loop 309 35 ())
(311 min 303 67 ())
(312 make-string<? 303 77 ())
(313 #f 312 6 ())
(314 loop 313 49 ())
(315 make-string=? 303 87 ())
(316 #f 315 6 ())
(317 loop 316 36 ())
(318 string-fill! 303 97 ())
(319 loop##75 318 18 ())
(320 list->string 303 107 ())
(321 loop##72 320 36 ())
(322 string->list 303 117 ())
(323 loop##69 322 18 ())
(324 string 303 127 ())
(325 string-append 303 137 ())
(326 #f 325 12 ())
(327 loop 325 59 ())
(328 loop##66 327 40 ())
(329 substring 303 147 ())
(330 loop##57 329 26 ())
(331 char-upcase 303 157 ())
(332 char-ci-compare 303 167 ())
(333 #f 332 6 ())
(334 char-downcase 303 177 ())
(335 make-character-map 303 187 ())
(336 loop##52 335 27 ())
(337 char>=? 303 197 ())
(338 char>? 303 207 ())
(339 char<=? 303 217 ())
(340 char-lower-case? 303 227 ())
(341 char-upper-case? 303 237 ())
(342 char-alphabetic? 303 247 ())
(343 char-numeric? 303 257 ())
(344 char-whitespace? 303 267 ())
(345 cddr 303 277 ())
(346 list? 303 287 ())
(347 recur 346 21 ())
(348 caar 303 297 ())
(349 ass 303 307 ())
(350 #f 349 6 ())
(351 loop 350 18 ())
(352 mem 303 317 ())
(353 #f 352 6 ())
(354 loop 353 18 ())
(355 list-tail 303 327 ())
(356 list-ref 303 337 ())
(357 append-reverse 303 347 ())
(358 reverse 303 357 ())
(359 append 303 367 ())
(360 recur 359 34 ())
(361 cdddr 303 377 ())
(362 cddddr 303 387 ())
(363 cdddar 303 397 ())
(364 cddar 303 407 ())
(365 cddadr 303 417 ())
(366 cddaar 303 427 ())
(367 cdar 303 437 ())
(368 cdadr 303 447 ())
(369 cdaddr 303 457 ())
(370 cdadar 303 467 ())
(371 cdaar 303 477 ())
(372 cdaadr 303 487 ())
(373 cdaaar 303 497 ())
(374 #f 303 503 ())
(375 cadr 374 7 ())
(376 caddr 374 17 ())
(377 cadddr 374 27 ())
(378 caddar 374 37 ())
(379 cadar 374 47 ())
(380 cadadr 374 57 ())
(381 cadaar 374 67 ())
(382 caadr 374 77 ())
(383 caaddr 374 87 ())
(384 caadar 374 97 ())
(385 caaar 374 107 ())
(386 caaadr 374 117 ())
(387 caaaar 374 127 ())
(388 zero? 374 137 ())
(389 max 374 147 ())
(390 eqv? 374 157 ())
(391 equal? 374 167 ())
(392 loop 391 156 ())
(393 boolean? 374 177 ())
(394 #f 374 308 ())
(395 #f 374 328 ())
(396 #f -15 #f ())
(397 #f -16 #f ())
(398 default-record-discloser 397 25 ())
(399 record-type 397 35 ())
(400 record-type? 397 45 ())
(401 record-type-name 397 55 ())
(402 record-type-discloser 397 65 ())
(403 disclose-record 397 75 ())
(404 define-record-discloser 397 85 ())
(405 record-predicate 397 95 ())
(406 #f 405 6 ())
(407 record-type-field-names 397 105 ())
(408 record-field-index 397 115 ())
(409 loop 408 28 ())
(410 record-modifier 397 125 ())
(411 #f 410 62 ())
(412 record-accessor 397 135 ())
(413 #f 412 62 ())
(414 record-constructor 397 145 ())
(415 #f 414 10 ())
(416 #f 414 54 ())
(417 loop 416 45 ())
(418 record-type-uid 397 155 ())
(419 make-record-type 397 165 ())
(420 #f 397 218 ())
(421 #f -17 #f ())
(422 #f -18 #f ())
(423 proc->discloser 422 17 ())
(424 #f 423 6 ())
(425 #f 424 6 ())
(426 compare-to 422 27 ())
(427 #f 426 6 ())
(428 check-next 422 37 ())
(429 #f 428 6 ())
(430 check-for-next 422 47 ())
(431 #f 430 6 ())
(432 value? 422 57 ())
(433 simple-type? 422 67 ())
(434 %type-predicate 422 77 ())
(435 argument-sequence-predicate 422 87 ())
(436 recur 435 27 ())
(437 one-action 422 97 ())
(438 #f 437 6 ())
(439 #f 438 20 ())
(440 last-action 422 107 ())
(441 #f 440 6 ())
(442 methods->perform 422 117 ())
(443 recur 442 18 ())
(444 apply-generic 422 127 ())
(445 %same-type? 422 137 ())
(446 %type-priority 422 147 ())
(447 more-specific-type? 422 157 ())
(448 more-specific? 422 167 ())
(449 loop 448 148 ())
(450 every2 422 177 ())
(451 same-applicability? 422 187 ())
(452 insert-method 422 197 ())
(453 recur 452 18 ())
(454 add-to-method-table! 422 207 ())
(455 make-method-info 422 217 ())
(456 set-final-method! 422 227 ())
(457 make-cell-for-generic 422 237 ())
(458 #f 457 8 ())
(459 #f 457 12 ())
(460 #f 457 16 ())
(461 make-method-table 422 247 ())
(462 #f 461 53 ())
(463 #f 461 78 ())
(464 method-table? 422 257 ())
(465 empty-method-list 422 267 ())
(466 method-info? 422 277 ())
(467 compute-priority 422 287 ())
(468 make-simple-type 422 297 ())
(469 really-make-simple-type 422 331 ())
(470 #f 422 337 ())
(471 simple-type-id 470 7 ())
(472 simple-type-priority 470 17 ())
(473 simple-type-predicate 470 27 ())
(474 simple-type-superiors 470 37 ())
(475 #f 470 51 ())
(476 #f 470 186 ())
(477 #f 470 414 ())
(478 #f 470 506 ())
(479 record-type-priority 478 431 ())
(480 really-make-method-info 478 466 ())
(481 method-info-proc 478 476 ())
(482 method-info-n-ary? 478 486 ())
(483 #f 478 492 ())
(484 method-info-types 483 7 ())
(485 #f 483 21 ())
(486 really-make-method-table 483 59 ())
(487 method-table-id 483 69 ())
(488 method-table-set-perform! 483 79 ())
(489 method-table-get-perform 483 89 ())
(490 make-generic 483 99 ())
(491 method-table-prototype 483 109 ())
(492 method-table-methods 483 119 ())
(493 set-method-table-methods! 483 129 ())
(494 #f 483 143 ())
(495 add-method! 483 215 ())
(496 add-method! 483 308 ())
(497 type-predicate 483 394 ())
(498 &type-predicate 483 487 ())
(499 #f 483 510 ())
(500 &type-predicate 499 52 ())
(501 type-priority 499 128 ())
(502 &type-priority 499 221 ())
(503 &type-priority 499 293 ())
(504 type-superiors 499 369 ())
(505 &type-superiors 499 462 ())
(506 #f 499 485 ())
(507 &type-superiors 506 52 ())
(508 same-type? 506 132 ())
(509 &same-type? 506 229 ())
(510 &same-type? 506 305 ())
(511 singleton 506 356 ())
(512 singleton-value 506 366 ())
(513 #f 506 380 ())
(514 &type-predicate 506 439 ())
(515 #f 506 462 ())
(516 &type-priority 515 52 ())
(517 &same-type? 515 128 ())
(518 disclose 515 204 ())
(519 &disclose 515 297 ())
(520 &disclose 515 369 ())
(521 &add-method! 515 448 ())
(522 #f -19 #f ())
(523 &number->string 522 91 ())
(524 &number->string 522 167 ())
(525 #f 522 190 ())
(526 &number->string 525 56 ())
(527 integer->digit 525 119 ())
(528 integer->string 525 126 ())
(529 recur 528 52 ())
(530 string->number 525 143 ())
(531 loop 530 235 ())
(532 radix-is 531 55 ())
(533 exactness-is 531 59 ())
(534 loop 531 294 ())
(535 &really-string->number 525 245 ())
(536 #f 525 290 ())
(537 loop 536 31 ())
(538 &really-string->number 525 363 ())
(539 set-exactness 525 390 ())
(540 digit->integer 525 438 ())
(541 do-it 525 445 ())
(542 loop 541 40 ())
(543 string->integer 525 452 ())
(544 #f -20 #f ())
(545 set-dynamic-env! 544 7 ())
(546 get-dynamic-env 544 17 ())
(547 with-dynamic-env 544 27 ())
(548 #f 547 32 ())
(549 let-fluids 544 37 ())
(550 loop 549 28 ())
(551 let-fluid 544 47 ())
(552 set-fluid! 544 57 ())
(553 fluid 544 67 ())
(554 empty-dynamic-env 544 77 ())
(555 initialize-dynamic-state! 544 87 ())
(556 set-dynamic-point! 544 97 ())
(557 get-dynamic-point 544 107 ())
(558 make-thread 544 141 ())
(559 thread-dynamic-point 544 151 ())
(560 thread-dynamic-env 544 161 ())
(561 make-fluid 544 195 ())
(562 fluid-top-level-value 544 205 ())
(563 set-fluid-top-level-value! 544 215 ())
(564 #f -33 #f ())
(565 lookup-enumerand 564 12 ())
(566 loop 565 27 ())
(567 #f -34 #f ())
(568 next-protocol 567 166 ())
(569 #f -41 #f ())
(570 queue-length 569 17 ())
(571 queue->list 569 27 ())
(572 #f 571 6 ())
(573 delete-from-queue-if! 569 37 ())
(574 loop 573 130 ())
(575 delete-from-queue! 569 47 ())
(576 #f 575 9 ())
(577 on-queue? 569 57 ())
(578 dequeue! 569 67 ())
(579 queue-empty? 569 77 ())
(580 queue-front 569 87 ())
(581 enqueue! 569 97 ())
(582 make-queue 569 107 ())
(583 queue? 569 117 ())
(584 really-make-queue 569 151 ())
(585 queue-tail 569 161 ())
(586 set-queue-tail! 569 171 ())
(587 queue-head 569 181 ())
(588 set-queue-head! 569 191 ())
(589 queue-uid 569 201 ())
(590 #f -25 #f ())
(591 condition-supertypes 590 17 ())
(592 define-condition-type 590 27 ())
(593 #f 592 17 ())
(594 condition-predicate 590 37 ())
(595 #f 594 6 ())
(596 condition? 590 47 ())
(597 make-exception 590 259 ())
(598 #f -22 #f ())
(599 initialize-session-data! 598 17 ())
(600 session-data-set! 598 27 ())
(601 session-data-ref 598 37 ())
(602 make-session-data-slot! 598 47 ())
(603 #f -36 #f ())
(604 call-before-heap-overflow! 603 27 ())
(605 enabled-interrupts 603 37 ())
(606 post-gc-handler 603 47 ())
(607 #f 606 6 ())
(608 #f 607 36 ())
(609 #f 607 51 ())
(610 #f 609 7 ())
(611 #f 609 20 ())
(612 call-after-gc! 603 57 ())
(613 with-interrupts 603 67 ())
(614 #f 613 13 ())
(615 enable-interrupts! 603 77 ())
(616 disable-interrupts! 603 87 ())
(617 with-interrupts-allowed 603 97 ())
(618 with-interrupts-inhibited 603 107 ())
(619 set-interrupt-handler! 603 117 ())
(620 initialize-interrupts! 603 127 ())
(621 #f 620 6 ())
(622 loop##546 621 32 ())
(623 #f 622 32 ())
(624 #f 621 76 ())
(625 #f 624 11 ())
(626 #f 603 201 ())
(627 #f -21 #f ())
(628 travel-to-point! 627 7 ())
(629 continuation->procedure 627 17 ())
(630 #f 629 6 ())
(631 #f 630 52 ())
(632 call-with-current-continuation 627 27 ())
(633 #f 632 6 ())
(634 dynamic-wind 627 37 ())
(635 make-point 627 71 ())
(636 point-parent 627 81 ())
(637 point-dynamic-env 627 91 ())
(638 point-out 627 101 ())
(639 point-in 627 111 ())
(640 point-depth 627 121 ())
(641 #f -30 #f ())
(642 set-template-info! 641 17 ())
(643 set-template-code! 641 27 ())
(644 template-info 641 37 ())
(645 template-code 641 47 ())
(646 #f -32 #f ())
(647 &disclose 646 318 ())
(648 &disclose 646 424 ())
(649 #f -31 #f ())
(650 real-continuation-pc 649 17 ())
(651 real-continuation-template 649 27 ())
(652 exception-continuation? 649 37 ())
(653 exception-continuation-template 649 47 ())
(654 continuation-template 649 57 ())
(655 exception-continuation-pc 649 67 ())
(656 continuation-pc 649 77 ())
(657 continuation-env 649 87 ())
(658 continuation-cont 649 97 ())
(659 continuation-parent 649 107 ())
(660 loop 659 105 ())
(661 continuation-arg-count 649 117 ())
(662 continuation-arg 649 127 ())
(663 exception-continuation-exception 649 137 ())
(664 &disclose 649 241 ())
(665 #f -35 #f ())
(666 define-exception-handler 665 7 ())
(667 signal-exception 665 17 ())
(668 #f 665 47 ())
(669 extend-opcode! 665 61 ())
(670 except 669 6 ())
(671 #f 669 31 ())
(672 really-signal-condition 665 71 ())
(673 loop 672 29 ())
(674 #f 673 9 ())
(675 with-handler 665 81 ())
(676 initialize-exceptions! 665 106 ())
(677 #f 676 6 ())
(678 last-resort-condition-handler 665 116 ())
(679 #f 678 15 ())
(680 #f 679 23 ())
(681 report-utter-lossage 665 126 ())
(682 #f 681 183 ())
(683 continuation-preview 665 136 ())
(684 ignore-errors 665 146 ())
(685 #f 684 6 ())
(686 #f 685 6 ())
(687 report-errors-as-warnings 665 156 ())
(688 #f 687 12 ())
(689 &disclose 665 211 ())
(690 &disclose 665 279 ())
(691 #f -37 #f ())
(692 #f -37 #f ())
(693 waiting? 692 37 ())
(694 add-event! 692 47 ())
(695 running? 692 57 ())
(696 loop 695 25 ())
(697 interrupt-timer-time 692 67 ())
(698 debit-down! 692 77 ())
(699 loop 698 28 ())
(700 run-thread 692 87 ())
(701 #f 700 44 ())
(702 switch-to-thread 692 97 ())
(703 #f 702 6 ())
(704 suspend-to 692 107 ())
(705 schedule-wakeup 692 117 ())
(706 schedule-event 692 127 ())
(707 make-ready 692 137 ())
(708 dequeue-thread! 692 147 ())
(709 real-time 692 157 ())
(710 #f -37 #f ())
(711 wake-some-threads 710 7 ())
(712 loop 711 46 ())
(713 insert 710 17 ())
(714 #f -37 #f ())
(715 enqueue-thread! 714 7 ())
(716 suspend 714 17 ())
(717 block 714 27 ())
(718 #f -37 #f ())
(719 sleep 718 7 ())
(720 #f 719 71 ())
(721 #f -37 #f ())
(722 root-scheduler 721 7 ())
(723 terminate-current-thread 721 17 ())
(724 compose-continuation 721 27 ())
(725 #f 724 6 ())
(726 #f 725 27 ())
(727 #f 726 10 ())
(728 #f 727 9 ())
(729 thunk->continuation 721 37 ())
(730 thread-top-level 721 47 ())
(731 #f 730 6 ())
(732 #f 731 3 ())
(733 make-thread 721 57 ())
(734 exit 721 67 ())
(735 start-multitasking 721 77 ())
(736 #f 735 6 ())
(737 #f 736 6 ())
(738 #f 736 10 ())
(739 #f 738 7 ())
(740 #f 739 6 ())
(741 #f 739 10 ())
(742 min 721 87 ())
(743 schedule-interrupt! 721 97 ())
(744 debit-thread-times! 721 107 ())
(745 loop 744 29 ())
(746 handle-timer-interrupt 721 117 ())
(747 cancel-timer-interrupt! 721 127 ())
(748 with-threads 721 137 ())
(749 #f 748 10 ())
(750 #f 749 3 ())
(751 #f 749 7 ())
(752 #f 749 11 ())
(753 spawn-on-scheduler 721 147 ())
(754 spawn-on-root 721 157 ())
(755 spawn 721 167 ())
(756 show-running 721 177 ())
(757 loop##655 756 16 ())
(758 event-pending? 721 187 ())
(759 get-next-event! 721 197 ())
(760 thread? 721 207 ())
(761 interrupt-thread 721 217 ())
(762 #f 721 223 ())
(763 kill-thread! 762 7 ())
(764 #f 763 9 ())
(765 propogate-upcall 762 17 ())
(766 #f 765 62 ())
(767 upcall 762 27 ())
(768 relinquish-timeslice 762 37 ())
(769 wait 762 47 ())
(770 debit-up! 762 57 ())
(771 loop 770 31 ())
(772 get-next-thread 762 67 ())
(773 loop 772 21 ())
(774 run 762 77 ())
(775 remove-thread-from-queue! 762 87 ())
(776 all-threads 762 97 ())
(777 thread-uid->thread 762 107 ())
(778 loop 777 27 ())
(779 really-make-thread 762 141 ())
(780 thread-name 762 151 ())
(781 thread-uid 762 161 ())
(782 thread-current-task 762 171 ())
(783 set-thread-current-task! 762 181 ())
(784 thread-events 762 191 ())
(785 set-thread-events! 762 201 ())
(786 thread-data 762 211 ())
(787 set-thread-data! 762 221 ())
(788 thread-scheduler 762 231 ())
(789 set-thread-scheduler! 762 241 ())
(790 thread-time 762 251 ())
(791 set-thread-time! 762 261 ())
(792 thread-arguments 762 271 ())
(793 set-thread-arguments! 762 281 ())
(794 thread-queue 762 291 ())
(795 set-thread-queue! 762 301 ())
(796 thread-continuation 762 311 ())
(797 set-thread-continuation! 762 321 ())
(798 thread-dynamic-point 762 331 ())
(799 set-thread-dynamic-point! 762 341 ())
(800 thread-dynamic-env 762 351 ())
(801 #f 762 365 ())
(802 #f -42 #f ())
(803 release-lock 802 17 ())
(804 #f 803 10 ())
(805 maybe-obtain-lock 802 27 ())
(806 #f 805 10 ())
(807 obtain-lock 802 37 ())
(808 #f 807 10 ())
(809 make-lock 802 47 ())
(810 lock? 802 57 ())
(811 really-make-lock 802 91 ())
(812 lock-uid 802 101 ())
(813 lock-queue 802 111 ())
(814 lock-owner-uid 802 121 ())
(815 set-lock-owner-uid! 802 131 ())
(816 #f -23 #f ())
(817 #f -23 #f ())
(818 #f -23 #f ())
(819 current-input-port 818 7 ())
(820 input-port-option 818 17 ())
(821 current-output-port 818 27 ())
(822 output-port-option 818 37 ())
(823 #f -23 #f ())
(824 open-input-port? 823 7 ())
(825 maybe-obtain-port-lock 823 17 ())
(826 open-port? 823 27 ())
(827 release-port-lock 823 37 ())
(828 fill-port-buffer! 823 47 ())
(829 #f -23 #f ())
(830 char-ready? 829 7 ())
(831 #f -23 #f ())
(832 real-char-ready? 831 7 ())
(833 #f -23 #f ())
(834 newline 833 7 ())
(835 call-with-current-noise-port 833 17 ())
(836 #f -23 #f ())
(837 make-null-output-port 836 7 ())
(838 #f -23 #f ())
(839 silently 838 7 ())
(840 call-with-current-output-port 838 17 ())
(841 call-with-current-input-port 838 27 ())
(842 with-current-ports 838 37 ())
(843 initialize-i/o 838 47 ())
(844 current-noise-port 838 57 ())
(845 current-error-port 838 67 ())
(846 #f -23 #f ())
(847 empty-port-buffer! 846 7 ())
(848 really-force-output 846 17 ())
(849 open-output-port? 846 27 ())
(850 make-output-port-closed! 846 37 ())
(851 make-forcing-thunk 846 47 ())
(852 #f 851 6 ())
(853 #f 852 7 ())
(854 #f 852 58 ())
(855 output-port-forcers 846 57 ())
(856 loop 855 30 ())
(857 periodically-force-output! 846 67 ())
(858 initialize-output-port-list! 846 77 ())
(859 port-handler? 846 87 ())
(860 make-unbuffered-output-port 846 97 ())
(861 okay-buffer? 846 107 ())
(862 make-output-port 846 117 ())
(863 make-input-port 846 127 ())
(864 make-input-port-closed! 846 137 ())
(865 force-output 846 147 ())
(866 write-unbuffered-block 846 157 ())
(867 loop##832 866 40 ())
(868 write-buffered-block 846 167 ())
(869 okay-limits? 846 177 ())
(870 write-block 846 187 ())
(871 write-string 846 197 ())
(872 read-more 846 207 ())
(873 #f 846 213 ())
(874 buffer-length 873 7 ())
(875 really-read-block 873 17 ())
(876 read-block 873 27 ())
(877 obtain-port-lock 873 37 ())
(878 close-output-port 873 47 ())
(879 close-input-port 873 57 ())
(880 write-char-handler 873 67 ())
(881 read-char-handler 873 77 ())
(882 #f 881 6 ())
(883 two-arg-proc->handler 873 87 ())
(884 #f 883 6 ())
(885 one-arg-proc->handler 873 97 ())
(886 #f 885 6 ())
(887 initialize-i/o-handlers! 873 107 ())
(888 disclose-port 873 117 ())
(889 make-port-handler 873 151 ())
(890 port-handler-buffer-proc 873 161 ())
(891 port-handler-close 873 171 ())
(892 port-handler-discloser 873 181 ())
(893 &disclose 873 236 ())
(894 &disclose 873 308 ())
(895 #f 873 475 ())
(896 #f 873 479 ())
(897 #f 873 483 ())
(898 #f -23 #f ())
(899 #f -26 #f ())
(900 write 899 7 ())
(901 recur 900 36 ())
(902 recurring-write 899 17 ())
(903 write-boolean 899 27 ())
(904 write-number 899 37 ())
(905 write-char-literal 899 47 ())
(906 character-name 899 57 ())
(907 write-string-literal 899 67 ())
(908 loop##895 907 26 ())
(909 write-list 899 77 ())
(910 loop 909 88 ())
(911 quotation? 899 87 ())
(912 write-vector 899 97 ())
(913 loop 912 76 ())
(914 write-other 899 107 ())
(915 #f 914 73 ())
(916 display-type-name 899 117 ())
(917 loop##924 916 86 ())
(918 display 899 127 ())
(919 recur 918 36 ())
(920 #f -27 #f ())
(921 reading-error 920 27 ())
(922 preferred-case 920 37 ())
(923 parse-token 920 47 ())
(924 sub-read-token 920 57 ())
(925 loop 924 38 ())
(926 define-sharp-macro 920 67 ())
(927 gobble-line 920 77 ())
(928 loop 927 15 ())
(929 reader-token? 920 87 ())
(930 sub-read 920 97 ())
(931 sub-read-carefully 920 107 ())
(932 sub-read-list 920 117 ())
(933 recur 932 56 ())
(934 set-standard-syntax! 920 127 ())
(935 set-standard-read-macro! 920 137 ())
(936 make-reader-token 920 147 ())
(937 read 920 157 ())
(938 loop 937 33 ())
(939 #f 920 163 ())
(940 #f 939 65 ())
(941 sub-read-whitespace 939 93 ())
(942 #f 939 100 ())
(943 sub-read-constituent 939 118 ())
(944 #f 939 125 ())
(945 #f 939 197 ())
(946 #f 939 219 ())
(947 #f 939 241 ())
(948 #f 939 263 ())
(949 #f 939 285 ())
(950 loop 949 25 ())
(951 #f 939 307 ())
(952 #f 939 327 ())
(953 #f 939 341 ())
(954 #f 939 361 ())
(955 #f 939 381 ())
(956 #f 939 401 ())
(957 number-sharp-macro 939 421 ())
(958 #f 939 428 ())
(959 loop##993 939 494 ())
(960 #f -24 #f ())
(961 #f 960 11 ())
(962 #f 960 15 ())
(963 #f 960 19 ())
(964 input-channel->port 960 32 ())
(965 #f 960 46 ())
(966 #f 960 50 ())
(967 #f 960 54 ())
(968 make-unbuffered-output-channel-handler 960 67 ())
(969 #f 968 19 ())
(970 #f 968 23 ())
(971 #f 968 27 ())
(972 output-channel->port 960 77 ())
(973 maybe-force-output 960 87 ())
(974 #f 973 28 ())
(975 maybe-open-file 960 97 ())
(976 open-input-file 960 107 ())
(977 open-output-file 960 117 ())
(978 call-with-input-file 960 127 ())
(979 call-with-output-file 960 137 ())
(980 with-input-from-file 960 147 ())
(981 #f 980 9 ())
(982 with-output-to-file 960 157 ())
(983 #f 982 9 ())
(984 steal-channel-port! 960 167 ())
(985 really-steal-channel-port! 960 177 ())
(986 #f 985 147 ())
(987 #f -24 #f ())
(988 initialize-channel-i/o! 987 7 ())
(989 i/o-completion-handler 987 17 ())
(990 waiting-for-i/o? 987 27 ())
(991 wait-for-channel 987 37 ())
(992 steal-channel! 987 47 ())
(993 #f 987 61 ())
(994 #f 987 79 ())
(995 i/o-wait-count 987 113 ())
(996 increment-i/o-wait-count! 987 123 ())
(997 decrement-i/o-wait-count! 987 133 ())
(998 i/o-wait-queue 987 161 ())
(999 make-i/o-wait-queues 987 171 ())
(1000 #f 999 10 ())
(1001 loop##1065 1000 69 ())
(1002 loop##1069 1000 94 ())
(1003 #f -46 #f ())
(1004 symbol-hash 1003 27 ())
(1005 default-table-hash-function 1003 37 ())
(1006 alist-walk 1003 47 ())
(1007 loop##1142 1006 11 ())
(1008 really-table-walk 1003 57 ())
(1009 loop##1138 1008 63 ())
(1010 table-walk 1003 67 ())
(1011 #f 1010 6 ())
(1012 table->entry-list 1003 77 ())
(1013 #f 1012 17 ())
(1014 make-table-immutable! 1003 87 ())
(1015 table-expand-table! 1003 97 ())
(1016 table-enter-alist! 1003 107 ())
(1017 loop##1128 1016 26 ())
(1018 next-table-size 1003 117 ())
(1019 expand-hash-table! 1003 127 ())
(1020 loop##1123 1019 52 ())
(1021 new-entry 1003 137 ())
(1022 make-hash-table-set! 1003 147 ())
(1023 #f 1022 6 ())
(1024 make-hash-table-ref 1003 157 ())
(1025 #f 1024 6 ())
(1026 make->hash-table 1003 167 ())
(1027 #f 1026 41 ())
(1028 make-linear-table-set! 1003 177 ())
(1029 #f 1028 6 ())
(1030 make-linear-table-ref 1003 187 ())
(1031 #f 1030 6 ())
(1032 make-assoc 1003 197 ())
(1033 #f 1032 20 ())
(1034 loop 1033 18 ())
(1035 make-table-maker 1003 207 ())
(1036 #f 1035 76 ())
(1037 table-set! 1003 217 ())
(1038 table-ref 1003 227 ())
(1039 table? 1003 237 ())
(1040 really-make-table 1003 271 ())
(1041 table-set!-procedure 1003 281 ())
(1042 set-table-set!-procedure! 1003 291 ())
(1043 table-ref-procedure 1003 301 ())
(1044 set-table-ref-procedure! 1003 311 ())
(1045 table-data 1003 321 ())
(1046 set-table-data! 1003 331 ())
(1047 table-size 1003 341 ())
(1048 set-table-size! 1003 351 ())
(1049 make-table 1003 416 ())
(1050 #f 1003 483 ())
(1051 #f -48 #f ())
(1052 empty-rail-type? 1051 27 ())
(1053 optional-type? 1051 37 ())
(1054 head-type 1051 47 ())
(1055 tail-type 1051 57 ())
(1056 procedure-type-domain 1051 67 ())
(1057 procedure-type-argument-types 1051 77 ())
(1058 recur 1057 28 ())
(1059 procedure-type-arity 1051 87 ())
(1060 loop##1308 1059 11 ())
(1061 procedure-type? 1051 97 ())
(1062 fixed-arity-procedure-type? 1051 107 ())
(1063 loop 1062 43 ())
(1064 bottom-type? 1051 117 ())
(1065 rest-type? 1051 127 ())
(1066 same-type? 1051 137 ())
(1067 make-type 1051 147 ())
(1068 rail-type 1051 157 ())
(1069 make-some-values-type 1051 167 ())
(1070 other-type-info 1051 177 ())
(1071 restrictive? 1051 187 ())
(1072 procedure-type-codomain 1051 197 ())
(1073 meet? 1051 207 ())
(1074 meet-procedure? 1051 217 ())
(1075 make-optional-type 1051 227 ())
(1076 make-rest-type 1051 237 ())
(1077 mask->type 1051 247 ())
(1078 make-procedure-type 1051 257 ())
(1079 meet-type 1051 267 ())
(1080 meet-rail 1051 277 ())
(1081 meet-procedure 1051 287 ())
(1082 subtype? 1051 297 ())
(1083 disjoin-rest 1051 307 ())
(1084 disjoin-type 1051 317 ())
(1085 loop##1303 1084 262 ())
(1086 head-type-really 1051 327 ())
(1087 rail-type->sexp 1051 337 ())
(1088 recur 1087 25 ())
(1089 type->sexp 1051 347 ())
(1090 #f 1089 141 ())
(1091 atomic-type->sexp 1051 357 ())
(1092 set-type-name! 1051 367 ())
(1093 make-other-type 1051 377 ())
(1094 name->type 1051 387 ())
(1095 procedure-type 1051 397 ())
(1096 join-type 1051 407 ())
(1097 join-rail 1051 417 ())
(1098 join-procedure 1051 427 ())
(1099 sexp->values-type 1051 437 ())
(1100 sexp->type 1051 447 ())
(1101 #f 1100 281 ())
(1102 #f 1100 344 ())
(1103 p 1051 457 ())
(1104 value-type? 1051 467 ())
(1105 #f 1051 473 ())
(1106 new-type-bit 1105 7 ())
(1107 new-atomic-type 1105 17 ())
(1108 named-atomic-type 1105 27 ())
(1109 meta-type? 1105 37 ())
(1110 really-make-type 1105 71 ())
(1111 type-info 1105 81 ())
(1112 type-more 1105 91 ())
(1113 type-mask 1105 101 ())
(1114 #f 1105 115 ())
(1115 loop 1105 497 ())
(1116 #f 1105 510 ())
(1117 #f -50 #f ())
(1118 #f -50 #f ())
(1119 qualified-symbol 1118 7 ())
(1120 qualified-parent-name 1118 17 ())
(1121 qualified? 1118 27 ())
(1122 make-qualified 1118 37 ())
(1123 #f -50 #f ())
(1124 generated? 1123 7 ())
(1125 name? 1123 17 ())
(1126 transform? 1123 37 ())
(1127 binding-static 1123 47 ())
(1128 binding-place 1123 57 ())
(1129 same-denotation? 1123 67 ())
(1130 lookup 1123 77 ())
(1131 operator? 1123 87 ())
(1132 desyntaxify 1123 97 ())
(1133 loop 1132 267 ())
(1134 #f -50 #f ())
(1135 name->qualified 1134 7 ())
(1136 recur 1135 112 ())
(1137 schemify-sexp 1134 17 ())
(1138 loop 1137 156 ())
(1139 #f -50 #f ())
(1140 get-operator 1139 7 ())
(1141 operator-define! 1139 17 ())
(1142 #f -50 #f ())
(1143 define-schemifier 1142 7 ())
(1144 #f -50 #f ())
(1145 node? 1144 7 ())
(1146 node-set! 1144 17 ())
(1147 loop 1146 103 ())
(1148 node-ref 1144 27 ())
(1149 #f -50 #f ())
(1150 schemify1 1149 7 ())
(1151 schemify 1149 17 ())
(1152 #f -50 #f ())
(1153 get-funny 1152 7 ())
(1154 environment-reader 1152 17 ())
(1155 variable-type? 1152 27 ())
(1156 compatible-types? 1152 37 ())
(1157 variable-type 1152 47 ())
(1158 body-lossage 1152 57 ())
(1159 bind1 1152 67 ())
(1160 #f 1159 6 ())
(1161 make-node 1152 77 ())
(1162 classify-name 1152 87 ())
(1163 classify-operator-form 1152 97 ())
(1164 binding-type 1152 107 ())
(1165 literal? 1152 117 ())
(1166 classify 1152 127 ())
(1167 classify-macro-application 1152 137 ())
(1168 #f 1167 15 ())
(1169 scan-body-forms 1152 147 ())
(1170 #f 1169 183 ())
(1171 scan-body 1152 157 ())
(1172 #f 1171 64 ())
(1173 reflective-tower 1152 167 ())
(1174 make-transform 1152 177 ())
(1175 process-syntax 1152 187 ())
(1176 bind 1152 197 ())
(1177 bindrec 1152 207 ())
(1178 #f 1177 17 ())
(1179 make-binding 1152 217 ())
(1180 #f 1152 223 ())
(1181 bind-aliases 1180 7 ())
(1182 #f 1181 36 ())
(1183 define-usual-suspects 1180 17 ())
(1184 #f 1183 25 ())
(1185 #f 1184 67 ())
(1186 #f 1183 59 ())
(1187 #f 1186 63 ())
(1188 #f 1187 6 ())
(1189 #f 1183 89 ())
(1190 syntax? 1180 27 ())
(1191 normalize-formals 1180 37 ())
(1192 n-ary? 1180 47 ())
(1193 number-of-required-args 1180 57 ())
(1194 loop##1577 1193 11 ())
(1195 specs? 1180 67 ())
(1196 at-least-this-long? 1180 77 ())
(1197 this-long? 1180 87 ())
(1198 names? 1180 97 ())
(1199 bind-source-file-name 1180 107 ())
(1200 define-classifier 1180 117 ())
(1201 maybe-transform-call 1180 127 ())
(1202 #f 1201 133 ())
(1203 forget-integration 1180 137 ())
(1204 impose-type 1180 147 ())
(1205 set-binding-place! 1180 157 ())
(1206 clobber-binding! 1180 167 ())
(1207 make-name-generator 1180 177 ())
(1208 #f 1207 13 ())
(1209 maybe-transform 1180 187 ())
(1210 compare 1209 81 ())
(1211 name-hash 1180 197 ())
(1212 generated-uid 1180 207 ())
(1213 name->symbol 1180 217 ())
(1214 generate-name 1180 227 ())
(1215 node-operator 1180 237 ())
(1216 make-similar-node 1180 247 ())
(1217 node-predicate 1180 257 ())
(1218 #f 1217 37 ())
(1219 operator-lookup 1180 267 ())
(1220 make-operator-table 1180 277 ())
(1221 make-operator 1180 341 ())
(1222 operator-name 1180 351 ())
(1223 operator-uid 1180 361 ())
(1224 operator-nargs 1180 371 ())
(1225 operator-type 1180 381 ())
(1226 set-operator-type! 1180 391 ())
(1227 #f 1180 405 ())
(1228 really-make-node 1180 483 ())
(1229 node-plist 1180 493 ())
(1230 set-node-plist! 1180 503 ())
(1231 #f 1180 509 ())
(1232 node-form 1231 7 ())
(1233 node-operator-id 1231 17 ())
(1234 #f 1231 31 ())
(1235 make-generated 1231 69 ())
(1236 generated-parent-name 1231 79 ())
(1237 generated-env 1231 89 ())
(1238 generated-token 1231 99 ())
(1239 generated-symbol 1231 109 ())
(1240 #f 1231 123 ())
(1241 really-make-transform 1231 185 ())
(1242 transform-id 1231 195 ())
(1243 transform-source 1231 205 ())
(1244 transform-aux-names 1231 215 ())
(1245 transform-type 1231 225 ())
(1246 transform-env 1231 235 ())
(1247 transform-procedure 1231 245 ())
(1248 #f 1231 259 ())
(1249 classify-literal 1231 356 ())
(1250 classify-call 1231 392 ())
(1251 classify-transform-application 1231 452 ())
(1252 #f 1251 6 ())
(1253 #f 1231 467 ())
(1254 #f 1231 495 ())
(1255 #f 1231 505 ())
(1256 #f 1255 19 ())
(1257 unspecific-node 1255 80 ())
(1258 #f 1255 168 ())
(1259 #f 1255 239 ())
(1260 lose 1259 28 ())
(1261 #f 1255 290 ())
(1262 #f 1255 337 ())
(1263 #f 1255 363 ())
(1264 #f 1255 389 ())
(1265 #f -50 #f ())
(1266 #f 1265 11 ())
(1267 #f 1266 36 ())
(1268 #f 1265 39 ())
(1269 #f 1265 65 ())
(1270 #f 1265 87 ())
(1271 #f 1270 29 ())
(1272 #f 1270 52 ())
(1273 #f -44 #f ())
(1274 make-population 1273 7 ())
(1275 add-to-population! 1273 17 ())
(1276 weak-memq 1273 27 ())
(1277 population-reduce 1273 37 ())
(1278 loop##1725 1277 11 ())
(1279 population->list 1273 47 ())
(1280 walk-population 1273 57 ())
(1281 #f 1280 6 ())
(1282 #f -49 #f ())
(1283 note-interface-name! 1282 7 ())
(1284 note-reference-to-interface! 1282 17 ())
(1285 make-interface 1282 27 ())
(1286 interface-ref 1282 37 ())
(1287 for-each-declaration 1282 47 ())
(1288 make-compound-interface 1282 57 ())
(1289 #f 1288 12 ())
(1290 loop 1289 18 ())
(1291 #f 1288 16 ())
(1292 #f 1291 6 ())
(1293 #f 1288 36 ())
(1294 really-make-simple-interface 1282 67 ())
(1295 #f 1294 6 ())
(1296 #f 1294 10 ())
(1297 make-simple-interface 1282 77 ())
(1298 #f 1297 23 ())
(1299 #f 1298 62 ())
(1300 interface? 1282 87 ())
(1301 really-make-interface 1282 121 ())
(1302 interface-name 1282 131 ())
(1303 set-interface-name! 1282 141 ())
(1304 interface-clients 1282 151 ())
(1305 walk-method 1282 161 ())
(1306 ref-method 1282 171 ())
(1307 #f 1282 181 ())
(1308 #f -53 #f ())
(1309 follow-forwarding-pointers 1308 27 ())
(1310 maybe-fix-place 1308 37 ())
(1311 initialize-structure! 1308 47 ())
(1312 structure-interface 1308 57 ())
(1313 structure-unstable? 1308 67 ())
(1314 get-new-location 1308 77 ())
(1315 really-package-define! 1308 87 ())
(1316 package-accesses 1308 97 ())
(1317 initialize-package! 1308 107 ())
(1318 #f 1317 45 ())
(1319 #f 1317 58 ())
(1320 initialize-package-if-necessary! 1308 117 ())
(1321 package-opens 1308 127 ())
(1322 package-note-caching 1308 137 ())
(1323 loop 1322 83 ())
(1324 package-put! 1308 147 ())
(1325 package-get 1308 157 ())
(1326 flush-location-names 1308 167 ())
(1327 make-new-location 1308 177 ())
(1328 for-each-definition 1308 187 ())
(1329 #f 1328 6 ())
(1330 extract-package-from-environment 1308 197 ())
(1331 package-define-funny! 1308 207 ())
(1332 define-funny-names! 1308 217 ())
(1333 package? 1308 227 ())
(1334 package-definition 1308 237 ())
(1335 structure? 1308 247 ())
(1336 generic-lookup 1308 257 ())
(1337 package-lookup 1308 267 ())
(1338 really-package-lookup 1308 277 ())
(1339 loop 1338 111 ())
(1340 structure-lookup 1308 287 ())
(1341 package-define! 1308 297 ())
(1342 note-package-name! 1308 307 ())
(1343 really-package->environment 1308 317 ())
(1344 #f 1343 6 ())
(1345 new-package-uid 1308 327 ())
(1346 make-package 1308 337 ())
(1347 make-simple-package 1308 347 ())
(1348 #f 1347 65 ())
(1349 #f 1347 69 ())
(1350 #f 1308 353 ())
(1351 package-name 1350 7 ())
(1352 note-structure-name! 1350 17 ())
(1353 for-each-export 1350 27 ())
(1354 #f 1353 22 ())
(1355 make-structure 1350 37 ())
(1356 #f 1355 85 ())
(1357 really-make-structure 1350 71 ())
(1358 structure-name 1350 81 ())
(1359 set-structure-name! 1350 91 ())
(1360 structure-clients 1350 101 ())
(1361 structure-package 1350 111 ())
(1362 structure-interface-really 1350 121 ())
(1363 set-structure-interface! 1350 131 ())
(1364 structure-interface-thunk 1350 141 ())
(1365 #f 1350 155 ())
(1366 really-make-package 1350 193 ())
(1367 package-cached 1350 203 ())
(1368 package-clients 1350 213 ())
(1369 package-plist 1350 223 ())
(1370 set-package-plist! 1350 233 ())
(1371 package-accesses-thunk 1350 243 ())
(1372 package-opens-thunk 1350 253 ())
(1373 set-package-opens-thunk! 1350 263 ())
(1374 package->environment 1350 273 ())
(1375 set-package->environment! 1350 283 ())
(1376 package-loaded? 1350 293 ())
(1377 set-package-loaded?! 1350 303 ())
(1378 package-clauses 1350 313 ())
(1379 package-file-name 1350 323 ())
(1380 package-get-location 1350 333 ())
(1381 set-package-get-location! 1350 343 ())
(1382 package-integrate? 1350 353 ())
(1383 set-package-integrate?! 1350 363 ())
(1384 package-unstable? 1350 373 ())
(1385 package-definitions 1350 383 ())
(1386 package-opens-really 1350 393 ())
(1387 set-package-opens! 1350 403 ())
(1388 package-uid 1350 413 ())
(1389 #f 1350 427 ())
(1390 #f -63 #f ())
(1391 environment-ref 1390 7 ())
(1392 environment-set! 1390 17 ())
(1393 #f 1392 115 ())
(1394 environment-define! 1390 27 ())
(1395 *structure-ref 1390 37 ())
(1396 carefully 1390 47 ())
(1397 interaction-environment 1390 72 ())
(1398 set-interaction-environment! 1390 82 ())
(1399 with-interaction-environment 1390 92 ())
(1400 scheme-report-environment 1390 102 ())
(1401 set-scheme-report-environment! 1390 130 ())
(1402 make-reflective-tower 1390 140 ())
(1403 recur 1402 19 ())
(1404 #f 1403 6 ())
(1405 set-reflective-tower-maker! 1390 171 ())
(1406 #f -51 #f ())
(1407 define-usual-macro 1406 23 ())
(1408 usual-transform 1406 33 ())
(1409 #f 1406 47 ())
(1410 #f 1406 69 ())
(1411 recur 1410 85 ())
(1412 #f 1406 91 ())
(1413 #f 1412 228 ())
(1414 do-spec? 1406 109 ())
(1415 #f 1406 123 ())
(1416 #f 1406 145 ())
(1417 specs? 1406 163 ())
(1418 #f 1406 177 ())
(1419 #f 1406 199 ())
(1420 #f 1419 28 ())
(1421 #f 1419 205 ())
(1422 case-clause? 1406 217 ())
(1423 #f 1406 227 ())
(1424 interesting-to-quasiquote? 1423 35 ())
(1425 descend-quasiquote-vector 1423 42 ())
(1426 #f 1425 22 ())
(1427 descend-quasiquote-pair 1423 49 ())
(1428 #f 1427 15 ())
(1429 #f 1428 15 ())
(1430 descend-quasiquote 1423 56 ())
(1431 finalize-quasiquote 1423 63 ())
(1432 expand-quasiquote 1423 70 ())
(1433 #f -51 #f ())
(1434 #f 1433 11 ())
(1435 process-rules 1433 29 ())
(1436 free-meta-variables 1435 65 ())
(1437 meta-variables 1435 72 ())
(1438 process-template 1435 79 ())
(1439 process-pattern 1435 86 ())
(1440 #f 1439 97 ())
(1441 process-segment-match 1435 93 ())
(1442 process-match 1435 100 ())
(1443 process-rule 1435 107 ())
(1444 #f 1443 102 ())
(1445 make-transformer 1435 114 ())
(1446 segment-pattern? 1433 39 ())
(1447 segment-template? 1433 49 ())
(1448 find-free-names-in-syntax-rules 1433 89 ())
(1449 free-names 1448 13 ())
(1450 meta-variables 1448 20 ())
(1451 loop##1892 1448 32 ())
(1452 #f -47 #f ())
(1453 namestring 1452 7 ())
(1454 #f 1453 183 ())
(1455 namestring-component 1452 37 ())
(1456 file-name-directory 1452 77 ())
(1457 file-name-nondirectory 1452 87 ())
(1458 file-nondirectory-position 1452 97 ())
(1459 loop 1458 24 ())
(1460 string-posq 1452 107 ())
(1461 loop 1460 19 ())
(1462 translations 1452 127 ())
(1463 set-translation! 1452 137 ())
(1464 translate 1452 147 ())
(1465 loop 1464 26 ())
(1466 #f -54 #f ())
(1467 #f -54 #f ())
(1468 noting-undefined-variables 1467 7 ())
(1469 foo 1468 13 ())
(1470 #f 1468 24 ())
(1471 #f 1468 42 ())
(1472 #f 1471 3 ())
(1473 #f 1471 10 ())
(1474 #f 1473 3 ())
(1475 #f 1474 19 ())
(1476 #f 1474 201 ())
(1477 note-undefined! 1467 17 ())
(1478 #f -54 #f ())
(1479 set-optimizer! 1478 7 ())
(1480 get-optimizer 1478 17 ())
(1481 scan-form-list 1478 27 ())
(1482 loop 1481 18 ())
(1483 really-scan-forms 1478 37 ())
(1484 scan-forms 1478 47 ())
(1485 define-all-operators 1478 57 ())
(1486 #f 1485 17 ())
(1487 #f 1485 70 ())
(1488 initialize-usual-transforms! 1478 67 ())
(1489 #f 1488 6 ())
(1490 check-structure 1478 77 ())
(1491 #f 1490 17 ())
(1492 apply-optimizers 1478 87 ())
(1493 #f 1492 6 ())
(1494 optimize 1478 97 ())
(1495 #f 1494 40 ())
(1496 #f 1494 82 ())
(1497 #f 1494 167 ())
(1498 #f 1497 55 ())
(1499 really-scan-file 1478 107 ())
(1500 #f 1499 82 ())
(1501 recur 1500 132 ())
(1502 scan-package 1478 117 ())
(1503 #f 1502 92 ())
(1504 #f 1503 34 ())
(1505 scan-structures 1478 127 ())
(1506 recur 1505 36 ())
(1507 #f 1506 210 ())
(1508 #f 1506 256 ())
(1509 process-define-syntax 1478 137 ())
(1510 make-standard-optimizer 1478 147 ())
(1511 #f 1510 10 ())
(1512 #f 1510 26 ())
(1513 default-standard-optimizer 1478 157 ())
(1514 set-standard-optimizers! 1478 177 ())
(1515 scan-file 1478 187 ())
(1516 scan-form 1478 239 ())
(1517 make-define-primitive-node 1478 293 ())
(1518 #f -54 #f ())
(1519 #f -55 #f ())
(1520 debug-data? 1519 7 ())
(1521 make-debug-data 1519 41 ())
(1522 debug-data-source 1519 51 ())
(1523 set-debug-data-source! 1519 61 ())
(1524 debug-data-env-maps 1519 71 ())
(1525 set-debug-data-env-maps! 1519 81 ())
(1526 debug-data-pc-in-parent 1519 91 ())
(1527 debug-data-parent 1519 101 ())
(1528 debug-data-name 1519 111 ())
(1529 debug-data-uid 1519 121 ())
(1530 #f 1519 131 ())
(1531 #f -56 #f ())
(1532 get-offset 1531 7 ())
(1533 imax 1531 17 ())
(1534 arg-spec-size 1531 27 ())
(1535 stack-max 1531 37 ())
(1536 popper 1531 47 ())
(1537 #f 1536 6 ())
(1538 nothing 1531 57 ())
(1539 #f 1538 6 ())
(1540 stack-function 1531 67 ())
(1541 loop 1540 22 ())
(1542 do-make-cont 1531 77 ())
(1543 #f 1542 6 ())
(1544 continue 1531 87 ())
(1545 continuer 1531 97 ())
(1546 #f 1545 6 ())
(1547 pusher 1531 107 ())
(1548 #f 1547 6 ())
(1549 protocol-skip 1531 117 ())
(1550 maximum-stack-use 1531 127 ())
(1551 loop##2039 1550 74 ())
(1552 #f 1531 175 ())
(1553 #f 1552 337 ())
(1554 #f 1552 350 ())
(1555 #f 1552 363 ())
(1556 #f 1552 376 ())
(1557 #f 1552 389 ())
(1558 #f 1552 448 ())
(1559 #f 1552 461 ())
(1560 #f 1552 474 ())
(1561 loop 1560 48 ())
(1562 loop##2085 1552 484 ())
(1563 #f -57 #f ())
(1564 #f -57 #f ())
(1565 #f -57 #f ())
(1566 emit-segment! 1565 7 ())
(1567 emit-with-environment-maps! 1565 17 ())
(1568 #f 1567 28 ())
(1569 note-environment 1565 27 ())
(1570 #f 1569 31 ())
(1571 note-source-code 1565 37 ())
(1572 #f 1571 31 ())
(1573 low-byte 1565 47 ())
(1574 high-byte 1565 57 ())
(1575 code-vector-set2! 1565 67 ())
(1576 insert-label! 1565 77 ())
(1577 attach-label 1565 87 ())
(1578 #f 1577 19 ())
(1579 #f 1578 37 ())
(1580 emit-byte! 1565 97 ())
(1581 instruction 1565 107 ())
(1582 #f 1581 30 ())
(1583 #f 1582 22 ())
(1584 computed-goto-instruction 1565 117 ())
(1585 #f 1584 68 ())
(1586 loop##2148 1585 75 ())
(1587 instruction-using-label 1565 127 ())
(1588 #f 1587 49 ())
(1589 make-label 1565 137 ())
(1590 literal->index 1565 147 ())
(1591 emit-literal! 1565 157 ())
(1592 segment-data->template 1565 167 ())
(1593 loop##2117 1592 68 ())
(1594 #f -57 #f ())
(1595 note-debug-data! 1594 7 ())
(1596 debug-data->info 1594 17 ())
(1597 #f -57 #f ())
(1598 check-stack-use 1597 7 ())
(1599 loop##2125 1598 77 ())
(1600 #f -57 #f ())
(1601 new-template-uid 1600 7 ())
(1602 new-debug-data 1600 17 ())
(1603 #f -57 #f ())
(1604 make-astate 1603 7 ())
(1605 segment->template 1603 17 ())
(1606 #f 1605 176 ())
(1607 instruction-with-template 1603 27 ())
(1608 #f 1607 10 ())
(1609 instruction-with-location 1603 37 ())
(1610 #f 1609 10 ())
(1611 instruction-with-literal 1603 47 ())
(1612 #f 1611 30 ())
(1613 #f 1612 160 ())
(1614 sequentially-2 1603 57 ())
(1615 #f 1614 59 ())
(1616 sequentially 1603 67 ())
(1617 loop 1616 97 ())
(1618 #f 1616 110 ())
(1619 loop 1618 18 ())
(1620 #f -57 #f ())
(1621 get-debug-data 1620 7 ())
(1622 saving-and-restoring 1620 17 ())
(1623 swap 1622 6 ())
(1624 with-fresh-compiler-state 1620 27 ())
(1625 #f 1624 58 ())
(1626 #f 1625 3 ())
(1627 #f 1625 7 ())
(1628 debug-flag-modifier 1620 37 ())
(1629 #f 1628 26 ())
(1630 debug-flag-accessor 1620 47 ())
(1631 #f 1630 26 ())
(1632 set-template-uid! 1620 57 ())
(1633 template-uid 1620 67 ())
(1634 #f -57 #f ())
(1635 make-assembly-state 1634 61 ())
(1636 astate-literals 1634 71 ())
(1637 set-astate-literals! 1634 81 ())
(1638 astate-count 1634 91 ())
(1639 set-astate-count! 1634 101 ())
(1640 astate-pc 1634 111 ())
(1641 set-astate-pc! 1634 121 ())
(1642 astate-code-vector 1634 131 ())
(1643 #f 1634 149 ())
(1644 #f -52 #f ())
(1645 node-type 1644 7 ())
(1646 reconstruct-type 1644 17 ())
(1647 reconstruct 1644 27 ())
(1648 #f 1644 41 ())
(1649 define-reconstructor 1644 57 ())
(1650 #f 1644 75 ())
(1651 #f 1650 86 ())
(1652 #f 1650 227 ())
(1653 #f 1644 85 ())
(1654 careful-codomain 1653 7 ())
(1655 reconstruct-body 1653 17 ())
(1656 #f 1653 55 ())
(1657 reconstruct-name 1653 69 ())
(1658 reconstruct-call 1653 79 ())
(1659 lose 1658 75 ())
(1660 #f 1659 3 ())
(1661 loop 1658 141 ())
(1662 #f 1653 97 ())
(1663 #f 1653 119 ())
(1664 #f 1653 141 ())
(1665 #f 1664 150 ())
(1666 fork-constraints 1653 155 ())
(1667 #f 1666 13 ())
(1668 #f 1653 173 ())
(1669 loop##2249 1668 11 ())
(1670 examine 1653 187 ())
(1671 #f 1653 205 ())
(1672 #f 1653 227 ())
(1673 #f 1672 60 ())
(1674 #f 1653 249 ())
(1675 #f 1653 271 ())
(1676 node->type 1653 285 ())
(1677 #f 1653 303 ())
(1678 #f 1653 325 ())
(1679 #f 1653 407 ())
(1680 #f 1679 10 ())
(1681 #f 1653 485 ())
(1682 #f 1653 495 ())
(1683 reconstruct-apply 1682 7 ())
(1684 #f 1683 74 ())
(1685 declare-operator-type 1682 149 ())
(1686 #f 1685 21 ())
(1687 #f 1682 483 ())
(1688 #f 1687 491 ())
(1689 constant-type 1688 501 ())
(1690 #f -58 #f ())
(1691 return-cont? 1690 17 ())
(1692 maybe-push-continuation 1690 27 ())
(1693 make-cont 1690 37 ())
(1694 fall-through-cont 1690 47 ())
(1695 #f -58 #f ())
(1696 make-startup-procedure 1695 7 ())
(1697 #f 1696 38 ())
(1698 grumble 1695 17 ())
(1699 note-caching 1695 27 ())
(1700 location-on-demand 1695 37 ())
(1701 #f 1700 6 ())
(1702 package-accessor-on-demand 1695 47 ())
(1703 #f 1702 6 ())
(1704 get-location-for-unassignable 1695 57 ())
(1705 #f 1704 98 ())
(1706 #f 1704 102 ())
(1707 get-location-for-undefined 1695 67 ())
(1708 #f 1707 97 ())
(1709 #f 1707 101 ())
(1710 get-location 1695 77 ())
(1711 win 1710 21 ())
(1712 #f -58 #f ())
(1713 diagnose-call-error 1712 7 ())
(1714 #f 1713 176 ())
(1715 type-check 1712 17 ())
(1716 #f 1715 122 ())
(1717 #f 1715 157 ())
(1718 compile 1712 27 ())
(1719 initial-cenv 1712 37 ())
(1720 compile-top 1712 47 ())
(1721 named-cont 1712 57 ())
(1722 ignore-values-cont? 1712 67 ())
(1723 deliver-value 1712 77 ())
(1724 #f -58 #f ())
(1725 compile-definition 1724 7 ())
(1726 #f 1725 62 ())
(1727 compile-scanned-form 1724 17 ())
(1728 #f -58 #f ())
(1729 shrink-segment 1728 7 ())
(1730 careful-sequentially 1728 17 ())
(1731 return-cont 1728 27 ())
(1732 #f -58 #f ())
(1733 compile-scanned-forms 1732 7 ())
(1734 recur 1733 137 ())
(1735 compile-and-run-scanned-forms 1732 17 ())
(1736 do-it 1735 26 ())
(1737 loop##2678 1735 38 ())
(1738 maybe-newline-after 1732 27 ())
(1739 #f 1738 11 ())
(1740 compile-and-run-file 1732 37 ())
(1741 #f 1740 6 ())
(1742 compile-and-run-forms 1732 47 ())
(1743 #f 1742 6 ())
(1744 compile-file 1732 57 ())
(1745 compile-form 1732 67 ())
(1746 #f -58 #f ())
(1747 make-dispatch-protocol 1746 7 ())
(1748 push-all-but-last 1746 17 ())
(1749 recur 1748 25 ())
(1750 call-on-args 1746 27 ())
(1751 do-arg 1750 6 ())
(1752 loop 1750 51 ())
(1753 call-on-arg-and-id 1746 37 ())
(1754 #f -58 #f ())
(1755 push-arguments 1754 7 ())
(1756 recur 1755 37 ())
(1757 compile-unknown-call 1754 17 ())
(1758 #f -58 #f ())
(1759 n-ary-primitive-compilator 1758 7 ())
(1760 #f 1759 6 ())
(1761 #f -58 #f ())
(1762 define-compilator 1761 7 ())
(1763 #f -58 #f ())
(1764 define-closed-compilator 1763 7 ())
(1765 define-compiler-primitive 1763 17 ())
(1766 define-n-ary-compiler-primitive 1763 27 ())
(1767 simple-compilator 1763 37 ())
(1768 #f 1767 6 ())
(1769 simple-closed-compilator 1763 47 ())
(1770 #f 1769 6 ())
(1771 define-simple-primitive 1763 57 ())
(1772 define-stob-predicate 1763 67 ())
(1773 symbol-append 1763 77 ())
(1774 define-vector-primitives 1763 87 ())
(1775 def-prim 1774 26 ())
(1776 nargs->domain 1763 97 ())
(1777 loop##2528 1776 11 ())
(1778 define-data-struct-primitives 1763 107 ())
(1779 def-prim 1778 8 ())
(1780 loop##2560 1778 189 ())
(1781 direct-closed-compilator 1763 117 ())
(1782 #f 1781 6 ())
(1783 direct-compilator 1763 127 ())
(1784 #f 1783 6 ())
(1785 get-closed-compilator 1763 137 ())
(1786 #f -58 #f ())
(1787 set-type-check?! 1786 7 ())
(1788 generate-trap 1786 17 ())
(1789 name-node-binding 1786 27 ())
(1790 environment-level 1786 37 ())
(1791 really-bind-vars 1786 47 ())
(1792 #f 1791 27 ())
(1793 loop 1792 34 ())
(1794 bind-flat-vars 1786 57 ())
(1795 bind-vars 1786 67 ())
(1796 cont-name 1786 77 ())
(1797 ignore-values-cont 1786 87 ())
(1798 fall-through-cont? 1786 97 ())
(1799 compile-body 1786 107 ())
(1800 #f 1799 12 ())
(1801 #f 1800 49 ())
(1802 lookup-variables 1786 117 ())
(1803 loop 1802 22 ())
(1804 compile-lambda-code 1786 127 ())
(1805 compile-lambda 1786 137 ())
(1806 push-all-with-names 1786 147 ())
(1807 compile-redex 1786 157 ())
(1808 #f 1807 123 ())
(1809 compile-call 1786 167 ())
(1810 compile-constant 1786 177 ())
(1811 #f 1786 191 ())
(1812 #f 1786 195 ())
(1813 #f 1812 6 ())
(1814 #f 1813 6 ())
(1815 #f 1786 221 ())
(1816 #f 1786 231 ())
(1817 #f 1816 19 ())
(1818 #f 1816 43 ())
(1819 #f 1816 69 ())
(1820 #f 1816 95 ())
(1821 #f 1816 121 ())
(1822 compile-begin 1816 156 ())
(1823 loop 1822 70 ())
(1824 #f 1816 223 ())
(1825 #f 1816 249 ())
(1826 compile-letrec 1816 334 ())
(1827 #f 1826 82 ())
(1828 #f 1826 176 ())
(1829 #f 1816 494 ())
(1830 #f -58 #f ())
(1831 #f 1830 11 ())
(1832 #f 1830 39 ())
(1833 #f 1830 49 ())
(1834 loop##2387 1833 12 ())
(1835 #f 1833 68 ())
(1836 #f 1833 319 ())
(1837 #f 1833 397 ())
(1838 #f 1833 401 ())
(1839 #f 1833 421 ())
(1840 #f 1833 425 ())
(1841 #f 1833 449 ())
(1842 #f 1833 453 ())
(1843 #f 1833 477 ())
(1844 #f 1833 481 ())
(1845 #f 1833 491 ())
(1846 #f 1845 44 ())
(1847 #f 1846 112 ())
(1848 #f 1845 48 ())
(1849 #f 1845 76 ())
(1850 n-ary-constructor 1845 90 ())
(1851 #f 1850 16 ())
(1852 #f 1850 20 ())
(1853 define-char-io 1845 137 ())
(1854 #f 1853 12 ())
(1855 #f 1853 16 ())
(1856 define-char-io 1845 278 ())
(1857 #f 1856 12 ())
(1858 #f 1856 16 ())
(1859 define+* 1845 366 ())
(1860 #f 1859 43 ())
(1861 #f 1859 47 ())
(1862 #f 1845 494 ())
(1863 define=< 1862 7 ())
(1864 #f 1863 73 ())
(1865 #f 1863 77 ())
(1866 define-one-or-two 1862 139 ())
(1867 #f 1866 73 ())
(1868 #f 1866 77 ())
(1869 define-one-or-two 1862 188 ())
(1870 #f 1869 12 ())
(1871 #f 1869 16 ())
(1872 #f -58 #f ())
(1873 loop 1872 59 ())
(1874 location-for-reference 1872 142 ())
(1875 loop 1874 28 ())
(1876 #f -64 #f ())
(1877 eval 1876 7 ())
(1878 #f 1877 24 ())
(1879 load-into 1876 17 ())
(1880 #f 1879 12 ())
(1881 eval-from-file 1876 27 ())
(1882 #f 1881 15 ())
(1883 eval-scanned-forms 1876 37 ())
(1884 #f 1883 15 ())
(1885 invoke-template 1876 47 ())
(1886 load 1876 57 ())
(1887 #f 1886 42 ())
(1888 #f -45 #f ())
(1889 display-condition 1888 22 ())
(1890 #f 1889 10 ())
(1891 really-display-condition 1888 33 ())
(1892 #f 1891 242 ())
(1893 &disclose-condition 1888 147 ())
(1894 limited-write 1888 174 ())
(1895 recur 1894 22 ())
(1896 #f 1895 145 ())
(1897 #f 1896 24 ())
(1898 #f -68 #f ())
(1899 command-processor 1898 7 ())
(1900 loop 1899 77 ())
(1901 #f 1900 7 ())
(1902 #f 1901 6 ())
(1903 #f 1902 68 ())
(1904 #f 1901 10 ())
(1905 #f 1904 75 ())
(1906 #f 1904 196 ())
(1907 #f 1904 236 ())
(1908 #f 1907 12 ())
(1909 mini-load 1898 17 ())
(1910 read-string 1898 27 ())
(1911 loop 1910 23 ())
(1912 #f -40 #f ())
(1913 #f -38 #f ())
(1914 run-threads 1913 7 ())
(1915 #f 1914 6 ())
(1916 loop 1915 26 ())
(1917 #f 1916 6 ())
(1918 #f 1917 8 ())
(1919 run-threads-with-housekeeper 1913 17 ())
(1920 #f 1919 6 ())
(1921 loop 1920 29 ())
(1922 #f 1921 6 ())
(1923 #f 1922 98 ())
(1924 round-robin-event-handler 1913 27 ())
(1925 next-thread 1924 15 ())
(1926 #f 1925 18 ())
(1927 asynchronous-event-handler 1924 22 ())
(1928 thread-event-handler 1924 29 ())
(1929 #f 1928 111 ())
(1930 make-counter 1913 37 ())
(1931 increment-counter! 1913 57 ())
(1932 decrement-counter! 1913 67 ())
(1933 #f -39 #f ())
(1934 root-scheduler 1933 7 ())
(1935 #f 1934 13 ())
(1936 #f 1935 24 ())
(1937 #f 1935 40 ())
(1938 make-root-event-handler 1933 17 ())
(1939 #f 1938 113 ())
(1940 #f 1938 117 ())
(1941 root-handler 1933 27 ())
(1942 cheap-display-condition 1933 37 ())
(1943 #f 1942 160 ())
(1944 scheme-exit-now 1933 67 ())
(1945 root-wait 1933 77 ())
(1946 #f 1945 22 ())
(1947 do-some-waiting 1933 112 ())
(1948 call-when-deadlocked! 1933 140 ())
(1949 spawn-output-forcers 1933 150 ())
(1950 #f -43 #f ())
(1951 usual-resumer 1950 7 ())
(1952 #f 1951 6 ())
(1953 #f 1952 15 ())
(1954 initialize-rts 1950 17 ())
(1955 #f 1954 45 ())
(1956 #f 1955 7 ())
(1957 #f 1956 46 ())
(1958 #f 1957 3 ())
(1959 #f -69 #f ())
(1960 start 1959 7 ())
(1961 #f 1960 6 ())
(1962 #f 1961 6 ())
(1963 #f 1962 64 ())
(1964 make-built-in-structures 1959 17 ())
(1965 #f 1964 38 ())
(1966 #f 1964 59 ())
(1967 initialize-interaction-environment! 1959 27 ())
(1968 make-initial-package 1959 37 ())
(1969 #f 1968 17 ())
(1970 make-tower 1959 47 ())
(1971 #f -62 #f ())
(1972 inline-transform 1971 7 ())
(1973 #f 1972 58 ())
(1974 #f 1972 65 ())
(1975 make-substitution 1971 17 ())
(1976 #f 1975 29 ())
(1977 substitute 1971 27 ())
(1978 #f 1977 192 ())
(1979 #f 1977 286 ())
(1980 qualified->name 1971 57 ())
(1981 recur 1980 18 ())
(1982 get-qualified-env 1971 67 ())
(1983 #f -66 #f ())
(1984 operator 1983 7 ())
(1985 simple-interface 1983 17 ())
(1986 #f 1985 12 ())
(1987 package 1983 27 ())
(1988 loop##2902 1987 73 ())
(1989 transform 1983 37 ())
(1990 #f -60 #f ())
(1991 procedure 1990 47 ())
(1992 #f -59 #f ())
(1993 #f -59 #f ())
(1994 make-a-package 1993 7 ())
(1995 loser 1993 17 ())
(1996 *verify-later!* 1993 37 ())
(1997 verify-later! 1993 47 ())
(1998 set-verify-later! 1993 57 ())
(1999 note-name! 1993 67 ())
(2000 #f -65 #f ())
(2001 ensure-loaded 2000 7 ())
(2002 #f 2001 11 ())
(2003 #f 2001 15 ())
(2004 #f 2003 9 ())
(2005 #f 2004 6 ())
(2006 #f 2005 7 ())
(2007 #f -70 #f ())
(2008 #f 2007 3 ())
(2009 get-location 2008 3 ())
(2010 #f 2008 496 ())
(2011 #f 2010 478 ())
(2012 #f 2011 508 ())
(2013 #f 2012 468 ())
(2014 #f 2013 505 ())
(2015 #f 2014 496 ())
(2016 #f 2015 495 ())
(2017 #f 2016 496 ())
(2018 #f 2017 496 ())
(2019 #f 2018 495 ())
(2020 #f 2019 503 ())
(2021 #f 2020 503 ())
(2022 #f 2021 503 ())
(2023 #f 2022 478 ())
(2024 #f 2023 492 ())
(2025 #f 2024 470 ())
(2026 #f 2025 495 ())
(2027 #f 2026 495 ())
(2028 #f 2027 495 ())
(2029 #f 2028 495 ())
(2030 #f 2029 482 ())
(2031 #f 2030 183 ())
(2032 #f 2030 231 ())
(2033 #f 2030 343 ())
(2034 #f 2030 464 ())
(2035 #f 2030 501 ())
(2036 #f 2035 46 ())
(2037 conc 2036 37 ())
(2038 #f 2037 16 ())
(2039 #f 2035 498 ())
(2040 #f 2039 501 ())
(2041 #f 2040 394 ())
(2042 loop 2041 115 ())
(2043 #f 2041 200 ())
(2044 #f 2041 230 ())
(2045 #f 2041 409 ())
(2046 #f 2041 466 ())
(2047 #f 2040 504 ())
(2048 #f 2047 292 ())
(2049 mem? 2048 189 ())
(2050 #f 2048 244 ())
(2051 #f 2047 484 ())
(2052 #f 2051 14 ())
(2053 loop##2905 2052 58 ())
(2054 #f 2051 62 ())
(2055 #f 2051 510 ())
(2056 #f 2055 501 ())
(2057 #f 2056 479 ())
(2058 #f 2057 461 ())
(2059 #f 2058 470 ())
(2060 #f 2059 470 ())
(2061 #f 2060 461 ())
(2062 #f 2061 470 ())
(2063 #f 2062 470 ())
(2064 #f 2063 479 ())
(2065 #f 2064 133 ())
(2066 #f 2064 463 ())
(2067 #f 2066 502 ())
(2068 #f 2067 495 ())
(2069 #f 2068 495 ())
(2070 #f 2069 486 ())
(2071 #f 2070 486 ())
(2072 #f 2071 495 ())
(2073 #f 2072 505 ())
(2074 #f 2073 483 ())
(2075 #f 2074 483 ())
(2076 #f 2075 492 ())
(2077 #f 2076 487 ())
(2078 #f 2077 486 ())
(2079 #f 2078 495 ())
(2080 #f 2079 486 ())
(2081 #f 2080 486 ())
(2082 #f 2081 477 ())
(2083 #f 2082 495 ())
(2084 #f 2083 383 ())
(2085 #f 2084 456 ())
(2086 #f 2083 475 ())
(2087 #f 2086 499 ())
(2088 #f 2087 471 ())
(2089 loop 2088 90 ())
(2090 #f 2087 509 ())
(2091 #f 2090 121 ())
(2092 loop 2091 90 ())
(2093 #f 2090 245 ())
(2094 loop 2093 90 ())
(2095 #f 2090 337 ())
(2096 loop 2095 90 ())
(2097 #f 2090 429 ())
(2098 loop 2097 90 ())
(2099 #f 2090 467 ())
(2100 #f 2099 57 ())
(2101 loop 2100 90 ())
(2102 #f 2099 149 ())
(2103 loop 2102 90 ())
(2104 #f 2099 241 ())
(2105 loop 2104 90 ())
(2106 #f 2099 333 ())
(2107 loop 2106 90 ())
(2108 #f 2099 507 ())
(2109 #f 2108 470 ())
(2110 #f 2109 25 ())
(2111 loop 2110 90 ())
(2112 #f 2109 493 ())
(2113 #f 2112 458 ())
(2114 #f 2113 465 ())
(2115 #f 2114 497 ())
(2116 #f 2115 479 ())
(2117 #f 2116 384 ())
(2118 #f 2116 462 ())
(2119 #f 2118 87 ())
(2120 #f 2118 135 ())
(2121 #f 2118 183 ())
(2122 #f 2118 327 ())
(2123 #f 2118 501 ())
(2124 #f 2123 46 ())
(2125 #f 2123 488 ())
(2126 #f 2125 485 ())
(2127 #f 2126 459 ())
(2128 #f 2127 483 ())
(2129 #f 2128 491 ())
(2130 #f 2129 482 ())
(2131 #f 2130 465 ())
(2132 #f 2131 87 ())
(2133 #f 2131 290 ())
(2134 #f 2131 338 ())
(2135 #f 2131 386 ())
(2136 #f 2135 146 ())
(2137 #f 2131 434 ())
(2138 #f 2137 329 ())
(2139 #f 2137 402 ())
(2140 #f 2131 471 ())
(2141 #f 2140 356 ())
(2142 #f 2140 404 ())
(2143 #f 2142 176 ())
(2144 parse-package-clauses 2140 461 ())
(2145 loop 2144 76 ())
(2146 #f 2140 468 ())
(2147 #f 2146 27 ())
(2148 #f 2147 146 ())
(2149 #f 2140 506 ())
(2150 #f 2149 224 ())
(2151 #f 2149 272 ())
(2152 loop 2151 35 ())
(2153 #f 2149 384 ())
(2154 #f 2149 464 ())
(2155 #f 2149 501 ())
(2156 #f 2155 46 ())
(2157 loop 2156 51 ())
(2158 #f 2156 88 ())
(2159 #f 2156 111 ())
(2160 #f 2155 126 ())
(2161 #f 2155 501 ())
(2162 #f 2161 470 ())
(2163 #f 2162 497 ())
(2164 #f 2163 493 ())
(2165 #f 2164 470 ())
(2166 #f 2165 493 ())
(2167 #f 2166 470 ())
(2168 #f 2167 303 ())
(2169 #f 2167 438 ())
(2170 #f 2167 507 ())
(2171 #f 2170 481 ())
(2172 #f 2171 483 ())
(2173 #f 2172 478 ())
(2174 #f 2173 496 ())
(2175 #f 2174 493 ())
(2176 #f 2175 470 ())
(2177 #f 2176 507 ())
(2178 #f 2177 510 ())
(2179 #f 2178 504 ())
(2180 #f 2179 483 ())
(2181 #f 2180 492 ())
(2182 #f 2181 483 ())
(2183 #f 2182 509 ())
(2184 #f 2183 486 ())
(2185 #f 2184 486 ())
(2186 #f 2185 495 ())
(2187 #f 2186 509 ())
(2188 #f 2187 495 ())
(2189 #f 2188 495 ())
(2190 #f #f #f ())
-
