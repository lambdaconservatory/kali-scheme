; Package uid -> name
(0 low-structures)
(1 debug-low-structures)
(2 alt-features-structures)
(3 cheat-features-structures)
(4 the-interfaces)
(5 meta-module-system)
(6 run-time-structures)
(7 compiler-structures)
(8 initial-structures)
(9 debug-structures)
(10 usual-structures)
(11 alt-low-structures)
(12 compiler-structures)
(13 linker-structures)
(14 scheme-level-0)
(15 scheme-level-1)
(16 records)
(17 define-record-types)
(18 methods)
(19 number-i/o)
(20 fluids)
(21 wind)
(22 session-data)
(23 i/o)
(24 channel-i/o)
(25 conditions)
(26 writing)
(27 reading)
(28 scheme-level-2)
(29 features)
(30 templates)
(31 continuations)
(32 more-types)
(33 enumerated)
(34 architecture)
(35 exceptions)
(36 interrupts)
(37 threads)
(38 scheduler)
(39 root-scheduler)
(40 enum-case)
(41 queues)
(42 locks)
(43 usual-resumer)
(44 weak)
(45 display-conditions)
(46 meta-types)
(47 bindings)
(48 names)
(49 thingies)
(50 nodes)
(51 compiler-envs)
(52 syntactic)
(53 usual-macros)
(54 var-utilities)
(55 debug-data)
(56 stack-check)
(57 segments)
(58 primops)
(59 reconstruction)
(60 compiler)
(61 reading-forms)
(62 flatten)
(63 interfaces)
(64 packages)
(65 scan-package)
(66 optimizer)
(67 compile-packages)
(68 defpackage)
(69 types)
(70 module-system)
(71 usages)
(72 analysis)
(73 inline)
(74 strong)
(75 tables)
(76 filenames)
(77 environments)
(78 evaluation)
(79 ensures-loaded)
(80 for-reification)
(81 scheme)
(82 mini-command)
(83 initial-system)
-
; Location uid -> (name . package-uid)
(0 (and . 14))
(1 (cond . 14))
(2 (do . 14))
(3 (let . 14))
(4 (let* . 14))
(5 (or . 14))
(6 (code-quote . 14))
(7 (quote . 14))
(8 (unspecific . 14))
(9 (define-syntax . 14))
(10 (lambda . 14))
(11 (begin . 14))
(12 (unassigned . 14))
(13 (flat-lambda . 14))
(14 (primitive-procedure . 14))
(15 (define . 14))
(16 (if . 14))
(17 (letrec-syntax . 14))
(18 (%file-name% . 14))
(19 (let-syntax . 14))
(20 (structure-ref . 14))
(21 (loophole . 14))
(22 (letrec . 14))
(23 (lap . 14))
(24 (set! . 14))
(25 (call . 14))
(26 (atan . 14))
(27 (set-location-defined?! . 14))
(28 (acos . 14))
(29 (address-space-uid . 14))
(30 (vm-extension . 14))
(31 (asin . 14))
(32 (location-defined? . 14))
(33 (time . 14))
(34 (template-set! . 14))
(35 (cons . 14))
(36 (wait . 14))
(37 (trap . 14))
(38 (assq . 14))
(39 (make-weak-pointer . 14))
(40 (push . 14))
(41 (set-contents! . 14))
(42 (read-char . 14))
(43 (make-cell . 14))
(44 (sqrt . 14))
(45 (* . 14))
(46 (contents . 14))
(47 (+ . 14))
(48 (peek-char . 14))
(49 (- . 14))
(50 (continuation-set! . 14))
(51 (/ . 14))
(52 (weak-pointer? . 14))
(53 (really-decode . 14))
(54 (quotient . 14))
(55 (close-channel . 14))
(56 (channel-abort . 14))
(57 (really-make-proxy . 14))
(58 (char? . 14))
(59 (< . 14))
(60 (= . 14))
(61 (> . 14))
(62 (really-encode . 14))
(63 (make-location . 14))
(64 (imag-part . 14))
(65 (set-port-data! . 14))
(66 (make-template . 14))
(67 (real? . 14))
(68 (real-part . 14))
(69 (get-cont-from-heap . 14))
(70 (external-call . 14))
(71 (record-length . 14))
(72 (port-data . 14))
(73 (make-external . 14))
(74 (pair? . 14))
(75 (external-name . 14))
(76 (make-port . 14))
(77 (set-port-lock! . 14))
(78 (return-from-exception . 14))
(79 (location? . 14))
(80 (channel-maybe-read . 14))
(81 (checked-record-ref . 14))
(82 (add-finalizer! . 14))
(83 (rational? . 14))
(84 (template? . 14))
(85 (port-lock . 14))
(86 (vector-length . 14))
(87 (make-continuation . 14))
(88 (address-space-data . 14))
(89 (external? . 14))
(90 (string-length . 14))
(91 (make-address-space . 14))
(92 (port? . 14))
(93 (angle . 14))
(94 (set-proxy-data-reference-count! . 14))
(95 (proxy-data-has-local-value? . 14))
(96 (false . 14))
(97 (vm-return . 14))
(98 (proxy-data-reference-count . 14))
(99 (remainder . 14))
(100 (continuation? . 14))
(101 (binary-reduce1 . 14))
(102 (binary-reduce2 . 14))
(103 (char<? . 14))
(104 (address-space? . 14))
(105 (char=? . 14))
(106 (<= . 14))
(107 (set-address-space-proxy-vector! . 14))
(108 (magnitude . 14))
(109 (>= . 14))
(110 (with-continuation . 14))
(111 (floor . 14))
(112 (address-space-proxy-vector . 14))
(113 (code-vector-length . 14))
(114 (apply . 14))
(115 (memory-status . 14))
(116 (checked-record-set! . 14))
(117 (inexact->exact . 14))
(118 (exact->inexact . 14))
(119 (error . 14))
(120 (set-proxy-data-uid! . 14))
(121 (extended-number-length . 14))
(122 (channel-id . 14))
(123 (proxy-data-uid . 14))
(124 (numerator . 14))
(125 (eof-object . 14))
(126 (set-address-space-decode-vector! . 14))
(127 (address-space-decode-vector . 14))
(128 (record-ref . 14))
(129 (set-proxy-data-waiters! . 14))
(130 (make-polar . 14))
(131 (proxy-data-waiters . 14))
(132 (write-char . 14))
(133 (symbol->string . 14))
(134 (exact? . 14))
(135 (vector-ref . 14))
(136 (set-symbol-uid! . 14))
(137 (set-current-thread! . 14))
(138 (immutable? . 14))
(139 (set-exception-handlers! . 14))
(140 (string-ref . 14))
(141 (set-port-index! . 14))
(142 (symbol-uid . 14))
(143 (current-thread . 14))
(144 (channel-status . 14))
(145 (proxy-data . 14))
(146 (set-port-limit! . 14))
(147 (port-index . 14))
(148 (make-immutable! . 14))
(149 (external-value . 14))
(150 (set-enabled-interrupts! . 14))
(151 (port-limit . 14))
(152 (ascii->char . 14))
(153 (char->ascii . 14))
(154 (record-set! . 14))
(155 (eof-object? . 14))
(156 (set-interrupt-handlers! . 14))
(157 (record . 14))
(158 (proxy? . 14))
(159 (schedule-interrupt . 14))
(160 (code-vector-ref . 14))
(161 (channel-maybe-write . 14))
(162 (extended-number-ref . 14))
(163 (vector-set! . 14))
(164 (copy-bytes! . 14))
(165 (string-set! . 14))
(166 (values . 14))
(167 (make-proxy-data . 14))
(168 (intern . 14))
(169 (vector . 14))
(170 (set-proxy-data-self! . 14))
(171 (proxy-data-self . 14))
(172 (proxy-data? . 14))
(173 (make-record . 14))
(174 (set-location-id! . 14))
(175 (code-vector-set! . 14))
(176 (location-id . 14))
(177 (bitwise-and . 14))
(178 (eq? . 14))
(179 (write-image . 14))
(180 (extended-number-set! . 14))
(181 (make-vector . 14))
(182 (record? . 14))
(183 (make-string . 14))
(184 (set-port-buffer! . 14))
(185 (primitive-catch . 14))
(186 (proxy-data-local-ref . 14))
(187 (string-hash . 14))
(188 (template-length . 14))
(189 (number? . 14))
(190 (port-buffer . 14))
(191 (untyped-indexed-set! . 14))
(192 (bitwise-ior . 14))
(193 (set-car! . 14))
(194 (closure-env . 14))
(195 (vector? . 14))
(196 (bitwise-not . 14))
(197 (set-cdr! . 14))
(198 (symbol? . 14))
(199 (string? . 14))
(200 (car . 14))
(201 (bitwise-xor . 14))
(202 (cdr . 14))
(203 (make-code-vector . 14))
(204 (find-all-records . 14))
(205 (continuation-length . 14))
(206 (log . 14))
(207 (message . 14))
(208 (tan . 14))
(209 (external-lookup . 14))
(210 (collect . 14))
(211 (cos . 14))
(212 (channel-os-index . 14))
(213 (make-extended-number . 14))
(214 (set-port-status! . 14))
(215 (sin . 14))
(216 (exp . 14))
(217 (pop . 14))
(218 (port-status . 14))
(219 (code-vector? . 14))
(220 (set-port-locked?! . 14))
(221 (find-all-symbols . 14))
(222 (weak-pointer-ref . 14))
(223 (call-with-values . 14))
(224 (denominator . 14))
(225 (port-locked? . 14))
(226 (reverse-list->string . 14))
(227 (extended-number? . 14))
(228 (set-proxy-data-value! . 14))
(229 (find-all . 14))
(230 (cell-ref . 14))
(231 (proxy-data-value . 14))
(232 (string=? . 14))
(233 (set-proxy-data-owner! . 14))
(234 (open-channel . 14))
(235 (channel? . 14))
(236 (proxy-data-owner . 14))
(237 (set-location-uid! . 14))
(238 (make-rectangular . 14))
(239 (set-session-data! . 14))
(240 (template-ref . 14))
(241 (location-uid . 14))
(242 (make-closure . 14))
(243 (set-external-uid! . 14))
(244 (session-data . 14))
(245 (integer? . 14))
(246 (signal-condition . 14))
(247 (port-handler . 14))
(248 (external-uid . 14))
(249 (set-port-pending-eof?! . 14))
(250 (arithmetic-shift . 14))
(251 (complex? . 14))
(252 (port-pending-eof? . 14))
(253 (cell-set! . 14))
(254 (binary-comparison-reduce2 . 14))
(255 (closure? . 14))
(256 (continuation-ref . 14))
(257 (set-address-space-uid! . 14))
(258 (closure-template . 14))
(259 (current-cont . 14))
(260 (char->integer . 14))
(261 (integer->char . 14))
(262 (ascii-limit . 14))
(263 (ascii-whitespaces . 14))
(264 (procedure? . 14))
(265 (invoke-closure . 14))
(266 (primitive-cwcc . 14))
(267 (make-undefined-location . 14))
(268 (location-assigned? . 14))
(269 (vector-unassigned? . 14))
(270 (string-copy . 14))
(271 (string->symbol . 14))
(272 (*the-symbol-table* . 14))
(273 (flush-the-symbol-table! . 14))
(274 (restore-the-symbol-table! . 14))
(275 (input-port? . 14))
(276 (output-port? . 14))
(277 (channel-read . 14))
(278 (buffer-length . 14))
(279 (channel-write . 14))
(280 (debug-message . 14))
(281 (proxy-base-count . 14))
(282 (make-nonlocal-proxy . 14))
(283 (make-proxy . 14))
(284 (proxy-data->proxy . 14))
(285 (proxy-has-local-value? . 14))
(286 (proxy-local-ref . 14))
(287 (proxy-local-set! . 14))
(288 (any-proxy-value . 14))
(289 (proxy-remote-value . 14))
(290 (initialize-any-proxy-value! . 14))
(291 (encode . 14))
(292 (decode . 14))
(293 (make-condition . 14))
(294 (signal . 14))
(295 (warn . 14))
(296 (syntax-error . 14))
(297 (call-error . 14))
(298 (case . 15))
(299 (quasiquote . 15))
(300 (syntax-rules . 15))
(301 (not . 15))
(302 (boolean? . 15))
(303 (eqv? . 15))
(304 (equal? . 15))
(305 (max . 15))
(306 (min . 15))
(307 (max-or-min . 15))
(308 (abs . 15))
(309 (zero? . 15))
(310 (positive? . 15))
(311 (negative? . 15))
(312 (even? . 15))
(313 (odd? . 15))
(314 (caar . 15))
(315 (cadr . 15))
(316 (cdar . 15))
(317 (cddr . 15))
(318 (caaar . 15))
(319 (caadr . 15))
(320 (cadar . 15))
(321 (caddr . 15))
(322 (cdaar . 15))
(323 (cdadr . 15))
(324 (cddar . 15))
(325 (cdddr . 15))
(326 (caaaar . 15))
(327 (caaadr . 15))
(328 (caadar . 15))
(329 (caaddr . 15))
(330 (cadaar . 15))
(331 (cadadr . 15))
(332 (caddar . 15))
(333 (cadddr . 15))
(334 (cdaaar . 15))
(335 (cdaadr . 15))
(336 (cdadar . 15))
(337 (cdaddr . 15))
(338 (cddaar . 15))
(339 (cddadr . 15))
(340 (cdddar . 15))
(341 (cddddr . 15))
(342 (null? . 15))
(343 (list . 15))
(344 (length . 15))
(345 (real-length . 15))
(346 (append . 15))
(347 (reverse . 15))
(348 (append-reverse . 15))
(349 (list-tail . 15))
(350 (list-ref . 15))
(351 (mem . 15))
(352 (memq . 15))
(353 (memv . 15))
(354 (member . 15))
(355 (ass . 15))
(356 (assv . 15))
(357 (assoc . 15))
(358 (list? . 15))
(359 (char>? . 15))
(360 (char>=? . 15))
(361 (char<=? . 15))
(362 (char-whitespace? . 15))
(363 (char-lower-case? . 15))
(364 (char-upper-case? . 15))
(365 (char-numeric? . 15))
(366 (char-alphabetic? . 15))
(367 (char-case-delta . 15))
(368 (make-character-map . 15))
(369 (upcase-map . 15))
(370 (char-upcase . 15))
(371 (downcase-map . 15))
(372 (char-downcase . 15))
(373 (char-ci-compare . 15))
(374 (char-ci=? . 15))
(375 (char-ci<? . 15))
(376 (char-ci<=? . 15))
(377 (char-ci>? . 15))
(378 (char-ci>=? . 15))
(379 (string . 15))
(380 (substring . 15))
(381 (string-append . 15))
(382 (string->list . 15))
(383 (list->string . 15))
(384 (string-fill! . 15))
(385 (make-string=? . 15))
(386 (string-ci=? . 15))
(387 (make-string<? . 15))
(388 (string<? . 15))
(389 (string-ci<? . 15))
(390 (string>? . 15))
(391 (string<=? . 15))
(392 (string>=? . 15))
(393 (string-ci>? . 15))
(394 (string-ci<=? . 15))
(395 (string-ci>=? . 15))
(396 (vector->list . 15))
(397 (list->vector . 15))
(398 (vector-fill! . 15))
(399 (map . 15))
(400 (map1 . 15))
(401 (map2+ . 15))
(402 (for-each . 15))
(403 (for-each1 . 15))
(404 (for-each2+ . 15))
(405 (delay . 15))
(406 (make-promise . 15))
(407 (force . 15))
(408 (unspecific . 15))
(409 (reduce . 15))
(410 (filter . 15))
(411 (pos . 15))
(412 (posq . 15))
(413 (posv . 15))
(414 (position . 15))
(415 (any . 15))
(416 (every . 15))
(417 (sublist . 15))
(418 (last . 15))
(419 (insert . 15))
(420 (fold . 15))
(421 (fold->2 . 15))
(422 (fold->3 . 15))
(423 (inexact? . 15))
(424 (modulo . 15))
(425 (ceiling . 15))
(426 (truncate . 15))
(427 (round . 15))
(428 (gcd . 15))
(429 (euclid . 15))
(430 (lcm . 15))
(431 (expt . 15))
(432 (raise-to-integer-power . 15))
(433 (rationalize . 15))
(434 (simplest-rational . 15))
(435 (record-type . 16))
(436 (*record-type-uid* . 16))
(437 (*record-type* . 16))
(438 (make-record-type . 16))
(439 (record-type? . 16))
(440 (record-type-uid . 16))
(441 (record-type-name . 16))
(442 (record-type-field-names . 16))
(443 (record-type-discloser . 16))
(444 (record-field-index . 16))
(445 (record-constructor . 16))
(446 (record-accessor . 16))
(447 (record-modifier . 16))
(448 (record-predicate . 16))
(449 (define-record-discloser . 16))
(450 (disclose-record . 16))
(451 (default-record-discloser . 16))
(452 (:record-type . 16))
(453 (define-record-type . 17))
(454 (define-constructor . 17))
(455 (define-accessors . 17))
(456 (define-accessor . 17))
(457 (:simple-type . 18))
(458 (really-make-simple-type . 18))
(459 (simple-type-id . 18))
(460 (simple-type-priority . 18))
(461 (simple-type-predicate . 18))
(462 (simple-type-superiors . 18))
(463 (simple-type? . 18))
(464 (make-simple-type . 18))
(465 (compute-priority . 18))
(466 (*increment* . 18))
(467 (%type-priority . 18))
(468 (%type-predicate . 18))
(469 (%same-type? . 18))
(470 (define-simple-type . 18))
(471 (:syntax . 18))
(472 (:values . 18))
(473 (value? . 18))
(474 (:value . 18))
(475 (:zero . 18))
(476 (:number . 18))
(477 (:complex . 18))
(478 (:real . 18))
(479 (:rational . 18))
(480 (:integer . 18))
(481 (:exact-integer . 18))
(482 (:boolean . 18))
(483 (:symbol . 18))
(484 (:char . 18))
(485 (:null . 18))
(486 (:pair . 18))
(487 (:vector . 18))
(488 (:string . 18))
(489 (:procedure . 18))
(490 (:input-port . 18))
(491 (:output-port . 18))
(492 (:eof-object . 18))
(493 (:record . 18))
(494 (record-type-priority . 18))
(495 (:method-info . 18))
(496 (really-make-method-info . 18))
(497 (method-info-proc . 18))
(498 (method-info-n-ary? . 18))
(499 (method-info-types . 18))
(500 (method-info? . 18))
(501 (make-method-info . 18))
(502 (empty-method-list . 18))
(503 (insert-method . 18))
(504 (same-applicability? . 18))
(505 (every2 . 18))
(506 (more-specific? . 18))
(507 (more-specific-type? . 18))
(508 (:method-table . 18))
(509 (really-make-method-table . 18))
(510 (method-table-id . 18))
(511 (method-table-set-perform! . 18))
(512 (method-table-get-perform . 18))
(513 (make-generic . 18))
(514 (method-table-prototype . 18))
(515 (method-table-methods . 18))
(516 (set-method-table-methods! . 18))
(517 (method-table? . 18))
(518 (make-method-table . 18))
(519 (make-cell-for-generic . 18))
(520 (add-to-method-table! . 18))
(521 (set-final-method! . 18))
(522 (apply-generic . 18))
(523 (define-generic . 18))
(524 (methods->perform . 18))
(525 (last-action . 18))
(526 (one-action . 18))
(527 (argument-sequence-predicate . 18))
(528 (check-for-next . 18))
(529 (check-next . 18))
(530 (method-info . 18))
(531 (method-internal . 18))
(532 (with-next-method . 18))
(533 (define-method . 18))
(534 (&add-method! . 18))
(535 (add-method! . 18))
(536 (&type-predicate . 18))
(537 (type-predicate . 18))
(538 (&type-priority . 18))
(539 (type-priority . 18))
(540 (&type-superiors . 18))
(541 (type-superiors . 18))
(542 (&same-type? . 18))
(543 (same-type? . 18))
(544 (:singleton . 18))
(545 (singleton . 18))
(546 (singleton-value . 18))
(547 (compare-to . 18))
(548 (&disclose . 18))
(549 (disclose . 18))
(550 (proc->discloser . 18))
(551 (&number->string . 19))
(552 (number->string . 19))
(553 (integer->string . 19))
(554 (string->number . 19))
(555 (&really-string->number . 19))
(556 (really-string->number . 19))
(557 (:integer-string . 19))
(558 (set-exactness . 19))
(559 (string->integer . 19))
(560 (:thread . 20))
(561 (make-thread . 20))
(562 (thread-dynamic-point . 20))
(563 (thread-dynamic-env . 20))
(564 (get-dynamic-env . 20))
(565 (set-dynamic-env! . 20))
(566 (get-dynamic-point . 20))
(567 (set-dynamic-point! . 20))
(568 (initialize-dynamic-state! . 20))
(569 (with-dynamic-env . 20))
(570 (empty-dynamic-env . 20))
(571 (:fluid . 20))
(572 (really-make-fluid . 20))
(573 (really-fluid-top-level-value . 20))
(574 (really-set-fluid-top-level-value! . 20))
(575 (fluid? . 20))
(576 (make-fluid . 20))
(577 (fluid-top-level-value . 20))
(578 (set-fluid-top-level-value! . 20))
(579 (real-fluid-lookup . 20))
(580 (fluid . 20))
(581 (set-fluid! . 20))
(582 (let-fluid . 20))
(583 (let-fluids . 20))
(584 (fluid-lookup . 20))
(585 (define-enumeration . 33))
(586 (components . 33))
(587 (enum . 33))
(588 (enumerand->name . 33))
(589 (name->enumerand . 33))
(590 (lookup-enumerand . 33))
(591 (architecture-version . 34))
(592 (bits-used-per-byte . 34))
(593 (byte-limit . 34))
(594 (define-instruction-set . 34))
(595 (op . 34))
(596 (op-enumeration . 34))
(597 (op-count . 34))
(598 (opcode-arg-specs . 34))
(599 (interrupt . 34))
(600 (interrupt-enumeration . 34))
(601 (interrupt-count . 34))
(602 (exception . 34))
(603 (exception-enumeration . 34))
(604 (exception-count . 34))
(605 (current-port-marker . 34))
(606 (current-port-marker-enumeration . 34))
(607 (current-port-marker-count . 34))
(608 (maximum-stack-args . 34))
(609 (*last-protocol* . 34))
(610 (next-protocol . 34))
(611 (two-byte-nargs-protocol . 34))
(612 (two-byte-nargs+list-protocol . 34))
(613 (big-stack-protocol . 34))
(614 (args+nargs-protocol . 34))
(615 (nary-dispatch-protocol . 34))
(616 (default-stack-space . 34))
(617 (environment-stack-size . 34))
(618 (continuation-stack-size . 34))
(619 (available-stack-space . 34))
(620 (time-option . 34))
(621 (time-option-enumeration . 34))
(622 (time-option-count . 34))
(623 (memory-status-option . 34))
(624 (memory-status-option-enumeration . 34))
(625 (memory-status-option-count . 34))
(626 (channel-status-option . 34))
(627 (channel-status-option-enumeration . 34))
(628 (channel-status-option-count . 34))
(629 (port-status-options . 34))
(630 (port-status-options-enumeration . 34))
(631 (port-status-options-count . 34))
(632 (stob . 34))
(633 (stob-enumeration . 34))
(634 (stob-count . 34))
(635 (least-b-vector-type . 34))
(636 (stob-data . 34))
(637 (proxy-base-count . 34))
(638 (max-proxy-debit . 34))
(639 (max-proxy-count . 34))
(640 (:queue . 41))
(641 (really-make-queue . 41))
(642 (queue-tail . 41))
(643 (set-queue-tail! . 41))
(644 (queue-head . 41))
(645 (set-queue-head! . 41))
(646 (queue-uid . 41))
(647 (queue? . 41))
(648 (*queue-uid* . 41))
(649 (make-queue . 41))
(650 (queue-empty? . 41))
(651 (enqueue! . 41))
(652 (queue-front . 41))
(653 (dequeue! . 41))
(654 (on-queue? . 41))
(655 (delete-from-queue! . 41))
(656 (delete-from-queue-if! . 41))
(657 (queue->list . 41))
(658 (queue-length . 41))
(659 (*condition-types* . 25))
(660 (condition-supertypes . 25))
(661 (define-condition-type . 25))
(662 (condition-predicate . 25))
(663 (condition? . 25))
(664 (condition-type . 25))
(665 (condition-stuff . 25))
(666 (error? . 25))
(667 (call-error? . 25))
(668 (read-error? . 25))
(669 (exception? . 25))
(670 (exception-opcode . 25))
(671 (exception-reason . 25))
(672 (exception-arguments . 25))
(673 (make-exception . 25))
(674 (warning? . 25))
(675 (syntax-error? . 25))
(676 (interrupt? . 25))
(677 (*session-data-initializers* . 22))
(678 (make-session-data-slot! . 22))
(679 (session-data-ref . 22))
(680 (session-data-set! . 22))
(681 (initialize-session-data! . 22))
(682 (initialize-interrupts! . 36))
(683 (interrupt-handlers . 36))
(684 (set-interrupt-handler! . 36))
(685 (no-interrupts . 36))
(686 (all-interrupts . 36))
(687 (with-interrupts-inhibited . 36))
(688 (with-interrupts-allowed . 36))
(689 (disable-interrupts! . 36))
(690 (enable-interrupts! . 36))
(691 (with-interrupts . 36))
(692 (enabled-interrupts . 36))
(693 (*post-gc-procedures* . 36))
(694 (call-after-gc! . 36))
(695 (post-gc-handler . 36))
(696 (required-post-gc-space . 36))
(697 (space-shortage-handler . 36))
(698 (call-before-heap-overflow! . 36))
(699 (dynamic-wind . 21))
(700 (call-with-current-continuation . 21))
(701 (continuation->procedure . 21))
(702 (:point . 21))
(703 (make-point . 21))
(704 (point-parent . 21))
(705 (point-dynamic-env . 21))
(706 (point-out . 21))
(707 (point-in . 21))
(708 (point-depth . 21))
(709 (travel-to-point! . 21))
(710 (template-overhead . 30))
(711 (template-code . 30))
(712 (template-info . 30))
(713 (template-id . 30))
(714 (set-template-code! . 30))
(715 (set-template-info! . 30))
(716 (set-template-id! . 30))
(717 (:closure . 32))
(718 (:code-vector . 32))
(719 (:location . 32))
(720 (:template . 32))
(721 (:channel . 32))
(722 (:port . 32))
(723 (:weak-pointer . 32))
(724 (:proxy . 32))
(725 (:address-space . 32))
(726 (:proxy-data . 32))
(727 (:external . 32))
(728 (continuation-cont . 31))
(729 (real-continuation-pc . 31))
(730 (real-continuation-template . 31))
(731 (continuation-env . 31))
(732 (exception-continuation-pc . 31))
(733 (exception-continuation-template . 31))
(734 (exception-continuation-exception . 31))
(735 (exception-continuation? . 31))
(736 (continuation-pc . 31))
(737 (continuation-template . 31))
(738 (normal-continuation-overhead . 31))
(739 (exception-continuation-overhead . 31))
(740 (continuation-arg . 31))
(741 (continuation-arg-count . 31))
(742 (:continuation . 31))
(743 (continuation-parent . 31))
(744 (define-exception-handler . 35))
(745 (signal-exception . 35))
(746 (exception-handlers . 35))
(747 (extend-opcode! . 35))
(748 (really-signal-condition . 35))
(749 (with-handler . 35))
(750 ($condition-handlers . 35))
(751 (initialize-exceptions! . 35))
(752 (last-resort-condition-handler . 35))
(753 (report-utter-lossage . 35))
(754 (continuation-preview . 35))
(755 (ignore-errors . 35))
(756 (report-errors-as-warnings . 35))
(757 (:thread . 37))
(758 (really-make-thread . 37))
(759 (thread-name . 37))
(760 (thread-uid . 37))
(761 (thread-current-task . 37))
(762 (set-thread-current-task! . 37))
(763 (thread-events . 37))
(764 (set-thread-events! . 37))
(765 (thread-data . 37))
(766 (set-thread-data! . 37))
(767 (thread-scheduler . 37))
(768 (set-thread-scheduler! . 37))
(769 (thread-time . 37))
(770 (set-thread-time! . 37))
(771 (thread-arguments . 37))
(772 (set-thread-arguments! . 37))
(773 (thread-queue . 37))
(774 (set-thread-queue! . 37))
(775 (thread-continuation . 37))
(776 (set-thread-continuation! . 37))
(777 (thread-dynamic-point . 37))
(778 (set-thread-dynamic-point! . 37))
(779 (thread-dynamic-env . 37))
(780 (thread? . 37))
(781 (*thread-uid* . 37))
(782 (make-thread . 37))
(783 (thread-top-level . 37))
(784 (thread-uid->thread . 37))
(785 (all-threads . 37))
(786 (add-event! . 37))
(787 (thunk->continuation . 37))
(788 (compose-continuation . 37))
(789 (make-thread-queue . 37))
(790 (thread-queue-empty? . 37))
(791 (enqueue-thread! . 37))
(792 (dequeue-thread! . 37))
(793 (remove-thread-from-queue! . 37))
(794 (current-thread . 37))
(795 (set-current-thread! . 37))
(796 (event-type . 37))
(797 (event-type-enumeration . 37))
(798 (event-type-count . 37))
(799 (run . 37))
(800 (find-and-run-next-thread . 37))
(801 (debit-thread-times-and-run! . 37))
(802 (handle-timer-interrupt . 37))
(803 (run-next-thread . 37))
(804 (min . 37))
(805 (switch-to-thread . 37))
(806 (run-thread . 37))
(807 (suspend . 37))
(808 (suspend-to . 37))
(809 (debit-down! . 37))
(810 (exit . 37))
(811 (wait . 37))
(812 (waiting? . 37))
(813 (block . 37))
(814 (relinquish-timeslice . 37))
(815 (upcall . 37))
(816 (propogate-upcall . 37))
(817 (kill-thread! . 37))
(818 (interrupt-thread . 37))
(819 (get-next-event! . 37))
(820 (event-pending? . 37))
(821 (schedule-event . 37))
(822 (schedule-wakeup . 37))
(823 (show-running . 37))
(824 (running? . 37))
(825 (spawn . 37))
(826 (spawn-on-root . 37))
(827 (spawn-on-scheduler . 37))
(828 (make-ready . 37))
(829 (schedule-interrupt! . 37))
(830 (cancel-timer-interrupt! . 37))
(831 (interrupt-timer-time . 37))
(832 (real-time . 37))
(833 (with-threads . 37))
(834 (start-multitasking . 37))
(835 (deadlock? . 37))
(836 (terminate? . 37))
(837 (terminate-current-thread . 37))
(838 (root-scheduler-slot . 37))
(839 (root-scheduler . 37))
(840 (sleep . 37))
(841 (*dozers* . 37))
(842 (insert . 37))
(843 (wake-some-threads . 37))
(844 (:lock . 42))
(845 (really-make-lock . 42))
(846 (lock-uid . 42))
(847 (lock-queue . 42))
(848 (lock-owner-uid . 42))
(849 (set-lock-owner-uid! . 42))
(850 (lock? . 42))
(851 (*lock-uid* . 42))
(852 (make-lock . 42))
(853 (obtain-lock . 42))
(854 (maybe-obtain-lock . 42))
(855 (release-lock . 42))
(856 (:port-handler . 23))
(857 (make-port-handler . 23))
(858 (port-handler-buffer-proc . 23))
(859 (port-handler-close . 23))
(860 (port-handler-discloser . 23))
(861 (port-handler? . 23))
(862 (disclose-port . 23))
(863 (obtain-port-lock . 23))
(864 (maybe-obtain-port-lock . 23))
(865 (release-port-lock . 23))
(866 (initialize-i/o-handlers! . 23))
(867 (one-arg-proc->handler . 23))
(868 (two-arg-proc->handler . 23))
(869 (read-char-handler . 23))
(870 (fill-port-buffer! . 23))
(871 (write-char-handler . 23))
(872 (empty-port-buffer! . 23))
(873 (port-flushed? . 23))
(874 (set-port-flushed?! . 23))
(875 (close-input-port . 23))
(876 (close-output-port . 23))
(877 (define-port-op . 23))
(878 (real-char-ready? . 23))
(879 (read-block . 23))
(880 (really-read-block . 23))
(881 (buffer-length . 23))
(882 (read-more . 23))
(883 (okay-limits? . 23))
(884 (write-block . 23))
(885 (write-string . 23))
(886 (write-buffered-block . 23))
(887 (write-unbuffered-block . 23))
(888 (force-output . 23))
(889 (really-force-output . 23))
(890 (default-buffer-size . 23))
(891 (open-port? . 23))
(892 (open-port-mask . 23))
(893 (input-port-mask . 23))
(894 (open-input-port-mask . 23))
(895 (open-input-port-status . 23))
(896 (open-input-port? . 23))
(897 (make-input-port-closed! . 23))
(898 (make-input-port . 23))
(899 (okay-buffer? . 23))
(900 (output-port-mask . 23))
(901 (open-output-port-mask . 23))
(902 (open-output-port-status . 23))
(903 (open-output-port? . 23))
(904 (make-output-port-closed! . 23))
(905 (make-output-port . 23))
(906 (make-unbuffered-output-port . 23))
(907 (null-output-port-handler . 23))
(908 (make-null-output-port . 23))
(909 (*flush-these-ports* . 23))
(910 (initialize-output-port-list! . 23))
(911 (periodically-force-output! . 23))
(912 (output-port-forcers . 23))
(913 (make-forcing-thunk . 23))
(914 ($current-input-port . 23))
(915 ($current-output-port . 23))
(916 ($current-error-port . 23))
(917 ($current-noise-port . 23))
(918 (current-input-port . 23))
(919 (current-output-port . 23))
(920 (current-error-port . 23))
(921 (current-noise-port . 23))
(922 (initialize-i/o . 23))
(923 (with-current-ports . 23))
(924 (call-with-current-input-port . 23))
(925 (call-with-current-output-port . 23))
(926 (call-with-current-noise-port . 23))
(927 (silently . 23))
(928 (newline . 23))
(929 (char-ready? . 23))
(930 (output-port-option . 23))
(931 (input-port-option . 23))
(932 (write . 26))
(933 (recurring-write . 26))
(934 (write-boolean . 26))
(935 (write-number . 26))
(936 (write-char-literal . 26))
(937 (character-name . 26))
(938 (write-string-literal . 26))
(939 (write-list . 26))
(940 (quotation? . 26))
(941 (write-vector . 26))
(942 (write-other . 26))
(943 (display-type-name . 26))
(944 (display . 26))
(945 (read . 27))
(946 (sub-read-carefully . 27))
(947 (reader-token-marker . 27))
(948 (make-reader-token . 27))
(949 (reader-token? . 27))
(950 (close-paren . 27))
(951 (dot . 27))
(952 (sub-read . 27))
(953 (read-dispatch-vector . 27))
(954 (read-terminating?-vector . 27))
(955 (set-standard-syntax! . 27))
(956 (set-standard-read-macro! . 27))
(957 (sub-read-list . 27))
(958 (gobble-line . 27))
(959 (*sharp-macros* . 27))
(960 (define-sharp-macro . 27))
(961 (sub-read-token . 27))
(962 (parse-token . 27))
(963 (strange-symbol-names . 27))
(964 (p-c-v . 27))
(965 (preferred-case . 27))
(966 (reading-error . 27))
(967 (input-channel-handler . 24))
(968 (input-channel->port . 24))
(969 (output-channel-handler . 24))
(970 (make-unbuffered-output-channel-handler . 24))
(971 (output-channel->port . 24))
(972 (maybe-force-output . 24))
(973 (maybe-open-file . 24))
(974 (open-input-file . 24))
(975 (open-output-file . 24))
(976 (call-with-input-file . 24))
(977 (call-with-output-file . 24))
(978 (with-input-from-file . 24))
(979 (with-output-to-file . 24))
(980 (steal-channel-port! . 24))
(981 (really-steal-channel-port! . 24))
(982 (initialize-channel-i/o! . 24))
(983 (i/o-completion-handler . 24))
(984 (waiting-for-i/o? . 24))
(985 (wait-for-channel . 24))
(986 (steal-channel! . 24))
(987 (i/o-wait-count-slot . 24))
(988 (i/o-wait-count . 24))
(989 (increment-i/o-wait-count! . 24))
(990 (decrement-i/o-wait-count! . 24))
(991 (i/o-wait-queues-slot . 24))
(992 (i/o-wait-queue . 24))
(993 (make-i/o-wait-queues . 24))
(994 (:table . 75))
(995 (really-make-table . 75))
(996 (table-set!-procedure . 75))
(997 (set-table-set!-procedure! . 75))
(998 (table-ref-procedure . 75))
(999 (set-table-ref-procedure! . 75))
(1000 (table-data . 75))
(1001 (set-table-data! . 75))
(1002 (table-size . 75))
(1003 (set-table-size! . 75))
(1004 (table? . 75))
(1005 (table-ref . 75))
(1006 (table-set! . 75))
(1007 (linear-table-size-limit . 75))
(1008 (next-table-size . 75))
(1009 (make-table-maker . 75))
(1010 (null-entry . 75))
(1011 (new-entry . 75))
(1012 (entry-value . 75))
(1013 (entry-key . 75))
(1014 (set-entry-value! . 75))
(1015 (delete-entry! . 75))
(1016 (make-assoc . 75))
(1017 (make-linear-table-ref . 75))
(1018 (make-linear-table-set! . 75))
(1019 (make->hash-table . 75))
(1020 (make-hash-table-ref . 75))
(1021 (make-hash-table-set! . 75))
(1022 (expand-hash-table! . 75))
(1023 (table-enter-alist! . 75))
(1024 (table-expand-table! . 75))
(1025 (table-walk . 75))
(1026 (really-table-walk . 75))
(1027 (alist-walk . 75))
(1028 (make-table-immutable! . 75))
(1029 (table->entry-list . 75))
(1030 (default-table-hash-function . 75))
(1031 (symbol-hash . 75))
(1032 (make-table . 75))
(1033 (make-string-table . 75))
(1034 (make-symbol-table . 75))
(1035 (make-integer-table . 75))
(1036 (make-population . 44))
(1037 (add-to-population! . 44))
(1038 (weak-memq . 44))
(1039 (population-reduce . 44))
(1040 (population->list . 44))
(1041 (walk-population . 44))
(1042 (:meta-type . 46))
(1043 (really-make-type . 46))
(1044 (type-info . 46))
(1045 (type-more . 46))
(1046 (type-mask . 46))
(1047 (meta-type? . 46))
(1048 (make-type . 46))
(1049 (name->type-table . 46))
(1050 (mask->name-table . 46))
(1051 (name->type . 46))
(1052 (set-type-name! . 46))
(1053 (*mask* . 46))
(1054 (new-type-bit . 46))
(1055 (mask->type . 46))
(1056 (bottom-type . 46))
(1057 (error-type . 46))
(1058 (bottom-type? . 46))
(1059 (new-atomic-type . 46))
(1060 (named-atomic-type . 46))
(1061 (syntax-type . 46))
(1062 (other-static-type . 46))
(1063 (empty-rail-type . 46))
(1064 (rail-type . 46))
(1065 (make-optional-type . 46))
(1066 (make-rest-type . 46))
(1067 (head-type . 46))
(1068 (head-type-really . 46))
(1069 (tail-type . 46))
(1070 (empty-rail-type? . 46))
(1071 (rest-type? . 46))
(1072 (optional-type? . 46))
(1073 (mask/no-values . 46))
(1074 (mask/two-or-more . 46))
(1075 (mask/&rest . 46))
(1076 (value-type . 46))
(1077 (mask/value . 46))
(1078 (value-type? . 46))
(1079 (any-values-type . 46))
(1080 (any-arguments-type . 46))
(1081 (mask/one-or-more . 46))
(1082 (same-type? . 46))
(1083 (subtype? . 46))
(1084 (meet-type . 46))
(1085 (other-type-info . 46))
(1086 (meet-rail . 46))
(1087 (meet-procedure . 46))
(1088 (meet? . 46))
(1089 (meet-procedure? . 46))
(1090 (join-type . 46))
(1091 (join-rail . 46))
(1092 (join-procedure . 46))
(1093 (number-hierarchy . 46))
(1094 (integer-type . 46))
(1095 (rational-type . 46))
(1096 (real-type . 46))
(1097 (complex-type . 46))
(1098 (number-type . 46))
(1099 (exact-type . 46))
(1100 (inexact-type . 46))
(1101 (exact-integer-type . 46))
(1102 (inexact-real-type . 46))
(1103 (boolean-type . 46))
(1104 (pair-type . 46))
(1105 (null-type . 46))
(1106 (record-type . 46))
(1107 (any-procedure-type . 46))
(1108 (other-value-type . 46))
(1109 (mask/other . 46))
(1110 (make-other-type . 46))
(1111 (char-type . 46))
(1112 (unspecific-type . 46))
(1113 (string-type . 46))
(1114 (symbol-type . 46))
(1115 (vector-type . 46))
(1116 (escape-type . 46))
(1117 (structure-type . 46))
(1118 (mask/procedure . 46))
(1119 (procedure-type . 46))
(1120 (make-procedure-type . 46))
(1121 (procedure-type-domain . 46))
(1122 (procedure-type-codomain . 46))
(1123 (restrictive? . 46))
(1124 (sexp->type . 46))
(1125 (sexp->values-type . 46))
(1126 (type->sexp . 46))
(1127 (atomic-type->sexp . 46))
(1128 (rail-type->sexp . 46))
(1129 (disjoin-type . 46))
(1130 (disjoin-rest . 46))
(1131 (mask/number . 46))
(1132 (make-some-values-type . 46))
(1133 (proc . 46))
(1134 (some-values . 46))
(1135 (procedure-type? . 46))
(1136 (fixed-arity-procedure-type? . 46))
(1137 (procedure-type-arity . 46))
(1138 (procedure-type-argument-types . 46))
(1139 (variable-type . 46))
(1140 (variable-type? . 46))
(1141 (variable-value-type . 46))
(1142 (usual-variable-type . 46))
(1143 (undeclared-type . 46))
(1144 (compatible-types? . 46))
(1145 (:interface . 63))
(1146 (really-make-interface . 63))
(1147 (interface-name . 63))
(1148 (set-interface-name! . 63))
(1149 (interface-clients . 63))
(1150 (walk-method . 63))
(1151 (ref-method . 63))
(1152 (interface? . 63))
(1153 (interface-ref . 63))
(1154 (for-each-declaration . 63))
(1155 (note-reference-to-interface! . 63))
(1156 (make-interface . 63))
(1157 (make-simple-interface . 63))
(1158 (really-make-simple-interface . 63))
(1159 (make-compound-interface . 63))
(1160 (note-interface-name! . 63))
(1161 (binding? . 47))
(1162 (binding-type . 47))
(1163 (binding-place . 47))
(1164 (binding-static . 47))
(1165 (binding-path . 47))
(1166 (set-binding-place! . 47))
(1167 (make-binding . 47))
(1168 (add-path . 47))
(1169 (clobber-binding! . 47))
(1170 (impose-type . 47))
(1171 (forget-integration . 47))
(1172 (same-denotation? . 47))
(1173 (maybe-fix-place! . 47))
(1174 (follow-forwarding-pointers . 47))
(1175 (name? . 48))
(1176 (:generated . 48))
(1177 (make-generated . 48))
(1178 (generated-parent-name . 48))
(1179 (generated-env . 48))
(1180 (generated-token . 48))
(1181 (generated-symbol . 48))
(1182 (generated? . 48))
(1183 (generate-name . 48))
(1184 (generated-uid . 48))
(1185 (*generated-uid* . 48))
(1186 (name->symbol . 48))
(1187 (name-hash . 48))
(1188 (make-name-table . 48))
(1189 (desyntaxify . 48))
(1190 (make-qualified . 48))
(1191 (qualified? . 48))
(1192 (qualified-parent-name . 48))
(1193 (qualified-symbol . 48))
(1194 (name->qualified . 48))
(1195 (qualify-parent . 48))
(1196 (:transform . 48))
(1197 (really-make-transform . 48))
(1198 (transform-id . 48))
(1199 (transform-source . 48))
(1200 (transform-aux-names . 48))
(1201 (transform-type . 48))
(1202 (transform-env . 48))
(1203 (transform-procedure . 48))
(1204 (transform? . 48))
(1205 (make-transform . 48))
(1206 (maybe-apply-macro-transform . 48))
(1207 (apply-inline-transform . 48))
(1208 (make-keyword-comparator . 48))
(1209 (name->source-name . 48))
(1210 (bind-aliases . 48))
(1211 (make-name-generator . 48))
(1212 (lookup . 48))
(1213 (lookup . 51))
(1214 (bind1 . 51))
(1215 (bind . 51))
(1216 (bindrec . 51))
(1217 (make-compiler-env . 51))
(1218 (funny-name/macro-eval . 51))
(1219 (environment-macro-eval . 51))
(1220 (funny-name/define! . 51))
(1221 (environment-define! . 51))
(1222 (funny-name/package . 51))
(1223 (extract-package-from-environment . 51))
(1224 (funny-name/source-file-name . 51))
(1225 (bind-source-file-name . 51))
(1226 (source-file-name . 51))
(1227 (:thingie . 49))
(1228 (make-thingie . 49))
(1229 (thingie-want-type . 49))
(1230 (thingie-name . 49))
(1231 (thingie-binding . 49))
(1232 (thingie? . 49))
(1233 (:structure . 64))
(1234 (really-make-structure . 64))
(1235 (structure-name . 64))
(1236 (set-structure-name! . 64))
(1237 (structure-clients . 64))
(1238 (structure-package . 64))
(1239 (structure-interface-really . 64))
(1240 (set-structure-interface! . 64))
(1241 (structure-interface-thunk . 64))
(1242 (structure? . 64))
(1243 (structure-interface . 64))
(1244 (initialize-structure! . 64))
(1245 (make-structure . 64))
(1246 (note-structure-name! . 64))
(1247 (structure-unstable? . 64))
(1248 (for-each-export . 64))
(1249 (:package . 64))
(1250 (really-make-package . 64))
(1251 (package-cached . 64))
(1252 (package-clients . 64))
(1253 (package-real-undefined-but-assigneds . 64))
(1254 (set-package-undefined-but-assigneds! . 64))
(1255 (package-real-undefineds . 64))
(1256 (set-package-undefineds! . 64))
(1257 (package-accesses-thunk . 64))
(1258 (package-opens-thunk . 64))
(1259 (set-package-opens-thunk! . 64))
(1260 (package->environment . 64))
(1261 (set-package->environment! . 64))
(1262 (package-loaded? . 64))
(1263 (set-package-loaded?! . 64))
(1264 (package-clauses . 64))
(1265 (package-file-name . 64))
(1266 (package-get-location . 64))
(1267 (set-package-get-location! . 64))
(1268 (package-integrate? . 64))
(1269 (set-package-integrate?! . 64))
(1270 (package-unstable? . 64))
(1271 (package-definitions . 64))
(1272 (package-opens-really . 64))
(1273 (set-package-opens! . 64))
(1274 (package-uid . 64))
(1275 (package? . 64))
(1276 (make-package . 64))
(1277 (really-package->environment . 64))
(1278 (lazy-table-accessor . 64))
(1279 (package-undefineds . 64))
(1280 (package-undefined-but-assigneds . 64))
(1281 (new-package-uid . 64))
(1282 (*package-uid* . 64))
(1283 (package-name-table . 64))
(1284 (package-name . 64))
(1285 (note-package-name! . 64))
(1286 (package-opens . 64))
(1287 (initialize-package-if-necessary! . 64))
(1288 (package-accesses . 64))
(1289 (make-simple-package . 64))
(1290 (package-definition . 64))
(1291 (package-define! . 64))
(1292 (package-add-static! . 64))
(1293 (package-refine-type! . 64))
(1294 (package-lookup . 64))
(1295 (really-package-lookup . 64))
(1296 (search-opens . 64))
(1297 (structure-lookup . 64))
(1298 (real-structure-lookup . 64))
(1299 (generic-lookup . 64))
(1300 (initialize-package! . 64))
(1301 (for-each-definition . 64))
(1302 (get-new-location . 64))
(1303 (make-new-location . 64))
(1304 ($get-location . 64))
(1305 (*location-uid* . 64))
(1306 (location-info-table . 64))
(1307 (flush-location-names . 64))
(1308 (link! . 64))
(1309 (really-link! . 64))
(1310 (get-location . 64))
(1311 (location-on-demand . 64))
(1312 (get-undefined . 64))
(1313 (location-for-assignment . 64))
(1314 (package-note-caching! . 64))
(1315 (note-caching! . 64))
(1316 (get-location-for-unassignable . 64))
(1317 (get-location-for-undefined . 64))
(1318 ($note-undefined . 64))
(1319 (cenv->package . 64))
(1320 (location-for-reference . 64))
(1321 (noting-undefined-variables . 64))
(1322 (print-undefined-names . 64))
(1323 (environment-ref . 77))
(1324 (environment-set! . 77))
(1325 (environment-define! . 77))
(1326 (*structure-ref . 77))
(1327 (carefully . 77))
(1328 ($interaction-environment . 77))
(1329 (interaction-environment . 77))
(1330 (set-interaction-environment! . 77))
(1331 (with-interaction-environment . 77))
(1332 (scheme-report-environment . 77))
(1333 (*scheme-report-environment* . 77))
(1334 (*null-environment* . 77))
(1335 (*scheme-report-number* . 77))
(1336 (set-scheme-report-environment! . 77))
(1337 (null-environment . 77))
(1338 (make-reflective-tower . 77))
(1339 (set-reflective-tower-maker! . 77))
(1340 (namestring . 76))
(1341 (directory-component-separator . 76))
(1342 (type-component-separator . 76))
(1343 (namestring-component . 76))
(1344 (file-name-preferred-case . 76))
(1345 (*scheme-file-type* . 76))
(1346 (*load-file-type* . 76))
(1347 (file-name-directory . 76))
(1348 (file-name-nondirectory . 76))
(1349 (file-nondirectory-position . 76))
(1350 (string-posq . 76))
(1351 (*translations* . 76))
(1352 (translations . 76))
(1353 (set-translation! . 76))
(1354 (translate . 76))
(1355 ($note-file-package . 61))
(1356 (read-forms . 61))
(1357 (really-read-forms . 61))
(1358 (:operator . 50))
(1359 (make-operator . 50))
(1360 (operator-name . 50))
(1361 (operator-uid . 50))
(1362 (operator-nargs . 50))
(1363 (operator-type . 50))
(1364 (set-operator-type! . 50))
(1365 (operator? . 50))
(1366 (usual-operator-type . 50))
(1367 (get-operator . 50))
(1368 (*operator-uid* . 50))
(1369 (operators-table . 50))
(1370 (number-of-operators . 50))
(1371 (the-operators . 50))
(1372 (make-operator-table . 50))
(1373 (operator-table-ref . 50))
(1374 (operator-lookup . 50))
(1375 (operator-define! . 50))
(1376 (:node . 50))
(1377 (really-make-node . 50))
(1378 (node-plist . 50))
(1379 (set-node-plist! . 50))
(1380 (node-form . 50))
(1381 (node-operator-id . 50))
(1382 (node? . 50))
(1383 (make-node . 50))
(1384 (node-ref . 50))
(1385 (node-set! . 50))
(1386 (node-operator . 50))
(1387 (node-predicate . 50))
(1388 (make-similar-node . 50))
(1389 (force-node . 50))
(1390 (schemify . 50))
(1391 (schemifiers . 50))
(1392 (schemify-node . 50))
(1393 (schemify-nodes . 50))
(1394 (define-schemifier . 50))
(1395 (schemify-lambda . 50))
(1396 (schemify-formals . 50))
(1397 (schemify-sexp . 50))
(1398 (number-of-required-args . 54))
(1399 (n-ary? . 54))
(1400 (normalize-formals . 54))
(1401 (scan-forms . 52))
(1402 (expand-form . 52))
(1403 (scan-define . 52))
(1404 (expand-define . 52))
(1405 (scan-define-syntax . 52))
(1406 (expand-head . 52))
(1407 (destructure-define . 52))
(1408 (make-operator-predicate . 52))
(1409 (define? . 52))
(1410 (begin? . 52))
(1411 (define-syntax? . 52))
(1412 (static-value . 52))
(1413 (expand-body . 52))
(1414 (scan-body-forms . 52))
(1415 (body-lossage . 52))
(1416 (expand . 52))
(1417 (expand-list . 52))
(1418 (expand-literal . 52))
(1419 (expand-call . 52))
(1420 (expand-name . 52))
(1421 (expand-macro-application . 52))
(1422 (expand-operator-form . 52))
(1423 (expanders . 52))
(1424 (define-expander . 52))
(1425 (unspecific-node . 52))
(1426 (expand-lambda . 52))
(1427 (bind-names . 52))
(1428 (names? . 52))
(1429 (expand-letrec . 52))
(1430 (process-syntax . 52))
(1431 (this-long? . 52))
(1432 (at-least-this-long? . 52))
(1433 (specs? . 52))
(1434 (literal? . 52))
(1435 (syntax? . 52))
(1436 (begin-node? . 52))
(1437 (call-node? . 52))
(1438 (name-node? . 52))
(1439 (operator/literal . 52))
(1440 (operator/quote . 52))
(1441 (operator/call . 52))
(1442 (operator/name . 52))
(1443 (operator/unspecific . 52))
(1444 (operator/unassigned . 52))
(1445 (operator/lambda . 52))
(1446 (operator/begin . 52))
(1447 (operator/letrec . 52))
(1448 (operator/define . 52))
(1449 (operator/primitive-procedure . 52))
(1450 (:primop . 58))
(1451 (make-primop . 58))
(1452 (primop-compilator . 58))
(1453 (primop-closed . 58))
(1454 (primop-type . 58))
(1455 (primop-name . 58))
(1456 (primop? . 58))
(1457 (primop-table . 58))
(1458 (walk-primops . 58))
(1459 (define-compiler-primitive . 58))
(1460 (get-primop . 58))
(1461 (:debug-data . 55))
(1462 (make-debug-data . 55))
(1463 (debug-data-source . 55))
(1464 (set-debug-data-source! . 55))
(1465 (debug-data-env-maps . 55))
(1466 (set-debug-data-env-maps! . 55))
(1467 (debug-data-pc-in-parent . 55))
(1468 (debug-data-parent . 55))
(1469 (debug-data-name . 55))
(1470 (debug-data-uid . 55))
(1471 (debug-data? . 55))
(1472 (maximum-stack-use . 56))
(1473 (protocol-skip . 56))
(1474 (stack-delta . 56))
(1475 (define-delta . 56))
(1476 (stack-max . 56))
(1477 (nothing . 56))
(1478 (popper . 56))
(1479 (pusher . 56))
(1480 (continue . 56))
(1481 (continuer . 56))
(1482 (do-make-cont . 56))
(1483 (stack-function . 56))
(1484 (arg-spec-size . 56))
(1485 (imax . 56))
(1486 (get-offset . 56))
(1487 (new-template-uid . 57))
(1488 (*template-uid* . 57))
(1489 (template-uid . 57))
(1490 (set-template-uid! . 57))
(1491 (debug-flag-names . 57))
(1492 (type/debug-flags . 57))
(1493 (make-debug-flags . 57))
(1494 ($debug-flags . 57))
(1495 (debug-flag-accessor . 57))
(1496 (debug-flag-modifier . 57))
(1497 (keep-source-code? . 57))
(1498 (keep-environment-maps? . 57))
(1499 (keep-procedure-names? . 57))
(1500 (keep-file-names? . 57))
(1501 (tabulate-debug-data? . 57))
(1502 (debug-data-table . 57))
(1503 (with-fresh-compiler-state . 57))
(1504 (saving-and-restoring . 57))
(1505 (debug-data->info . 57))
(1506 (get-debug-data . 57))
(1507 (note-debug-data! . 57))
(1508 (new-debug-data . 57))
(1509 (make-segment . 57))
(1510 (segment-size . 57))
(1511 (segment-emitter . 57))
(1512 (segment->template . 57))
(1513 (segment-data->template . 57))
(1514 (check-stack-use . 57))
(1515 (:assembly-state . 57))
(1516 (make-assembly-state . 57))
(1517 (astate-literals . 57))
(1518 (set-astate-literals! . 57))
(1519 (astate-count . 57))
(1520 (set-astate-count! . 57))
(1521 (astate-pc . 57))
(1522 (set-astate-pc! . 57))
(1523 (astate-code-vector . 57))
(1524 (make-astate . 57))
(1525 (emit-byte! . 57))
(1526 (literal->index . 57))
(1527 (emit-literal! . 57))
(1528 (emit-segment! . 57))
(1529 (empty-segment . 57))
(1530 (instruction . 57))
(1531 (sequentially . 57))
(1532 (sequentially-2 . 57))
(1533 (instruction-with-literal . 57))
(1534 (instruction-with-location . 57))
(1535 (template . 57))
(1536 (make-label . 57))
(1537 (instruction-using-label . 57))
(1538 (computed-goto-label-size . 57))
(1539 (computed-goto-instruction . 57))
(1540 (attach-label . 57))
(1541 (insert-label! . 57))
(1542 (code-vector-set2! . 57))
(1543 (two-byte-limit . 57))
(1544 (high-byte . 57))
(1545 (low-byte . 57))
(1546 ($debug-data . 57))
(1547 (note-source-code . 57))
(1548 (note-environment . 57))
(1549 (emit-with-environment-maps! . 57))
(1550 ($environment-maps . 57))
(1551 (optimizers-table . 66))
(1552 (set-optimizer! . 66))
(1553 (get-optimizer . 66))
(1554 (apply-optimizers . 66))
(1555 (*standard-optimizer-names* . 66))
(1556 (default-standard-optimizer . 66))
(1557 (*standard-optimizer* . 66))
(1558 (set-standard-optimizers! . 66))
(1559 (get-optimizers . 66))
(1560 (make-standard-optimizer . 66))
(1561 (flatten-form . 62))
(1562 (flatten-node . 62))
(1563 (flatteners . 62))
(1564 (define-flattener . 62))
(1565 (flatten-list . 62))
(1566 (no-free-vars . 62))
(1567 (flatten-lambda . 62))
(1568 (convert-lambda-body . 62))
(1569 (add-cells . 62))
(1570 (assigned? . 62))
(1571 (mark-set-variables! . 62))
(1572 (mark-sets . 62))
(1573 (define-set-marker . 62))
(1574 (no-sets . 62))
(1575 (make-cell . 62))
(1576 (make-unassigned-cell . 62))
(1577 (make-cell-ref . 62))
(1578 (make-cell-set! . 62))
(1579 (make-primop-call . 62))
(1580 (operator/flat-lambda . 62))
(1581 (operator/lambda . 62))
(1582 (operator/begin . 62))
(1583 (operator/literal . 62))
(1584 (operator/call . 62))
(1585 (operator/unassigned . 62))
(1586 (operator/set! . 62))
(1587 (define-node? . 62))
(1588 (lambda-node? . 62))
(1589 (define-primop . 62))
(1590 (temp0 . 62))
(1591 (make-cell-primop . 62))
(1592 (temp1 . 62))
(1593 (cell-ref-primop . 62))
(1594 (temp2 . 62))
(1595 (cell-set!-primop . 62))
(1596 (union . 62))
(1597 (set-difference . 62))
(1598 (node-type . 59))
(1599 (reconstruct-type . 59))
(1600 (reconstruct . 59))
(1601 (examine . 59))
(1602 (reconstructors . 59))
(1603 (define-reconstructor . 59))
(1604 (reconstruct-lambda . 59))
(1605 (careful-codomain . 59))
(1606 (reconstruct-name . 59))
(1607 (proc->reconstructor . 59))
(1608 (reconstruct-call . 59))
(1609 (fork-constraints . 59))
(1610 (node->type . 59))
(1611 (name-node? . 59))
(1612 (literal-node? . 59))
(1613 (lambda-node? . 59))
(1614 (primop-reconstructors . 59))
(1615 (define-primop-reconstructor . 59))
(1616 (reconstruct-apply . 59))
(1617 (constant-type . 59))
(1618 (compile-expression . 60))
(1619 (compile . 60))
(1620 (compilators . 60))
(1621 (define-compilator . 60))
(1622 (compile-constant . 60))
(1623 (compile-call . 60))
(1624 (compile-name-call . 60))
(1625 (compile-redex . 60))
(1626 (compile-unknown-call . 60))
(1627 (maybe-push-continuation . 60))
(1628 (fixup-source . 60))
(1629 (push-arguments . 60))
(1630 (push-all-with-names . 60))
(1631 (compile-lambda . 60))
(1632 (compile-lambda-code . 60))
(1633 (name-node->symbol . 60))
(1634 (set-lexical-offsets! . 60))
(1635 (compile-flat-lambda . 60))
(1636 (get-variables-offsets . 60))
(1637 (variable-env-data . 60))
(1638 (sort-list . 60))
(1639 (make-cont . 60))
(1640 (cont-segment . 60))
(1641 (cont-source-info . 60))
(1642 (return-cont-segment . 60))
(1643 (return-cont . 60))
(1644 (return-cont? . 60))
(1645 (fall-through-cont . 60))
(1646 (fall-through-cont? . 60))
(1647 (ignore-values-segment . 60))
(1648 (ignore-values-cont . 60))
(1649 (ignore-values-cont? . 60))
(1650 (deliver-value . 60))
(1651 (named-cont . 60))
(1652 (cont-name . 60))
(1653 (name-node-binding . 60))
(1654 (generate-trap . 60))
(1655 (type-check . 60))
(1656 (set-type-check?! . 60))
(1657 (*type-check?* . 60))
(1658 (diagnose-call-error . 60))
(1659 (lambda-node? . 60))
(1660 (name-node? . 60))
(1661 (literal-node? . 60))
(1662 (operator/lambda . 60))
(1663 (operator/set! . 60))
(1664 (operator/call . 60))
(1665 (operator/begin . 60))
(1666 (direct-compilator . 60))
(1667 (direct-closed-compilator . 60))
(1668 (nargs->domain . 60))
(1669 (get-primop-type . 60))
(1670 (primop-types . 60))
(1671 (define-simple-primitive . 60))
(1672 (simple-compilator . 60))
(1673 (simple-closed-compilator . 60))
(1674 (symbol-append . 60))
(1675 (define-stob-predicate . 60))
(1676 (define-data-struct-primitives . 60))
(1677 (define-vector-primitives . 60))
(1678 (define-n-ary-compiler-primitive . 60))
(1679 (n-ary-primitive-compilator . 60))
(1680 (call-on-arg-and-id . 60))
(1681 (call-on-args . 60))
(1682 (op/unspecific . 60))
(1683 (op/literal . 60))
(1684 (push-all-but-last . 60))
(1685 (dispatch-protocol-size . 60))
(1686 (make-dispatch-protocol . 60))
(1687 (compile-forms . 60))
(1688 (compile-form . 60))
(1689 (define-node? . 60))
(1690 (compile-definition . 60))
(1691 (location-contents-offset . 60))
(1692 (make-startup-procedure . 60))
(1693 (an-ignore-values-cont . 60))
(1694 (eval . 78))
(1695 (load-into . 78))
(1696 (eval-from-file . 78))
(1697 (load . 78))
(1698 (really-load-into . 78))
(1699 (compile-and-run . 78))
(1700 (display-condition . 45))
(1701 (really-display-condition . 45))
(1702 (*depth* . 45))
(1703 (*length* . 45))
(1704 (&disclose-condition . 45))
(1705 (disclose-condition . 45))
(1706 (limited-write . 45))
(1707 (command-processor . 82))
(1708 (mini-load . 82))
(1709 (read-string . 82))
(1710 (enum-case . 40))
(1711 (run-threads . 38))
(1712 (run-threads-with-housekeeper . 38))
(1713 (round-robin-event-handler . 38))
(1714 (make-counter . 38))
(1715 (counter-value . 38))
(1716 (increment-counter! . 38))
(1717 (decrement-counter! . 38))
(1718 (root-scheduler . 39))
(1719 (make-root-event-handler . 39))
(1720 (root-handler . 39))
(1721 (cheap-display-condition . 39))
(1722 (abort-token . 39))
(1723 (scheme-exit-now . 39))
(1724 (root-wait . 39))
(1725 (one-day-of-milliseconds . 39))
(1726 (do-some-waiting . 39))
(1727 (deadlock-handler . 39))
(1728 (call-when-deadlocked! . 39))
(1729 (spawn-output-forcers . 39))
(1730 (unspecific . 39))
(1731 (usual-resumer . 43))
(1732 (initialize-rts . 43))
(1733 (start . 83))
(1734 (make-built-in-structures . 83))
(1735 (initialize-interaction-environment! . 83))
(1736 (make-initial-package . 83))
(1737 (make-tower . 83))
(1738 (the-usual-transforms . 53))
(1739 (define-usual-macro . 53))
(1740 (usual-transform . 53))
(1741 (do-spec? . 53))
(1742 (specs? . 53))
(1743 (case-clause? . 53))
(1744 (process-rules . 53))
(1745 (segment-pattern? . 53))
(1746 (segment-template? . 53))
(1747 (indicators-for-zero-or-more . 53))
(1748 (find-free-names-in-syntax-rules . 53))
(1749 (strongly-connected-components . 74))
(1750 (find-next-vertex . 74))
(1751 (:vertex . 74))
(1752 (really-make-vertex . 74))
(1753 (vertex-lowpoint . 74))
(1754 (set-vertex-lowpoint! . 74))
(1755 (vertex-parent . 74))
(1756 (set-vertex-parent! . 74))
(1757 (vertex-index . 74))
(1758 (set-vertex-index! . 74))
(1759 (vertex-stack . 74))
(1760 (set-vertex-stack! . 74))
(1761 (vertex-edges . 74))
(1762 (set-vertex-edges! . 74))
(1763 (vertex-data . 74))
(1764 (vertex? . 74))
(1765 (make-vertex . 74))
(1766 (make-vertices . 74))
(1767 (do-vertex . 74))
(1768 (get-strong . 74))
(1769 (end-vertex . 74))
(1770 (unwind-stack . 74))
(1771 (follow-edge . 74))
(1772 (pop-vertex-edge! . 74))
(1773 (find-usages . 71))
(1774 (maybe-update-known-type . 71))
(1775 (find-node-usages . 71))
(1776 (analyze . 71))
(1777 (analyze-nodes . 71))
(1778 (usage-analyzers . 71))
(1779 (define-usage-analyzer . 71))
(1780 (nothing . 71))
(1781 (add-if-free . 71))
(1782 (:usage . 71))
(1783 (really-make-usage . 71))
(1784 (usage-assignment-count . 71))
(1785 (set-assignment! . 71))
(1786 (usage-operator-count . 71))
(1787 (set-operator! . 71))
(1788 (usage-reference-count . 71))
(1789 (set-reference! . 71))
(1790 (usage-name-node . 71))
(1791 (usage? . 71))
(1792 (make-usage . 71))
(1793 (make-package-usage . 71))
(1794 (package-usage? . 71))
(1795 (usage-incrementator . 71))
(1796 (note-reference! . 71))
(1797 (note-operator! . 71))
(1798 (note-assignment! . 71))
(1799 (lambda-node? . 71))
(1800 (quote-node? . 71))
(1801 (literal-node? . 71))
(1802 (call-node? . 71))
(1803 (name-node? . 71))
(1804 (define-node? . 71))
(1805 (sort-forms . 71))
(1806 (stuff-count . 71))
(1807 (maybe-make-aliased . 71))
(1808 (topologically-sort . 71))
(1809 (:form . 71))
(1810 (really-make-form . 71))
(1811 (form-temp . 71))
(1812 (set-form-temp! . 71))
(1813 (form-free . 71))
(1814 (set-form-free! . 71))
(1815 (form-unaliased? . 71))
(1816 (set-form-unaliased?! . 71))
(1817 (form-aliases . 71))
(1818 (set-form-aliases! . 71))
(1819 (form-node . 71))
(1820 (form? . 71))
(1821 (make-form . 71))
(1822 (insert-aliases . 71))
(1823 (make-inline-transform . 73))
(1824 (clean-node . 73))
(1825 (clean-lambda . 73))
(1826 (clean-lookup . 73))
(1827 (unused-name . 73))
(1828 (inline-transform . 73))
(1829 (make-substitution . 73))
(1830 (reconstitute . 73))
(1831 (reconstitute-name . 73))
(1832 (operator/name . 73))
(1833 (operator/literal . 73))
(1834 (qualified->name . 73))
(1835 (get-qualified-env . 73))
(1836 (quote-node? . 73))
(1837 (call-node? . 73))
(1838 (lambda-node? . 73))
(1839 (name-node? . 73))
(1840 (loophole-node? . 73))
(1841 (operator . 80))
(1842 (primop . 80))
(1843 (simple-interface . 80))
(1844 (package . 80))
(1845 (transform . 80))
(1846 (package-define-static! . 80))
(1847 (:syntax . 69))
(1848 (:values . 69))
(1849 (:arguments . 69))
(1850 (:value . 69))
(1851 (procedure . 69))
(1852 (:boolean . 69))
(1853 (:char . 69))
(1854 (:null . 69))
(1855 (:unspecific . 69))
(1856 (:number . 69))
(1857 (:complex . 69))
(1858 (:real . 69))
(1859 (:rational . 69))
(1860 (:integer . 69))
(1861 (:exact-integer . 69))
(1862 (:pair . 69))
(1863 (:string . 69))
(1864 (:symbol . 69))
(1865 (:vector . 69))
(1866 (:procedure . 69))
(1867 (:input-port . 69))
(1868 (:output-port . 69))
(1869 (:error . 69))
(1870 (:escape . 69))
(1871 (:structure . 69))
(1872 (:type . 69))
(1873 (def . 68))
(1874 (really-def . 68))
(1875 (define-multiple . 68))
(1876 (define-interface . 68))
(1877 (compound-interface . 68))
(1878 (export . 68))
(1879 (define-structure . 68))
(1880 (define-structures . 68))
(1881 (structure . 68))
(1882 (structures . 68))
(1883 (a-package . 68))
(1884 (receive . 68))
(1885 (define-reflective-tower-maker . 68))
(1886 (export-reflective-tower-maker . 68))
(1887 (define-module . 68))
(1888 (make-a-package . 68))
(1889 (loser . 68))
(1890 (interface-of . 68))
(1891 (*verify-later!* . 68))
(1892 (verify-later! . 68))
(1893 (set-verify-later! . 68))
(1894 (note-name! . 68))
(1895 (collect-packages . 65))
(1896 (package-source . 65))
(1897 (read-files . 65))
(1898 (package-optimizer-names . 65))
(1899 (check-structure . 65))
(1900 (compile-package . 67))
(1901 (expand-package . 67))
(1902 (define-usual-transform . 67))
(1903 (define-primitives . 67))
(1904 (make-define-primitive-node . 67))
(1905 (operator/define . 67))
(1906 (operator/primitive-procedure . 67))
(1907 (analyze-forms . 72))
(1908 (analyze-form . 72))
(1909 (inlinable-rhs? . 72))
(1910 (simple-lambda? . 72))
(1911 (operator/name . 72))
(1912 (simple? . 72))
(1913 (simple-list? . 72))
(1914 (analyzers . 72))
(1915 (define-analyzer . 72))
(1916 (static-value . 72))
(1917 (really-simple-call? . 72))
(1918 (lexical-node? . 72))
(1919 (no-ret . 72))
(1920 (ret . 72))
(1921 (simple-literal? . 72))
(1922 (require . 72))
(1923 (*debug?* . 72))
(1924 (package-lookup-type . 72))
(1925 (lambda-node? . 72))
(1926 (name-node? . 72))
(1927 (loophole-node? . 72))
(1928 (define-node? . 72))
(1929 (ensure-loaded . 79))
-
; Template uid -> name, parent, pc in parent, env maps
(5 scheme-level-0 #f #f ())
(6 call-error 5 46 ())
(7 syntax-error 5 58 ())
(8 warn 5 70 ())
(9 signal 5 82 ())
(10 decode 5 94 ())
(11 encode 5 106 ())
(12 initialize-any-proxy-value! 5 118 ())
(13 any-proxy-value 5 130 ())
(14 proxy-local-set! 5 142 ())
(15 proxy-local-ref 5 154 ())
(16 proxy-has-local-value? 5 166 ())
(17 proxy-data->proxy 5 178 ())
(18 make-proxy 5 190 ())
(19 make-nonlocal-proxy 5 202 ())
(20 debug-message 5 214 ())
(21 channel-write 5 226 ())
(22 #f 21 38 ())
(23 channel-read 5 238 ())
(24 #f 23 15 ())
(25 #f 24 42 ())
(26 #f 23 33 ())
(27 buffer-length 5 250 ())
(28 output-port? 5 262 ())
(29 input-port? 5 274 ())
(30 flush-the-symbol-table! 5 286 ())
(31 string->symbol 5 298 ())
(32 restore-the-symbol-table! 5 310 ())
(33 string-copy 5 322 ())
(34 vector-unassigned? 5 334 ())
(35 location-assigned? 5 346 ())
(36 make-undefined-location 5 358 ())
(37 primitive-cwcc 5 370 ())
(38 #f 37 15 ())
(39 invoke-closure 5 382 ())
(40 integer->char 5 394 ())
(41 char->integer 5 406 ())
(42 current-cont 5 417 ())
(43 closure-template 5 428 ())
(44 set-address-space-uid! 5 439 ())
(45 continuation-ref 5 450 ())
(46 closure? 5 461 ())
(47 binary-comparison-reduce2 5 482 ())
(48 cell-set! 5 493 ())
(49 port-pending-eof? 5 504 ())
(50 complex? 5 515 ())
(51 arithmetic-shift 5 526 ())
(52 set-port-pending-eof?! 5 537 ())
(53 external-uid 5 548 ())
(54 port-handler 5 559 ())
(55 signal-condition 5 570 ())
(56 integer? 5 581 ())
(57 session-data 5 592 ())
(58 set-external-uid! 5 603 ())
(59 make-closure 5 614 ())
(60 location-uid 5 625 ())
(61 template-ref 5 636 ())
(62 set-session-data! 5 647 ())
(63 make-rectangular 5 658 ())
(64 set-location-uid! 5 669 ())
(65 proxy-data-owner 5 680 ())
(66 channel? 5 691 ())
(67 open-channel 5 702 ())
(68 set-proxy-data-owner! 5 713 ())
(69 string=? 5 724 ())
(70 proxy-data-value 5 735 ())
(71 cell-ref 5 746 ())
(72 find-all 5 757 ())
(73 set-proxy-data-value! 5 768 ())
(74 extended-number? 5 779 ())
(75 reverse-list->string 5 790 ())
(76 port-locked? 5 801 ())
(77 denominator 5 812 ())
(78 call-with-values 5 823 ())
(79 weak-pointer-ref 5 834 ())
(80 find-all-symbols 5 845 ())
(81 set-port-locked?! 5 856 ())
(82 code-vector? 5 867 ())
(83 port-status 5 878 ())
(84 pop 5 889 ())
(85 exp 5 900 ())
(86 sin 5 911 ())
(87 set-port-status! 5 922 ())
(88 make-extended-number 5 933 ())
(89 channel-os-index 5 944 ())
(90 cos 5 955 ())
(91 collect 5 966 ())
(92 external-lookup 5 977 ())
(93 tan 5 988 ())
(94 message 5 999 ())
(95 log 5 1010 ())
(96 continuation-length 5 1021 ())
(97 find-all-records 5 1032 ())
(98 make-code-vector 5 1043 ())
(99 cdr 5 1054 ())
(100 bitwise-xor 5 1065 ())
(101 car 5 1076 ())
(102 string? 5 1087 ())
(103 symbol? 5 1098 ())
(104 set-cdr! 5 1109 ())
(105 bitwise-not 5 1120 ())
(106 vector? 5 1131 ())
(107 closure-env 5 1142 ())
(108 set-car! 5 1153 ())
(109 bitwise-ior 5 1164 ())
(110 untyped-indexed-set! 5 1175 ())
(111 port-buffer 5 1186 ())
(112 number? 5 1197 ())
(113 template-length 5 1208 ())
(114 string-hash 5 1219 ())
(115 proxy-data-local-ref 5 1230 ())
(116 primitive-catch 5 1241 ())
(117 set-port-buffer! 5 1252 ())
(118 make-string 5 1263 ())
(119 record? 5 1274 ())
(120 make-vector 5 1285 ())
(121 extended-number-set! 5 1296 ())
(122 write-image 5 1307 ())
(123 eq? 5 1318 ())
(124 bitwise-and 5 1329 ())
(125 location-id 5 1340 ())
(126 code-vector-set! 5 1351 ())
(127 set-location-id! 5 1362 ())
(128 make-record 5 1373 ())
(129 proxy-data? 5 1384 ())
(130 proxy-data-self 5 1395 ())
(131 set-proxy-data-self! 5 1406 ())
(132 vector 5 1417 ())
(133 intern 5 1428 ())
(134 make-proxy-data 5 1439 ())
(135 values 5 1450 ())
(136 unassigned 5 1461 ())
(137 string-set! 5 1472 ())
(138 copy-bytes! 5 1483 ())
(139 vector-set! 5 1494 ())
(140 extended-number-ref 5 1505 ())
(141 unspecific 5 1516 ())
(142 channel-maybe-write 5 1527 ())
(143 code-vector-ref 5 1538 ())
(144 schedule-interrupt 5 1549 ())
(145 proxy? 5 1560 ())
(146 record 5 1571 ())
(147 set-interrupt-handlers! 5 1582 ())
(148 eof-object? 5 1593 ())
(149 record-set! 5 1604 ())
(150 char->ascii 5 1615 ())
(151 ascii->char 5 1626 ())
(152 port-limit 5 1637 ())
(153 set-enabled-interrupts! 5 1648 ())
(154 external-value 5 1659 ())
(155 make-immutable! 5 1670 ())
(156 port-index 5 1681 ())
(157 set-port-limit! 5 1692 ())
(158 proxy-data 5 1703 ())
(159 channel-status 5 1714 ())
(160 current-thread 5 1725 ())
(161 symbol-uid 5 1736 ())
(162 set-port-index! 5 1747 ())
(163 string-ref 5 1758 ())
(164 set-exception-handlers! 5 1769 ())
(165 immutable? 5 1780 ())
(166 set-current-thread! 5 1791 ())
(167 set-symbol-uid! 5 1802 ())
(168 vector-ref 5 1813 ())
(169 exact? 5 1824 ())
(170 symbol->string 5 1835 ())
(171 write-char 5 1846 ())
(172 proxy-data-waiters 5 1857 ())
(173 make-polar 5 1868 ())
(174 set-proxy-data-waiters! 5 1879 ())
(175 record-ref 5 1890 ())
(176 address-space-decode-vector 5 1901 ())
(177 set-address-space-decode-vector! 5 1912 ())
(178 eof-object 5 1923 ())
(179 numerator 5 1934 ())
(180 proxy-data-uid 5 1945 ())
(181 channel-id 5 1956 ())
(182 extended-number-length 5 1967 ())
(183 set-proxy-data-uid! 5 1978 ())
(184 error 5 1989 ())
(185 exact->inexact 5 2000 ())
(186 inexact->exact 5 2011 ())
(187 checked-record-set! 5 2022 ())
(188 memory-status 5 2033 ())
(189 apply 5 2044 ())
(190 code-vector-length 5 2055 ())
(191 address-space-proxy-vector 5 2066 ())
(192 floor 5 2077 ())
(193 with-continuation 5 2088 ())
(194 >= 5 2099 ())
(195 magnitude 5 2110 ())
(196 set-address-space-proxy-vector! 5 2121 ())
(197 <= 5 2132 ())
(198 char=? 5 2143 ())
(199 address-space? 5 2154 ())
(200 char<? 5 2165 ())
(201 binary-reduce2 5 2176 ())
(202 binary-reduce1 5 2187 ())
(203 continuation? 5 2198 ())
(204 remainder 5 2209 ())
(205 proxy-data-reference-count 5 2220 ())
(206 vm-return 5 2231 ())
(207 false 5 2242 ())
(208 proxy-data-has-local-value? 5 2253 ())
(209 set-proxy-data-reference-count! 5 2264 ())
(210 angle 5 2275 ())
(211 port? 5 2286 ())
(212 make-address-space 5 2297 ())
(213 string-length 5 2308 ())
(214 external? 5 2319 ())
(215 address-space-data 5 2330 ())
(216 make-continuation 5 2341 ())
(217 vector-length 5 2352 ())
(218 port-lock 5 2363 ())
(219 template? 5 2374 ())
(220 rational? 5 2385 ())
(221 add-finalizer! 5 2396 ())
(222 checked-record-ref 5 2407 ())
(223 channel-maybe-read 5 2418 ())
(224 location? 5 2429 ())
(225 return-from-exception 5 2440 ())
(226 set-port-lock! 5 2451 ())
(227 make-port 5 2462 ())
(228 external-name 5 2473 ())
(229 pair? 5 2484 ())
(230 make-external 5 2495 ())
(231 port-data 5 2506 ())
(232 record-length 5 2517 ())
(233 external-call 5 2528 ())
(234 get-cont-from-heap 5 2539 ())
(235 real-part 5 2550 ())
(236 real? 5 2561 ())
(237 make-template 5 2572 ())
(238 set-port-data! 5 2583 ())
(239 imag-part 5 2594 ())
(240 make-location 5 2605 ())
(241 really-encode 5 2616 ())
(242 > 5 2627 ())
(243 = 5 2638 ())
(244 < 5 2649 ())
(245 char? 5 2660 ())
(246 really-make-proxy 5 2671 ())
(247 channel-abort 5 2682 ())
(248 close-channel 5 2693 ())
(249 quotient 5 2704 ())
(250 really-decode 5 2715 ())
(251 weak-pointer? 5 2726 ())
(252 / 5 2737 ())
(253 continuation-set! 5 2748 ())
(254 - 5 2759 ())
(255 peek-char 5 2770 ())
(256 + 5 2781 ())
(257 contents 5 2792 ())
(258 * 5 2803 ())
(259 sqrt 5 2814 ())
(260 make-cell 5 2825 ())
(261 read-char 5 2836 ())
(262 set-contents! 5 2847 ())
(263 push 5 2858 ())
(264 make-weak-pointer 5 2869 ())
(265 assq 5 2880 ())
(266 trap 5 2891 ())
(267 wait 5 2902 ())
(268 cons 5 2913 ())
(269 template-set! 5 2934 ())
(270 time 5 2945 ())
(271 location-defined? 5 2956 ())
(272 asin 5 2967 ())
(273 vm-extension 5 2978 ())
(274 address-space-uid 5 2989 ())
(275 acos 5 3000 ())
(276 set-location-defined?! 5 3011 ())
(277 atan 5 3022 ())
(278 scheme-level-1 #f #f ())
(279 rationalize 278 8 ())
(280 simplest-rational 278 20 ())
(281 #f 280 24 ())
(282 expt 278 32 ())
(283 raise-to-integer-power 278 44 ())
(284 #f 283 52 ())
(285 lcm 278 56 ())
(286 #f 285 9 ())
(287 gcd 278 68 ())
(288 #f 287 9 ())
(289 euclid 278 80 ())
(290 round 278 92 ())
(291 truncate 278 104 ())
(292 ceiling 278 116 ())
(293 modulo 278 128 ())
(294 fold->3 278 140 ())
(295 #f 294 43 ())
(296 #f 295 38 ())
(297 #f 295 60 ())
(298 fold->2 278 152 ())
(299 #f 298 40 ())
(300 #f 299 35 ())
(301 #f 299 56 ())
(302 fold 278 164 ())
(303 #f 302 27 ())
(304 insert 278 176 ())
(305 last 278 188 ())
(306 sublist 278 200 ())
(307 #f 306 71 ())
(308 every 278 212 ())
(309 pos 278 224 ())
(310 #f 309 13 ())
(311 #f 310 41 ())
(312 filter 278 236 ())
(313 #f 312 13 ())
(314 force 278 248 ())
(315 make-promise 278 260 ())
(316 #f 315 39 ())
(317 for-each 278 272 ())
(318 for-each2+ 278 284 ())
(319 #f 318 37 ())
(320 for-each1 278 296 ())
(321 #f 320 34 ())
(322 map 278 308 ())
(323 map2+ 278 320 ())
(324 any 278 332 ())
(325 map1 278 344 ())
(326 vector-fill! 278 356 ())
(327 #f 326 39 ())
(328 list->vector 278 368 ())
(329 #f 328 51 ())
(330 vector->list 278 380 ())
(331 #f 330 27 ())
(332 string-ci>=? 278 392 ())
(333 string-ci<=? 278 404 ())
(334 string-ci>? 278 416 ())
(335 string>=? 278 428 ())
(336 string<=? 278 440 ())
(337 string>? 278 452 ())
(338 make-string<? 278 464 ())
(339 #f 338 14 ())
(340 #f 339 77 ())
(341 make-string=? 278 476 ())
(342 #f 341 13 ())
(343 #f 342 59 ())
(344 string-fill! 278 488 ())
(345 #f 344 38 ())
(346 unspecific 278 500 ())
(347 string->list 278 512 ())
(348 #f 347 34 ())
(349 string-append 278 524 ())
(350 #f 349 13 ())
(351 #f 349 77 ())
(352 #f 351 66 ())
(353 substring 278 536 ())
(354 #f 353 46 ())
(355 string 278 548 ())
(356 list->string 278 560 ())
(357 #f 356 52 ())
(358 char-ci-compare 278 572 ())
(359 #f 358 13 ())
(360 char-downcase 278 584 ())
(361 char-upcase 278 596 ())
(362 make-character-map 278 608 ())
(363 #f 362 46 ())
(364 char-alphabetic? 278 620 ())
(365 char-numeric? 278 632 ())
(366 char-upper-case? 278 644 ())
(367 char-lower-case? 278 656 ())
(368 char-whitespace? 278 668 ())
(369 char<=? 278 680 ())
(370 char>=? 278 692 ())
(371 char>? 278 704 ())
(372 list? 278 716 ())
(373 #f 372 34 ())
(374 ass 278 728 ())
(375 #f 374 13 ())
(376 #f 375 37 ())
(377 mem 278 740 ())
(378 #f 377 13 ())
(379 #f 378 37 ())
(380 list-ref 278 752 ())
(381 list-tail 278 764 ())
(382 reverse 278 776 ())
(383 append-reverse 278 788 ())
(384 append 278 800 ())
(385 #f 384 47 ())
(386 reduce 278 812 ())
(387 length 278 824 ())
(388 real-length 278 836 ())
(389 list 278 848 ())
(390 cddddr 278 860 ())
(391 cdddar 278 872 ())
(392 cddadr 278 884 ())
(393 cddaar 278 896 ())
(394 cdaddr 278 908 ())
(395 cdadar 278 920 ())
(396 cdaadr 278 932 ())
(397 cdaaar 278 944 ())
(398 cadddr 278 956 ())
(399 caddar 278 968 ())
(400 cadadr 278 980 ())
(401 cadaar 278 992 ())
(402 caaddr 278 1004 ())
(403 caadar 278 1016 ())
(404 caaadr 278 1028 ())
(405 caaaar 278 1040 ())
(406 cdddr 278 1052 ())
(407 cddar 278 1064 ())
(408 cdadr 278 1076 ())
(409 cdaar 278 1088 ())
(410 caddr 278 1100 ())
(411 cadar 278 1112 ())
(412 caadr 278 1124 ())
(413 caaar 278 1136 ())
(414 cddr 278 1148 ())
(415 cdar 278 1160 ())
(416 cadr 278 1172 ())
(417 caar 278 1184 ())
(418 odd? 278 1196 ())
(419 even? 278 1208 ())
(420 negative? 278 1220 ())
(421 positive? 278 1232 ())
(422 zero? 278 1244 ())
(423 abs 278 1256 ())
(424 min 278 1268 ())
(425 max 278 1280 ())
(426 max-or-min 278 1292 ())
(427 #f 426 50 ())
(428 inexact? 278 1304 ())
(429 null? 278 1316 ())
(430 equal? 278 1328 ())
(431 #f 430 176 ())
(432 eqv? 278 1340 ())
(433 boolean? 278 1352 ())
(434 not 278 1364 ())
(435 #f 278 1497 ())
(436 #f 278 1519 ())
(437 records #f #f ())
(438 disclose-record 437 26 ())
(439 define-record-discloser 437 38 ())
(440 record-predicate 437 50 ())
(441 #f 440 13 ())
(442 record-modifier 437 62 ())
(443 #f 442 73 ())
(444 record-accessor 437 74 ())
(445 #f 444 73 ())
(446 record-constructor 437 86 ())
(447 #f 446 17 ())
(448 #f 446 78 ())
(449 #f 448 67 ())
(450 record-field-index 437 98 ())
(451 #f 450 49 ())
(452 record-type-discloser 437 110 ())
(453 record-type-field-names 437 122 ())
(454 record-type-name 437 134 ())
(455 record-type-uid 437 146 ())
(456 record-type? 437 158 ())
(457 make-record-type 437 170 ())
(458 default-record-discloser 437 182 ())
(459 record-type 437 194 ())
(460 #f 437 259 ())
(461 define-record-types #f #f ())
(462 methods #f #f ())
(463 proc->discloser 462 18 ())
(464 #f 463 13 ())
(465 #f 464 7 ())
(466 compare-to 462 30 ())
(467 #f 466 13 ())
(468 apply-generic 462 42 ())
(469 make-method-table 462 54 ())
(470 #f 469 63 ())
(471 #f 469 96 ())
(472 make-cell-for-generic 462 66 ())
(473 #f 472 24 ())
(474 #f 472 36 ())
(475 #f 472 48 ())
(476 set-final-method! 462 78 ())
(477 add-to-method-table! 462 90 ())
(478 methods->perform 462 102 ())
(479 #f 478 31 ())
(480 argument-sequence-predicate 462 114 ())
(481 #f 480 43 ())
(482 check-next 462 126 ())
(483 #f 482 14 ())
(484 check-for-next 462 138 ())
(485 #f 484 13 ())
(486 one-action 462 150 ())
(487 #f 486 15 ())
(488 #f 487 30 ())
(489 last-action 462 162 ())
(490 #f 489 13 ())
(491 method-table? 462 174 ())
(492 insert-method 462 186 ())
(493 #f 492 34 ())
(494 same-applicability? 462 198 ())
(495 every2 462 210 ())
(496 more-specific? 462 222 ())
(497 #f 496 161 ())
(498 more-specific-type? 462 234 ())
(499 empty-method-list 462 246 ())
(500 make-method-info 462 258 ())
(501 method-info? 462 270 ())
(502 value? 462 282 ())
(503 %same-type? 462 294 ())
(504 %type-predicate 462 306 ())
(505 make-simple-type 462 318 ())
(506 compute-priority 462 330 ())
(507 %type-priority 462 342 ())
(508 simple-type? 462 354 ())
(509 really-make-simple-type 462 390 ())
(510 simple-type-id 462 402 ())
(511 simple-type-priority 462 414 ())
(512 simple-type-predicate 462 426 ())
(513 simple-type-superiors 462 438 ())
(514 #f 462 454 ())
(515 #f 462 590 ())
(516 #f 462 820 ())
(517 record-type-priority 462 1348 ())
(518 really-make-method-info 462 1385 ())
(519 method-info-proc 462 1397 ())
(520 method-info-n-ary? 462 1409 ())
(521 method-info-types 462 1421 ())
(522 #f 462 1437 ())
(523 really-make-method-table 462 1477 ())
(524 method-table-id 462 1489 ())
(525 method-table-set-perform! 462 1501 ())
(526 method-table-get-perform 462 1513 ())
(527 make-generic 462 1525 ())
(528 method-table-prototype 462 1537 ())
(529 method-table-methods 462 1549 ())
(530 set-method-table-methods! 462 1561 ())
(531 #f 462 1577 ())
(532 add-method! 462 1646 ())
(533 add-method! 462 1741 ())
(534 type-predicate 462 1829 ())
(535 &type-predicate 462 1924 ())
(536 &type-predicate 462 1998 ())
(537 type-priority 462 2076 ())
(538 &type-priority 462 2171 ())
(539 &type-priority 462 2245 ())
(540 type-superiors 462 2323 ())
(541 &type-superiors 462 2418 ())
(542 &type-superiors 462 2492 ())
(543 same-type? 462 2574 ())
(544 &same-type? 462 2673 ())
(545 &same-type? 462 2751 ())
(546 singleton 462 2804 ())
(547 singleton-value 462 2816 ())
(548 #f 462 2832 ())
(549 &type-predicate 462 2893 ())
(550 &type-priority 462 2967 ())
(551 &same-type? 462 3045 ())
(552 disclose 462 3123 ())
(553 &disclose 462 3218 ())
(554 &disclose 462 3292 ())
(555 &add-method! 462 3373 ())
(556 number-i/o #f #f ())
(557 &number->string 556 92 ())
(558 &number->string 556 170 ())
(559 &number->string 556 248 ())
(560 #f 556 313 ())
(561 #f 560 71 ())
(562 #f 556 331 ())
(563 string->number 556 377 ())
(564 #f 563 258 ())
(565 radix-is 564 68 ())
(566 exactness-is 564 88 ())
(567 #f 564 347 ())
(568 &really-string->number 556 481 ())
(569 #f 556 528 ())
(570 #f 569 47 ())
(571 &really-string->number 556 603 ())
(572 set-exactness 556 632 ())
(573 #f 556 685 ())
(574 #f 556 702 ())
(575 #f 574 64 ())
(576 #f 556 720 ())
(577 fluids #f #f ())
(578 fluid-lookup 577 8 ())
(579 let-fluids 577 20 ())
(580 #f 579 43 ())
(581 let-fluid 577 32 ())
(582 set-fluid! 577 44 ())
(583 set-fluid-top-level-value! 577 56 ())
(584 fluid-top-level-value 577 68 ())
(585 fluid 577 80 ())
(586 real-fluid-lookup 577 92 ())
(587 #f 586 34 ())
(588 make-fluid 577 104 ())
(589 fluid? 577 116 ())
(590 with-dynamic-env 577 128 ())
(591 #f 590 67 ())
(592 initialize-dynamic-state! 577 140 ())
(593 empty-dynamic-env 577 152 ())
(594 set-dynamic-point! 577 164 ())
(595 get-dynamic-point 577 176 ())
(596 set-dynamic-env! 577 188 ())
(597 get-dynamic-env 577 200 ())
(598 make-thread 577 236 ())
(599 thread-dynamic-point 577 248 ())
(600 thread-dynamic-env 577 260 ())
(601 really-make-fluid 577 296 ())
(602 really-fluid-top-level-value 577 308 ())
(603 really-set-fluid-top-level-value! 577 320 ())
(604 enumerated #f #f ())
(605 lookup-enumerand 604 8 ())
(606 #f 605 47 ())
(607 architecture #f #f ())
(608 next-protocol 607 162 ())
(609 queues #f #f ())
(610 queue-length 609 18 ())
(611 queue->list 609 30 ())
(612 #f 611 7 ())
(613 delete-from-queue! 609 42 ())
(614 #f 613 16 ())
(615 delete-from-queue-if! 609 54 ())
(616 #f 615 147 ())
(617 on-queue? 609 66 ())
(618 dequeue! 609 78 ())
(619 queue-front 609 90 ())
(620 enqueue! 609 102 ())
(621 queue-empty? 609 114 ())
(622 make-queue 609 126 ())
(623 queue? 609 138 ())
(624 really-make-queue 609 174 ())
(625 queue-tail 609 186 ())
(626 set-queue-tail! 609 198 ())
(627 queue-head 609 210 ())
(628 set-queue-head! 609 222 ())
(629 queue-uid 609 234 ())
(630 conditions #f #f ())
(631 condition-supertypes 630 18 ())
(632 define-condition-type 630 30 ())
(633 #f 632 18 ())
(634 condition-predicate 630 42 ())
(635 #f 634 13 ())
(636 condition? 630 54 ())
(637 make-exception 630 268 ())
(638 session-data #f #f ())
(639 initialize-session-data! 638 18 ())
(640 session-data-set! 638 30 ())
(641 session-data-ref 638 42 ())
(642 make-session-data-slot! 638 54 ())
(643 interrupts #f #f ())
(644 call-before-heap-overflow! 643 28 ())
(645 call-after-gc! 643 40 ())
(646 enable-interrupts! 643 52 ())
(647 disable-interrupts! 643 64 ())
(648 with-interrupts-allowed 643 76 ())
(649 with-interrupts-inhibited 643 88 ())
(650 with-interrupts 643 100 ())
(651 #f 650 20 ())
(652 set-interrupt-handler! 643 112 ())
(653 initialize-interrupts! 643 124 ())
(654 #f 653 14 ())
(655 #f 654 48 ())
(656 #f 655 38 ())
(657 #f 654 102 ())
(658 #f 657 12 ())
(659 post-gc-handler 643 136 ())
(660 #f 659 13 ())
(661 #f 660 49 ())
(662 #f 660 72 ())
(663 #f 662 8 ())
(664 #f 662 23 ())
(665 enabled-interrupts 643 148 ())
(666 #f 643 224 ())
(667 wind #f #f ())
(668 call-with-current-continuation 667 8 ())
(669 #f 668 13 ())
(670 continuation->procedure 667 20 ())
(671 #f 670 15 ())
(672 #f 671 67 ())
(673 travel-to-point! 667 32 ())
(674 dynamic-wind 667 44 ())
(675 make-point 667 80 ())
(676 point-parent 667 92 ())
(677 point-dynamic-env 667 104 ())
(678 point-out 667 116 ())
(679 point-in 667 128 ())
(680 point-depth 667 140 ())
(681 templates #f #f ())
(682 set-template-id! 681 18 ())
(683 set-template-info! 681 30 ())
(684 set-template-code! 681 42 ())
(685 template-id 681 54 ())
(686 template-info 681 66 ())
(687 template-code 681 78 ())
(688 more-types #f #f ())
(689 &disclose 688 319 ())
(690 &disclose 688 431 ())
(691 &disclose 688 615 ())
(692 continuations #f #f ())
(693 continuation-parent 692 18 ())
(694 #f 693 121 ())
(695 continuation-arg-count 692 30 ())
(696 continuation-arg 692 42 ())
(697 continuation-template 692 54 ())
(698 continuation-pc 692 66 ())
(699 exception-continuation? 692 78 ())
(700 exception-continuation-exception 692 90 ())
(701 exception-continuation-template 692 102 ())
(702 exception-continuation-pc 692 114 ())
(703 continuation-env 692 126 ())
(704 real-continuation-template 692 138 ())
(705 real-continuation-pc 692 150 ())
(706 continuation-cont 692 162 ())
(707 &disclose 692 268 ())
(708 exceptions #f #f ())
(709 define-exception-handler 708 8 ())
(710 signal-exception 708 20 ())
(711 #f 708 52 ())
(712 extend-opcode! 708 68 ())
(713 except 712 13 ())
(714 #f 712 46 ())
(715 really-signal-condition 708 80 ())
(716 #f 715 45 ())
(717 #f 716 19 ())
(718 with-handler 708 92 ())
(719 initialize-exceptions! 708 122 ())
(720 #f 719 15 ())
(721 last-resort-condition-handler 708 134 ())
(722 #f 721 37 ())
(723 #f 722 36 ())
(724 report-utter-lossage 708 146 ())
(725 #f 724 193 ())
(726 continuation-preview 708 158 ())
(727 ignore-errors 708 170 ())
(728 #f 727 13 ())
(729 #f 728 13 ())
(730 report-errors-as-warnings 708 182 ())
(731 #f 730 19 ())
(732 &disclose 708 239 ())
(733 &disclose 708 309 ())
(734 threads #f #f ())
(735 wake-some-threads 734 48 ())
(736 #f 735 62 ())
(737 sleep 734 60 ())
(738 #f 737 72 ())
(739 insert 734 72 ())
(740 terminate-current-thread 734 84 ())
(741 with-threads 734 96 ())
(742 #f 741 17 ())
(743 #f 742 4 ())
(744 #f 742 16 ())
(745 #f 742 22 ())
(746 start-multitasking 734 108 ())
(747 #f 746 13 ())
(748 #f 747 13 ())
(749 #f 747 28 ())
(750 #f 749 15 ())
(751 #f 750 13 ())
(752 #f 750 26 ())
(753 real-time 734 120 ())
(754 cancel-timer-interrupt! 734 132 ())
(755 make-ready 734 144 ())
(756 spawn-on-root 734 156 ())
(757 root-scheduler 734 168 ())
(758 spawn 734 180 ())
(759 spawn-on-scheduler 734 192 ())
(760 show-running 734 204 ())
(761 #f 760 29 ())
(762 schedule-event 734 216 ())
(763 schedule-wakeup 734 228 ())
(764 get-next-event! 734 240 ())
(765 kill-thread! 734 252 ())
(766 #f 765 10 ())
(767 upcall 734 264 ())
(768 propogate-upcall 734 276 ())
(769 #f 768 70 ())
(770 interrupt-thread 734 288 ())
(771 running? 734 300 ())
(772 #f 771 41 ())
(773 relinquish-timeslice 734 312 ())
(774 block 734 324 ())
(775 waiting? 734 336 ())
(776 wait 734 348 ())
(777 exit 734 360 ())
(778 handle-timer-interrupt 734 372 ())
(779 run 734 384 ())
(780 find-and-run-next-thread 734 396 ())
(781 #f 780 48 ())
(782 debit-thread-times-and-run! 734 408 ())
(783 #f 782 57 ())
(784 run-next-thread 734 420 ())
(785 schedule-interrupt! 734 432 ())
(786 min 734 444 ())
(787 event-pending? 734 456 ())
(788 remove-thread-from-queue! 734 468 ())
(789 dequeue-thread! 734 480 ())
(790 enqueue-thread! 734 492 ())
(791 add-event! 734 504 ())
(792 thread-uid->thread 734 516 ())
(793 #f 792 46 ())
(794 all-threads 734 528 ())
(795 make-thread 734 540 ())
(796 thread-top-level 734 552 ())
(797 #f 796 13 ())
(798 #f 797 4 ())
(799 suspend 734 564 ())
(800 suspend-to 734 576 ())
(801 switch-to-thread 734 588 ())
(802 #f 801 14 ())
(803 run-thread 734 600 ())
(804 #f 803 52 ())
(805 debit-down! 734 612 ())
(806 #f 805 44 ())
(807 interrupt-timer-time 734 624 ())
(808 thunk->continuation 734 636 ())
(809 compose-continuation 734 648 ())
(810 #f 809 14 ())
(811 #f 810 37 ())
(812 #f 811 17 ())
(813 #f 812 10 ())
(814 #f 813 16 ())
(815 thread? 734 660 ())
(816 really-make-thread 734 696 ())
(817 thread-name 734 708 ())
(818 thread-uid 734 720 ())
(819 thread-current-task 734 732 ())
(820 set-thread-current-task! 734 744 ())
(821 thread-events 734 756 ())
(822 set-thread-events! 734 768 ())
(823 thread-data 734 780 ())
(824 set-thread-data! 734 792 ())
(825 thread-scheduler 734 804 ())
(826 set-thread-scheduler! 734 816 ())
(827 thread-time 734 828 ())
(828 set-thread-time! 734 840 ())
(829 thread-arguments 734 852 ())
(830 set-thread-arguments! 734 864 ())
(831 thread-queue 734 876 ())
(832 set-thread-queue! 734 888 ())
(833 thread-continuation 734 900 ())
(834 set-thread-continuation! 734 912 ())
(835 thread-dynamic-point 734 924 ())
(836 set-thread-dynamic-point! 734 936 ())
(837 thread-dynamic-env 734 948 ())
(838 #f 734 964 ())
(839 locks #f #f ())
(840 release-lock 839 18 ())
(841 #f 840 17 ())
(842 maybe-obtain-lock 839 30 ())
(843 #f 842 17 ())
(844 obtain-lock 839 42 ())
(845 #f 844 17 ())
(846 make-lock 839 54 ())
(847 lock? 839 66 ())
(848 really-make-lock 839 102 ())
(849 lock-uid 839 114 ())
(850 lock-queue 839 126 ())
(851 lock-owner-uid 839 138 ())
(852 set-lock-owner-uid! 839 150 ())
(853 i/o #f #f ())
(854 newline 853 38 ())
(855 output-port-option 853 50 ())
(856 silently 853 62 ())
(857 call-with-current-noise-port 853 74 ())
(858 call-with-current-output-port 853 86 ())
(859 call-with-current-input-port 853 98 ())
(860 initialize-i/o 853 110 ())
(861 with-current-ports 853 122 ())
(862 current-noise-port 853 134 ())
(863 current-error-port 853 146 ())
(864 current-output-port 853 158 ())
(865 output-port-forcers 853 170 ())
(866 #f 865 46 ())
(867 make-forcing-thunk 853 182 ())
(868 #f 867 13 ())
(869 #f 868 14 ())
(870 #f 868 60 ())
(871 periodically-force-output! 853 194 ())
(872 initialize-output-port-list! 853 206 ())
(873 make-null-output-port 853 218 ())
(874 make-unbuffered-output-port 853 230 ())
(875 make-output-port 853 242 ())
(876 make-input-port 853 254 ())
(877 okay-buffer? 853 266 ())
(878 force-output 853 278 ())
(879 write-string 853 290 ())
(880 write-block 853 302 ())
(881 write-buffered-block 853 314 ())
(882 write-unbuffered-block 853 326 ())
(883 #f 882 63 ())
(884 read-block 853 338 ())
(885 really-read-block 853 350 ())
(886 buffer-length 853 362 ())
(887 read-more 853 374 ())
(888 okay-limits? 853 386 ())
(889 real-char-ready? 853 398 ())
(890 char-ready? 853 410 ())
(891 input-port-option 853 422 ())
(892 current-input-port 853 434 ())
(893 open-port? 853 446 ())
(894 close-output-port 853 458 ())
(895 make-output-port-closed! 853 470 ())
(896 really-force-output 853 482 ())
(897 open-output-port? 853 494 ())
(898 close-input-port 853 506 ())
(899 make-input-port-closed! 853 518 ())
(900 open-input-port? 853 530 ())
(901 initialize-i/o-handlers! 853 542 ())
(902 write-char-handler 853 554 ())
(903 empty-port-buffer! 853 566 ())
(904 two-arg-proc->handler 853 578 ())
(905 #f 904 14 ())
(906 read-char-handler 853 590 ())
(907 #f 906 13 ())
(908 fill-port-buffer! 853 602 ())
(909 one-arg-proc->handler 853 614 ())
(910 #f 909 14 ())
(911 release-port-lock 853 626 ())
(912 maybe-obtain-port-lock 853 638 ())
(913 obtain-port-lock 853 650 ())
(914 disclose-port 853 662 ())
(915 port-handler? 853 674 ())
(916 make-port-handler 853 710 ())
(917 port-handler-buffer-proc 853 722 ())
(918 port-handler-close 853 734 ())
(919 port-handler-discloser 853 746 ())
(920 &disclose 853 803 ())
(921 &disclose 853 877 ())
(922 #f 853 1045 ())
(923 #f 853 1051 ())
(924 #f 853 1057 ())
(925 writing #f #f ())
(926 write 925 8 ())
(927 #f 926 52 ())
(928 recurring-write 925 20 ())
(929 write-boolean 925 32 ())
(930 write-number 925 44 ())
(931 write-char-literal 925 56 ())
(932 character-name 925 68 ())
(933 write-string-literal 925 80 ())
(934 #f 933 46 ())
(935 write-list 925 92 ())
(936 #f 935 109 ())
(937 quotation? 925 104 ())
(938 write-vector 925 116 ())
(939 #f 938 97 ())
(940 write-other 925 128 ())
(941 #f 940 81 ())
(942 display-type-name 925 140 ())
(943 #f 942 112 ())
(944 display 925 152 ())
(945 #f 944 52 ())
(946 reading #f #f ())
(947 parse-token 946 28 ())
(948 sub-read-token 946 40 ())
(949 #f 948 58 ())
(950 preferred-case 946 52 ())
(951 define-sharp-macro 946 64 ())
(952 gobble-line 946 76 ())
(953 #f 952 31 ())
(954 sub-read-list 946 88 ())
(955 #f 954 72 ())
(956 set-standard-read-macro! 946 100 ())
(957 set-standard-syntax! 946 112 ())
(958 make-reader-token 946 124 ())
(959 sub-read-carefully 946 136 ())
(960 read 946 148 ())
(961 #f 960 49 ())
(962 sub-read 946 160 ())
(963 reading-error 946 172 ())
(964 reader-token? 946 184 ())
(965 #f 946 254 ())
(966 sub-read-whitespace 946 284 ())
(967 #f 946 299 ())
(968 sub-read-constituent 946 319 ())
(969 #f 946 334 ())
(970 #f 946 408 ())
(971 #f 946 432 ())
(972 #f 946 456 ())
(973 #f 946 480 ())
(974 #f 946 504 ())
(975 #f 974 41 ())
(976 #f 946 528 ())
(977 #f 946 550 ())
(978 #f 946 570 ())
(979 #f 946 590 ())
(980 #f 946 610 ())
(981 #f 946 630 ())
(982 number-sharp-macro 946 646 ())
(983 #f 946 661 ())
(984 #f 946 744 ())
(985 channel-i/o #f #f ())
(986 #f 985 12 ())
(987 #f 985 18 ())
(988 #f 985 24 ())
(989 input-channel->port 985 39 ())
(990 #f 985 55 ())
(991 #f 985 61 ())
(992 #f 985 67 ())
(993 make-unbuffered-output-channel-handler 985 82 ())
(994 #f 993 20 ())
(995 #f 993 26 ())
(996 #f 993 38 ())
(997 output-channel->port 985 94 ())
(998 maybe-force-output 985 106 ())
(999 #f 998 35 ())
(1000 maybe-open-file 985 118 ())
(1001 open-input-file 985 130 ())
(1002 open-output-file 985 142 ())
(1003 call-with-input-file 985 154 ())
(1004 #f 1003 44 ())
(1005 call-with-output-file 985 166 ())
(1006 #f 1005 44 ())
(1007 with-input-from-file 985 178 ())
(1008 #f 1007 16 ())
(1009 with-output-to-file 985 190 ())
(1010 #f 1009 16 ())
(1011 steal-channel-port! 985 202 ())
(1012 really-steal-channel-port! 985 214 ())
(1013 #f 1012 162 ())
(1014 initialize-channel-i/o! 985 226 ())
(1015 i/o-completion-handler 985 238 ())
(1016 waiting-for-i/o? 985 250 ())
(1017 wait-for-channel 985 262 ())
(1018 steal-channel! 985 274 ())
(1019 #f 985 290 ())
(1020 #f 985 310 ())
(1021 i/o-wait-count 985 346 ())
(1022 increment-i/o-wait-count! 985 358 ())
(1023 decrement-i/o-wait-count! 985 370 ())
(1024 i/o-wait-queue 985 400 ())
(1025 make-i/o-wait-queues 985 412 ())
(1026 #f 1025 26 ())
(1027 #f 1026 94 ())
(1028 #f 1026 138 ())
(1029 scheme-level-2 #f #f ())
(1030 features #f #f ())
(1031 tables #f #f ())
(1032 symbol-hash 1031 28 ())
(1033 default-table-hash-function 1031 40 ())
(1034 table->entry-list 1031 52 ())
(1035 #f 1034 33 ())
(1036 make-table-immutable! 1031 64 ())
(1037 table-walk 1031 76 ())
(1038 #f 1037 13 ())
(1039 really-table-walk 1031 88 ())
(1040 #f 1039 82 ())
(1041 alist-walk 1031 100 ())
(1042 #f 1041 27 ())
(1043 make-table-maker 1031 112 ())
(1044 #f 1043 86 ())
(1045 make-assoc 1031 124 ())
(1046 #f 1045 27 ())
(1047 #f 1046 37 ())
(1048 make-linear-table-ref 1031 136 ())
(1049 #f 1048 13 ())
(1050 make->hash-table 1031 148 ())
(1051 #f 1050 49 ())
(1052 make-hash-table-set! 1031 160 ())
(1053 #f 1052 14 ())
(1054 expand-hash-table! 1031 172 ())
(1055 #f 1054 71 ())
(1056 make-hash-table-ref 1031 184 ())
(1057 #f 1056 14 ())
(1058 table-enter-alist! 1031 196 ())
(1059 #f 1058 45 ())
(1060 table-expand-table! 1031 208 ())
(1061 make-linear-table-set! 1031 220 ())
(1062 #f 1061 14 ())
(1063 new-entry 1031 232 ())
(1064 delete-entry! 1031 244 ())
(1065 #f 1064 56 ())
(1066 next-table-size 1031 256 ())
(1067 table-set! 1031 268 ())
(1068 table-ref 1031 280 ())
(1069 table? 1031 292 ())
(1070 really-make-table 1031 328 ())
(1071 table-set!-procedure 1031 340 ())
(1072 set-table-set!-procedure! 1031 352 ())
(1073 table-ref-procedure 1031 364 ())
(1074 set-table-ref-procedure! 1031 376 ())
(1075 table-data 1031 388 ())
(1076 set-table-data! 1031 400 ())
(1077 table-size 1031 412 ())
(1078 set-table-size! 1031 424 ())
(1079 make-table 1031 497 ())
(1080 weak #f #f ())
(1081 make-population 1080 8 ())
(1082 add-to-population! 1080 20 ())
(1083 weak-memq 1080 32 ())
(1084 population-reduce 1080 44 ())
(1085 #f 1084 27 ())
(1086 population->list 1080 56 ())
(1087 walk-population 1080 68 ())
(1088 #f 1087 13 ())
(1089 meta-types #f #f ())
(1090 compatible-types? 1089 38 ())
(1091 variable-type? 1089 50 ())
(1092 variable-type 1089 62 ())
(1093 procedure-type-argument-types 1089 74 ())
(1094 #f 1093 44 ())
(1095 procedure-type-arity 1089 86 ())
(1096 #f 1095 27 ())
(1097 fixed-arity-procedure-type? 1089 98 ())
(1098 #f 1097 56 ())
(1099 make-some-values-type 1089 110 ())
(1100 type->sexp 1089 122 ())
(1101 #f 1100 148 ())
(1102 rail-type->sexp 1089 134 ())
(1103 #f 1102 38 ())
(1104 atomic-type->sexp 1089 146 ())
(1105 disjoin-type 1089 158 ())
(1106 #f 1105 278 ())
(1107 disjoin-rest 1089 170 ())
(1108 sexp->type 1089 182 ())
(1109 #f 1108 292 ())
(1110 #f 1108 363 ())
(1111 sexp->values-type 1089 194 ())
(1112 procedure-type 1089 206 ())
(1113 join-type 1089 218 ())
(1114 join-rail 1089 230 ())
(1115 join-procedure 1089 242 ())
(1116 procedure-type? 1089 254 ())
(1117 meet? 1089 266 ())
(1118 meet-procedure? 1089 278 ())
(1119 subtype? 1089 290 ())
(1120 meet-type 1089 302 ())
(1121 meet-rail 1089 314 ())
(1122 meet-procedure 1089 326 ())
(1123 procedure-type-codomain 1089 338 ())
(1124 procedure-type-domain 1089 350 ())
(1125 make-procedure-type 1089 362 ())
(1126 restrictive? 1089 374 ())
(1127 other-type-info 1089 386 ())
(1128 value-type? 1089 398 ())
(1129 tail-type 1089 410 ())
(1130 head-type-really 1089 422 ())
(1131 make-rest-type 1089 434 ())
(1132 make-optional-type 1089 446 ())
(1133 rail-type 1089 458 ())
(1134 optional-type? 1089 470 ())
(1135 head-type 1089 482 ())
(1136 same-type? 1089 494 ())
(1137 rest-type? 1089 506 ())
(1138 empty-rail-type? 1089 518 ())
(1139 named-atomic-type 1089 530 ())
(1140 new-atomic-type 1089 542 ())
(1141 bottom-type? 1089 554 ())
(1142 mask->type 1089 566 ())
(1143 new-type-bit 1089 578 ())
(1144 name->type 1089 590 ())
(1145 make-other-type 1089 602 ())
(1146 set-type-name! 1089 614 ())
(1147 make-type 1089 626 ())
(1148 meta-type? 1089 638 ())
(1149 really-make-type 1089 674 ())
(1150 type-info 1089 686 ())
(1151 type-more 1089 698 ())
(1152 type-mask 1089 710 ())
(1153 #f 1089 726 ())
(1154 #f 1089 1122 ())
(1155 interfaces #f #f ())
(1156 note-interface-name! 1155 8 ())
(1157 make-compound-interface 1155 20 ())
(1158 #f 1157 19 ())
(1159 #f 1158 34 ())
(1160 #f 1157 31 ())
(1161 #f 1160 13 ())
(1162 #f 1157 59 ())
(1163 make-simple-interface 1155 32 ())
(1164 #f 1163 30 ())
(1165 #f 1164 76 ())
(1166 really-make-simple-interface 1155 44 ())
(1167 #f 1166 13 ())
(1168 #f 1166 25 ())
(1169 make-interface 1155 56 ())
(1170 note-reference-to-interface! 1155 68 ())
(1171 for-each-declaration 1155 80 ())
(1172 interface-ref 1155 92 ())
(1173 interface? 1155 104 ())
(1174 really-make-interface 1155 140 ())
(1175 interface-name 1155 152 ())
(1176 set-interface-name! 1155 164 ())
(1177 interface-clients 1155 176 ())
(1178 walk-method 1155 188 ())
(1179 ref-method 1155 200 ())
(1180 #f 1155 212 ())
(1181 bindings #f #f ())
(1182 maybe-fix-place! 1181 8 ())
(1183 follow-forwarding-pointers 1181 20 ())
(1184 same-denotation? 1181 32 ())
(1185 forget-integration 1181 44 ())
(1186 impose-type 1181 56 ())
(1187 clobber-binding! 1181 68 ())
(1188 add-path 1181 80 ())
(1189 make-binding 1181 92 ())
(1190 set-binding-place! 1181 104 ())
(1191 binding-path 1181 116 ())
(1192 binding-static 1181 128 ())
(1193 binding-place 1181 140 ())
(1194 binding-type 1181 152 ())
(1195 names #f #f ())
(1196 apply-inline-transform 1195 18 ())
(1197 maybe-apply-macro-transform 1195 30 ())
(1198 bind-aliases 1195 42 ())
(1199 #f 1198 47 ())
(1200 make-name-generator 1195 54 ())
(1201 #f 1200 34 ())
(1202 make-keyword-comparator 1195 66 ())
(1203 #f 1202 13 ())
(1204 name->source-name 1195 78 ())
(1205 make-transform 1195 90 ())
(1206 name->qualified 1195 102 ())
(1207 qualify-parent 1195 114 ())
(1208 #f 1207 34 ())
(1209 transform? 1195 126 ())
(1210 lookup 1195 138 ())
(1211 qualified-symbol 1195 150 ())
(1212 qualified-parent-name 1195 162 ())
(1213 qualified? 1195 174 ())
(1214 make-qualified 1195 186 ())
(1215 desyntaxify 1195 198 ())
(1216 #f 1215 286 ())
(1217 name-hash 1195 210 ())
(1218 name->symbol 1195 222 ())
(1219 generated-uid 1195 234 ())
(1220 generate-name 1195 246 ())
(1221 name? 1195 258 ())
(1222 generated? 1195 270 ())
(1223 make-generated 1195 306 ())
(1224 generated-parent-name 1195 318 ())
(1225 generated-env 1195 330 ())
(1226 generated-token 1195 342 ())
(1227 generated-symbol 1195 354 ())
(1228 #f 1195 370 ())
(1229 really-make-transform 1195 434 ())
(1230 transform-id 1195 446 ())
(1231 transform-source 1195 458 ())
(1232 transform-aux-names 1195 470 ())
(1233 transform-type 1195 482 ())
(1234 transform-env 1195 494 ())
(1235 transform-procedure 1195 506 ())
(1236 #f 1195 518 ())
(1237 compiler-envs #f #f ())
(1238 source-file-name 1237 8 ())
(1239 bind-source-file-name 1237 20 ())
(1240 extract-package-from-environment 1237 32 ())
(1241 environment-define! 1237 44 ())
(1242 environment-macro-eval 1237 56 ())
(1243 make-compiler-env 1237 68 ())
(1244 #f 1243 16 ())
(1245 bindrec 1237 80 ())
(1246 #f 1245 36 ())
(1247 bind 1237 92 ())
(1248 bind1 1237 104 ())
(1249 #f 1248 15 ())
(1250 lookup 1237 116 ())
(1251 thingies #f #f ())
(1252 thingie? 1251 8 ())
(1253 make-thingie 1251 44 ())
(1254 thingie-want-type 1251 56 ())
(1255 thingie-name 1251 68 ())
(1256 thingie-binding 1251 80 ())
(1257 packages #f #f ())
(1258 location-on-demand 1257 28 ())
(1259 #f 1258 13 ())
(1260 link! 1257 40 ())
(1261 #f 1260 22 ())
(1262 really-link! 1257 52 ())
(1263 #f 1262 28 ())
(1264 get-location 1257 64 ())
(1265 get-location-for-undefined 1257 76 ())
(1266 #f 1265 106 ())
(1267 location-for-reference 1257 88 ())
(1268 #f 1267 45 ())
(1269 note-caching! 1257 100 ())
(1270 package-note-caching! 1257 112 ())
(1271 #f 1270 97 ())
(1272 get-location-for-unassignable 1257 124 ())
(1273 #f 1272 108 ())
(1274 #f 1272 120 ())
(1275 cenv->package 1257 136 ())
(1276 noting-undefined-variables 1257 148 ())
(1277 add-name 1276 29 ())
(1278 #f 1276 48 ())
(1279 #f 1276 64 ())
(1280 #f 1279 4 ())
(1281 #f 1279 20 ())
(1282 #f 1281 10 ())
(1283 print-undefined-names 1257 160 ())
(1284 #f 1283 17 ())
(1285 #f 1283 192 ())
(1286 flush-location-names 1257 172 ())
(1287 make-new-location 1257 184 ())
(1288 for-each-definition 1257 196 ())
(1289 #f 1288 13 ())
(1290 package-refine-type! 1257 208 ())
(1291 package-add-static! 1257 220 ())
(1292 make-simple-package 1257 232 ())
(1293 #f 1292 72 ())
(1294 #f 1292 78 ())
(1295 package-opens 1257 244 ())
(1296 package-name 1257 256 ())
(1297 lazy-table-accessor 1257 268 ())
(1298 #f 1297 14 ())
(1299 make-package 1257 280 ())
(1300 new-package-uid 1257 292 ())
(1301 really-package->environment 1257 304 ())
(1302 #f 1301 13 ())
(1303 #f 1301 25 ())
(1304 for-each-export 1257 316 ())
(1305 #f 1304 30 ())
(1306 real-structure-lookup 1257 328 ())
(1307 really-package-lookup 1257 340 ())
(1308 generic-lookup 1257 352 ())
(1309 package-lookup 1257 364 ())
(1310 structure-lookup 1257 376 ())
(1311 search-opens 1257 388 ())
(1312 #f 1311 35 ())
(1313 package-definition 1257 400 ())
(1314 initialize-package-if-necessary! 1257 412 ())
(1315 initialize-package! 1257 424 ())
(1316 #f 1315 52 ())
(1317 #f 1315 73 ())
(1318 package-accesses 1257 436 ())
(1319 package-define! 1257 448 ())
(1320 get-new-location 1257 460 ())
(1321 structure-unstable? 1257 472 ())
(1322 make-structure 1257 484 ())
(1323 #f 1322 92 ())
(1324 note-structure-name! 1257 496 ())
(1325 note-package-name! 1257 508 ())
(1326 package? 1257 520 ())
(1327 structure-interface 1257 532 ())
(1328 initialize-structure! 1257 544 ())
(1329 structure? 1257 556 ())
(1330 really-make-structure 1257 592 ())
(1331 structure-name 1257 604 ())
(1332 set-structure-name! 1257 616 ())
(1333 structure-clients 1257 628 ())
(1334 structure-package 1257 640 ())
(1335 structure-interface-really 1257 652 ())
(1336 set-structure-interface! 1257 664 ())
(1337 structure-interface-thunk 1257 676 ())
(1338 #f 1257 692 ())
(1339 really-make-package 1257 732 ())
(1340 package-cached 1257 744 ())
(1341 package-clients 1257 756 ())
(1342 package-real-undefined-but-assigneds 1257 768 ())
(1343 set-package-undefined-but-assigneds! 1257 780 ())
(1344 package-real-undefineds 1257 792 ())
(1345 set-package-undefineds! 1257 804 ())
(1346 package-accesses-thunk 1257 816 ())
(1347 package-opens-thunk 1257 828 ())
(1348 set-package-opens-thunk! 1257 840 ())
(1349 package->environment 1257 852 ())
(1350 set-package->environment! 1257 864 ())
(1351 package-loaded? 1257 876 ())
(1352 set-package-loaded?! 1257 888 ())
(1353 package-clauses 1257 900 ())
(1354 package-file-name 1257 912 ())
(1355 package-get-location 1257 924 ())
(1356 set-package-get-location! 1257 936 ())
(1357 package-integrate? 1257 948 ())
(1358 set-package-integrate?! 1257 960 ())
(1359 package-unstable? 1257 972 ())
(1360 package-definitions 1257 984 ())
(1361 package-opens-really 1257 996 ())
(1362 set-package-opens! 1257 1008 ())
(1363 package-uid 1257 1020 ())
(1364 #f 1257 1036 ())
(1365 #f 1257 1196 ())
(1366 environments #f #f ())
(1367 environment-ref 1366 8 ())
(1368 #f 1367 30 ())
(1369 environment-set! 1366 20 ())
(1370 #f 1369 122 ())
(1371 environment-define! 1366 32 ())
(1372 *structure-ref 1366 44 ())
(1373 carefully 1366 56 ())
(1374 interaction-environment 1366 86 ())
(1375 set-interaction-environment! 1366 98 ())
(1376 with-interaction-environment 1366 110 ())
(1377 scheme-report-environment 1366 122 ())
(1378 set-scheme-report-environment! 1366 160 ())
(1379 null-environment 1366 172 ())
(1380 make-reflective-tower 1366 184 ())
(1381 #f 1380 37 ())
(1382 #f 1381 19 ())
(1383 set-reflective-tower-maker! 1366 223 ())
(1384 filenames #f #f ())
(1385 namestring 1384 8 ())
(1386 #f 1385 193 ())
(1387 namestring-component 1384 40 ())
(1388 file-name-directory 1384 82 ())
(1389 file-name-nondirectory 1384 94 ())
(1390 file-nondirectory-position 1384 106 ())
(1391 #f 1390 40 ())
(1392 string-posq 1384 118 ())
(1393 #f 1392 36 ())
(1394 translations 1384 140 ())
(1395 set-translation! 1384 152 ())
(1396 translate 1384 164 ())
(1397 #f 1396 45 ())
(1398 reading-forms #f #f ())
(1399 #f 1398 12 ())
(1400 read-forms 1398 30 ())
(1401 #f 1400 60 ())
(1402 really-read-forms 1398 42 ())
(1403 #f 1402 35 ())
(1404 nodes #f #f ())
(1405 schemify-lambda 1404 28 ())
(1406 schemify-formals 1404 40 ())
(1407 define-schemifier 1404 52 ())
(1408 schemify-nodes 1404 64 ())
(1409 #f 1408 13 ())
(1410 schemify 1404 76 ())
(1411 schemify-sexp 1404 88 ())
(1412 #f 1411 166 ())
(1413 schemify-node 1404 100 ())
(1414 force-node 1404 112 ())
(1415 make-similar-node 1404 124 ())
(1416 node-predicate 1404 136 ())
(1417 #f 1416 44 ())
(1418 node-operator 1404 148 ())
(1419 node-set! 1404 160 ())
(1420 #f 1419 120 ())
(1421 node-ref 1404 172 ())
(1422 make-node 1404 184 ())
(1423 node? 1404 196 ())
(1424 operator-define! 1404 208 ())
(1425 operator-lookup 1404 220 ())
(1426 make-operator-table 1404 232 ())
(1427 get-operator 1404 244 ())
(1428 operator? 1404 256 ())
(1429 make-operator 1404 292 ())
(1430 operator-name 1404 304 ())
(1431 operator-uid 1404 316 ())
(1432 operator-nargs 1404 328 ())
(1433 operator-type 1404 340 ())
(1434 set-operator-type! 1404 352 ())
(1435 #f 1404 368 ())
(1436 really-make-node 1404 478 ())
(1437 node-plist 1404 490 ())
(1438 set-node-plist! 1404 502 ())
(1439 node-form 1404 514 ())
(1440 node-operator-id 1404 526 ())
(1441 #f 1404 542 ())
(1442 #f 1404 562 ())
(1443 #f 1404 588 ())
(1444 #f 1404 616 ())
(1445 #f 1404 644 ())
(1446 #f 1445 13 ())
(1447 #f 1404 724 ())
(1448 #f 1447 36 ())
(1449 #f 1447 71 ())
(1450 #f 1404 752 ())
(1451 #f 1404 776 ())
(1452 var-utilities #f #f ())
(1453 number-of-required-args 1452 8 ())
(1454 #f 1453 24 ())
(1455 n-ary? 1452 20 ())
(1456 normalize-formals 1452 32 ())
(1457 syntactic #f #f ())
(1458 syntax? 1457 8 ())
(1459 specs? 1457 20 ())
(1460 expand-lambda 1457 32 ())
(1461 #f 1460 13 ())
(1462 #f 1460 30 ())
(1463 bind-names 1457 44 ())
(1464 #f 1463 42 ())
(1465 unspecific-node 1457 56 ())
(1466 define-expander 1457 68 ())
(1467 expand-body 1457 80 ())
(1468 #f 1467 34 ())
(1469 #f 1467 51 ())
(1470 expand-letrec 1457 92 ())
(1471 #f 1470 17 ())
(1472 scan-body-forms 1457 104 ())
(1473 #f 1472 242 ())
(1474 #f 1472 262 ())
(1475 body-lossage 1457 116 ())
(1476 make-operator-predicate 1457 128 ())
(1477 #f 1476 33 ())
(1478 static-value 1457 140 ())
(1479 expand-form 1457 152 ())
(1480 expand-define 1457 164 ())
(1481 scan-forms 1457 176 ())
(1482 #f 1481 38 ())
(1483 expand-head 1457 188 ())
(1484 expand-macro-application 1457 200 ())
(1485 #f 1484 15 ())
(1486 #f 1484 33 ())
(1487 expand 1457 212 ())
(1488 expand-call 1457 224 ())
(1489 expand-list 1457 236 ())
(1490 #f 1489 13 ())
(1491 expand-literal 1457 248 ())
(1492 literal? 1457 260 ())
(1493 expand-operator-form 1457 272 ())
(1494 expand-name 1457 284 ())
(1495 scan-define-syntax 1457 296 ())
(1496 process-syntax 1457 308 ())
(1497 this-long? 1457 320 ())
(1498 scan-define 1457 332 ())
(1499 destructure-define 1457 344 ())
(1500 names? 1457 356 ())
(1501 at-least-this-long? 1457 368 ())
(1502 #f 1457 444 ())
(1503 #f 1457 470 ())
(1504 #f 1457 498 ())
(1505 #f 1457 526 ())
(1506 #f 1457 554 ())
(1507 #f 1457 582 ())
(1508 lose 1507 40 ())
(1509 #f 1457 610 ())
(1510 #f 1457 638 ())
(1511 #f 1457 666 ())
(1512 #f 1457 694 ())
(1513 #f 1512 88 ())
(1514 #f 1457 722 ())
(1515 #f 1457 750 ())
(1516 #f 1515 115 ())
(1517 #f 1457 778 ())
(1518 #f 1517 111 ())
(1519 #f 1518 13 ())
(1520 #f 1457 806 ())
(1521 #f 1520 121 ())
(1522 primops #f #f ())
(1523 get-primop 1522 8 ())
(1524 define-compiler-primitive 1522 20 ())
(1525 walk-primops 1522 32 ())
(1526 #f 1525 13 ())
(1527 primop? 1522 44 ())
(1528 make-primop 1522 80 ())
(1529 primop-compilator 1522 92 ())
(1530 primop-closed 1522 104 ())
(1531 primop-type 1522 116 ())
(1532 primop-name 1522 128 ())
(1533 #f 1522 144 ())
(1534 debug-data #f #f ())
(1535 debug-data? 1534 8 ())
(1536 make-debug-data 1534 44 ())
(1537 debug-data-source 1534 56 ())
(1538 set-debug-data-source! 1534 68 ())
(1539 debug-data-env-maps 1534 80 ())
(1540 set-debug-data-env-maps! 1534 92 ())
(1541 debug-data-pc-in-parent 1534 104 ())
(1542 debug-data-parent 1534 116 ())
(1543 debug-data-name 1534 128 ())
(1544 debug-data-uid 1534 140 ())
(1545 #f 1534 152 ())
(1546 stack-check #f #f ())
(1547 stack-function 1546 8 ())
(1548 #f 1547 35 ())
(1549 arg-spec-size 1546 20 ())
(1550 do-make-cont 1546 32 ())
(1551 #f 1550 13 ())
(1552 get-offset 1546 44 ())
(1553 continuer 1546 56 ())
(1554 #f 1553 13 ())
(1555 continue 1546 68 ())
(1556 pusher 1546 80 ())
(1557 #f 1556 14 ())
(1558 imax 1546 92 ())
(1559 popper 1546 104 ())
(1560 #f 1559 14 ())
(1561 nothing 1546 116 ())
(1562 #f 1561 13 ())
(1563 maximum-stack-use 1546 128 ())
(1564 #f 1563 90 ())
(1565 protocol-skip 1546 140 ())
(1566 stack-max 1546 152 ())
(1567 #f 1546 535 ())
(1568 #f 1546 550 ())
(1569 #f 1546 565 ())
(1570 #f 1546 580 ())
(1571 #f 1546 595 ())
(1572 #f 1571 87 ())
(1573 #f 1546 656 ())
(1574 #f 1546 671 ())
(1575 #f 1546 686 ())
(1576 #f 1575 71 ())
(1577 #f 1546 710 ())
(1578 segments #f #f ())
(1579 note-environment 1578 38 ())
(1580 #f 1579 39 ())
(1581 note-source-code 1578 50 ())
(1582 #f 1581 27 ())
(1583 attach-label 1578 62 ())
(1584 #f 1583 27 ())
(1585 #f 1584 45 ())
(1586 computed-goto-instruction 1578 74 ())
(1587 #f 1586 81 ())
(1588 #f 1587 90 ())
(1589 instruction-using-label 1578 86 ())
(1590 #f 1589 59 ())
(1591 insert-label! 1578 98 ())
(1592 make-label 1578 110 ())
(1593 instruction-with-location 1578 122 ())
(1594 #f 1593 20 ())
(1595 instruction-with-literal 1578 134 ())
(1596 #f 1595 39 ())
(1597 #f 1596 167 ())
(1598 sequentially 1578 146 ())
(1599 #f 1598 118 ())
(1600 #f 1598 141 ())
(1601 #f 1600 34 ())
(1602 sequentially-2 1578 158 ())
(1603 #f 1602 67 ())
(1604 instruction 1578 170 ())
(1605 #f 1604 38 ())
(1606 #f 1605 29 ())
(1607 segment->template 1578 182 ())
(1608 #f 1607 140 ())
(1609 segment-data->template 1578 194 ())
(1610 #f 1609 94 ())
(1611 template 1578 206 ())
(1612 #f 1611 18 ())
(1613 make-astate 1578 218 ())
(1614 emit-with-environment-maps! 1578 230 ())
(1615 #f 1614 22 ())
(1616 emit-segment! 1578 242 ())
(1617 check-stack-use 1578 254 ())
(1618 #f 1617 99 ())
(1619 code-vector-set2! 1578 266 ())
(1620 emit-literal! 1578 278 ())
(1621 literal->index 1578 290 ())
(1622 low-byte 1578 302 ())
(1623 emit-byte! 1578 314 ())
(1624 high-byte 1578 326 ())
(1625 new-debug-data 1578 338 ())
(1626 get-debug-data 1578 350 ())
(1627 debug-data->info 1578 362 ())
(1628 note-debug-data! 1578 374 ())
(1629 with-fresh-compiler-state 1578 386 ())
(1630 #f 1629 52 ())
(1631 #f 1630 4 ())
(1632 #f 1630 10 ())
(1633 saving-and-restoring 1578 398 ())
(1634 swap 1633 24 ())
(1635 debug-flag-modifier 1578 410 ())
(1636 #f 1635 33 ())
(1637 debug-flag-accessor 1578 422 ())
(1638 #f 1637 33 ())
(1639 set-template-uid! 1578 434 ())
(1640 template-uid 1578 446 ())
(1641 new-template-uid 1578 458 ())
(1642 make-assembly-state 1578 740 ())
(1643 astate-literals 1578 752 ())
(1644 set-astate-literals! 1578 764 ())
(1645 astate-count 1578 776 ())
(1646 set-astate-count! 1578 788 ())
(1647 astate-pc 1578 800 ())
(1648 set-astate-pc! 1578 812 ())
(1649 astate-code-vector 1578 824 ())
(1650 #f 1578 844 ())
(1651 optimizer #f #f ())
(1652 set-optimizer! 1651 24 ())
(1653 get-optimizer 1651 36 ())
(1654 #f 1653 13 ())
(1655 #f 1654 11 ())
(1656 #f 1655 56 ())
(1657 apply-optimizers 1651 48 ())
(1658 #f 1657 13 ())
(1659 default-standard-optimizer 1651 70 ())
(1660 set-standard-optimizers! 1651 92 ())
(1661 get-optimizers 1651 104 ())
(1662 #f 1661 7 ())
(1663 make-standard-optimizer 1651 116 ())
(1664 #f 1663 29 ())
(1665 flatten #f #f ())
(1666 flatten-form 1665 8 ())
(1667 #f 1666 74 ())
(1668 #f 1666 90 ())
(1669 #f 1666 117 ())
(1670 #f 1666 133 ())
(1671 flatten-node 1665 20 ())
(1672 #f 1665 36 ())
(1673 #f 1672 13 ())
(1674 #f 1672 29 ())
(1675 define-flattener 1665 50 ())
(1676 flatten-list 1665 62 ())
(1677 #f 1676 39 ())
(1678 #f 1677 51 ())
(1679 #f 1677 67 ())
(1680 no-free-vars 1665 74 ())
(1681 #f 1665 162 ())
(1682 flatten-lambda 1665 178 ())
(1683 #f 1682 32 ())
(1684 #f 1682 48 ())
(1685 convert-lambda-body 1665 190 ())
(1686 #f 1685 54 ())
(1687 #f 1685 70 ())
(1688 add-cells 1665 202 ())
(1689 #f 1688 27 ())
(1690 #f 1665 218 ())
(1691 #f 1665 238 ())
(1692 #f 1691 47 ())
(1693 #f 1691 63 ())
(1694 #f 1665 258 ())
(1695 #f 1694 31 ())
(1696 #f 1695 17 ())
(1697 #f 1695 33 ())
(1698 #f 1694 47 ())
(1699 #f 1665 278 ())
(1700 #f 1699 31 ())
(1701 #f 1699 47 ())
(1702 #f 1665 298 ())
(1703 #f 1702 86 ())
(1704 #f 1702 107 ())
(1705 #f 1704 120 ())
(1706 #f 1702 126 ())
(1707 assigned? 1665 314 ())
(1708 mark-set-variables! 1665 326 ())
(1709 #f 1665 342 ())
(1710 define-set-marker 1665 356 ())
(1711 no-sets 1665 368 ())
(1712 #f 1665 474 ())
(1713 #f 1665 494 ())
(1714 #f 1665 514 ())
(1715 #f 1665 534 ())
(1716 #f 1665 554 ())
(1717 #f 1716 26 ())
(1718 make-cell 1665 570 ())
(1719 make-unassigned-cell 1665 582 ())
(1720 make-cell-ref 1665 594 ())
(1721 make-cell-set! 1665 606 ())
(1722 make-primop-call 1665 618 ())
(1723 make-cell-primop 1665 818 ())
(1724 cell-ref-primop 1665 838 ())
(1725 cell-set!-primop 1665 858 ())
(1726 union 1665 870 ())
(1727 #f 1726 47 ())
(1728 set-difference 1665 882 ())
(1729 #f 1728 34 ())
(1730 reconstruction #f #f ())
(1731 node-type 1730 8 ())
(1732 reconstruct-type 1730 20 ())
(1733 reconstruct 1730 32 ())
(1734 examine 1730 44 ())
(1735 #f 1730 60 ())
(1736 define-reconstructor 1730 74 ())
(1737 #f 1730 94 ())
(1738 #f 1730 118 ())
(1739 reconstruct-lambda 1730 134 ())
(1740 #f 1739 72 ())
(1741 careful-codomain 1730 146 ())
(1742 #f 1730 166 ())
(1743 reconstruct-name 1730 182 ())
(1744 #f 1730 202 ())
(1745 proc->reconstructor 1730 218 ())
(1746 reconstruct-call 1730 230 ())
(1747 lose 1746 122 ())
(1748 #f 1747 10 ())
(1749 #f 1746 205 ())
(1750 #f 1730 250 ())
(1751 #f 1730 274 ())
(1752 #f 1730 296 ())
(1753 #f 1730 318 ())
(1754 #f 1730 342 ())
(1755 #f 1754 154 ())
(1756 fork-constraints 1730 358 ())
(1757 #f 1756 14 ())
(1758 #f 1730 381 ())
(1759 #f 1758 28 ())
(1760 #f 1730 405 ())
(1761 #f 1730 429 ())
(1762 #f 1761 67 ())
(1763 #f 1730 453 ())
(1764 node->type 1730 469 ())
(1765 #f 1730 489 ())
(1766 #f 1730 513 ())
(1767 define-primop-reconstructor 1730 617 ())
(1768 #f 1730 637 ())
(1769 #f 1730 657 ())
(1770 #f 1769 17 ())
(1771 #f 1730 677 ())
(1772 reconstruct-apply 1730 693 ())
(1773 #f 1772 63 ())
(1774 constant-type 1730 741 ())
(1775 compiler #f #f ())
(1776 make-startup-procedure 1775 18 ())
(1777 #f 1776 45 ())
(1778 compile-forms 1775 30 ())
(1779 #f 1778 102 ())
(1780 compile-form 1775 42 ())
(1781 compile-definition 1775 54 ())
(1782 make-dispatch-protocol 1775 66 ())
(1783 call-on-args 1775 78 ())
(1784 do-arg 1783 15 ())
(1785 #f 1783 81 ())
(1786 call-on-arg-and-id 1775 90 ())
(1787 define-n-ary-compiler-primitive 1775 102 ())
(1788 n-ary-primitive-compilator 1775 114 ())
(1789 #f 1788 14 ())
(1790 define-vector-primitives 1775 126 ())
(1791 def-prim 1790 33 ())
(1792 define-data-struct-primitives 1775 138 ())
(1793 def-prim 1792 9 ())
(1794 #f 1792 213 ())
(1795 define-stob-predicate 1775 150 ())
(1796 symbol-append 1775 162 ())
(1797 define-simple-primitive 1775 174 ())
(1798 simple-closed-compilator 1775 186 ())
(1799 #f 1798 14 ())
(1800 simple-compilator 1775 198 ())
(1801 #f 1800 13 ())
(1802 get-primop-type 1775 210 ())
(1803 #f 1802 17 ())
(1804 nargs->domain 1775 222 ())
(1805 #f 1804 24 ())
(1806 direct-closed-compilator 1775 234 ())
(1807 #f 1806 13 ())
(1808 direct-compilator 1775 246 ())
(1809 #f 1808 13 ())
(1810 push-all-but-last 1775 258 ())
(1811 #f 1810 42 ())
(1812 set-type-check?! 1775 270 ())
(1813 ignore-values-cont 1775 282 ())
(1814 fall-through-cont? 1775 294 ())
(1815 compile-flat-lambda 1775 306 ())
(1816 #f 1815 27 ())
(1817 #f 1815 368 ())
(1818 get-variables-offsets 1775 318 ())
(1819 #f 1818 38 ())
(1820 sort-list 1775 330 ())
(1821 #f 1820 27 ())
(1822 #f 1820 62 ())
(1823 variable-env-data 1775 342 ())
(1824 #f 1823 39 ())
(1825 #f 1824 83 ())
(1826 #f 1825 134 ())
(1827 compile-lambda 1775 354 ())
(1828 compile-call 1775 366 ())
(1829 compile-redex 1775 378 ())
(1830 #f 1829 128 ())
(1831 cont-name 1775 390 ())
(1832 compile-lambda-code 1775 402 ())
(1833 return-cont 1775 414 ())
(1834 name-node->symbol 1775 426 ())
(1835 set-lexical-offsets! 1775 438 ())
(1836 #f 1835 38 ())
(1837 push-all-with-names 1775 450 ())
(1838 named-cont 1775 462 ())
(1839 generate-trap 1775 474 ())
(1840 compile-name-call 1775 486 ())
(1841 name-node-binding 1775 498 ())
(1842 compile-unknown-call 1775 510 ())
(1843 push-arguments 1775 522 ())
(1844 #f 1843 54 ())
(1845 fall-through-cont 1775 534 ())
(1846 make-cont 1775 546 ())
(1847 maybe-push-continuation 1775 558 ())
(1848 fixup-source 1775 570 ())
(1849 return-cont? 1775 582 ())
(1850 compile-constant 1775 594 ())
(1851 deliver-value 1775 606 ())
(1852 ignore-values-cont? 1775 618 ())
(1853 define-compilator 1775 630 ())
(1854 compile-expression 1775 642 ())
(1855 compile 1775 654 ())
(1856 type-check 1775 666 ())
(1857 #f 1856 122 ())
(1858 diagnose-call-error 1775 678 ())
(1859 #f 1858 174 ())
(1860 #f 1775 694 ())
(1861 #f 1775 720 ())
(1862 #f 1775 770 ())
(1863 #f 1775 820 ())
(1864 #f 1775 848 ())
(1865 #f 1775 876 ())
(1866 #f 1775 904 ())
(1867 #f 1775 932 ())
(1868 #f 1775 960 ())
(1869 #f 1868 110 ())
(1870 #f 1775 1014 ())
(1871 #f 1775 1042 ())
(1872 #f 1775 1070 ())
(1873 #f 1872 74 ())
(1874 #f 1872 159 ())
(1875 #f 1775 1158 ())
(1876 #f 1775 1354 ())
(1877 #f 1775 2517 ())
(1878 #f 1775 2577 ())
(1879 #f 1775 2830 ())
(1880 #f 1775 2954 ())
(1881 #f 1775 2960 ())
(1882 #f 1775 3040 ())
(1883 #f 1775 3046 ())
(1884 #f 1775 3128 ())
(1885 #f 1775 3140 ())
(1886 #f 1775 3166 ())
(1887 #f 1775 3172 ())
(1888 #f 1775 3231 ())
(1889 #f 1888 119 ())
(1890 #f 1775 3243 ())
(1891 #f 1775 3273 ())
(1892 n-ary-constructor 1775 3289 ())
(1893 #f 1892 23 ())
(1894 #f 1892 35 ())
(1895 define-char-io 1775 3338 ())
(1896 #f 1895 19 ())
(1897 #f 1895 31 ())
(1898 define-char-io 1775 3481 ())
(1899 #f 1898 19 ())
(1900 #f 1898 31 ())
(1901 define+* 1775 3571 ())
(1902 #f 1901 51 ())
(1903 #f 1901 64 ())
(1904 define=< 1775 3705 ())
(1905 #f 1904 80 ())
(1906 #f 1904 92 ())
(1907 define-one-or-two 1775 3839 ())
(1908 #f 1907 81 ())
(1909 #f 1907 94 ())
(1910 define-one-or-two 1775 3890 ())
(1911 #f 1910 20 ())
(1912 #f 1910 33 ())
(1913 #f 1775 4292 ())
(1914 evaluation #f #f ())
(1915 eval 1914 8 ())
(1916 load-into 1914 20 ())
(1917 eval-from-file 1914 32 ())
(1918 load 1914 44 ())
(1919 really-load-into 1914 56 ())
(1920 compile-and-run 1914 68 ())
(1921 #f 1920 68 ())
(1922 #f 1921 16 ())
(1923 scheme #f #f ())
(1924 display-conditions #f #f ())
(1925 display-condition 1924 30 ())
(1926 #f 1925 21 ())
(1927 really-display-condition 1924 43 ())
(1928 #f 1927 256 ())
(1929 &disclose-condition 1924 159 ())
(1930 limited-write 1924 188 ())
(1931 #f 1930 40 ())
(1932 #f 1931 158 ())
(1933 #f 1932 49 ())
(1934 mini-command #f #f ())
(1935 command-processor 1934 8 ())
(1936 #f 1935 96 ())
(1937 #f 1936 18 ())
(1938 #f 1937 18 ())
(1939 #f 1938 67 ())
(1940 #f 1937 36 ())
(1941 #f 1940 75 ())
(1942 #f 1940 208 ())
(1943 #f 1940 262 ())
(1944 #f 1943 19 ())
(1945 #f 1940 278 ())
(1946 mini-load 1934 20 ())
(1947 read-string 1934 32 ())
(1948 #f 1947 40 ())
(1949 enum-case #f #f ())
(1950 scheduler #f #f ())
(1951 run-threads 1950 8 ())
(1952 #f 1951 13 ())
(1953 #f 1952 42 ())
(1954 #f 1953 17 ())
(1955 #f 1954 15 ())
(1956 #f 1954 37 ())
(1957 #f 1953 34 ())
(1958 #f 1951 29 ())
(1959 run-threads-with-housekeeper 1950 20 ())
(1960 #f 1959 15 ())
(1961 #f 1960 47 ())
(1962 #f 1961 21 ())
(1963 #f 1962 65 ())
(1964 #f 1962 87 ())
(1965 #f 1961 38 ())
(1966 #f 1959 31 ())
(1967 round-robin-event-handler 1950 32 ())
(1968 #f 1967 40 ())
(1969 #f 1968 128 ())
(1970 #f 1968 147 ())
(1971 #f 1967 60 ())
(1972 #f 1967 83 ())
(1973 #f 1972 27 ())
(1974 make-counter 1950 44 ())
(1975 increment-counter! 1950 66 ())
(1976 decrement-counter! 1950 78 ())
(1977 root-scheduler #f #f ())
(1978 root-scheduler 1977 8 ())
(1979 #f 1978 34 ())
(1980 #f 1979 32 ())
(1981 #f 1979 50 ())
(1982 make-root-event-handler 1977 20 ())
(1983 #f 1982 116 ())
(1984 #f 1982 128 ())
(1985 root-handler 1977 32 ())
(1986 cheap-display-condition 1977 44 ())
(1987 #f 1986 171 ())
(1988 scheme-exit-now 1977 76 ())
(1989 root-wait 1977 88 ())
(1990 #f 1989 29 ())
(1991 do-some-waiting 1977 125 ())
(1992 #f 1991 21 ())
(1993 call-when-deadlocked! 1977 155 ())
(1994 spawn-output-forcers 1977 167 ())
(1995 usual-resumer #f #f ())
(1996 usual-resumer 1995 8 ())
(1997 #f 1996 13 ())
(1998 #f 1997 25 ())
(1999 initialize-rts 1995 20 ())
(2000 #f 1999 54 ())
(2001 #f 2000 17 ())
(2002 #f 2001 53 ())
(2003 #f 2002 10 ())
(2004 initial-system #f #f ())
(2005 start 2004 8 ())
(2006 #f 2005 13 ())
(2007 #f 2006 16 ())
(2008 #f 2007 74 ())
(2009 make-built-in-structures 2004 20 ())
(2010 #f 2009 45 ())
(2011 #f 2009 74 ())
(2012 initialize-interaction-environment! 2004 32 ())
(2013 make-initial-package 2004 44 ())
(2014 #f 2013 24 ())
(2015 make-tower 2004 56 ())
(2016 usual-macros #f #f ())
(2017 define-usual-macro 2016 24 ())
(2018 usual-transform 2016 36 ())
(2019 #f 2016 52 ())
(2020 #f 2016 76 ())
(2021 #f 2020 103 ())
(2022 #f 2016 100 ())
(2023 #f 2022 239 ())
(2024 do-spec? 2016 120 ())
(2025 #f 2016 136 ())
(2026 #f 2016 160 ())
(2027 specs? 2016 180 ())
(2028 #f 2016 196 ())
(2029 #f 2016 220 ())
(2030 #f 2029 36 ())
(2031 #f 2029 242 ())
(2032 case-clause? 2016 240 ())
(2033 #f 2016 256 ())
(2034 #f 2033 211 ())
(2035 #f 2033 228 ())
(2036 #f 2033 250 ())
(2037 #f 2033 270 ())
(2038 #f 2037 30 ())
(2039 #f 2038 30 ())
(2040 #f 2033 289 ())
(2041 #f 2040 34 ())
(2042 #f 2033 306 ())
(2043 #f 2016 280 ())
(2044 process-rules 2016 300 ())
(2045 #f 2044 528 ())
(2046 #f 2044 551 ())
(2047 #f 2046 130 ())
(2048 #f 2044 582 ())
(2049 #f 2044 599 ())
(2050 #f 2044 624 ())
(2051 #f 2050 113 ())
(2052 #f 2044 648 ())
(2053 #f 2044 668 ())
(2054 #f 2044 685 ())
(2055 segment-pattern? 2016 312 ())
(2056 segment-template? 2016 324 ())
(2057 find-free-names-in-syntax-rules 2016 366 ())
(2058 #f 2057 32 ())
(2059 #f 2057 49 ())
(2060 #f 2057 78 ())
(2061 strong #f #f ())
(2062 strongly-connected-components 2061 8 ())
(2063 #f 2062 70 ())
(2064 #f 2063 46 ())
(2065 #f 2063 73 ())
(2066 #f 2063 97 ())
(2067 find-next-vertex 2061 20 ())
(2068 #f 2067 27 ())
(2069 really-make-vertex 2061 56 ())
(2070 vertex-lowpoint 2061 68 ())
(2071 set-vertex-lowpoint! 2061 80 ())
(2072 vertex-parent 2061 92 ())
(2073 set-vertex-parent! 2061 104 ())
(2074 vertex-index 2061 116 ())
(2075 set-vertex-index! 2061 128 ())
(2076 vertex-stack 2061 140 ())
(2077 set-vertex-stack! 2061 152 ())
(2078 vertex-edges 2061 164 ())
(2079 set-vertex-edges! 2061 176 ())
(2080 vertex-data 2061 188 ())
(2081 vertex? 2061 200 ())
(2082 make-vertex 2061 212 ())
(2083 make-vertices 2061 224 ())
(2084 maybe-slot 2083 13 ())
(2085 #f 2083 32 ())
(2086 #f 2083 61 ())
(2087 do-vertex 2061 236 ())
(2088 get-strong 2061 248 ())
(2089 end-vertex 2061 260 ())
(2090 #f 2089 14 ())
(2091 #f 2089 32 ())
(2092 unwind-stack 2061 272 ())
(2093 #f 2092 39 ())
(2094 follow-edge 2061 284 ())
(2095 pop-vertex-edge! 2061 296 ())
(2096 usages #f #f ())
(2097 find-usages 2096 8 ())
(2098 #f 2097 30 ())
(2099 #f 2097 55 ())
(2100 #f 2099 31 ())
(2101 #f 2097 80 ())
(2102 maybe-update-known-type 2096 20 ())
(2103 find-node-usages 2096 32 ())
(2104 #f 2103 37 ())
(2105 #f 2103 52 ())
(2106 analyze 2096 44 ())
(2107 analyze-nodes 2096 56 ())
(2108 #f 2107 13 ())
(2109 #f 2096 72 ())
(2110 define-usage-analyzer 2096 86 ())
(2111 nothing 2096 98 ())
(2112 #f 2096 220 ())
(2113 add-if-free 2096 236 ())
(2114 #f 2096 254 ())
(2115 #f 2096 278 ())
(2116 #f 2115 42 ())
(2117 #f 2096 302 ())
(2118 #f 2117 58 ())
(2119 #f 2096 326 ())
(2120 #f 2096 350 ())
(2121 #f 2096 374 ())
(2122 #f 2096 398 ())
(2123 #f 2096 422 ())
(2124 #f 2096 446 ())
(2125 really-make-usage 2096 486 ())
(2126 usage-assignment-count 2096 498 ())
(2127 set-assignment! 2096 510 ())
(2128 usage-operator-count 2096 522 ())
(2129 set-operator! 2096 534 ())
(2130 usage-reference-count 2096 546 ())
(2131 set-reference! 2096 558 ())
(2132 usage-name-node 2096 570 ())
(2133 usage? 2096 582 ())
(2134 make-usage 2096 594 ())
(2135 make-package-usage 2096 606 ())
(2136 package-usage? 2096 618 ())
(2137 usage-incrementator 2096 630 ())
(2138 #f 2137 14 ())
(2139 sort-forms 2096 842 ())
(2140 #f 2139 86 ())
(2141 #f 2139 125 ())
(2142 stuff-count 2096 854 ())
(2143 #f 2142 11 ())
(2144 maybe-make-aliased 2096 866 ())
(2145 topologically-sort 2096 878 ())
(2146 #f 2145 20 ())
(2147 #f 2146 7 ())
(2148 #f 2146 23 ())
(2149 really-make-form 2096 914 ())
(2150 form-temp 2096 926 ())
(2151 set-form-temp! 2096 938 ())
(2152 form-free 2096 950 ())
(2153 set-form-free! 2096 962 ())
(2154 form-unaliased? 2096 974 ())
(2155 set-form-unaliased?! 2096 986 ())
(2156 form-aliases 2096 998 ())
(2157 set-form-aliases! 2096 1010 ())
(2158 form-node 2096 1022 ())
(2159 form? 2096 1034 ())
(2160 #f 2096 1050 ())
(2161 make-form 2096 1066 ())
(2162 insert-aliases 2096 1078 ())
(2163 #f 2162 35 ())
(2164 inline #f #f ())
(2165 make-inline-transform 2164 8 ())
(2166 #f 2165 48 ())
(2167 #f 2165 104 ())
(2168 #f 2167 24 ())
(2169 clean-node 2164 20 ())
(2170 #f 2169 139 ())
(2171 #f 2169 310 ())
(2172 clean-lambda 2164 32 ())
(2173 #f 2172 42 ())
(2174 #f 2172 108 ())
(2175 clean-lookup 2164 44 ())
(2176 unused-name 2164 56 ())
(2177 #f 2176 65 ())
(2178 #f 2177 17 ())
(2179 inline-transform 2164 68 ())
(2180 #f 2179 71 ())
(2181 #f 2179 86 ())
(2182 make-substitution 2164 80 ())
(2183 #f 2182 39 ())
(2184 reconstitute 2164 92 ())
(2185 #f 2184 35 ())
(2186 reconstitute-name 2164 104 ())
(2187 qualified->name 2164 156 ())
(2188 #f 2187 34 ())
(2189 get-qualified-env 2164 168 ())
(2190 for-reification #f #f ())
(2191 operator 2190 8 ())
(2192 primop 2190 20 ())
(2193 simple-interface 2190 32 ())
(2194 #f 2193 13 ())
(2195 package 2190 44 ())
(2196 #f 2195 95 ())
(2197 transform 2190 56 ())
(2198 package-define-static! 2190 68 ())
(2199 types #f #f ())
(2200 procedure 2199 48 ())
(2201 defpackage #f #f ())
(2202 make-a-package 2201 8 ())
(2203 loser 2201 20 ())
(2204 *verify-later!* 2201 42 ())
(2205 verify-later! 2201 54 ())
(2206 set-verify-later! 2201 66 ())
(2207 note-name! 2201 78 ())
(2208 scan-package #f #f ())
(2209 collect-packages 2208 8 ())
(2210 #f 2209 74 ())
(2211 #f 2210 171 ())
(2212 package-source 2208 20 ())
(2213 #f 2212 59 ())
(2214 read-files 2208 32 ())
(2215 #f 2214 38 ())
(2216 package-optimizer-names 2208 44 ())
(2217 #f 2216 37 ())
(2218 #f 2216 77 ())
(2219 check-structure 2208 56 ())
(2220 #f 2219 36 ())
(2221 compile-packages #f #f ())
(2222 compile-package 2221 8 ())
(2223 expand-package 2221 20 ())
(2224 #f 2223 28 ())
(2225 #f 2224 17 ())
(2226 #f 2224 42 ())
(2227 #f 2224 97 ())
(2228 #f 2227 22 ())
(2229 #f 2228 16 ())
(2230 #f 2223 44 ())
(2231 define-usual-transform 2221 32 ())
(2232 define-primitives 2221 44 ())
(2233 #f 2232 33 ())
(2234 #f 2232 62 ())
(2235 make-define-primitive-node 2221 56 ())
(2236 module-system #f #f ())
(2237 analysis #f #f ())
(2238 #f 2237 12 ())
(2239 analyze-forms 2237 28 ())
(2240 #f 2239 36 ())
(2241 analyze-form 2237 40 ())
(2242 inlinable-rhs? 2237 52 ())
(2243 simple-lambda? 2237 64 ())
(2244 #f 2243 129 ())
(2245 simple? 2237 100 ())
(2246 simple-list? 2237 112 ())
(2247 #f 2237 128 ())
(2248 define-analyzer 2237 142 ())
(2249 #f 2237 158 ())
(2250 #f 2237 178 ())
(2251 #f 2237 198 ())
(2252 #f 2237 218 ())
(2253 #f 2237 238 ())
(2254 #f 2237 258 ())
(2255 #f 2237 278 ())
(2256 #f 2237 298 ())
(2257 #f 2237 318 ())
(2258 #f 2237 338 ())
(2259 #f 2237 358 ())
(2260 #f 2259 37 ())
(2261 #f 2237 378 ())
(2262 static-value 2237 394 ())
(2263 really-simple-call? 2237 406 ())
(2264 lexical-node? 2237 418 ())
(2265 simple-literal? 2237 448 ())
(2266 require 2237 460 ())
(2267 package-lookup-type 2237 480 ())
(2268 ensures-loaded #f #f ())
(2269 ensure-loaded 2268 8 ())
(2270 #f 2269 56 ())
(2271 #f 2270 63 ())
(2272 #f 2269 69 ())
(2273 #f #f #f ())
(2274 #f 2273 4 ())
(2275 get-location 2274 4 ())
(2276 #f 2274 11622 ())
(2277 #f 2274 11678 ())
(2278 #f 2274 11810 ())
(2279 #f 2274 11944 ())
(2280 #f 2274 12038 ())
(2281 conc 2280 43 ())
(2282 #f 2281 17 ())
(2283 #f 2274 13703 ())
(2284 #f 2283 128 ())
(2285 #f 2283 217 ())
(2286 #f 2283 249 ())
(2287 #f 2283 436 ())
(2288 #f 2283 495 ())
(2289 #f 2274 14131 ())
(2290 #f 2289 216 ())
(2291 #f 2289 233 ())
(2292 #f 2289 254 ())
(2293 #f 2289 331 ())
(2294 #f 2274 14349 ())
(2295 #f 2294 84 ())
(2296 #f 2274 14405 ())
(2297 #f 2274 16373 ())
(2298 #f 2274 24166 ())
(2299 #f 2298 469 ())
(2300 #f 2274 25236 ())
(2301 #f 2300 118 ())
(2302 #f 2274 25424 ())
(2303 #f 2302 118 ())
(2304 #f 2274 25574 ())
(2305 #f 2304 118 ())
(2306 #f 2274 25686 ())
(2307 #f 2306 118 ())
(2308 #f 2274 25798 ())
(2309 #f 2308 118 ())
(2310 #f 2274 25910 ())
(2311 #f 2310 118 ())
(2312 #f 2274 26022 ())
(2313 #f 2312 118 ())
(2314 #f 2274 26134 ())
(2315 #f 2314 118 ())
(2316 #f 2274 26246 ())
(2317 #f 2316 118 ())
(2318 #f 2274 27045 ())
(2319 #f 2318 118 ())
(2320 #f 2274 29391 ())
(2321 #f 2274 29573 ())
(2322 #f 2274 29629 ())
(2323 #f 2274 29685 ())
(2324 #f 2274 29855 ())
(2325 #f 2274 30107 ())
(2326 #f 2274 33342 ())
(2327 #f 2274 33564 ())
(2328 #f 2274 33620 ())
(2329 #f 2274 33676 ())
(2330 #f 2329 153 ())
(2331 #f 2274 33732 ())
(2332 #f 2331 336 ())
(2333 #f 2331 417 ())
(2334 #f 2274 34154 ())
(2335 #f 2274 34210 ())
(2336 #f 2335 183 ())
(2337 #f 2274 34281 ())
(2338 #f 2337 97 ())
(2339 #f 2274 34295 ())
(2340 #f 2339 45 ())
(2341 #f 2340 154 ())
(2342 #f 2339 68 ())
(2343 #f 2274 34588 ())
(2344 #f 2274 34644 ())
(2345 #f 2344 51 ())
(2346 #f 2274 34776 ())
(2347 #f 2274 34870 ())
(2348 #f 2274 34964 ())
(2349 #f 2348 64 ())
(2350 #f 2348 105 ())
(2351 #f 2348 130 ())
(2352 #f 2274 35058 ())
(2353 #f 2274 36496 ())
(2354 #f 2274 36651 ())
(2355 #f #f #f ())
-
