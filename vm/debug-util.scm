
(define (print-template-name template)
  (let ((name (vm-vector-ref (template-name template) 0)))
    (cond ((vm-eq? name null)
	   (format #t "()~%"))
	  ((vm-pair? name)
	   (format #t "(")
	   (do ((name name (vm-cdr name)))
	       ((vm-eq? null name)
		0)
	     (if (vm-symbol? (vm-car name))
		 (format #t "~A" (extract-string
				  (vm-symbol->string (vm-car name))))
		 (format #t "#f"))
	     (if (not (vm-eq? null (vm-cdr name)))
		 (format #t " ")))
	   (format #t ")~%"))
	  (else
	   (format #t "---~%")))))

(define (print-stack template cont)
  (print-template-name template)
  (let loop ((cont cont))
    (cond ((continuation? cont)
	   (print-template-name (continuation-template cont))
	   (loop (continuation-cont cont))))))

(define (show-env env)
  (let loop ((env env))
    (cond ((vm-vector? env)
	   (format #t "(")
	   (do ((i 1 (+ i 1)))
	       ((>= i (vm-vector-length env)))
	     (format #t "~A" (vm-vector-ref env i))
	     (if (not (= (+ i 1) (vm-vector-length env)))
		 (format #t " ")))
	   (format #t ")~%")
	   (loop (vm-vector-ref env 0))))))

(define (show-cont cont)
  (let ((template (continuation-template cont)))
    (print-template-name template)
    (show-env (continuation-env cont))
    (format #t "~D" (extract-fixnum (continuation-pc cont)))
    (really-disassemble template 0)
    (newline)))

(define (really-disassemble tem level)
  (let loop ((pc 0))
    (if (< pc (code-vector-length (template-code tem)))
        (loop (write-instruction tem pc level #t)))))

(define (newline-indent n)
  (newline)
  (do ((i n (- i 1)))
      ((= i 0))
    (display #\space)))

(define (write-instruction tem pc level write-sub-templates?)
  (let* ((code (template-code tem))
         (const tem)  ;constants vector
         (opcode (code-vector-ref code pc))
         (pc+1 (+ pc 1))
         (pc+2 (+ pc 2))
	 (pc+3 (+ pc 3))
         (lit (lambda ()
                (vm-vector-ref const (code-vector-ref code pc+1))))
         (delta (lambda ()
		  (+ (* (code-vector-ref code pc+1)
			byte-limit)
		     (code-vector-ref code pc+2)))))
    (newline-indent (* level 2))
    (if (< pc 10) (display " "))
    (write pc)
    (display "  (")
    (write (enumerand->name opcode op))
    (let ((new-pc
           (cond ((or (= opcode op/literal))
                  (display #\space)
                  (display #\')
                  (write (lit))
                  pc+2)
                 ((or (= opcode op/global)
                      (= opcode op/set-global!))
                  (display #\space)
                  (write `(location ,(extract-string
				      (vm-symbol->string (location-id (lit))))))
                  pc+2)
                 ((= opcode op/closure)
                  (display #\space)
                  (if write-sub-templates?
                      (really-disassemble (lit) (+ level 1))
                      (display "..."))
                  pc+2)
                 ((or (= opcode op/local)
                      (= opcode op/set-local!))
                  (display #\space)
                  (write (code-vector-ref code pc+1))
                  (display #\space)
                  (write (code-vector-ref code pc+2))
                  (+ pc 3))
                 ((or (= opcode op/check-nargs=)
                      (= opcode op/check-nargs>=)
                      (= opcode op/make-env)
                      (= opcode op/make-heap-env)
                      (= opcode op/make-rest-list)
                      (= opcode op/call)
                      (= opcode op/move-args-and-call)
                      (= opcode op/apply)
		      (= opcode op/local0)
		      (= opcode op/local1)
		      (= opcode op/local2)
		      (= opcode op/stack-ref))
		  (display #\space)
                  (write (code-vector-ref code pc+1))
                  pc+2)
                 ((or (= opcode op/jump-if-false)
                      (= opcode op/jump))
                  (display #\space)
                  (write `(-> ,(+ pc (+ (delta) 3))))
                  (+ pc 3))
                 ((= opcode op/make-cont)
                  (display #\space)
                  (write `(-> ,(+ pc (+ (delta) 4))))
                  (display #\space) 
                  (write (code-vector-ref code pc+3))
                  (+ pc 4))
                 (else pc+1))))
      (display #\) )
      new-pc)))


