; Copyright (c) 1994 Richard Kelsey.  See file COPYING.


(define-c-generator computed-goto #f
  (lambda (exits args depth exp)
    (bug "primop COMPUTED-GOTO found in initial expression"))
  (lambda (call depth)
    (bug "no type inference method for COMPUTED-GOTO"))
;   (lambda (call)
;     (do ((i 0 (+ i 1)))
; 	((>= i (call-exits call)))
;       (reconstruct-call-rep (lambda-body (call-arg call i))))
;     (check-call-arg-rep call (call-exits call) type/int8))
  (lambda (call)
    (do ((i 0 (+ i 1)))
	((>= i (call-exits call)))
      (add-coercions (lambda-body (call-arg call i))))
    (add-coercion call (call-exits call) type/int8))
  (lambda (call port indent)
    (generate-c-switch call port indent)))

(define (generate-c-switch call port indent)
  (let ((size (call-exits call)))
    (indent-to port indent)
    (display "switch (" port)
    (c-value (call-arg call size) port)
    (display ") {" port)
    (let ((indent (+ indent 2)))
      (do ((i 0 (+ i 1)))
	  ((>= i size))
	(indent-to port indent)
	(format port "case ~D : " i)
	(if (or (= i (- size 1))
		(not (node-equal? (call-arg call i) (call-arg call (+ i 1)))))
	    (write-c-switch-case (call-arg call i) port indent))))
    (indent-to port indent)
    (display "}" port)))

(define (write-c-switch-case node port indent)
  (writec port #\{)
  (write-c-block (lambda-body node) port (+ indent 2))
  (indent-to port (+ indent 2))
  (display "break;" port))


