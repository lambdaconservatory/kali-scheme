; Package uid -> name
(0 the-interfaces)
(1 meta-module-system)
(2 low-structures)
(3 run-time-structures)
(4 compiler-structures)
(5 initial-structures)
(6 usual-structures)
(7 vanilla-features-structures)
(8 cheat)
(9 alternate-structures)
(10 compiler-structures)
(11 linker-structures)
(12 scheme-level-0)
(13 scheme-level-1)
(14 records)
(15 bummed-define-record-types)
(16 methods)
(17 number-i/o)
(18 fluids)
(19 wind)
(20 ports)
(21 enumerated)
(22 architecture)
(23 conditions)
(24 templates)
(25 continuations)
(26 more-types)
(27 exceptions)
(28 interrupts)
(29 writing)
(30 reading)
(31 scheme-level-2)
(32 scheme-level-2-internal)
(33 weak)
(34 display-conditions)
(35 tables)
(36 filenames)
(37 meta-types)
(38 interfaces)
(39 syntactic)
(40 usual-macros)
(41 reconstruction)
(42 packages)
(43 scan)
(44 segments)
(45 compiler)
(46 defpackage)
(47 types)
(48 module-system)
(49 inline)
(50 environments)
(51 evaluation)
(52 scheme)
(53 mini-command)
(54 initial-system)
(55 ensures-loaded)
(56 for-reification)
-
; Location uid -> (name . package-uid)
(0 (current-cont . 12))
(1 (closure-template . 12))
(2 (continuation-ref . 12))
(3 (output-port? . 12))
(4 (closure? . 12))
(5 (complex? . 12))
(6 (arithmetic-shift . 12))
(7 (signal-condition . 12))
(8 (integer? . 12))
(9 (make-closure . 12))
(10 (template-ref . 12))
(11 (make-rectangular . 12))
(12 (string=? . 12))
(13 (extended-number? . 12))
(14 (reverse-list->string . 12))
(15 (denominator . 12))
(16 (call-with-values . 12))
(17 (weak-pointer-ref . 12))
(18 (find-all-symbols . 12))
(19 (code-vector? . 12))
(20 (pop . 12))
(21 (exp . 12))
(22 (sin . 12))
(23 (make-extended-number . 12))
(24 (cos . 12))
(25 (collect . 12))
(26 (external-lookup . 12))
(27 (tan . 12))
(28 (log . 12))
(29 (continuation-length . 12))
(30 (make-code-vector . 12))
(31 (cdr . 12))
(32 (bitwise-xor . 12))
(33 (car . 12))
(34 (string? . 12))
(35 (symbol? . 12))
(36 (set-cdr! . 12))
(37 (bitwise-not . 12))
(38 (vector? . 12))
(39 (closure-env . 12))
(40 (set-car! . 12))
(41 (bitwise-ior . 12))
(42 (number? . 12))
(43 (template-length . 12))
(44 (string-hash . 12))
(45 (pop-env . 12))
(46 (primitive-catch . 12))
(47 (make-string . 12))
(48 (input-port? . 12))
(49 (record? . 12))
(50 (make-vector . 12))
(51 (extended-number-set! . 12))
(52 (write-image . 12))
(53 (eq? . 12))
(54 (bitwise-and . 12))
(55 (location-id . 12))
(56 (code-vector-set! . 12))
(57 (set-location-id! . 12))
(58 (make-record . 12))
(59 (intern . 12))
(60 (values . 12))
(61 (unassigned . 12))
(62 (string-set! . 12))
(63 (vector-set! . 12))
(64 (extended-number-ref . 12))
(65 (unspecific . 12))
(66 (schedule-interrupt . 12))
(67 (code-vector-ref . 12))
(68 (find-all-xs . 12))
(69 (char-ready? . 12))
(70 (set-interrupt-handlers! . 12))
(71 (eof-object? . 12))
(72 (record-set! . 12))
(73 (ascii->char . 12))
(74 (char->ascii . 12))
(75 (set-enabled-interrupts! . 12))
(76 (external-value . 12))
(77 (make-immutable! . 12))
(78 (close-port . 12))
(79 (string-ref . 12))
(80 (immutable? . 12))
(81 (vector-ref . 12))
(82 (exact? . 12))
(83 (write-char . 12))
(84 (symbol->string . 12))
(85 (make-polar . 12))
(86 (record-ref . 12))
(87 (numerator . 12))
(88 (extended-number-length . 12))
(89 (error . 12))
(90 (exact->inexact . 12))
(91 (inexact->exact . 12))
(92 (apply . 12))
(93 (memory-status . 12))
(94 (code-vector-length . 12))
(95 (floor . 12))
(96 (with-continuation . 12))
(97 (magnitude . 12))
(98 (nargs . 12))
(99 (char=? . 12))
(100 (char<? . 12))
(101 (continuation? . 12))
(102 (remainder . 12))
(103 (vm-return . 12))
(104 (false . 12))
(105 (angle . 12))
(106 (open-port . 12))
(107 (string-length . 12))
(108 (external? . 12))
(109 (make-continuation . 12))
(110 (vector-length . 12))
(111 (template? . 12))
(112 (rational? . 12))
(113 (location? . 12))
(114 (external-name . 12))
(115 (set-exception-handler! . 12))
(116 (pair? . 12))
(117 (make-external . 12))
(118 (record-length . 12))
(119 (external-call . 12))
(120 (set-dynamic-state! . 12))
(121 (get-cont-from-heap . 12))
(122 (real-part . 12))
(123 (real? . 12))
(124 (make-template . 12))
(125 (imag-part . 12))
(126 (make-location . 12))
(127 (= . 12))
(128 (< . 12))
(129 (char? . 12))
(130 (quotient . 12))
(131 (/ . 12))
(132 (weak-pointer? . 12))
(133 (- . 12))
(134 (continuation-set! . 12))
(135 (peek-char . 12))
(136 (+ . 12))
(137 (* . 12))
(138 (contents . 12))
(139 (sqrt . 12))
(140 (read-char . 12))
(141 (set-contents! . 12))
(142 (push . 12))
(143 (make-weak-pointer . 12))
(144 (get-dynamic-state . 12))
(145 (trap . 12))
(146 (cons . 12))
(147 (template-set! . 12))
(148 (time . 12))
(149 (location-defined? . 12))
(150 (asin . 12))
(151 (write-string . 12))
(152 (vm-extension . 12))
(153 (force-output . 12))
(154 (acos . 12))
(155 (set-location-defined?! . 12))
(156 (atan . 12))
(157 (loophole . 12))
(158 (define-syntax . 12))
(159 (begin . 12))
(160 (letrec-syntax . 12))
(161 (%file-name% . 12))
(162 (structure-ref . 12))
(163 (quote . 12))
(164 (lambda . 12))
(165 (define . 12))
(166 (if . 12))
(167 (let-syntax . 12))
(168 (letrec . 12))
(169 (primitive-procedure . 12))
(170 (set! . 12))
(171 (with-aliases . 12))
(172 (call . 12))
(173 (and . 12))
(174 (cond . 12))
(175 (do . 12))
(176 (let . 12))
(177 (let* . 12))
(178 (or . 12))
(179 (char->integer . 12))
(180 (integer->char . 12))
(181 (ascii-limit . 12))
(182 (ascii-whitespaces . 12))
(183 (procedure? . 12))
(184 (invoke-closure . 12))
(185 (primitive-cwcc . 12))
(186 (make-undefined-location . 12))
(187 (vector-unassigned? . 12))
(188 (string-copy . 12))
(189 (string->symbol . 12))
(190 (*the-symbol-table* . 12))
(191 (flush-the-symbol-table! . 12))
(192 (restore-the-symbol-table! . 12))
(193 (maybe-open-input-file . 12))
(194 (maybe-open-output-file . 12))
(195 (open-input-file . 12))
(196 (open-output-file . 12))
(197 (close-input-port . 12))
(198 (close-output-port . 12))
(199 (make-condition . 12))
(200 (signal . 12))
(201 (warn . 12))
(202 (syntax-error . 12))
(203 (call-error . 12))
(204 (case . 13))
(205 (delay . 13))
(206 (quasiquote . 13))
(207 (syntax-rules . 13))
(208 (not . 13))
(209 (boolean? . 13))
(210 (eqv? . 13))
(211 (equal? . 13))
(212 (> . 13))
(213 (<= . 13))
(214 (>= . 13))
(215 (max . 13))
(216 (min . 13))
(217 (abs . 13))
(218 (zero? . 13))
(219 (positive? . 13))
(220 (negative? . 13))
(221 (even? . 13))
(222 (odd? . 13))
(223 (caar . 13))
(224 (cadr . 13))
(225 (cdar . 13))
(226 (cddr . 13))
(227 (caaar . 13))
(228 (caadr . 13))
(229 (cadar . 13))
(230 (caddr . 13))
(231 (cdaar . 13))
(232 (cdadr . 13))
(233 (cddar . 13))
(234 (cdddr . 13))
(235 (caaaar . 13))
(236 (caaadr . 13))
(237 (caadar . 13))
(238 (caaddr . 13))
(239 (cadaar . 13))
(240 (cadadr . 13))
(241 (caddar . 13))
(242 (cadddr . 13))
(243 (cdaaar . 13))
(244 (cdaadr . 13))
(245 (cdadar . 13))
(246 (cdaddr . 13))
(247 (cddaar . 13))
(248 (cddadr . 13))
(249 (cdddar . 13))
(250 (cddddr . 13))
(251 (null? . 13))
(252 (list . 13))
(253 (length . 13))
(254 (append . 13))
(255 (reverse . 13))
(256 (append-reverse . 13))
(257 (list-tail . 13))
(258 (list-ref . 13))
(259 (mem . 13))
(260 (memq . 13))
(261 (memv . 13))
(262 (member . 13))
(263 (ass . 13))
(264 (assv . 13))
(265 (assoc . 13))
(266 (assq . 13))
(267 (list? . 13))
(268 (char>? . 13))
(269 (char>=? . 13))
(270 (char<=? . 13))
(271 (char-whitespace? . 13))
(272 (char-lower-case? . 13))
(273 (char-upper-case? . 13))
(274 (char-numeric? . 13))
(275 (char-alphabetic? . 13))
(276 (char-case-delta . 13))
(277 (char-upcase . 13))
(278 (char-downcase . 13))
(279 (char-ci-compare . 13))
(280 (char-ci=? . 13))
(281 (char-ci<? . 13))
(282 (char-ci<=? . 13))
(283 (char-ci>? . 13))
(284 (char-ci>=? . 13))
(285 (string . 13))
(286 (substring . 13))
(287 (string-append . 13))
(288 (string->list . 13))
(289 (list->string . 13))
(290 (string-fill! . 13))
(291 (make-string=? . 13))
(292 (string-ci=? . 13))
(293 (make-string<? . 13))
(294 (string<? . 13))
(295 (string-ci<? . 13))
(296 (string>? . 13))
(297 (string<=? . 13))
(298 (string>=? . 13))
(299 (string-ci>? . 13))
(300 (string-ci<=? . 13))
(301 (string-ci>=? . 13))
(302 (vector . 13))
(303 (vector->list . 13))
(304 (list->vector . 13))
(305 (vector-fill! . 13))
(306 (map . 13))
(307 (map1 . 13))
(308 (map2+ . 13))
(309 (for-each . 13))
(310 (make-promise . 13))
(311 (force . 13))
(312 (unspecific . 13))
(313 (reduce . 13))
(314 (filter . 13))
(315 (pos . 13))
(316 (posq . 13))
(317 (posv . 13))
(318 (position . 13))
(319 (any . 13))
(320 (every . 13))
(321 (sublist . 13))
(322 (last . 13))
(323 (insert . 13))
(324 (inexact? . 13))
(325 (modulo . 13))
(326 (ceiling . 13))
(327 (truncate . 13))
(328 (round . 13))
(329 (gcd . 13))
(330 (euclid . 13))
(331 (lcm . 13))
(332 (expt . 13))
(333 (raise-to-integer-power . 13))
(334 (rationalize . 13))
(335 (simplest-rational . 13))
(336 (record-type . 14))
(337 (*record-type-uid* . 14))
(338 (*record-type* . 14))
(339 (make-record-type . 14))
(340 (record-type? . 14))
(341 (record-type-uid . 14))
(342 (record-type-name . 14))
(343 (record-type-field-names . 14))
(344 (record-type-discloser . 14))
(345 (record-field-index . 14))
(346 (record-constructor . 14))
(347 (record-accessor . 14))
(348 (record-modifier . 14))
(349 (record-predicate . 14))
(350 (define-record-discloser . 14))
(351 (disclose-record . 14))
(352 (default-record-discloser . 14))
(353 (:record-type . 14))
(354 (define-record-type . 15))
(355 (define-constructor . 15))
(356 (define-accessors . 15))
(357 (define-accessor . 15))
(358 (:simple-type . 16))
(359 (really-make-simple-type . 16))
(360 (simple-type-id . 16))
(361 (simple-type-priority . 16))
(362 (simple-type-predicate . 16))
(363 (simple-type-superiors . 16))
(364 (simple-type? . 16))
(365 (make-simple-type . 16))
(366 (compute-priority . 16))
(367 (*increment* . 16))
(368 (%type-priority . 16))
(369 (%type-predicate . 16))
(370 (%same-type? . 16))
(371 (define-simple-type . 16))
(372 (:syntax . 16))
(373 (:values . 16))
(374 (value? . 16))
(375 (:value . 16))
(376 (:zero . 16))
(377 (:number . 16))
(378 (:complex . 16))
(379 (:real . 16))
(380 (:rational . 16))
(381 (:integer . 16))
(382 (:exact-integer . 16))
(383 (:boolean . 16))
(384 (:symbol . 16))
(385 (:char . 16))
(386 (:null . 16))
(387 (:pair . 16))
(388 (:vector . 16))
(389 (:string . 16))
(390 (:procedure . 16))
(391 (:input-port . 16))
(392 (:output-port . 16))
(393 (:eof-object . 16))
(394 (:record . 16))
(395 (record-type-priority . 16))
(396 (:method-info . 16))
(397 (really-make-method-info . 16))
(398 (method-info-proc . 16))
(399 (method-info-n-ary? . 16))
(400 (method-info-types . 16))
(401 (method-info? . 16))
(402 (make-method-info . 16))
(403 (empty-method-list . 16))
(404 (insert-method . 16))
(405 (same-applicability? . 16))
(406 (every2 . 16))
(407 (more-specific? . 16))
(408 (more-specific-type? . 16))
(409 (:method-table . 16))
(410 (really-make-method-table . 16))
(411 (method-table-id . 16))
(412 (method-table-set-perform! . 16))
(413 (method-table-get-perform . 16))
(414 (make-generic . 16))
(415 (method-table-prototype . 16))
(416 (method-table-methods . 16))
(417 (set-method-table-methods! . 16))
(418 (method-table? . 16))
(419 (make-method-table . 16))
(420 (make-cell-for-generic . 16))
(421 (add-to-method-table! . 16))
(422 (set-final-method! . 16))
(423 (apply-generic . 16))
(424 (define-generic . 16))
(425 (methods->perform . 16))
(426 (last-action . 16))
(427 (one-action . 16))
(428 (argument-sequence-predicate . 16))
(429 (check-for-next . 16))
(430 (check-next . 16))
(431 (method-info . 16))
(432 (method-internal . 16))
(433 (with-next-method . 16))
(434 (define-method . 16))
(435 (&add-method! . 16))
(436 (add-method! . 16))
(437 (&type-predicate . 16))
(438 (type-predicate . 16))
(439 (&type-priority . 16))
(440 (type-priority . 16))
(441 (&type-superiors . 16))
(442 (type-superiors . 16))
(443 (&same-type? . 16))
(444 (same-type? . 16))
(445 (:singleton . 16))
(446 (singleton . 16))
(447 (singleton-value . 16))
(448 (compare-to . 16))
(449 (&disclose . 16))
(450 (disclose . 16))
(451 (proc->discloser . 16))
(452 (&number->string . 17))
(453 (number->string . 17))
(454 (integer->string . 17))
(455 (string->number . 17))
(456 (&really-string->number . 17))
(457 (really-string->number . 17))
(458 (:integer-string . 17))
(459 (set-exactness . 17))
(460 (string->integer . 17))
(461 (:thread . 18))
(462 (make-thread . 18))
(463 (thread-dynamic-env . 18))
(464 (current-thread . 18))
(465 (set-current-thread! . 18))
(466 (get-dynamic-env . 18))
(467 (set-dynamic-env! . 18))
(468 (initialize-dynamic-state! . 18))
(469 (with-dynamic-env . 18))
(470 (empty-dynamic-env . 18))
(471 (:fluid . 18))
(472 (make-fluid . 18))
(473 (fluid-top-level-value . 18))
(474 (set-fluid-top-level-value! . 18))
(475 (fluid . 18))
(476 (set-fluid! . 18))
(477 (let-fluid . 18))
(478 (let-fluids . 18))
(479 (fluid-lookup . 18))
(480 (dynamic-wind . 19))
(481 (call-with-current-continuation . 19))
(482 (continuation->procedure . 19))
(483 (:point . 19))
(484 (make-point . 19))
(485 (point-parent . 19))
(486 (point-dynamic-env . 19))
(487 (point-out . 19))
(488 (point-in . 19))
(489 (point-depth . 19))
(490 (root-point . 19))
(491 ($dynamic-point . 19))
(492 (get-dynamic-point . 19))
(493 (env-dynamic-point . 19))
(494 (let-dynamic-point . 19))
(495 (travel-to-point! . 19))
(496 ($current-input-port . 20))
(497 ($current-output-port . 20))
(498 ($error-output-port . 20))
(499 (current-input-port . 20))
(500 (current-output-port . 20))
(501 (error-output-port . 20))
(502 (with-initial-ports . 20))
(503 (call-with-mumble-file . 20))
(504 (call-with-input-file . 20))
(505 (call-with-output-file . 20))
(506 (with-input-from-file . 20))
(507 (with-output-to-file . 20))
(508 (newline . 20))
(509 (output-port-option . 20))
(510 (input-port-option . 20))
(511 (write . 29))
(512 (recurring-write . 29))
(513 (write-boolean . 29))
(514 (write-number . 29))
(515 (write-char-literal . 29))
(516 (character-name . 29))
(517 (write-string-literal . 29))
(518 (write-list . 29))
(519 (quotation? . 29))
(520 (write-vector . 29))
(521 (write-other . 29))
(522 (display-type-name . 29))
(523 (display . 29))
(524 (*condition-types* . 23))
(525 (condition-supertypes . 23))
(526 (define-condition-type . 23))
(527 (condition-predicate . 23))
(528 (condition? . 23))
(529 (condition-type . 23))
(530 (condition-stuff . 23))
(531 (error? . 23))
(532 (call-error? . 23))
(533 (read-error? . 23))
(534 (exception? . 23))
(535 (exception-opcode . 23))
(536 (exception-arguments . 23))
(537 (make-exception . 23))
(538 (warning? . 23))
(539 (syntax-error? . 23))
(540 (interrupt? . 23))
(541 (read . 30))
(542 (sub-read-carefully . 30))
(543 (reader-token-marker . 30))
(544 (make-reader-token . 30))
(545 (reader-token? . 30))
(546 (close-paren . 30))
(547 (dot . 30))
(548 (sub-read . 30))
(549 (read-dispatch-vector . 30))
(550 (read-terminating?-vector . 30))
(551 (set-standard-syntax! . 30))
(552 (set-standard-read-macro! . 30))
(553 (sub-read-list . 30))
(554 (gobble-line . 30))
(555 (*sharp-macros* . 30))
(556 (define-sharp-macro . 30))
(557 (sub-read-token . 30))
(558 (parse-token . 30))
(559 (strange-symbol-names . 30))
(560 (preferred-case . 30))
(561 (reading-error . 30))
(562 (:table . 35))
(563 (really-make-table . 35))
(564 (table-set!-procedure . 35))
(565 (set-table-set!-procedure! . 35))
(566 (table-ref-procedure . 35))
(567 (set-table-ref-procedure! . 35))
(568 (table-data . 35))
(569 (set-table-data! . 35))
(570 (table-size . 35))
(571 (set-table-size! . 35))
(572 (table? . 35))
(573 (table-ref . 35))
(574 (table-set! . 35))
(575 (linear-table-size-limit . 35))
(576 (table-size-limit . 35))
(577 (next-table-size . 35))
(578 (make-table-maker . 35))
(579 (null-entry . 35))
(580 (new-entry . 35))
(581 (make-assoc . 35))
(582 (eq?-assoc . 35))
(583 (make-linear-table-ref . 35))
(584 (make-linear-table-set! . 35))
(585 (make->hash-table . 35))
(586 (make-hash-table-ref . 35))
(587 (make-hash-table-set! . 35))
(588 (expand-hash-table! . 35))
(589 (table-enter-alist! . 35))
(590 (table-expand-table! . 35))
(591 (table-walk . 35))
(592 (really-table-walk . 35))
(593 (alist-walk . 35))
(594 (make-table-immutable! . 35))
(595 (table->entry-list . 35))
(596 (default-table-hash-function . 35))
(597 (symbol-hash . 35))
(598 (make-table . 35))
(599 (make-string-table . 35))
(600 (make-symbol-table . 35))
(601 (make-integer-table . 35))
(602 (:meta-type . 37))
(603 (really-make-type . 37))
(604 (type-info . 37))
(605 (type-more . 37))
(606 (type-mask . 37))
(607 (meta-type? . 37))
(608 (make-type . 37))
(609 (name->type-table . 37))
(610 (mask->name-table . 37))
(611 (name->type . 37))
(612 (set-type-name! . 37))
(613 (*mask* . 37))
(614 (new-type-bit . 37))
(615 (mask->type . 37))
(616 (bottom-type . 37))
(617 (error-type . 37))
(618 (bottom-type? . 37))
(619 (new-atomic-type . 37))
(620 (named-atomic-type . 37))
(621 (syntax-type . 37))
(622 (other-static-type . 37))
(623 (empty-rail-type . 37))
(624 (rail-type . 37))
(625 (make-optional-type . 37))
(626 (make-rest-type . 37))
(627 (head-type . 37))
(628 (head-type-really . 37))
(629 (tail-type . 37))
(630 (empty-rail-type? . 37))
(631 (rest-type? . 37))
(632 (optional-type? . 37))
(633 (mask/no-values . 37))
(634 (mask/two-or-more . 37))
(635 (mask/&rest . 37))
(636 (value-type . 37))
(637 (mask/value . 37))
(638 (value-type? . 37))
(639 (any-values-type . 37))
(640 (any-arguments-type . 37))
(641 (mask/one-or-more . 37))
(642 (same-type? . 37))
(643 (subtype? . 37))
(644 (meet-type . 37))
(645 (other-type-info . 37))
(646 (p . 37))
(647 (meet-rail . 37))
(648 (meet-procedure . 37))
(649 (meet? . 37))
(650 (meet-procedure? . 37))
(651 (join-type . 37))
(652 (join-rail . 37))
(653 (join-procedure . 37))
(654 (number-hierarchy . 37))
(655 (integer-type . 37))
(656 (rational-type . 37))
(657 (real-type . 37))
(658 (complex-type . 37))
(659 (number-type . 37))
(660 (exact-type . 37))
(661 (inexact-type . 37))
(662 (exact-integer-type . 37))
(663 (boolean-type . 37))
(664 (pair-type . 37))
(665 (null-type . 37))
(666 (record-type . 37))
(667 (any-procedure-type . 37))
(668 (other-value-type . 37))
(669 (mask/other . 37))
(670 (make-other-type . 37))
(671 (char-type . 37))
(672 (unspecific-type . 37))
(673 (string-type . 37))
(674 (symbol-type . 37))
(675 (vector-type . 37))
(676 (escape-type . 37))
(677 (structure-type . 37))
(678 (mask/procedure . 37))
(679 (procedure-type . 37))
(680 (make-procedure-type . 37))
(681 (procedure-type-domain . 37))
(682 (procedure-type-codomain . 37))
(683 (restrictive? . 37))
(684 (sexp->type . 37))
(685 (sexp->values-type . 37))
(686 (type->sexp . 37))
(687 (atomic-type->sexp . 37))
(688 (rail-type->sexp . 37))
(689 (disjoin-type . 37))
(690 (disjoin-rest . 37))
(691 (mask/number . 37))
(692 (make-some-values-type . 37))
(693 (proc . 37))
(694 (some-values . 37))
(695 (procedure-type? . 37))
(696 (fixed-arity-procedure-type? . 37))
(697 (procedure-type-arity . 37))
(698 (procedure-type-argument-types . 37))
(699 (usual-operator-type . 39))
(700 (:operator . 39))
(701 (make-operator . 39))
(702 (operator-name . 39))
(703 (operator-uid . 39))
(704 (operator-nargs . 39))
(705 (operator-type . 39))
(706 (set-operator-type! . 39))
(707 (operator? . 39))
(708 (get-operator . 39))
(709 (*operator-uid* . 39))
(710 (operators-table . 39))
(711 (number-of-operators . 39))
(712 (the-operators . 39))
(713 (make-operator-table . 39))
(714 (operator-table-ref . 39))
(715 (operator-lookup . 39))
(716 (operator-define! . 39))
(717 (:node . 39))
(718 (really-make-node . 39))
(719 (node-plist . 39))
(720 (set-node-plist! . 39))
(721 (node-form . 39))
(722 (node-operator-id . 39))
(723 (node? . 39))
(724 (make-node . 39))
(725 (node-ref . 39))
(726 (node-set! . 39))
(727 (node-operator . 39))
(728 (node-predicate . 39))
(729 (make-similar-node . 39))
(730 (:generated . 39))
(731 (make-generated . 39))
(732 (generated-parent-name . 39))
(733 (generated-env . 39))
(734 (generated-token . 39))
(735 (generated-symbol . 39))
(736 (generated? . 39))
(737 (generate-name . 39))
(738 (name->symbol . 39))
(739 (*generated-uid* . 39))
(740 (name-hash . 39))
(741 (desyntaxify . 39))
(742 (:transform . 39))
(743 (really-make-transform . 39))
(744 (transform-id . 39))
(745 (transform-source . 39))
(746 (transform-aux-names . 39))
(747 (transform-type . 39))
(748 (transform-env . 39))
(749 (transform-procedure . 39))
(750 (transform? . 39))
(751 (make-transform . 39))
(752 (maybe-transform . 39))
(753 (bind-aliases . 39))
(754 (make-name-generator . 39))
(755 (same-denotation? . 39))
(756 (binding? . 39))
(757 (binding-type . 39))
(758 (binding-place . 39))
(759 (binding-static . 39))
(760 (set-binding-place! . 39))
(761 (really-make-binding . 39))
(762 (make-binding . 39))
(763 (clobber-binding! . 39))
(764 (binding-transform . 39))
(765 (impose-type . 39))
(766 (forget-integration . 39))
(767 (classify . 39))
(768 (call-node? . 39))
(769 (name-node? . 39))
(770 (classify-literal . 39))
(771 (classify-call . 39))
(772 (classify-name . 39))
(773 (operator/name . 39))
(774 (classify-macro-application . 39))
(775 (classify-transform-application . 39))
(776 (maybe-transform-call . 39))
(777 (classify-operator-form . 39))
(778 (classifiers . 39))
(779 (define-classifier . 39))
(780 (unspecific-node . 39))
(781 (lookup . 39))
(782 (bind1 . 39))
(783 (bind . 39))
(784 (bindrec . 39))
(785 (literal? . 39))
(786 (number-of-required-args . 39))
(787 (n-ary? . 39))
(788 (normalize-formals . 39))
(789 (syntax? . 39))
(790 (name? . 39))
(791 (unbound? . 39))
(792 ($source-file-name . 39))
(793 (define-usual-suspects . 39))
(794 (process-syntax . 39))
(795 (get-funny . 39))
(796 (funny-name/reflective-tower . 39))
(797 (reflective-tower . 39))
(798 (scan-body . 39))
(799 (scan-body-forms . 39))
(800 (body-lossage . 39))
(801 (begin-node? . 39))
(802 (define-node? . 39))
(803 (schemify . 39))
(804 (schemifiers . 39))
(805 (define-schemifier . 39))
(806 (variable-type . 39))
(807 (variable-type? . 39))
(808 (variable-value-type . 39))
(809 (compatible-types? . 39))
(810 (usual-variable-type . 39))
(811 (undeclared-type . 39))
(812 (make-population . 33))
(813 (add-to-population! . 33))
(814 (weak-memq . 33))
(815 (population-reduce . 33))
(816 (population->list . 33))
(817 (walk-population . 33))
(818 (:interface . 38))
(819 (really-make-interface . 38))
(820 (interface-name . 38))
(821 (interface-clients . 38))
(822 (walk-method . 38))
(823 (ref-method . 38))
(824 (interface? . 38))
(825 (interface-ref . 38))
(826 (for-each-declaration . 38))
(827 (note-reference-to-interface! . 38))
(828 (make-interface . 38))
(829 (make-simple-interface . 38))
(830 (really-make-simple-interface . 38))
(831 (make-compound-interface . 38))
(832 (:structure . 42))
(833 (really-make-structure . 42))
(834 (structure-name . 42))
(835 (structure-clients . 42))
(836 (structure-package . 42))
(837 (structure-interface-really . 42))
(838 (set-structure-interface! . 42))
(839 (structure-interface-thunk . 42))
(840 (structure? . 42))
(841 (structure-interface . 42))
(842 (initialize-structure! . 42))
(843 (make-structure . 42))
(844 (structure-unstable? . 42))
(845 (for-each-export . 42))
(846 (:package . 42))
(847 (really-make-package . 42))
(848 (package-cached . 42))
(849 (package-clients . 42))
(850 (package-plist . 42))
(851 (set-package-plist! . 42))
(852 (package-accesses-thunk . 42))
(853 (package-opens-thunk . 42))
(854 (set-package-opens-thunk! . 42))
(855 (package->environment . 42))
(856 (set-package->environment! . 42))
(857 (package-loaded? . 42))
(858 (set-package-loaded?! . 42))
(859 (package-clauses . 42))
(860 (package-file-name . 42))
(861 (package-get-location . 42))
(862 (set-package-get-location! . 42))
(863 (package-integrate? . 42))
(864 (set-package-integrate?! . 42))
(865 (package-unstable? . 42))
(866 (package-definitions . 42))
(867 (package-opens-really . 42))
(868 (set-package-opens! . 42))
(869 (package-uid . 42))
(870 (package? . 42))
(871 (make-package . 42))
(872 (really-package->environment . 42))
(873 (new-package-uid . 42))
(874 (*package-uid* . 42))
(875 (package-name-table . 42))
(876 (package-name . 42))
(877 (set-package-name! . 42))
(878 (package-opens . 42))
(879 (initialize-package-if-necessary! . 42))
(880 (package-accesses . 42))
(881 (make-simple-package . 42))
(882 (package-definition . 42))
(883 (package-define! . 42))
(884 (really-package-define! . 42))
(885 (package-lookup . 42))
(886 (really-package-lookup . 42))
(887 (structure-lookup . 42))
(888 (generic-lookup . 42))
(889 (initialize-package! . 42))
(890 (define-funny-names! . 42))
(891 (package-define-funny! . 42))
(892 (funny-name/the-package . 42))
(893 (extract-package-from-environment . 42))
(894 (for-each-definition . 42))
(895 (get-new-location . 42))
(896 (make-new-location . 42))
(897 ($get-location . 42))
(898 (*location-uid* . 42))
(899 (location-info-table . 42))
(900 (flush-location-names . 42))
(901 (package-get . 42))
(902 (package-put! . 42))
(903 (package-note-caching . 42))
(904 (maybe-fix-place . 42))
(905 (follow-forwarding-pointers . 42))
(906 (environment-ref . 50))
(907 (environment-set! . 50))
(908 (environment-define! . 50))
(909 (*structure-ref . 50))
(910 (carefully . 50))
(911 ($interaction-environment . 50))
(912 (interaction-environment . 50))
(913 (set-interaction-environment! . 50))
(914 (with-interaction-environment . 50))
(915 (scheme-report-environment . 50))
(916 (*scheme-report-environment* . 50))
(917 (*scheme-report-number* . 50))
(918 (set-scheme-report-environment! . 50))
(919 (make-reflective-tower . 50))
(920 (set-reflective-tower-maker! . 50))
(921 (the-usual-transforms . 40))
(922 (define-usual-macro . 40))
(923 (usual-transform . 40))
(924 (process-rules . 40))
(925 (segment-pattern? . 40))
(926 (segment-template? . 40))
(927 (indicators-for-zero-or-more . 40))
(928 (find-free-names-in-syntax-rules . 40))
(929 (namestring . 36))
(930 (directory-component-separator . 36))
(931 (type-component-separator . 36))
(932 (namestring-component . 36))
(933 (file-name-preferred-case . 36))
(934 (*scheme-file-type* . 36))
(935 (*load-file-type* . 36))
(936 (file-name-directory . 36))
(937 (file-name-nondirectory . 36))
(938 (file-nondirectory-position . 36))
(939 (string-posq . 36))
(940 (*translations* . 36))
(941 (translations . 36))
(942 (set-translation! . 36))
(943 (translate . 36))
(944 ($note-file-package . 43))
(945 (scan-forms . 43))
(946 (scan-file . 43))
(947 (scan-form-list . 43))
(948 (scan-form . 43))
(949 (process-define-syntax . 43))
(950 (scan-structures . 43))
(951 (scan-package . 43))
(952 (optimize . 43))
(953 (check-structure . 43))
(954 (initialize-usual-transforms! . 43))
(955 (define-all-operators . 43))
(956 (make-define-primitive-node . 43))
(957 (optimizers-table . 43))
(958 (get-optimizer . 43))
(959 (set-optimizer! . 43))
(960 ($note-undefined . 43))
(961 (note-undefined! . 43))
(962 (noting-undefined-variables . 43))
(963 (define-enumeration . 21))
(964 (components . 21))
(965 (enum . 21))
(966 (enumerand->name . 21))
(967 (name->enumerand . 21))
(968 (lookup-enumerand . 21))
(969 (bits-used-per-byte . 22))
(970 (maximum-stack-args . 22))
(971 (define-instruction-set . 22))
(972 (op . 22))
(973 (op-enumeration . 22))
(974 (op-count . 22))
(975 (opcode-arg-specs . 22))
(976 (interrupt . 22))
(977 (interrupt-enumeration . 22))
(978 (interrupt-count . 22))
(979 (time-option . 22))
(980 (time-option-enumeration . 22))
(981 (time-option-count . 22))
(982 (memory-status-option . 22))
(983 (memory-status-option-enumeration . 22))
(984 (memory-status-option-count . 22))
(985 (stob . 22))
(986 (stob-enumeration . 22))
(987 (stob-count . 22))
(988 (stob-data . 22))
(989 (node-type . 41))
(990 (reconstruct-type . 41))
(991 (reconstruct . 41))
(992 (reconstructors . 41))
(993 (define-reconstructor . 41))
(994 (careful-codomain . 41))
(995 (reconstruct-body . 41))
(996 (operator/name . 41))
(997 (reconstruct-name . 41))
(998 (reconstruct-call . 41))
(999 (fork-constraints . 41))
(1000 (examine . 41))
(1001 (node->type . 41))
(1002 (call-node? . 41))
(1003 (name-node? . 41))
(1004 (begin-node? . 41))
(1005 (reconstruct-apply . 41))
(1006 (declare-operator-type . 41))
(1007 (last . 41))
(1008 (constant-type . 41))
(1009 (template-overhead . 24))
(1010 (template-code . 24))
(1011 (template-info . 24))
(1012 (set-template-code! . 24))
(1013 (set-template-info! . 24))
(1014 (make-segment . 44))
(1015 (segment-size . 44))
(1016 (segment-emitter . 44))
(1017 (segment->template . 44))
(1018 (segment-data->template . 44))
(1019 (:assembly-state . 44))
(1020 (make-assembly-state . 44))
(1021 (astate-literals . 44))
(1022 (set-astate-literals! . 44))
(1023 (astate-count . 44))
(1024 (set-astate-count! . 44))
(1025 (astate-pc . 44))
(1026 (set-astate-pc! . 44))
(1027 (astate-code-vector . 44))
(1028 (make-astate . 44))
(1029 (emit-byte! . 44))
(1030 (emit-literal! . 44))
(1031 (emit-segment! . 44))
(1032 (empty-segment . 44))
(1033 (instruction . 44))
(1034 (sequentially . 44))
(1035 (sequentially-2 . 44))
(1036 (instruction-with-literal . 44))
(1037 (instruction-with-location . 44))
(1038 (instruction-with-template . 44))
(1039 (make-label . 44))
(1040 (instruction-using-label . 44))
(1041 (attach-label . 44))
(1042 (byte-limit . 44))
(1043 ($debug-data . 44))
(1044 (note-source-code . 44))
(1045 (note-environment . 44))
(1046 (emit-with-environment-maps! . 44))
(1047 ($environment-maps . 44))
(1048 (environment-maps-table . 44))
(1049 (new-template-uid . 44))
(1050 (*template-uid* . 44))
(1051 (template-uid . 44))
(1052 (set-template-uid! . 44))
(1053 (debug-flag-names . 44))
(1054 (type/debug-flags . 44))
(1055 (make-debug-flags . 44))
(1056 ($debug-flags . 44))
(1057 (debug-flag-accessor . 44))
(1058 (debug-flag-modifier . 44))
(1059 (keep-source-code? . 44))
(1060 (keep-environment-maps? . 44))
(1061 (keep-procedure-names? . 44))
(1062 (keep-file-names? . 44))
(1063 (tabulate-debug-data? . 44))
(1064 (debug-data-table . 44))
(1065 (with-fresh-compiler-state . 44))
(1066 (saving-and-restoring . 44))
(1067 (:debug-data . 44))
(1068 (make-debug-data . 44))
(1069 (debug-data-source . 44))
(1070 (set-debug-data-source! . 44))
(1071 (debug-data-env-maps . 44))
(1072 (set-debug-data-env-maps! . 44))
(1073 (debug-data-pc-in-parent . 44))
(1074 (debug-data-parent . 44))
(1075 (debug-data-name . 44))
(1076 (debug-data-uid . 44))
(1077 (debug-data? . 44))
(1078 (new-debug-data . 44))
(1079 (debug-data->info . 44))
(1080 (get-debug-data . 44))
(1081 (note-debug-data! . 44))
(1082 (interesting-debug-data? . 44))
(1083 (debug-data-names . 44))
(1084 (template-debug-data . 44))
(1085 (template-id . 44))
(1086 (template-name . 44))
(1087 (template-names . 44))
(1088 (compile-top . 45))
(1089 (compile . 45))
(1090 (compilators . 45))
(1091 (define-compilator . 45))
(1092 (compile-constant . 45))
(1093 (compile-begin . 45))
(1094 (compile-call . 45))
(1095 (lambda-node? . 45))
(1096 (compile-redex . 45))
(1097 (compile-unknown-call . 45))
(1098 (maybe-push-continuation . 45))
(1099 (push-arguments . 45))
(1100 (push-all-with-names . 45))
(1101 (compile-lambda . 45))
(1102 (compile-lambda-code . 45))
(1103 (compile-letrec . 45))
(1104 (compile-body . 45))
(1105 (operator/letrec . 45))
(1106 (make-cont . 45))
(1107 (cont-segment . 45))
(1108 (cont-source-info . 45))
(1109 (return-cont-segment . 45))
(1110 (return-cont . 45))
(1111 (return-cont? . 45))
(1112 (fall-through-cont . 45))
(1113 (fall-through-cont? . 45))
(1114 (ignore-values-segment . 45))
(1115 (ignore-values-cont . 45))
(1116 (ignore-values-cont? . 45))
(1117 (deliver-value . 45))
(1118 (named-cont . 45))
(1119 (cont-name . 45))
(1120 (bind-vars . 45))
(1121 (initial-cenv . 45))
(1122 (environment-level . 45))
(1123 (funny-name/lexical-level . 45))
(1124 (name-node-binding . 45))
(1125 (generate-trap . 45))
(1126 (careful-sequentially . 45))
(1127 (large-segment-size . 45))
(1128 (type-check . 45))
(1129 (set-type-check?! . 45))
(1130 (*type-check?* . 45))
(1131 (diagnose-call-error . 45))
(1132 (define-compiler-primitive . 45))
(1133 (closed-compilators . 45))
(1134 (define-closed-compilator . 45))
(1135 (get-closed-compilator . 45))
(1136 (direct-compilator . 45))
(1137 (direct-closed-compilator . 45))
(1138 (nargs->domain . 45))
(1139 (define-simple-primitive . 45))
(1140 (simple-compilator . 45))
(1141 (simple-closed-compilator . 45))
(1142 (symbol-append . 45))
(1143 (define-data-struct-primitives . 45))
(1144 (define-vector-primitives . 45))
(1145 (define-n-ary-compiler-primitive . 45))
(1146 (n-ary-primitive-compilator . 45))
(1147 (push-all-but-last . 45))
(1148 (compile-form . 45))
(1149 (compile-file . 45))
(1150 (compile-and-run-forms . 45))
(1151 (compile-and-run-file . 45))
(1152 (compile-and-run-scanned-forms . 45))
(1153 (compile-scanned-forms . 45))
(1154 (compile-scanned-form . 45))
(1155 (define-node? . 45))
(1156 (compile-definition . 45))
(1157 (get-location . 45))
(1158 (get-location-for-undefined . 45))
(1159 (get-location-for-unassignable . 45))
(1160 (package-accessor-on-demand . 45))
(1161 (location-on-demand . 45))
(1162 (package-undefineds . 45))
(1163 (location-for-reference . 45))
(1164 (package-undefined-but-assigneds . 45))
(1165 (location-for-assignment . 45))
(1166 (note-caching . 45))
(1167 (grumble . 45))
(1168 (make-startup-procedure . 45))
(1169 (an-ignore-values-cont . 45))
(1170 (eval . 51))
(1171 (load . 51))
(1172 (eval-from-file . 51))
(1173 (eval-scanned-forms . 51))
(1174 (invoke-template . 51))
(1175 (:closure . 26))
(1176 (:code-vector . 26))
(1177 (:location . 26))
(1178 (:template . 26))
(1179 (continuation-cont . 25))
(1180 (continuation-pc . 25))
(1181 (continuation-template . 25))
(1182 (continuation-env . 25))
(1183 (continuation-overhead . 25))
(1184 (continuation-arg . 25))
(1185 (continuation-arg-count . 25))
(1186 (continuation-parent . 25))
(1187 (:continuation . 25))
(1188 (usual-exception-handler . 27))
(1189 (define-exception-handler . 27))
(1190 (signal-exception . 27))
(1191 (exception-handlers . 27))
(1192 (make-opcode-generic! . 27))
(1193 (really-signal-condition . 27))
(1194 (with-handler . 27))
(1195 ($condition-handlers . 27))
(1196 (initialize-exceptions! . 27))
(1197 (last-resort-condition-handler . 27))
(1198 (report-utter-lossage . 27))
(1199 (continuation-preview . 27))
(1200 (ignore-errors . 27))
(1201 (*wna-handlers* . 27))
(1202 (define-wna-handler . 27))
(1203 (op/check-nargs= . 27))
(1204 (wna-lose . 27))
(1205 (comparison-wna . 27))
(1206 (display-condition . 34))
(1207 (really-display-condition . 34))
(1208 (*depth* . 34))
(1209 (*length* . 34))
(1210 (&disclose-condition . 34))
(1211 (disclose-condition . 34))
(1212 (limited-write . 34))
(1213 (command-processor . 53))
(1214 (mini-load . 53))
(1215 (read-string . 53))
(1216 (interrupt-handlers . 28))
(1217 (initialize-interrupts! . 28))
(1218 (time-option/ticks-per-second . 28))
(1219 (one-second . 28))
(1220 (no-interrupts . 28))
(1221 (all-interrupts . 28))
(1222 (with-interrupts-inhibited . 28))
(1223 (with-interrupts-allowed . 28))
(1224 (with-interrupts . 28))
(1225 (enabled-interrupts . 28))
(1226 (interrupt-before-heap-overflow! . 28))
(1227 (interrupt/memory-shortage . 28))
(1228 (memory-status-option/set-minimum-recovered-space! . 28))
(1229 (memory-status-option/heap-size . 28))
(1230 (usual-resumer . 32))
(1231 (start . 54))
(1232 (make-built-in-structures . 54))
(1233 (initialize-interaction-environment! . 54))
(1234 (make-initial-package . 54))
(1235 (make-tower . 54))
(1236 (inline-transform . 49))
(1237 (make-substitution . 49))
(1238 (substitute . 49))
(1239 (qualified? . 49))
(1240 (qualified->name . 49))
(1241 (get-qualified-env . 49))
(1242 (name->qualified . 49))
(1243 (qlookup . 49))
(1244 (operator . 56))
(1245 (simple-interface . 56))
(1246 (package . 56))
(1247 (transform . 56))
(1248 (:syntax . 47))
(1249 (:values . 47))
(1250 (:arguments . 47))
(1251 (:value . 47))
(1252 (procedure . 47))
(1253 (:boolean . 47))
(1254 (:char . 47))
(1255 (:null . 47))
(1256 (:unspecific . 47))
(1257 (:number . 47))
(1258 (:complex . 47))
(1259 (:real . 47))
(1260 (:rational . 47))
(1261 (:integer . 47))
(1262 (:exact-integer . 47))
(1263 (:pair . 47))
(1264 (:string . 47))
(1265 (:symbol . 47))
(1266 (:vector . 47))
(1267 (:procedure . 47))
(1268 (:input-port . 47))
(1269 (:output-port . 47))
(1270 (:error . 47))
(1271 (:escape . 47))
(1272 (:structure . 47))
(1273 (:type . 47))
(1274 (def . 46))
(1275 (define-values . 46))
(1276 (define-interface . 46))
(1277 (export . 46))
(1278 (compound-interface . 46))
(1279 (an-interface . 46))
(1280 (really-export . 46))
(1281 (define-structure . 46))
(1282 (define-structures . 46))
(1283 (a-package . 46))
(1284 (define-reflective-tower-maker . 46))
(1285 (export-reflective-tower-maker . 46))
(1286 (define-module . 46))
(1287 (make-a-package . 46))
(1288 (loser . 46))
(1289 (interface-of . 46))
(1290 (*verify-later!* . 46))
(1291 (verify-later! . 46))
(1292 (set-verify-later! . 46))
(1293 (ensure-loaded . 55))
-
; Template uid -> name, parent, pc in parent, env maps
(1 current-cont 0 4 ())
(2 closure-template 0 12 ())
(3 continuation-ref 0 20 ())
(4 output-port? 0 28 ())
(5 closure? 0 36 ())
(6 complex? 0 44 ())
(7 arithmetic-shift 0 52 ())
(8 signal-condition 0 60 ())
(9 integer? 0 68 ())
(10 make-closure 0 76 ())
(11 template-ref 0 84 ())
(12 make-rectangular 0 92 ())
(13 string=? 0 100 ())
(14 extended-number? 0 108 ())
(15 reverse-list->string 0 116 ())
(16 denominator 0 124 ())
(17 call-with-values 0 132 ())
(18 weak-pointer-ref 0 140 ())
(19 find-all-symbols 0 148 ())
(20 code-vector? 0 156 ())
(21 pop 0 164 ())
(22 exp 0 172 ())
(23 sin 0 180 ())
(24 make-extended-number 0 188 ())
(25 cos 0 196 ())
(26 collect 0 204 ())
(27 external-lookup 0 212 ())
(28 tan 0 220 ())
(29 log 0 228 ())
(30 continuation-length 0 236 ())
(31 make-code-vector 0 244 ())
(33 cdr 32 4 ())
(34 bitwise-xor 32 12 ())
(35 car 32 20 ())
(36 string? 32 28 ())
(37 symbol? 32 36 ())
(38 set-cdr! 32 44 ())
(39 bitwise-not 32 52 ())
(40 vector? 32 60 ())
(41 closure-env 32 68 ())
(42 set-car! 32 76 ())
(43 bitwise-ior 32 84 ())
(44 number? 32 92 ())
(45 template-length 32 100 ())
(46 string-hash 32 108 ())
(47 pop-env 32 116 ())
(48 primitive-catch 32 124 ())
(49 make-string 32 132 ())
(50 input-port? 32 140 ())
(51 record? 32 148 ())
(52 make-vector 32 156 ())
(53 extended-number-set! 32 164 ())
(54 write-image 32 172 ())
(55 eq? 32 180 ())
(56 bitwise-and 32 188 ())
(57 location-id 32 196 ())
(58 code-vector-set! 32 204 ())
(59 set-location-id! 32 212 ())
(60 make-record 32 220 ())
(61 intern 32 228 ())
(62 values 32 236 ())
(63 unassigned 32 244 ())
(64 string-set! 32 252 ())
(65 vector-set! 32 260 ())
(66 extended-number-ref 32 268 ())
(67 unspecific 32 276 ())
(68 schedule-interrupt 32 284 ())
(69 code-vector-ref 32 292 ())
(70 find-all-xs 32 300 ())
(71 char-ready? 32 308 ())
(72 set-interrupt-handlers! 32 316 ())
(73 eof-object? 32 324 ())
(74 record-set! 32 332 ())
(75 ascii->char 32 340 ())
(76 char->ascii 32 348 ())
(77 set-enabled-interrupts! 32 356 ())
(78 external-value 32 364 ())
(79 make-immutable! 32 372 ())
(80 close-port 32 380 ())
(81 string-ref 32 388 ())
(82 immutable? 32 396 ())
(83 vector-ref 32 404 ())
(84 exact? 32 412 ())
(85 write-char 32 420 ())
(86 symbol->string 32 428 ())
(87 make-polar 32 436 ())
(88 record-ref 32 444 ())
(89 numerator 32 452 ())
(90 extended-number-length 32 460 ())
(91 error 32 468 ())
(92 exact->inexact 32 476 ())
(93 inexact->exact 32 484 ())
(94 apply 32 492 ())
(95 memory-status 32 500 ())
(97 code-vector-length 96 4 ())
(98 floor 96 12 ())
(99 with-continuation 96 20 ())
(100 magnitude 96 28 ())
(101 nargs 96 36 ())
(102 char=? 96 44 ())
(103 char<? 96 52 ())
(104 continuation? 96 60 ())
(105 remainder 96 68 ())
(106 vm-return 96 76 ())
(107 false 96 84 ())
(108 angle 96 92 ())
(109 open-port 96 100 ())
(110 string-length 96 108 ())
(111 external? 96 116 ())
(112 make-continuation 96 124 ())
(113 vector-length 96 132 ())
(114 template? 96 140 ())
(115 rational? 96 148 ())
(116 location? 96 156 ())
(117 external-name 96 164 ())
(118 set-exception-handler! 96 172 ())
(119 pair? 96 180 ())
(120 make-external 96 188 ())
(121 record-length 96 196 ())
(122 external-call 96 204 ())
(123 set-dynamic-state! 96 212 ())
(124 get-cont-from-heap 96 220 ())
(125 real-part 96 228 ())
(126 real? 96 236 ())
(127 make-template 96 244 ())
(128 imag-part 96 252 ())
(129 make-location 96 260 ())
(130 = 96 268 ())
(131 < 96 276 ())
(132 char? 96 284 ())
(133 quotient 96 292 ())
(134 / 96 300 ())
(135 weak-pointer? 96 308 ())
(136 - 96 316 ())
(137 continuation-set! 96 324 ())
(138 peek-char 96 332 ())
(139 + 96 340 ())
(140 * 96 348 ())
(141 contents 96 356 ())
(142 sqrt 96 364 ())
(143 read-char 96 372 ())
(144 set-contents! 96 380 ())
(145 push 96 388 ())
(146 make-weak-pointer 96 396 ())
(147 get-dynamic-state 96 404 ())
(148 trap 96 412 ())
(149 cons 96 420 ())
(150 template-set! 96 428 ())
(151 time 96 436 ())
(152 location-defined? 96 444 ())
(153 asin 96 452 ())
(154 write-string 96 460 ())
(155 vm-extension 96 468 ())
(156 force-output 96 476 ())
(157 acos 96 484 ())
(158 set-location-defined?! 96 492 ())
(159 atan 96 500 ())
(161 char->integer 160 4 ())
(162 integer->char 160 12 ())
(163 invoke-closure 160 44 ())
(164 primitive-cwcc 160 52 ())
(165 #f 164 7 ())
(166 make-undefined-location 160 60 ())
(167 vector-unassigned? 160 68 ())
(168 string-copy 160 76 ())
(169 loop 168 26 ())
(170 string->symbol 160 84 ())
(171 flush-the-symbol-table! 160 99 ())
(172 restore-the-symbol-table! 160 107 ())
(173 maybe-open-input-file 160 127 ())
(174 maybe-open-output-file 160 135 ())
(175 open-input-file 160 143 ())
(176 open-output-file 160 151 ())
(178 signal 177 12 ())
(179 warn 177 20 ())
(180 syntax-error 177 28 ())
(181 call-error 177 36 ())
(183 not 182 4 ())
(184 boolean? 182 12 ())
(185 eqv? 182 20 ())
(186 equal? 182 28 ())
(187 loop 186 141 ())
(188 > 182 36 ())
(189 <= 182 44 ())
(190 >= 182 52 ())
(191 max 182 60 ())
(192 #f 191 8 ())
(193 min 182 68 ())
(194 #f 193 8 ())
(195 abs 182 76 ())
(196 zero? 182 84 ())
(197 positive? 182 92 ())
(198 negative? 182 100 ())
(199 even? 182 108 ())
(200 odd? 182 116 ())
(201 caar 182 124 ())
(202 cadr 182 132 ())
(203 cdar 182 140 ())
(204 cddr 182 148 ())
(205 caaar 182 156 ())
(206 caadr 182 164 ())
(207 cadar 182 172 ())
(208 caddr 182 180 ())
(209 cdaar 182 188 ())
(210 cdadr 182 196 ())
(211 cddar 182 204 ())
(212 cdddr 182 212 ())
(213 caaaar 182 220 ())
(214 caaadr 182 228 ())
(215 caadar 182 236 ())
(216 caaddr 182 244 ())
(217 cadaar 182 252 ())
(218 cadadr 182 260 ())
(219 caddar 182 268 ())
(220 cadddr 182 276 ())
(221 cdaaar 182 284 ())
(222 cdaadr 182 292 ())
(223 cdadar 182 300 ())
(224 cdaddr 182 308 ())
(225 cddaar 182 316 ())
(226 cddadr 182 324 ())
(227 cdddar 182 332 ())
(228 cddddr 182 340 ())
(229 null? 182 348 ())
(230 list 182 356 ())
(231 length 182 364 ())
(232 #f 231 5 ())
(233 append 182 372 ())
(234 recur 233 22 ())
(235 reverse 182 380 ())
(236 append-reverse 182 388 ())
(237 list-tail 182 396 ())
(238 list-ref 182 404 ())
(239 mem 182 412 ())
(240 #f 239 5 ())
(241 loop 240 9 ())
(243 ass 242 21 ())
(244 #f 243 5 ())
(245 loop 244 9 ())
(246 assq 242 63 ())
(247 list? 242 71 ())
(248 recur 247 9 ())
(249 char>? 242 79 ())
(250 char>=? 242 87 ())
(251 char<=? 242 95 ())
(252 char-whitespace? 242 103 ())
(253 char-lower-case? 242 111 ())
(254 char-upper-case? 242 119 ())
(255 char-numeric? 242 127 ())
(256 char-alphabetic? 242 135 ())
(257 char-upcase 242 157 ())
(258 char-downcase 242 165 ())
(259 char-ci-compare 242 173 ())
(260 #f 259 5 ())
(261 string 242 266 ())
(262 substring 242 274 ())
(263 loop##0 262 23 ())
(264 string-append 242 282 ())
(265 #f 264 10 ())
(266 loop 264 40 ())
(267 loop##1 266 36 ())
(268 string->list 242 290 ())
(269 loop##2 268 16 ())
(270 list->string 242 298 ())
(271 loop##3 270 28 ())
(272 string-fill! 242 306 ())
(273 loop##4 272 16 ())
(274 make-string=? 242 314 ())
(275 #f 274 5 ())
(276 loop 275 27 ())
(277 make-string<? 242 339 ())
(278 #f 277 5 ())
(279 loop 278 38 ())
(280 string>? 242 387 ())
(281 string<=? 242 395 ())
(282 string>=? 242 403 ())
(283 string-ci>? 242 411 ())
(284 string-ci<=? 242 419 ())
(285 string-ci>=? 242 427 ())
(286 vector 242 435 ())
(287 vector->list 242 443 ())
(288 loop##5 287 9 ())
(289 list->vector 242 451 ())
(290 loop##6 289 27 ())
(291 vector-fill! 242 459 ())
(292 loop##7 291 16 ())
(293 map 242 467 ())
(294 map1 242 475 ())
(295 map2+ 242 483 ())
(296 for-each 242 491 ())
(297 loop 296 12 ())
(298 make-promise 242 499 ())
(299 #f 298 11 ())
(300 force 242 507 ())
(302 unspecific 301 4 ())
(303 reduce 301 12 ())
(304 filter 301 20 ())
(305 #f 304 5 ())
(306 pos 301 28 ())
(307 #f 306 5 ())
(308 loop 307 9 ())
(309 any 301 87 ())
(310 every 301 95 ())
(311 sublist 301 103 ())
(312 recur 311 42 ())
(313 last 301 111 ())
(314 insert 301 119 ())
(316 inexact? 315 4 ())
(317 modulo 315 12 ())
(318 ceiling 315 20 ())
(319 truncate 315 28 ())
(320 round 315 36 ())
(321 gcd 315 44 ())
(322 #f 321 6 ())
(323 euclid 315 52 ())
(324 lcm 315 60 ())
(325 #f 324 6 ())
(326 expt 315 68 ())
(327 raise-to-integer-power 315 76 ())
(328 loop 327 21 ())
(330 rationalize 329 4 ())
(331 simplest-rational 329 12 ())
(332 simplest-rational-internal 331 9 ())
(334 record-type 333 4 ())
(335 make-record-type 333 27 ())
(336 record-type? 333 35 ())
(337 record-type-uid 333 43 ())
(338 record-type-name 333 51 ())
(339 record-type-field-names 333 59 ())
(340 record-type-discloser 333 67 ())
(341 record-field-index 333 75 ())
(342 loop 341 9 ())
(343 record-constructor 333 83 ())
(344 #f 343 9 ())
(345 #f 343 43 ())
(346 loop 345 30 ())
(347 record-accessor 333 91 ())
(348 #f 347 55 ())
(349 record-modifier 333 99 ())
(350 #f 349 55 ())
(351 record-predicate 333 107 ())
(352 #f 351 5 ())
(353 define-record-discloser 333 115 ())
(354 disclose-record 333 123 ())
(355 default-record-discloser 333 131 ())
(359 simple-type-id 358 44 ())
(360 simple-type-priority 358 52 ())
(361 simple-type-predicate 358 60 ())
(362 simple-type-superiors 358 68 ())
(364 make-simple-type 358 108 ())
(365 compute-priority 358 116 ())
(366 %type-priority 358 132 ())
(367 %type-predicate 358 140 ())
(368 %same-type? 358 148 ())
(369 value? 358 212 ())
(374 record-type-priority 373 40 ())
(375 method-info-proc 373 89 ())
(376 method-info-n-ary? 373 97 ())
(377 method-info-types 373 105 ())
(378 make-method-info 373 130 ())
(380 empty-method-list 373 153 ())
(381 insert-method 373 161 ())
(382 recur 381 9 ())
(383 same-applicability? 373 169 ())
(384 every2 373 177 ())
(385 more-specific? 373 185 ())
(386 loop 385 106 ())
(387 more-specific-type? 373 193 ())
(388 method-table-id 373 241 ())
(389 method-table-set-perform! 373 249 ())
(390 method-table-get-perform 373 257 ())
(391 make-generic 373 265 ())
(392 method-table-prototype 373 273 ())
(393 method-table-methods 373 281 ())
(394 set-method-table-methods! 373 289 ())
(396 make-method-table 373 329 ())
(397 #f 396 48 ())
(398 #f 396 70 ())
(399 make-cell-for-generic 373 337 ())
(400 #f 399 7 ())
(401 #f 399 10 ())
(402 #f 399 13 ())
(403 add-to-method-table! 373 345 ())
(404 set-final-method! 373 353 ())
(405 apply-generic 373 361 ())
(406 methods->perform 373 369 ())
(407 recur 406 9 ())
(408 last-action 373 377 ())
(409 #f 408 5 ())
(410 one-action 373 385 ())
(411 #f 410 5 ())
(412 #f 411 19 ())
(413 argument-sequence-predicate 373 393 ())
(414 recur 413 9 ())
(415 check-for-next 373 401 ())
(416 #f 415 5 ())
(417 check-next 373 409 ())
(418 #f 417 5 ())
(419 add-method! 373 463 ())
(421 add-method! 420 57 ())
(422 type-predicate 420 130 ())
(423 &type-predicate 420 207 ())
(424 &type-predicate 420 269 ())
(425 type-priority 420 334 ())
(426 &type-priority 420 411 ())
(427 &type-priority 420 473 ())
(429 type-superiors 428 47 ())
(430 &type-superiors 428 124 ())
(431 &type-superiors 428 186 ())
(432 same-type? 428 254 ())
(433 &same-type? 428 334 ())
(434 &same-type? 428 399 ())
(436 singleton-value 435 4 ())
(438 compare-to 435 27 ())
(439 #f 438 5 ())
(440 &type-predicate 435 75 ())
(441 &type-priority 435 137 ())
(442 &same-type? 435 202 ())
(443 disclose 435 267 ())
(444 &disclose 435 344 ())
(445 &disclose 435 406 ())
(446 &add-method! 435 480 ())
(447 proc->discloser 435 502 ())
(448 #f 447 5 ())
(449 #f 448 5 ())
(452 &number->string 451 44 ())
(453 &number->string 451 109 ())
(454 &number->string 451 174 ())
(455 integer->digit 451 226 ())
(456 integer->string 451 231 ())
(457 recur 456 36 ())
(458 string->number 451 245 ())
(459 loop 458 160 ())
(460 radix-is 459 70 ())
(461 exactness-is 459 73 ())
(462 loop 459 235 ())
(463 &really-string->number 451 329 ())
(465 loop 464 16 ())
(466 &really-string->number 451 429 ())
(467 set-exactness 451 451 ())
(468 digit->integer 451 491 ())
(469 do-it 451 496 ())
(470 loop 469 36 ())
(471 string->integer 451 501 ())
(473 thread-dynamic-env 472 44 ())
(474 current-thread 472 52 ())
(475 set-current-thread! 472 60 ())
(476 get-dynamic-env 472 68 ())
(477 set-dynamic-env! 472 76 ())
(478 initialize-dynamic-state! 472 84 ())
(479 with-dynamic-env 472 92 ())
(480 #f 479 27 ())
(481 empty-dynamic-env 472 100 ())
(482 fluid-top-level-value 472 148 ())
(483 set-fluid-top-level-value! 472 156 ())
(484 fluid 472 164 ())
(485 set-fluid! 472 172 ())
(486 let-fluid 472 180 ())
(487 let-fluids 472 188 ())
(488 loop 487 10 ())
(489 fluid-lookup 472 196 ())
(491 dynamic-wind 490 4 ())
(492 #f 491 85 ())
(493 call-with-current-continuation 490 12 ())
(494 #f 493 5 ())
(495 continuation->procedure 490 20 ())
(496 #f 495 5 ())
(497 #f 496 54 ())
(498 point-parent 490 68 ())
(499 point-dynamic-env 490 76 ())
(500 point-out 490 84 ())
(501 point-in 490 92 ())
(502 point-depth 490 100 ())
(505 get-dynamic-point 490 153 ())
(506 env-dynamic-point 490 161 ())
(507 let-dynamic-point 490 169 ())
(508 travel-to-point! 490 177 ())
(510 current-input-port 509 52 ())
(511 current-output-port 509 60 ())
(512 error-output-port 509 68 ())
(513 with-initial-ports 509 76 ())
(514 call-with-mumble-file 509 84 ())
(515 #f 514 5 ())
(516 #f 515 9 ())
(517 #f 515 12 ())
(518 #f 515 15 ())
(519 with-input-from-file 509 132 ())
(520 #f 519 8 ())
(521 with-output-to-file 509 140 ())
(522 #f 521 8 ())
(523 newline 509 148 ())
(524 output-port-option 509 156 ())
(525 input-port-option 509 164 ())
(527 write 526 4 ())
(528 recur 527 26 ())
(529 recurring-write 526 12 ())
(530 write-boolean 526 20 ())
(531 write-number 526 28 ())
(532 write-char-literal 526 36 ())
(533 character-name 526 44 ())
(534 write-string-literal 526 52 ())
(535 loop##8 534 22 ())
(536 write-list 526 60 ())
(537 loop 536 67 ())
(538 quotation? 526 68 ())
(539 write-vector 526 76 ())
(540 loop 539 52 ())
(541 write-other 526 84 ())
(542 #f 541 57 ())
(543 display-type-name 526 92 ())
(544 loop##9 543 83 ())
(545 display 526 100 ())
(546 recur 545 26 ())
(548 condition-supertypes 547 12 ())
(549 define-condition-type 547 20 ())
(550 #f 549 19 ())
(551 condition-predicate 547 28 ())
(552 #f 551 5 ())
(553 condition? 547 36 ())
(554 make-exception 547 204 ())
(556 read 555 4 ())
(557 loop 556 24 ())
(558 sub-read-carefully 555 12 ())
(559 make-reader-token 555 37 ())
(560 reader-token? 555 45 ())
(561 sub-read 555 87 ())
(563 set-standard-syntax! 555 121 ())
(564 sub-read-whitespace 555 130 ())
(566 sub-read-constituent 555 150 ())
(568 set-standard-read-macro! 555 190 ())
(569 sub-read-list 555 198 ())
(575 loop 574 11 ())
(577 gobble-line 555 332 ())
(578 loop 577 9 ())
(579 define-sharp-macro 555 348 ())
(585 number-sharp-macro 555 434 ())
(587 sub-read-token 555 453 ())
(588 loop 587 9 ())
(589 parse-token 555 461 ())
(590 reading-error 555 507 ())
(592 table-set!-procedure 591 44 ())
(593 set-table-set!-procedure! 591 52 ())
(594 table-ref-procedure 591 60 ())
(595 set-table-ref-procedure! 591 68 ())
(596 table-data 591 76 ())
(597 set-table-data! 591 84 ())
(598 table-size 591 92 ())
(599 set-table-size! 591 100 ())
(600 table-ref 591 125 ())
(601 table-set! 591 133 ())
(602 next-table-size 591 157 ())
(603 make-table-maker 591 165 ())
(604 #f 603 67 ())
(605 new-entry 591 180 ())
(606 make-assoc 591 188 ())
(607 #f 606 17 ())
(608 loop 607 9 ())
(609 eq?-assoc 591 196 ())
(610 loop 609 9 ())
(611 make-linear-table-ref 591 204 ())
(612 #f 611 5 ())
(613 make-linear-table-set! 591 212 ())
(614 #f 613 5 ())
(615 make->hash-table 591 220 ())
(616 #f 615 37 ())
(617 make-hash-table-ref 591 228 ())
(618 #f 617 5 ())
(619 make-hash-table-set! 591 236 ())
(620 #f 619 5 ())
(621 expand-hash-table! 591 244 ())
(622 loop##10 621 43 ())
(623 table-enter-alist! 591 252 ())
(624 loop##11 623 19 ())
(625 table-expand-table! 591 260 ())
(626 table-walk 591 268 ())
(627 #f 626 5 ())
(628 really-table-walk 591 276 ())
(629 loop##12 628 62 ())
(630 alist-walk 591 284 ())
(631 loop##13 630 9 ())
(632 make-table-immutable! 591 292 ())
(633 table->entry-list 591 300 ())
(634 #f 633 14 ())
(635 default-table-hash-function 591 308 ())
(636 symbol-hash 591 316 ())
(637 make-table 591 345 ())
(640 type-info 639 44 ())
(641 type-more 639 52 ())
(642 type-mask 639 60 ())
(644 make-type 639 100 ())
(645 name->type 639 136 ())
(646 set-type-name! 639 144 ())
(647 new-type-bit 639 160 ())
(648 mask->type 639 168 ())
(649 bottom-type? 639 205 ())
(651 new-atomic-type 650 19 ())
(652 named-atomic-type 650 27 ())
(653 rail-type 650 80 ())
(654 make-optional-type 650 88 ())
(655 make-rest-type 650 96 ())
(656 head-type 650 104 ())
(657 head-type-really 650 112 ())
(658 tail-type 650 120 ())
(659 empty-rail-type? 650 128 ())
(660 rest-type? 650 136 ())
(661 optional-type? 650 144 ())
(662 value-type? 650 268 ())
(663 same-type? 650 328 ())
(664 subtype? 650 336 ())
(665 meet-type 650 344 ())
(666 other-type-info 650 352 ())
(667 p 650 360 ())
(668 meet-rail 650 368 ())
(669 meet-procedure 650 376 ())
(670 meet? 650 384 ())
(671 meet-procedure? 650 392 ())
(672 join-type 650 400 ())
(673 join-rail 650 408 ())
(674 join-procedure 650 416 ())
(675 loop 650 437 ())
(677 make-other-type 676 222 ())
(678 procedure-type 676 362 ())
(679 make-procedure-type 676 370 ())
(680 procedure-type-domain 676 378 ())
(681 procedure-type-codomain 676 386 ())
(682 restrictive? 676 394 ())
(683 sexp->type 676 402 ())
(684 #f 683 234 ())
(685 #f 683 282 ())
(686 sexp->values-type 676 410 ())
(687 type->sexp 676 418 ())
(688 #f 687 122 ())
(689 atomic-type->sexp 676 426 ())
(690 rail-type->sexp 676 434 ())
(691 recur 690 9 ())
(692 disjoin-type 676 442 ())
(693 loop##14 692 228 ())
(694 disjoin-rest 676 450 ())
(695 make-some-values-type 676 471 ())
(696 procedure-type? 676 479 ())
(697 fixed-arity-procedure-type? 676 487 ())
(698 loop 697 23 ())
(699 procedure-type-arity 676 495 ())
(700 loop##15 699 9 ())
(701 procedure-type-argument-types 676 503 ())
(702 recur 701 9 ())
(705 operator-name 704 4 ())
(706 operator-uid 704 12 ())
(707 operator-nargs 704 20 ())
(708 operator-type 704 28 ())
(709 set-operator-type! 704 36 ())
(711 get-operator 704 76 ())
(712 make-operator-table 704 126 ())
(713 operator-lookup 704 142 ())
(714 operator-define! 704 150 ())
(715 node-plist 704 198 ())
(716 set-node-plist! 704 206 ())
(717 node-form 704 214 ())
(718 node-operator-id 704 222 ())
(720 make-node 704 262 ())
(721 node-ref 704 270 ())
(722 node-set! 704 278 ())
(723 loop 722 78 ())
(724 node-operator 704 286 ())
(725 node-predicate 704 294 ())
(726 #f 725 30 ())
(727 make-similar-node 704 302 ())
(728 generated-parent-name 704 350 ())
(729 generated-env 704 358 ())
(730 generated-token 704 366 ())
(731 generated-symbol 704 374 ())
(733 generate-name 704 414 ())
(734 name->symbol 704 422 ())
(735 name-hash 704 438 ())
(736 desyntaxify 704 446 ())
(737 loop 736 237 ())
(738 transform-id 704 494 ())
(739 transform-source 704 502 ())
(741 transform-aux-names 740 4 ())
(742 transform-type 740 12 ())
(743 transform-env 740 20 ())
(744 transform-procedure 740 28 ())
(745 make-transform 740 53 ())
(747 maybe-transform 740 76 ())
(748 compare 747 67 ())
(749 bind-aliases 740 84 ())
(750 #f 749 22 ())
(751 make-name-generator 740 92 ())
(752 #f 751 10 ())
(753 same-denotation? 740 100 ())
(754 binding-type 740 116 ())
(755 binding-place 740 124 ())
(756 binding-static 740 132 ())
(757 set-binding-place! 740 140 ())
(758 really-make-binding 740 148 ())
(759 make-binding 740 156 ())
(760 clobber-binding! 740 164 ())
(761 binding-transform 740 172 ())
(762 impose-type 740 180 ())
(763 forget-integration 740 188 ())
(764 classify 740 196 ())
(765 classify-literal 740 265 ())
(766 classify-call 740 295 ())
(767 classify-name 740 304 ())
(768 classify-macro-application 740 332 ())
(769 #f 768 14 ())
(770 classify-transform-application 740 361 ())
(771 #f 770 5 ())
(772 maybe-transform-call 740 370 ())
(773 #f 772 108 ())
(774 classify-operator-form 740 378 ())
(776 define-classifier 740 403 ())
(781 unspecific-node 780 43 ())
(783 lose 782 26 ())
(785 lookup 780 104 ())
(786 bind1 780 112 ())
(787 #f 786 5 ())
(788 bind 780 120 ())
(789 bindrec 780 128 ())
(790 #f 789 16 ())
(791 literal? 780 136 ())
(792 number-of-required-args 780 144 ())
(793 loop##16 792 9 ())
(794 n-ary? 780 152 ())
(795 normalize-formals 780 160 ())
(796 syntax? 780 168 ())
(797 name? 780 176 ())
(798 define-usual-suspects 780 208 ())
(799 #f 798 31 ())
(800 #f 799 61 ())
(801 #f 798 70 ())
(802 #f 801 57 ())
(803 #f 802 5 ())
(804 #f 798 93 ())
(805 process-syntax 780 216 ())
(806 #f 805 85 ())
(807 get-funny 780 224 ())
(808 reflective-tower 780 249 ())
(809 scan-body 780 257 ())
(810 #f 809 58 ())
(811 scan-body-forms 780 265 ())
(812 #f 811 171 ())
(813 body-lossage 780 273 ())
(814 schemify 780 321 ())
(816 define-schemifier 780 346 ())
(821 variable-type 780 420 ())
(822 variable-type? 780 428 ())
(823 compatible-types? 780 444 ())
(825 make-population 824 4 ())
(826 add-to-population! 824 12 ())
(827 weak-memq 824 20 ())
(828 population-reduce 824 28 ())
(829 loop##17 828 9 ())
(830 population->list 824 36 ())
(831 walk-population 824 44 ())
(832 #f 831 5 ())
(834 interface-name 833 44 ())
(835 interface-clients 833 52 ())
(836 walk-method 833 60 ())
(837 ref-method 833 68 ())
(839 interface-ref 833 108 ())
(840 for-each-declaration 833 116 ())
(841 note-reference-to-interface! 833 124 ())
(842 make-interface 833 132 ())
(843 make-simple-interface 833 140 ())
(844 #f 843 23 ())
(845 #f 844 58 ())
(846 really-make-simple-interface 833 148 ())
(847 #f 846 5 ())
(848 #f 846 8 ())
(849 make-compound-interface 833 156 ())
(850 #f 849 12 ())
(851 loop 850 9 ())
(852 #f 849 15 ())
(853 #f 852 5 ())
(854 #f 849 32 ())
(856 structure-name 855 44 ())
(857 structure-clients 855 52 ())
(858 structure-package 855 60 ())
(859 structure-interface-really 855 68 ())
(860 set-structure-interface! 855 76 ())
(861 structure-interface-thunk 855 84 ())
(863 structure-interface 855 124 ())
(864 initialize-structure! 855 132 ())
(865 make-structure 855 140 ())
(866 #f 865 75 ())
(867 structure-unstable? 855 148 ())
(868 for-each-export 855 156 ())
(869 #f 868 19 ())
(870 package-cached 855 204 ())
(872 package-clients 871 4 ())
(873 package-plist 871 12 ())
(874 set-package-plist! 871 20 ())
(875 package-accesses-thunk 871 28 ())
(876 package-opens-thunk 871 36 ())
(877 set-package-opens-thunk! 871 44 ())
(878 package->environment 871 52 ())
(879 set-package->environment! 871 60 ())
(880 package-loaded? 871 68 ())
(881 set-package-loaded?! 871 76 ())
(882 package-clauses 871 84 ())
(883 package-file-name 871 92 ())
(884 package-get-location 871 100 ())
(885 set-package-get-location! 871 108 ())
(886 package-integrate? 871 116 ())
(887 set-package-integrate?! 871 124 ())
(888 package-unstable? 871 132 ())
(889 package-definitions 871 140 ())
(890 package-opens-really 871 148 ())
(891 set-package-opens! 871 156 ())
(892 package-uid 871 164 ())
(894 make-package 871 204 ())
(895 really-package->environment 871 212 ())
(896 #f 895 5 ())
(897 new-package-uid 871 220 ())
(898 package-name 871 250 ())
(899 set-package-name! 871 258 ())
(900 package-opens 871 266 ())
(901 initialize-package-if-necessary! 871 274 ())
(902 package-accesses 871 282 ())
(903 make-simple-package 871 290 ())
(904 #f 903 60 ())
(905 #f 903 63 ())
(906 package-definition 871 298 ())
(907 package-define! 871 306 ())
(908 really-package-define! 871 314 ())
(909 package-lookup 871 322 ())
(910 really-package-lookup 871 330 ())
(911 loop 910 80 ())
(912 structure-lookup 871 338 ())
(913 generic-lookup 871 346 ())
(914 initialize-package! 871 354 ())
(915 #f 914 35 ())
(916 #f 914 46 ())
(917 define-funny-names! 871 362 ())
(918 package-define-funny! 871 370 ())
(919 extract-package-from-environment 871 395 ())
(920 for-each-definition 871 403 ())
(921 #f 920 5 ())
(922 get-new-location 871 411 ())
(923 make-new-location 871 419 ())
(924 flush-location-names 871 466 ())
(925 package-get 871 474 ())
(926 package-put! 871 482 ())
(927 package-note-caching 871 490 ())
(928 loop 927 54 ())
(929 maybe-fix-place 871 498 ())
(930 follow-forwarding-pointers 871 506 ())
(932 environment-ref 931 4 ())
(933 environment-set! 931 12 ())
(934 #f 933 98 ())
(935 environment-define! 931 20 ())
(936 *structure-ref 931 28 ())
(937 carefully 931 36 ())
(938 interaction-environment 931 60 ())
(939 set-interaction-environment! 931 68 ())
(940 with-interaction-environment 931 76 ())
(941 scheme-report-environment 931 84 ())
(942 set-scheme-report-environment! 931 107 ())
(943 make-reflective-tower 931 115 ())
(944 recur 943 9 ())
(945 #f 944 5 ())
(946 set-reflective-tower-maker! 931 141 ())
(948 define-usual-macro 947 18 ())
(949 #f 948 11 ())
(950 usual-transform 947 26 ())
(953 recur 952 16 ())
(962 interesting-to-quasiquote? 961 33 ())
(963 descend-quasiquote-vector 961 38 ())
(964 #f 963 20 ())
(965 descend-quasiquote-pair 961 43 ())
(966 #f 965 14 ())
(967 #f 966 14 ())
(968 descend-quasiquote 961 48 ())
(969 finalize-quasiquote 961 53 ())
(970 expand-quasiquote 961 58 ())
(973 process-rules 971 22 ())
(974 free-meta-variables 973 63 ())
(975 meta-variables 973 68 ())
(976 process-template 973 73 ())
(977 process-pattern 973 78 ())
(978 #f 977 90 ())
(979 process-segment-match 973 83 ())
(980 process-match 973 88 ())
(981 process-rule 973 93 ())
(982 #f 981 99 ())
(983 make-transformer 973 98 ())
(984 segment-pattern? 971 30 ())
(985 segment-template? 971 38 ())
(986 find-free-names-in-syntax-rules 971 72 ())
(987 free-names 986 11 ())
(988 meta-variables 986 16 ())
(989 loop##18 986 25 ())
(991 namestring 990 4 ())
(992 #f 991 173 ())
(993 namestring-component 990 28 ())
(994 file-name-directory 990 60 ())
(995 file-name-nondirectory 990 68 ())
(996 file-nondirectory-position 990 76 ())
(997 loop 996 9 ())
(998 string-posq 990 84 ())
(999 loop 998 9 ())
(1000 translations 990 100 ())
(1001 set-translation! 990 108 ())
(1002 translate 990 116 ())
(1003 loop 1002 16 ())
(1005 scan-forms 1004 21 ())
(1006 #f 1005 87 ())
(1007 scan-file 1004 29 ())
(1008 #f 1007 71 ())
(1009 #f 1008 58 ())
(1010 recur 1009 43 ())
(1011 scan-form-list 1004 37 ())
(1012 loop 1011 9 ())
(1013 scan-form 1004 96 ())
(1014 process-define-syntax 1004 105 ())
(1015 scan-structures 1004 113 ())
(1016 recur 1015 29 ())
(1017 #f 1016 188 ())
(1018 #f 1016 231 ())
(1019 scan-package 1004 121 ())
(1020 #f 1019 77 ())
(1021 #f 1020 22 ())
(1022 optimize 1004 129 ())
(1023 #f 1022 33 ())
(1024 #f 1022 124 ())
(1025 #f 1022 137 ())
(1026 check-structure 1004 137 ())
(1027 #f 1026 14 ())
(1028 initialize-usual-transforms! 1004 145 ())
(1029 #f 1028 5 ())
(1030 define-all-operators 1004 153 ())
(1031 #f 1030 14 ())
(1032 #f 1030 60 ())
(1033 make-define-primitive-node 1004 197 ())
(1034 get-optimizer 1004 220 ())
(1035 set-optimizer! 1004 228 ())
(1037 note-undefined! 1036 20 ())
(1038 noting-undefined-variables 1036 28 ())
(1039 foo 1038 28 ())
(1040 #f 1038 36 ())
(1041 #f 1038 52 ())
(1042 #f 1041 3 ())
(1043 #f 1041 9 ())
(1044 #f 1043 3 ())
(1045 #f 1044 17 ())
(1046 #f 1044 143 ())
(1048 lookup-enumerand 1047 4 ())
(1049 loop 1048 16 ())
(1052 node-type 1051 4 ())
(1053 reconstruct-type 1051 12 ())
(1054 reconstruct 1051 20 ())
(1056 define-reconstructor 1051 45 ())
(1060 careful-codomain 1051 71 ())
(1061 reconstruct-body 1051 79 ())
(1064 reconstruct-name 1062 22 ())
(1065 reconstruct-call 1062 30 ())
(1066 lose 1065 63 ())
(1067 #f 1066 3 ())
(1068 loop 1065 104 ())
(1073 fork-constraints 1062 92 ())
(1074 #f 1073 12 ())
(1076 loop##19 1075 9 ())
(1077 examine 1062 118 ())
(1083 node->type 1062 198 ())
(1089 reconstruct-apply 1062 377 ())
(1090 #f 1089 45 ())
(1092 declare-operator-type 1091 4 ())
(1093 #f 1092 19 ())
(1095 last 1094 463 ())
(1096 constant-type 1094 471 ())
(1098 template-code 1097 12 ())
(1099 template-info 1097 20 ())
(1100 set-template-code! 1097 28 ())
(1101 set-template-info! 1097 36 ())
(1103 segment->template 1102 28 ())
(1104 #f 1103 170 ())
(1105 segment-data->template 1102 36 ())
(1106 loop##20 1105 62 ())
(1107 astate-literals 1102 84 ())
(1108 set-astate-literals! 1102 92 ())
(1109 astate-count 1102 100 ())
(1110 set-astate-count! 1102 108 ())
(1111 astate-pc 1102 116 ())
(1112 set-astate-pc! 1102 124 ())
(1113 astate-code-vector 1102 132 ())
(1114 make-astate 1102 140 ())
(1115 emit-byte! 1102 148 ())
(1116 emit-literal! 1102 156 ())
(1117 emit-segment! 1102 164 ())
(1119 instruction 1102 186 ())
(1120 #f 1119 24 ())
(1121 #f 1120 20 ())
(1122 sequentially 1102 194 ())
(1123 sequentially-2 1102 202 ())
(1124 #f 1123 42 ())
(1125 instruction-with-literal 1102 210 ())
(1126 #f 1125 8 ())
(1127 instruction-with-location 1102 218 ())
(1128 #f 1127 8 ())
(1129 instruction-with-template 1102 226 ())
(1130 #f 1129 8 ())
(1131 make-label 1102 234 ())
(1132 instruction-using-label 1102 242 ())
(1133 #f 1132 37 ())
(1134 attach-label 1102 250 ())
(1135 #f 1134 11 ())
(1136 #f 1135 27 ())
(1137 note-source-code 1102 294 ())
(1138 #f 1137 22 ())
(1139 note-environment 1102 302 ())
(1140 #f 1139 22 ())
(1141 emit-with-environment-maps! 1102 310 ())
(1142 #f 1141 24 ())
(1144 new-template-uid 1143 4 ())
(1145 template-uid 1143 20 ())
(1146 set-template-uid! 1143 28 ())
(1147 debug-flag-accessor 1143 127 ())
(1148 #f 1147 22 ())
(1149 debug-flag-modifier 1143 135 ())
(1150 #f 1149 22 ())
(1151 with-fresh-compiler-state 1143 245 ())
(1152 #f 1151 51 ())
(1153 #f 1152 3 ())
(1154 #f 1152 6 ())
(1155 saving-and-restoring 1143 253 ())
(1156 swap 1155 5 ())
(1158 debug-data-source 1157 44 ())
(1159 set-debug-data-source! 1157 52 ())
(1160 debug-data-env-maps 1157 60 ())
(1161 set-debug-data-env-maps! 1157 68 ())
(1162 debug-data-pc-in-parent 1157 76 ())
(1163 debug-data-parent 1157 84 ())
(1164 debug-data-name 1157 92 ())
(1165 debug-data-uid 1157 100 ())
(1166 new-debug-data 1157 125 ())
(1168 debug-data->info 1157 148 ())
(1169 get-debug-data 1157 156 ())
(1170 note-debug-data! 1157 164 ())
(1171 interesting-debug-data? 1157 172 ())
(1172 debug-data-names 1157 180 ())
(1173 template-debug-data 1157 188 ())
(1174 template-id 1157 196 ())
(1175 template-name 1157 204 ())
(1176 template-names 1157 212 ())
(1178 compile-top 1177 4 ())
(1179 compile 1177 12 ())
(1184 define-compilator 1177 40 ())
(1187 compile-constant 1177 84 ())
(1192 compile-begin 1177 218 ())
(1193 loop 1192 59 ())
(1194 compile-call 1177 227 ())
(1196 compile-redex 1195 39 ())
(1197 compile-unknown-call 1195 47 ())
(1198 maybe-push-continuation 1195 55 ())
(1199 push-arguments 1195 63 ())
(1200 recur 1199 9 ())
(1201 push-all-with-names 1195 71 ())
(1203 compile-lambda 1195 109 ())
(1204 compile-lambda-code 1195 117 ())
(1205 compile-letrec 1195 185 ())
(1206 #f 1205 76 ())
(1207 #f 1205 179 ())
(1208 compile-body 1195 224 ())
(1209 #f 1208 11 ())
(1210 #f 1209 49 ())
(1211 make-cont 1195 249 ())
(1212 return-cont 1195 290 ())
(1213 return-cont? 1195 298 ())
(1214 fall-through-cont 1195 306 ())
(1215 fall-through-cont? 1195 314 ())
(1216 ignore-values-cont 1195 339 ())
(1217 ignore-values-cont? 1195 347 ())
(1218 deliver-value 1195 355 ())
(1219 named-cont 1195 363 ())
(1220 cont-name 1195 371 ())
(1221 bind-vars 1195 379 ())
(1222 #f 1221 23 ())
(1223 loop 1222 21 ())
(1224 initial-cenv 1195 387 ())
(1225 environment-level 1195 395 ())
(1226 name-node-binding 1195 420 ())
(1227 generate-trap 1195 428 ())
(1228 careful-sequentially 1195 436 ())
(1229 type-check 1195 456 ())
(1230 #f 1229 107 ())
(1231 #f 1229 139 ())
(1232 set-type-check?! 1195 464 ())
(1233 diagnose-call-error 1195 480 ())
(1236 define-compiler-primitive 1235 4 ())
(1238 define-closed-compilator 1235 29 ())
(1240 get-closed-compilator 1235 67 ())
(1241 direct-compilator 1235 75 ())
(1242 #f 1241 5 ())
(1243 direct-closed-compilator 1235 83 ())
(1244 #f 1243 5 ())
(1245 nargs->domain 1235 91 ())
(1246 loop##21 1245 9 ())
(1247 loop##22 1235 104 ())
(1248 define-simple-primitive 1235 120 ())
(1249 simple-compilator 1235 128 ())
(1250 #f 1249 5 ())
(1251 simple-closed-compilator 1235 136 ())
(1252 #f 1251 5 ())
(1253 symbol-append 1235 144 ())
(1254 define-data-struct-primitives 1235 152 ())
(1255 def-prim 1254 8 ())
(1256 loop##23 1254 198 ())
(1258 define-vector-primitives 1235 175 ())
(1259 def-prim 1258 22 ())
(1267 define-n-ary-compiler-primitive 1235 313 ())
(1268 n-ary-primitive-compilator 1235 321 ())
(1269 #f 1268 5 ())
(1278 push-all-but-last 1235 442 ())
(1279 recur 1278 9 ())
(1281 compile-form 1280 4 ())
(1282 compile-file 1280 12 ())
(1283 compile-and-run-forms 1280 20 ())
(1284 compile-and-run-file 1280 28 ())
(1285 compile-and-run-scanned-forms 1280 36 ())
(1286 do-it 1285 5 ())
(1287 do-them 1285 10 ())
(1288 loop##24 1287 34 ())
(1289 #f 1285 20 ())
(1290 compile-scanned-forms 1280 44 ())
(1291 #f 1290 54 ())
(1292 recur 1291 51 ())
(1293 compile-scanned-form 1280 52 ())
(1294 compile-definition 1280 86 ())
(1295 #f 1294 52 ())
(1296 get-location 1280 95 ())
(1297 win 1296 12 ())
(1298 get-location-for-undefined 1280 103 ())
(1299 #f 1298 82 ())
(1300 #f 1298 85 ())
(1301 get-location-for-unassignable 1280 111 ())
(1302 #f 1301 82 ())
(1303 #f 1301 85 ())
(1304 package-accessor-on-demand 1280 119 ())
(1305 #f 1304 5 ())
(1306 location-on-demand 1280 127 ())
(1307 #f 1306 5 ())
(1309 location-for-reference 1280 173 ())
(1310 loop 1309 9 ())
(1312 note-caching 1280 219 ())
(1313 grumble 1280 227 ())
(1314 make-startup-procedure 1280 235 ())
(1315 #f 1314 14 ())
(1317 eval 1316 4 ())
(1318 #f 1317 22 ())
(1319 load 1316 12 ())
(1320 #f 1319 39 ())
(1321 #f 1320 6 ())
(1322 #f 1321 9 ())
(1323 eval-from-file 1316 20 ())
(1324 #f 1323 8 ())
(1325 #f 1324 6 ())
(1326 #f 1325 12 ())
(1327 eval-scanned-forms 1316 28 ())
(1328 #f 1327 14 ())
(1329 invoke-template 1316 36 ())
(1332 continuation-cont 1331 4 ())
(1333 continuation-pc 1331 12 ())
(1334 continuation-template 1331 20 ())
(1335 continuation-env 1331 28 ())
(1336 continuation-arg 1331 44 ())
(1337 continuation-arg-count 1331 52 ())
(1338 continuation-parent 1331 60 ())
(1339 loop 1338 88 ())
(1340 &disclose 1331 136 ())
(1342 usual-exception-handler 1341 4 ())
(1343 define-exception-handler 1341 12 ())
(1344 signal-exception 1341 20 ())
(1346 except 1341 60 ())
(1347 #f 1346 5 ())
(1348 handler 1341 63 ())
(1349 #f 1348 5 ())
(1350 make-opcode-generic! 1341 68 ())
(1351 really-signal-condition 1341 77 ())
(1352 loop 1351 9 ())
(1353 #f 1352 8 ())
(1354 with-handler 1341 85 ())
(1355 initialize-exceptions! 1341 109 ())
(1356 #f 1355 5 ())
(1357 last-resort-condition-handler 1341 117 ())
(1358 #f 1357 12 ())
(1359 #f 1358 21 ())
(1360 report-utter-lossage 1341 125 ())
(1361 #f 1360 76 ())
(1362 continuation-preview 1341 133 ())
(1363 ignore-errors 1341 141 ())
(1364 #f 1363 5 ())
(1365 #f 1364 5 ())
(1366 &disclose 1341 189 ())
(1367 &disclose 1341 247 ())
(1370 define-wna-handler 1368 27 ())
(1371 wna-lose 1368 43 ())
(1379 recur 1378 47 ())
(1385 comparison-wna 1368 231 ())
(1386 #f 1385 5 ())
(1387 loop 1386 52 ())
(1389 display-condition 1388 16 ())
(1390 #f 1389 9 ())
(1391 really-display-condition 1388 25 ())
(1392 #f 1391 222 ())
(1393 &disclose-condition 1388 119 ())
(1394 limited-write 1388 141 ())
(1395 recur 1394 9 ())
(1396 #f 1395 134 ())
(1397 #f 1396 21 ())
(1399 command-processor 1398 4 ())
(1400 loop 1399 50 ())
(1401 #f 1400 7 ())
(1402 #f 1401 5 ())
(1403 #f 1402 63 ())
(1404 #f 1401 8 ())
(1405 #f 1404 69 ())
(1406 #f 1404 145 ())
(1407 #f 1404 152 ())
(1408 #f 1407 10 ())
(1409 mini-load 1398 12 ())
(1410 read-string 1398 20 ())
(1411 loop 1410 9 ())
(1413 loop##25 1412 22 ())
(1414 #f 1413 28 ())
(1415 initialize-interrupts! 1412 38 ())
(1416 with-interrupts-inhibited 1412 85 ())
(1417 with-interrupts-allowed 1412 93 ())
(1418 with-interrupts 1412 101 ())
(1419 #f 1418 11 ())
(1420 enabled-interrupts 1412 109 ())
(1421 interrupt-before-heap-overflow! 1412 117 ())
(1422 #f 1421 42 ())
(1424 usual-resumer 1423 4 ())
(1425 #f 1424 5 ())
(1426 #f 1425 20 ())
(1427 #f 1426 3 ())
(1429 start 1428 4 ())
(1430 #f 1429 5 ())
(1431 #f 1430 5 ())
(1432 #f 1431 53 ())
(1433 make-built-in-structures 1428 12 ())
(1434 #f 1433 33 ())
(1435 #f 1433 50 ())
(1436 initialize-interaction-environment! 1428 20 ())
(1437 make-initial-package 1428 28 ())
(1438 #f 1437 16 ())
(1439 make-tower 1428 36 ())
(1441 inline-transform 1440 4 ())
(1442 #f 1441 55 ())
(1443 #f 1441 61 ())
(1444 make-substitution 1440 12 ())
(1445 #f 1444 25 ())
(1446 substitute 1440 20 ())
(1447 #f 1446 235 ())
(1448 #f 1446 288 ())
(1449 qualified? 1440 28 ())
(1450 qualified->name 1440 36 ())
(1451 recur 1450 9 ())
(1452 get-qualified-env 1440 44 ())
(1453 name->qualified 1440 52 ())
(1454 loop 1453 44 ())
(1455 qlookup 1440 60 ())
(1457 operator 1456 4 ())
(1458 simple-interface 1456 12 ())
(1459 #f 1458 11 ())
(1460 package 1456 20 ())
(1461 loop##26 1460 36 ())
(1462 transform 1456 28 ())
(1464 procedure 1463 36 ())
(1467 make-a-package 1466 4 ())
(1468 loser 1466 12 ())
(1469 *verify-later!* 1466 28 ())
(1470 verify-later! 1466 36 ())
(1471 set-verify-later! 1466 44 ())
(1473 ensure-loaded 1472 4 ())
(1474 #f 1473 9 ())
(1475 #f 1473 12 ())
(1476 #f 1475 8 ())
(1477 #f 1476 7 ())
(1480 get-location 1479 3 ())
(1516 conc 1515 35 ())
(1517 #f 1516 17 ())
(1520 loop 1519 97 ())
(1527 loop 1526 48 ())
(1531 loop##27 1530 53 ())
(1535 loop 1534 59 ())
(1537 loop 1536 59 ())
(1539 loop 1538 59 ())
(1541 loop 1540 59 ())
(1543 loop 1542 59 ())
(1565 parse-package-clauses 1564 389 ())
(1566 loop 1565 47 ())
(1573 loop 1572 29 ())
(1587 loop 1586 37 ())
(1588 loop 1586 59 ())
-
