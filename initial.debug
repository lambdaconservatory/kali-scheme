; Package uid -> name
(0 module-system)
(1 run-time-structures)
(2 compiler-structures)
(3 initial-structures)
(4 usual-structures)
(5 vanilla-features-structures)
(6 cheat)
(7 alternate-structures)
(8 compiler-structures)
(9 linker-structures)
(10 scheme-level-0)
(11 scheme-level-1)
(12 generics)
(13 number-i/o)
(14 records)
(15 bummed-define-record-types)
(16 fluids)
(17 wind)
(18 ports)
(19 enumerated)
(20 architecture)
(21 conditions)
(22 templates)
(23 continuations)
(24 exceptions)
(25 interrupts)
(26 writing)
(27 reading)
(28 scheme-level-2)
(29 scheme-level-2-internal)
(30 weak)
(31 display-conditions)
(32 tables)
(33 filenames)
(34 meta-types)
(35 interfaces)
(36 syntactic)
(37 usual-macros)
(38 reconstruction)
(39 packages)
(40 scan)
(41 segments)
(42 compiler)
(43 defpackage)
(44 types)
(45 inline)
(46 environments)
(47 evaluation)
(48 scheme)
(49 mini-command)
(50 initial-system)
(51 ensures-loaded)
(52 for-reification)
(58 (for-syntax defpackage))
-
; Location uid -> (name . package-uid)
(0 (current-cont . 10))
(1 (closure-template . 10))
(2 (continuation-ref . 10))
(3 (output-port? . 10))
(4 (closure? . 10))
(5 (complex? . 10))
(6 (arithmetic-shift . 10))
(7 (signal-condition . 10))
(8 (integer? . 10))
(9 (make-closure . 10))
(10 (template-ref . 10))
(11 (make-rectangular . 10))
(12 (string=? . 10))
(13 (extended-number? . 10))
(14 (reverse-list->string . 10))
(15 (denominator . 10))
(16 (call-with-values . 10))
(17 (weak-pointer-ref . 10))
(18 (find-all-symbols . 10))
(19 (code-vector? . 10))
(20 (pop . 10))
(21 (exp . 10))
(22 (sin . 10))
(23 (make-extended-number . 10))
(24 (cos . 10))
(25 (collect . 10))
(26 (external-lookup . 10))
(27 (tan . 10))
(28 (log . 10))
(29 (continuation-length . 10))
(30 (make-code-vector . 10))
(31 (cdr . 10))
(32 (bitwise-xor . 10))
(33 (car . 10))
(34 (string? . 10))
(35 (symbol? . 10))
(36 (set-cdr! . 10))
(37 (bitwise-not . 10))
(38 (vector? . 10))
(39 (closure-env . 10))
(40 (set-car! . 10))
(41 (bitwise-ior . 10))
(42 (number? . 10))
(43 (template-length . 10))
(44 (string-hash . 10))
(45 (pop-env . 10))
(46 (primitive-catch . 10))
(47 (make-string . 10))
(48 (input-port? . 10))
(49 (record? . 10))
(50 (make-vector . 10))
(51 (extended-number-set! . 10))
(52 (write-image . 10))
(53 (eq? . 10))
(54 (bitwise-and . 10))
(55 (location-id . 10))
(56 (code-vector-set! . 10))
(57 (make-record . 10))
(58 (intern . 10))
(59 (values . 10))
(60 (unassigned . 10))
(61 (string-set! . 10))
(62 (vector-set! . 10))
(63 (extended-number-ref . 10))
(64 (unspecific . 10))
(65 (schedule-interrupt . 10))
(66 (code-vector-ref . 10))
(67 (find-all-xs . 10))
(68 (char-ready? . 10))
(69 (set-interrupt-handlers! . 10))
(70 (eof-object? . 10))
(71 (record-set! . 10))
(72 (ascii->char . 10))
(73 (char->ascii . 10))
(74 (set-enabled-interrupts! . 10))
(75 (external-value . 10))
(76 (make-immutable! . 10))
(77 (close-port . 10))
(78 (string-ref . 10))
(79 (immutable? . 10))
(80 (vector-ref . 10))
(81 (exact? . 10))
(82 (write-char . 10))
(83 (symbol->string . 10))
(84 (make-polar . 10))
(85 (record-ref . 10))
(86 (numerator . 10))
(87 (extended-number-length . 10))
(88 (error . 10))
(89 (exact->inexact . 10))
(90 (inexact->exact . 10))
(91 (apply . 10))
(92 (memory-status . 10))
(93 (code-vector-length . 10))
(94 (floor . 10))
(95 (with-continuation . 10))
(96 (magnitude . 10))
(97 (nargs . 10))
(98 (char=? . 10))
(99 (char<? . 10))
(100 (continuation? . 10))
(101 (remainder . 10))
(102 (vm-return . 10))
(103 (false . 10))
(104 (angle . 10))
(105 (open-port . 10))
(106 (string-length . 10))
(107 (external? . 10))
(108 (make-continuation . 10))
(109 (vector-length . 10))
(110 (template? . 10))
(111 (rational? . 10))
(112 (location? . 10))
(113 (external-name . 10))
(114 (set-exception-handler! . 10))
(115 (pair? . 10))
(116 (make-external . 10))
(117 (record-length . 10))
(118 (external-call . 10))
(119 (set-dynamic-state! . 10))
(120 (get-cont-from-heap . 10))
(121 (real-part . 10))
(122 (real? . 10))
(123 (make-template . 10))
(124 (imag-part . 10))
(125 (make-location . 10))
(126 (= . 10))
(127 (< . 10))
(128 (char? . 10))
(129 (quotient . 10))
(130 (/ . 10))
(131 (weak-pointer? . 10))
(132 (- . 10))
(133 (continuation-set! . 10))
(134 (peek-char . 10))
(135 (+ . 10))
(136 (* . 10))
(137 (contents . 10))
(138 (sqrt . 10))
(139 (read-char . 10))
(140 (set-contents! . 10))
(141 (push . 10))
(142 (make-weak-pointer . 10))
(143 (get-dynamic-state . 10))
(144 (trap . 10))
(145 (cons . 10))
(146 (template-set! . 10))
(147 (time . 10))
(148 (location-defined? . 10))
(149 (asin . 10))
(150 (write-string . 10))
(151 (vm-extension . 10))
(152 (force-output . 10))
(153 (acos . 10))
(154 (set-location-defined?! . 10))
(155 (atan . 10))
(156 (loophole . 10))
(157 (define-syntax . 10))
(158 (begin . 10))
(159 (letrec-syntax . 10))
(160 (%file-name% . 10))
(161 (structure-ref . 10))
(162 (quote . 10))
(163 (lambda . 10))
(164 (define . 10))
(165 (if . 10))
(166 (let-syntax . 10))
(167 (letrec . 10))
(168 (primitive-procedure . 10))
(169 (set! . 10))
(170 (with-aliases . 10))
(171 (call . 10))
(172 (and . 10))
(173 (cond . 10))
(174 (do . 10))
(175 (let . 10))
(176 (let* . 10))
(177 (or . 10))
(178 (char->integer . 10))
(179 (integer->char . 10))
(180 (ascii-limit . 10))
(181 (ascii-whitespaces . 10))
(182 (procedure? . 10))
(183 (invoke-closure . 10))
(184 (primitive-cwcc . 10))
(185 (make-undefined-location . 10))
(186 (location-assigned? . 10))
(187 (vector-unassigned? . 10))
(188 (string-copy . 10))
(189 (string->symbol . 10))
(190 (really-string->symbol . 10))
(191 (*the-symbol-table* . 10))
(192 (flush-the-symbol-table! . 10))
(193 (restore-the-symbol-table! . 10))
(194 (maybe-open-input-file . 10))
(195 (maybe-open-output-file . 10))
(196 (open-input-file . 10))
(197 (open-output-file . 10))
(198 (close-input-port . 10))
(199 (close-output-port . 10))
(200 (make-condition . 10))
(201 (signal . 10))
(202 (warn . 10))
(203 (syntax-error . 10))
(204 (call-error . 10))
(205 (case . 11))
(206 (delay . 11))
(207 (quasiquote . 11))
(208 (syntax-rules . 11))
(209 (not . 11))
(210 (boolean? . 11))
(211 (eqv? . 11))
(212 (equal? . 11))
(213 (> . 11))
(214 (<= . 11))
(215 (>= . 11))
(216 (max . 11))
(217 (min . 11))
(218 (abs . 11))
(219 (zero? . 11))
(220 (positive? . 11))
(221 (negative? . 11))
(222 (even? . 11))
(223 (odd? . 11))
(224 (caar . 11))
(225 (cadr . 11))
(226 (cdar . 11))
(227 (cddr . 11))
(228 (caaar . 11))
(229 (caadr . 11))
(230 (cadar . 11))
(231 (caddr . 11))
(232 (cdaar . 11))
(233 (cdadr . 11))
(234 (cddar . 11))
(235 (cdddr . 11))
(236 (caaaar . 11))
(237 (caaadr . 11))
(238 (caadar . 11))
(239 (caaddr . 11))
(240 (cadaar . 11))
(241 (cadadr . 11))
(242 (caddar . 11))
(243 (cadddr . 11))
(244 (cdaaar . 11))
(245 (cdaadr . 11))
(246 (cdadar . 11))
(247 (cdaddr . 11))
(248 (cddaar . 11))
(249 (cddadr . 11))
(250 (cdddar . 11))
(251 (cddddr . 11))
(252 (null? . 11))
(253 (list . 11))
(254 (length . 11))
(255 (append . 11))
(256 (reverse . 11))
(257 (append-reverse . 11))
(258 (list-tail . 11))
(259 (list-ref . 11))
(260 (mem . 11))
(261 (memq . 11))
(262 (memv . 11))
(263 (member . 11))
(264 (ass . 11))
(265 (assv . 11))
(266 (assoc . 11))
(267 (assq . 11))
(268 (list? . 11))
(269 (char>? . 11))
(270 (char>=? . 11))
(271 (char<=? . 11))
(272 (char-whitespace? . 11))
(273 (char-lower-case? . 11))
(274 (char-upper-case? . 11))
(275 (char-numeric? . 11))
(276 (char-alphabetic? . 11))
(277 (char-case-delta . 11))
(278 (char-upcase . 11))
(279 (char-downcase . 11))
(280 (char-ci-compare . 11))
(281 (char-ci=? . 11))
(282 (char-ci<? . 11))
(283 (char-ci<=? . 11))
(284 (char-ci>? . 11))
(285 (char-ci>=? . 11))
(286 (string . 11))
(287 (substring . 11))
(288 (string-append . 11))
(289 (string->list . 11))
(290 (list->string . 11))
(291 (string-fill! . 11))
(292 (make-string=? . 11))
(293 (string-ci=? . 11))
(294 (make-string<? . 11))
(295 (string<? . 11))
(296 (string-ci<? . 11))
(297 (string>? . 11))
(298 (string<=? . 11))
(299 (string>=? . 11))
(300 (string-ci>? . 11))
(301 (string-ci<=? . 11))
(302 (string-ci>=? . 11))
(303 (vector . 11))
(304 (vector->list . 11))
(305 (list->vector . 11))
(306 (vector-fill! . 11))
(307 (map . 11))
(308 (map1 . 11))
(309 (map2+ . 11))
(310 (for-each . 11))
(311 (make-promise . 11))
(312 (force . 11))
(313 (unspecific . 11))
(314 (reduce . 11))
(315 (filter . 11))
(316 (pos . 11))
(317 (posq . 11))
(318 (posv . 11))
(319 (position . 11))
(320 (any . 11))
(321 (every . 11))
(322 (sublist . 11))
(323 (last . 11))
(324 (inexact? . 11))
(325 (modulo . 11))
(326 (ceiling . 11))
(327 (truncate . 11))
(328 (round . 11))
(329 (gcd . 11))
(330 (euclid . 11))
(331 (lcm . 11))
(332 (expt . 11))
(333 (raise-to-integer-power . 11))
(334 (rationalize . 11))
(335 (simplest-rational . 11))
(336 (make-family . 12))
(337 (family-identity . 12))
(338 (family-precedence . 12))
(339 (family-of-last-resort . 12))
(340 (default-family . 12))
(341 (same-family? . 12))
(342 (make-method-table . 12))
(343 (method-table-methods . 12))
(344 (method-table-families . 12))
(345 (define-method . 12))
(346 (define-default-method . 12))
(347 (define-last-method . 12))
(348 (make-generic . 12))
(349 (perform-dispatch . 12))
(350 (*fail* . 12))
(351 (fail . 12))
(352 (disclose-methods . 12))
(353 (disclose . 12))
(354 (make-generic-exception-handler . 12))
(355 (number->string-table . 13))
(356 (string->number-table . 13))
(357 (really-number->string . 13))
(358 (really-string->number . 13))
(359 (number->string . 13))
(360 (integer->string . 13))
(361 (string->number . 13))
(362 (string->integer . 13))
(363 (record-type . 14))
(364 (*record-type-uid* . 14))
(365 (record-type-marker . 14))
(366 (make-record-type . 14))
(367 (record-type? . 14))
(368 (record-type-uid . 14))
(369 (record-type-identification . 14))
(370 (record-type-field-names . 14))
(371 (record-type-discloser . 14))
(372 (record-field-index . 14))
(373 (record-constructor . 14))
(374 (record-accessor . 14))
(375 (record-modifier . 14))
(376 (record-predicate . 14))
(377 (define-record-discloser . 14))
(378 (disclose-record . 14))
(379 (default-record-discloser . 14))
(380 (define-record-type . 15))
(381 (define-constructor . 15))
(382 (define-accessors . 15))
(383 (define-accessor . 15))
(384 (thread-type . 16))
(385 (make-thread . 16))
(386 (thread-dynamic-env . 16))
(387 (current-thread . 16))
(388 (set-current-thread! . 16))
(389 (get-dynamic-env . 16))
(390 (set-dynamic-env! . 16))
(391 (initialize-dynamic-state! . 16))
(392 (with-dynamic-env . 16))
(393 (empty-dynamic-env . 16))
(394 (fluid-type . 16))
(395 (make-fluid . 16))
(396 (fluid-top-level-value . 16))
(397 (set-fluid-top-level-value! . 16))
(398 (fluid . 16))
(399 (set-fluid! . 16))
(400 (let-fluid . 16))
(401 (let-fluids . 16))
(402 (fluid-lookup . 16))
(403 (dynamic-wind . 17))
(404 (call-with-current-continuation . 17))
(405 (continuation->procedure . 17))
(406 (point-type . 17))
(407 (make-point . 17))
(408 (point-parent . 17))
(409 (point-dynamic-env . 17))
(410 (point-out . 17))
(411 (point-in . 17))
(412 (point-depth . 17))
(413 (root-point . 17))
(414 ($dynamic-point . 17))
(415 (get-dynamic-point . 17))
(416 (env-dynamic-point . 17))
(417 (let-dynamic-point . 17))
(418 (travel-to-point! . 17))
(419 ($current-input-port . 18))
(420 ($current-output-port . 18))
(421 ($error-output-port . 18))
(422 (current-input-port . 18))
(423 (current-output-port . 18))
(424 (error-output-port . 18))
(425 (with-initial-ports . 18))
(426 (call-with-mumble-file . 18))
(427 (call-with-input-file . 18))
(428 (call-with-output-file . 18))
(429 (with-input-from-file . 18))
(430 (with-output-to-file . 18))
(431 (newline . 18))
(432 (output-port-option . 18))
(433 (input-port-option . 18))
(434 (write . 26))
(435 (recurring-write . 26))
(436 (write-boolean . 26))
(437 (write-number . 26))
(438 (write-char-literal . 26))
(439 (character-name . 26))
(440 (write-string-literal . 26))
(441 (write-list . 26))
(442 (quotation? . 26))
(443 (write-vector . 26))
(444 (write-other . 26))
(445 (display-type-name . 26))
(446 (display . 26))
(447 (*condition-types* . 21))
(448 (condition-supertypes . 21))
(449 (define-condition-type . 21))
(450 (condition-predicate . 21))
(451 (condition? . 21))
(452 (condition-type . 21))
(453 (condition-stuff . 21))
(454 (error? . 21))
(455 (call-error? . 21))
(456 (read-error? . 21))
(457 (exception? . 21))
(458 (exception-opcode . 21))
(459 (exception-arguments . 21))
(460 (make-exception . 21))
(461 (warning? . 21))
(462 (syntax-error? . 21))
(463 (interrupt? . 21))
(464 (read . 27))
(465 (sub-read-carefully . 27))
(466 (reader-token-marker . 27))
(467 (make-reader-token . 27))
(468 (reader-token? . 27))
(469 (close-paren . 27))
(470 (dot . 27))
(471 (sub-read . 27))
(472 (read-dispatch-vector . 27))
(473 (read-terminating?-vector . 27))
(474 (set-standard-syntax! . 27))
(475 (set-standard-read-macro! . 27))
(476 (sub-read-list . 27))
(477 (gobble-line . 27))
(478 (*sharp-macros* . 27))
(479 (define-sharp-macro . 27))
(480 (sub-read-token . 27))
(481 (parse-token . 27))
(482 (strange-symbol-names . 27))
(483 (preferred-case . 27))
(484 (reading-error . 27))
(485 (syntax-type . 34))
(486 (any-values-type . 34))
(487 (make-some-values-type . 34))
(488 (some-values-type? . 34))
(489 (some-values-type-components . 34))
(490 (value-type . 34))
(491 (check-value-type . 34))
(492 (undeclared-type . 34))
(493 (procedure-type . 34))
(494 (procedure-type? . 34))
(495 (fixed-arity-procedure-type? . 34))
(496 (procedure-type-codomain . 34))
(497 (procedure-type-domain . 34))
(498 (nargs->domain-list . 34))
(499 (procedure-type-argument-types . 34))
(500 (procedure-type-arity . 34))
(501 (variable-type . 34))
(502 (variable-type? . 34))
(503 (variable-value-type . 34))
(504 (compatible-types? . 34))
(505 (compatible-type-lists? . 34))
(506 (usual-variable-type . 34))
(507 (boolean-type . 34))
(508 (char-type . 34))
(509 (number-type . 34))
(510 (pair-type . 34))
(511 (unspecific-type . 34))
(512 (some-values-type . 34))
(513 (any-procedure-type . 34))
(514 (proc . 34))
(515 (table-type . 32))
(516 (really-make-table . 32))
(517 (table-set-procedure . 32))
(518 (set-table-set-procedure! . 32))
(519 (table-ref-procedure . 32))
(520 (set-table-ref-procedure! . 32))
(521 (table-data . 32))
(522 (set-table-data! . 32))
(523 (table-size . 32))
(524 (set-table-size! . 32))
(525 (table-hash-function . 32))
(526 (table? . 32))
(527 (make-table . 32))
(528 (table-ref . 32))
(529 (table-set! . 32))
(530 (linear-table-size-limit . 32))
(531 (table-size-limit . 32))
(532 (next-table-size . 32))
(533 (null-entry . 32))
(534 (new-entry . 32))
(535 (get-entry . 32))
(536 (set-entry! . 32))
(537 (for-each-entry . 32))
(538 (linear-table-ref . 32))
(539 (linear-table-set! . 32))
(540 (linear-table-inc! . 32))
(541 (table-expand-table! . 32))
(542 (table-enter-entries! . 32))
(543 (hash-table-ref . 32))
(544 (hash-table-set! . 32))
(545 (hash-table-inc! . 32))
(546 (table-walk . 32))
(547 (default-table-hash-function . 32))
(548 (usual-operator-type . 36))
(549 (type/operator . 36))
(550 (make-operator . 36))
(551 (operator-uid-maybe . 36))
(552 (set-operator-uid-maybe! . 36))
(553 (operator-transform . 36))
(554 (set-operator-transform! . 36))
(555 (operator-name . 36))
(556 (operator-type . 36))
(557 (operator? . 36))
(558 (get-operator . 36))
(559 (operator-uid . 36))
(560 (*operator-uid* . 36))
(561 (operators-table . 36))
(562 (number-of-operators . 36))
(563 (the-operators . 36))
(564 (make-operator-table . 36))
(565 (operator-table-ref . 36))
(566 (operator-lookup . 36))
(567 (operator-define! . 36))
(568 (type/node . 36))
(569 (really-make-node . 36))
(570 (node-plist . 36))
(571 (set-node-plist! . 36))
(572 (node-form . 36))
(573 (node-operator-id . 36))
(574 (node? . 36))
(575 (make-node . 36))
(576 (node-ref . 36))
(577 (node-set! . 36))
(578 (node-operator . 36))
(579 (node-predicate . 36))
(580 (make-similar-node . 36))
(581 (type/generated . 36))
(582 (make-generated . 36))
(583 (generated-parent-name . 36))
(584 (generated-env . 36))
(585 (generated-token . 36))
(586 (generated-symbol . 36))
(587 (generated? . 36))
(588 (generate-name . 36))
(589 (name->symbol . 36))
(590 (*generated-uid* . 36))
(591 (name-hash . 36))
(592 (desyntaxify . 36))
(593 (make-immutable . 36))
(594 (type/transform . 36))
(595 (really-make-transform . 36))
(596 (transform-id . 36))
(597 (transform-source . 36))
(598 (transform-aux-names . 36))
(599 (transform-type . 36))
(600 (transform-env . 36))
(601 (transform-procedure . 36))
(602 (transform? . 36))
(603 (make-transform . 36))
(604 (maybe-transform . 36))
(605 (bind-aliases . 36))
(606 (make-name-generator . 36))
(607 (same-denotation? . 36))
(608 (binding? . 36))
(609 (binding-type . 36))
(610 (binding-place . 36))
(611 (binding-static . 36))
(612 (really-make-binding . 36))
(613 (make-binding . 36))
(614 (clobber-binding! . 36))
(615 (binding-transform . 36))
(616 (impose-type . 36))
(617 (forget-integration . 36))
(618 (classify . 36))
(619 (call-node? . 36))
(620 (name-node? . 36))
(621 (classify-literal . 36))
(622 (classify-call . 36))
(623 (classify-name . 36))
(624 (operator/name . 36))
(625 (classify-macro-application . 36))
(626 (classify-transform-application . 36))
(627 (maybe-transform-call . 36))
(628 (classify-operator-form . 36))
(629 (classifiers . 36))
(630 (define-classifier . 36))
(631 (unspecific-node . 36))
(632 (lookup . 36))
(633 (bind1 . 36))
(634 (bind . 36))
(635 (bindrec . 36))
(636 (literal? . 36))
(637 (number-of-required-args . 36))
(638 (n-ary? . 36))
(639 (normalize-formals . 36))
(640 (syntax? . 36))
(641 (name? . 36))
(642 (unbound? . 36))
(643 ($source-file-name . 36))
(644 (define-usual-suspects . 36))
(645 (process-syntax . 36))
(646 (bind-evaluator-for-syntax . 36))
(647 (evaluator-for-syntax . 36))
(648 (*evaluator-for-syntax-key* . 36))
(649 (scan-body . 36))
(650 (scan-body-forms . 36))
(651 (body-lossage . 36))
(652 (begin-node? . 36))
(653 (define-node? . 36))
(654 (schemify . 36))
(655 (schemifiers . 36))
(656 (define-schemifier . 36))
(657 (ok-number-of-args? . 36))
(658 (make-population . 30))
(659 (add-to-population! . 30))
(660 (weak-memq . 30))
(661 (population-reduce . 30))
(662 (population->list . 30))
(663 (walk-population . 30))
(664 (type/interface . 35))
(665 (really-make-interface . 35))
(666 (interface-name . 35))
(667 (interface-clients . 35))
(668 (walk-method . 35))
(669 (ref-method . 35))
(670 (interface? . 35))
(671 (interface-ref . 35))
(672 (for-each-declaration . 35))
(673 (note-reference-to-interface! . 35))
(674 (make-interface . 35))
(675 (make-simple-interface . 35))
(676 (really-make-simple-interface . 35))
(677 (make-compound-interface . 35))
(678 (type/structure . 39))
(679 (really-make-structure . 39))
(680 (structure-name . 39))
(681 (structure-clients . 39))
(682 (structure-package . 39))
(683 (structure-interface-really . 39))
(684 (set-structure-interface! . 39))
(685 (structure-interface-thunk . 39))
(686 (structure? . 39))
(687 (structure-interface . 39))
(688 (initialize-structure! . 39))
(689 (make-structure . 39))
(690 (structure-unstable? . 39))
(691 (for-each-export . 39))
(692 (type/package . 39))
(693 (really-make-package . 39))
(694 (package-loaded? . 39))
(695 (set-package-loaded?! . 39))
(696 (package-cached . 39))
(697 (package-seen . 39))
(698 (package-clients . 39))
(699 (package-plist . 39))
(700 (set-package-plist! . 39))
(701 (package-clauses . 39))
(702 (package-file-name . 39))
(703 (package-integrate? . 39))
(704 (set-package-integrate?! . 39))
(705 (package-for-syntax-promise . 39))
(706 (package-evaluator . 39))
(707 (package-get-location . 39))
(708 (set-package-get-location! . 39))
(709 (package-definitions . 39))
(710 (package-accesses-thunk . 39))
(711 (package-opens-thunk . 39))
(712 (set-package-opens-thunk! . 39))
(713 (package-opens-really . 39))
(714 (set-package-opens! . 39))
(715 (package-uid . 39))
(716 (package? . 39))
(717 (make-package . 39))
(718 (package-for-syntax . 39))
(719 (new-package-uid . 39))
(720 (*package-uid* . 39))
(721 (package-name-table . 39))
(722 (package-name . 39))
(723 (set-package-name! . 39))
(724 (make-simple-package . 39))
(725 (package-opens . 39))
(726 (package-accesses . 39))
(727 (package-unstable? . 39))
(728 (package-definition . 39))
(729 (package-define! . 39))
(730 (really-package-define! . 39))
(731 (package-lookup . 39))
(732 (really-package-lookup . 39))
(733 (structure-lookup . 39))
(734 (lookup-generated-name . 39))
(735 (generic-lookup . 39))
(736 (package->environment . 39))
(737 (package-lookup-type . 39))
(738 (initialize-package! . 39))
(739 (initialize-reified-package! . 39))
(740 (for-each-definition . 39))
(741 (get-new-location . 39))
(742 (make-new-location . 39))
(743 ($get-location . 39))
(744 (*location-uid* . 39))
(745 (location-info-table . 39))
(746 (flush-location-names . 39))
(747 (package-get . 39))
(748 (package-put! . 39))
(749 (package-note-caching . 39))
(750 (environment-ref . 46))
(751 (environment-set! . 46))
(752 (environment-define! . 46))
(753 (*structure-ref . 46))
(754 (contents-carefully . 46))
(755 ($interaction-environment . 46))
(756 (interaction-environment . 46))
(757 (set-interaction-environment! . 46))
(758 (with-interaction-environment . 46))
(759 (scheme-report-environment . 46))
(760 (*scheme-report-environment* . 46))
(761 (*scheme-report-number* . 46))
(762 (set-scheme-report-environment! . 46))
(763 (make-package-for-syntax . 46))
(764 (the-usual-transforms . 37))
(765 (define-usual-macro . 37))
(766 (usual-transform . 37))
(767 (process-rules . 37))
(768 (segment-pattern? . 37))
(769 (segment-template? . 37))
(770 (indicators-for-zero-or-more . 37))
(771 (find-free-names-in-syntax-rules . 37))
(772 (namestring . 33))
(773 (directory-component-separator . 33))
(774 (type-component-separator . 33))
(775 (namestring-component . 33))
(776 (file-name-preferred-case . 33))
(777 (*scheme-file-type* . 33))
(778 (*load-file-type* . 33))
(779 (file-name-directory . 33))
(780 (file-name-nondirectory . 33))
(781 (file-nondirectory-position . 33))
(782 (string-posq . 33))
(783 (*translations* . 33))
(784 (translations . 33))
(785 (set-translation! . 33))
(786 (translate . 33))
(787 ($note-file-package . 40))
(788 (scan-forms . 40))
(789 (scan-file . 40))
(790 (scan-form-list . 40))
(791 (scan-form . 40))
(792 (process-define-syntax . 40))
(793 (eval-for-syntax . 40))
(794 (scan-structures . 40))
(795 (scan-package . 40))
(796 (optimize . 40))
(797 (check-structure . 40))
(798 (initialize-usual-transforms! . 40))
(799 (define-all-operators . 40))
(800 (make-define-primitive-node . 40))
(801 (optimizers-table . 40))
(802 (get-optimizer . 40))
(803 (set-optimizer! . 40))
(804 ($note-undefined . 40))
(805 (note-undefined! . 40))
(806 (noting-undefined-variables . 40))
(807 (enumerand->name . 19))
(808 (name->enumerand . 19))
(809 (definitely-name->enumerand . 19))
(810 (define-enumeration . 19))
(811 (enum . 19))
(812 (bits-used-per-byte . 20))
(813 (maximum-stack-args . 20))
(814 (define-instruction-set . 20))
(815 (op/intern . 20))
(816 (op/reverse-list->string . 20))
(817 (op/string-hash . 20))
(818 (op/string=? . 20))
(819 (op/vm-return . 20))
(820 (op/vm-extension . 20))
(821 (op/time . 20))
(822 (op/external-call . 20))
(823 (op/external-lookup . 20))
(824 (op/schedule-interrupt . 20))
(825 (op/return-from-interrupt . 20))
(826 (op/set-enabled-interrupts! . 20))
(827 (op/set-interrupt-handlers! . 20))
(828 (op/set-exception-handler! . 20))
(829 (op/set-dynamic-state! . 20))
(830 (op/get-dynamic-state . 20))
(831 (op/find-all-xs . 20))
(832 (op/find-all-symbols . 20))
(833 (op/memory-status . 20))
(834 (op/collect . 20))
(835 (op/write-image . 20))
(836 (op/false . 20))
(837 (op/trap . 20))
(838 (op/unspecific . 20))
(839 (op/unassigned . 20))
(840 (op/force-output . 20))
(841 (op/write-string . 20))
(842 (op/write-char . 20))
(843 (op/char-ready? . 20))
(844 (op/peek-char . 20))
(845 (op/read-char . 20))
(846 (op/output-port? . 20))
(847 (op/input-port? . 20))
(848 (op/close-port . 20))
(849 (op/open-port . 20))
(850 (op/make-immutable! . 20))
(851 (op/immutable? . 20))
(852 (op/set-location-defined?! . 20))
(853 (op/location-defined? . 20))
(854 (op/stored-object-indexed-char-set! . 20))
(855 (op/stored-object-indexed-byte-set! . 20))
(856 (op/stored-object-indexed-set! . 20))
(857 (op/stored-object-indexed-char-ref . 20))
(858 (op/stored-object-indexed-byte-ref . 20))
(859 (op/stored-object-indexed-ref . 20))
(860 (op/stored-object-set! . 20))
(861 (op/stored-object-ref . 20))
(862 (op/stored-object-byte-length . 20))
(863 (op/stored-object-length . 20))
(864 (op/stored-object-has-type? . 20))
(865 (op/make-char-vector-object . 20))
(866 (op/make-byte-vector-object . 20))
(867 (op/make-vector-object . 20))
(868 (op/make-stored-object . 20))
(869 (op/eof-object? . 20))
(870 (op/ascii->char . 20))
(871 (op/char->ascii . 20))
(872 (op/char<? . 20))
(873 (op/char=? . 20))
(874 (op/char? . 20))
(875 (op/arithmetic-shift . 20))
(876 (op/bitwise-xor . 20))
(877 (op/bitwise-ior . 20))
(878 (op/bitwise-and . 20))
(879 (op/bitwise-not . 20))
(880 (op/make-rectangular . 20))
(881 (op/make-polar . 20))
(882 (op/magnitude . 20))
(883 (op/angle . 20))
(884 (op/sqrt . 20))
(885 (op/atan . 20))
(886 (op/acos . 20))
(887 (op/asin . 20))
(888 (op/tan . 20))
(889 (op/cos . 20))
(890 (op/sin . 20))
(891 (op/log . 20))
(892 (op/exp . 20))
(893 (op/imag-part . 20))
(894 (op/real-part . 20))
(895 (op/denominator . 20))
(896 (op/numerator . 20))
(897 (op/floor . 20))
(898 (op/remainder . 20))
(899 (op/quotient . 20))
(900 (op/< . 20))
(901 (op/= . 20))
(902 (op// . 20))
(903 (op/- . 20))
(904 (op/* . 20))
(905 (op/+ . 20))
(906 (op/inexact->exact . 20))
(907 (op/exact->inexact . 20))
(908 (op/exact? . 20))
(909 (op/complex? . 20))
(910 (op/real? . 20))
(911 (op/rational? . 20))
(912 (op/integer? . 20))
(913 (op/number? . 20))
(914 (op/eq? . 20))
(915 (op/computed-goto . 20))
(916 (op/jump . 20))
(917 (op/jump-if-false . 20))
(918 (op/call-template . 20))
(919 (op/goto-template . 20))
(920 (op/ignore-values . 20))
(921 (op/return-values . 20))
(922 (op/values . 20))
(923 (op/return . 20))
(924 (op/call-with-values . 20))
(925 (op/with-continuation . 20))
(926 (op/apply . 20))
(927 (op/move-args-and-call . 20))
(928 (op/call . 20))
(929 (op/get-cont-from-heap . 20))
(930 (op/current-cont . 20))
(931 (op/make-cont . 20))
(932 (op/stack-set! . 20))
(933 (op/stack-ref . 20))
(934 (op/pop . 20))
(935 (op/push . 20))
(936 (op/closure . 20))
(937 (op/set-global! . 20))
(938 (op/global . 20))
(939 (op/set-local! . 20))
(940 (op/local2 . 20))
(941 (op/local1 . 20))
(942 (op/local0 . 20))
(943 (op/local . 20))
(944 (op/literal . 20))
(945 (op/make-rest-list . 20))
(946 (op/pop-env . 20))
(947 (op/make-heap-env . 20))
(948 (op/make-env . 20))
(949 (op/nargs . 20))
(950 (op/check-nargs>= . 20))
(951 (op/check-nargs= . 20))
(952 (op-count . 20))
(953 (op . 20))
(954 (opcode-arg-specs . 20))
(955 (interrupt/memory-shortage . 20))
(956 (interrupt/keyboard . 20))
(957 (interrupt/alarm . 20))
(958 (interrupt-count . 20))
(959 (interrupt . 20))
(960 (time-option/real-time . 20))
(961 (time-option/run-time . 20))
(962 (time-option/ticks-per-second . 20))
(963 (time-option-count . 20))
(964 (time-option . 20))
(965 (memory-status-option/gc-count . 20))
(966 (memory-status-option/set-minimum-recovered-space! . 20))
(967 (memory-status-option/stack-size . 20))
(968 (memory-status-option/heap-size . 20))
(969 (memory-status-option/available . 20))
(970 (memory-status-option-count . 20))
(971 (memory-status-option . 20))
(972 (stob/bignum . 20))
(973 (stob/double . 20))
(974 (stob/code-vector . 20))
(975 (stob/string . 20))
(976 (stob/unused-d-header2 . 20))
(977 (stob/unused-d-header1 . 20))
(978 (stob/external . 20))
(979 (stob/weak-pointer . 20))
(980 (stob/template . 20))
(981 (stob/extended-number . 20))
(982 (stob/continuation . 20))
(983 (stob/record . 20))
(984 (stob/ratio . 20))
(985 (stob/port . 20))
(986 (stob/location . 20))
(987 (stob/closure . 20))
(988 (stob/vector . 20))
(989 (stob/symbol . 20))
(990 (stob/pair . 20))
(991 (stob-count . 20))
(992 (stob . 20))
(993 (stob-data . 20))
(994 (node-type . 38))
(995 (reconstruct . 38))
(996 (reconstructors . 38))
(997 (define-reconstructor . 38))
(998 (operator/name . 38))
(999 (reconstruct-call . 38))
(1000 (node->type . 38))
(1001 (constrain-call! . 38))
(1002 (constrain! . 38))
(1003 (call-node? . 38))
(1004 (name-node? . 38))
(1005 (begin-node? . 38))
(1006 (reconstruct-apply . 38))
(1007 (zero-type . 38))
(1008 (escape-type . 38))
(1009 (declare-operator-type . 38))
(1010 (last . 38))
(1011 (constant-type . 38))
(1012 (template-overhead . 22))
(1013 (template-code . 22))
(1014 (template-info . 22))
(1015 (set-template-code! . 22))
(1016 (set-template-info! . 22))
(1017 (make-segment . 41))
(1018 (segment-size . 41))
(1019 (segment-emitter . 41))
(1020 (segment->template . 41))
(1021 (segment-data->template . 41))
(1022 (type/assembly-state . 41))
(1023 (make-assembly-state . 41))
(1024 (astate-literals . 41))
(1025 (set-astate-literals! . 41))
(1026 (astate-count . 41))
(1027 (set-astate-count! . 41))
(1028 (astate-pc . 41))
(1029 (set-astate-pc! . 41))
(1030 (astate-code-vector . 41))
(1031 (make-astate . 41))
(1032 (emit-byte! . 41))
(1033 (emit-literal! . 41))
(1034 (emit-segment! . 41))
(1035 (empty-segment . 41))
(1036 (instruction . 41))
(1037 (sequentially . 41))
(1038 (sequentially-2 . 41))
(1039 (instruction-with-literal . 41))
(1040 (instruction-with-location . 41))
(1041 (instruction-with-template . 41))
(1042 (make-label . 41))
(1043 (instruction-using-label . 41))
(1044 (attach-label . 41))
(1045 (byte-limit . 41))
(1046 ($debug-data . 41))
(1047 (note-source-code . 41))
(1048 (note-environment . 41))
(1049 (emit-with-environment-maps! . 41))
(1050 ($environment-maps . 41))
(1051 (environment-maps-table . 41))
(1052 (new-template-uid . 41))
(1053 (*template-uid* . 41))
(1054 (template-uid . 41))
(1055 (set-template-uid! . 41))
(1056 (debug-flag-names . 41))
(1057 (type/debug-flags . 41))
(1058 (make-debug-flags . 41))
(1059 ($debug-flags . 41))
(1060 (debug-flag-accessor . 41))
(1061 (debug-flag-modifier . 41))
(1062 (keep-source-code? . 41))
(1063 (keep-environment-maps? . 41))
(1064 (keep-procedure-names? . 41))
(1065 (keep-file-names? . 41))
(1066 (tabulate-debug-data? . 41))
(1067 (debug-data-table . 41))
(1068 (with-fresh-compiler-state . 41))
(1069 (saving-and-restoring . 41))
(1070 (debug-data-type . 41))
(1071 (make-debug-data . 41))
(1072 (debug-data-source . 41))
(1073 (set-debug-data-source! . 41))
(1074 (debug-data-env-maps . 41))
(1075 (set-debug-data-env-maps! . 41))
(1076 (debug-data-pc-in-parent . 41))
(1077 (debug-data-parent . 41))
(1078 (debug-data-name . 41))
(1079 (debug-data-uid . 41))
(1080 (debug-data? . 41))
(1081 (new-debug-data . 41))
(1082 (debug-data->info . 41))
(1083 (get-debug-data . 41))
(1084 (note-debug-data! . 41))
(1085 (interesting-debug-data? . 41))
(1086 (debug-data-names . 41))
(1087 (template-debug-data . 41))
(1088 (template-id . 41))
(1089 (template-name . 41))
(1090 (template-names . 41))
(1091 (compile-top . 42))
(1092 (compile . 42))
(1093 (*type-check?* . 42))
(1094 (compilators . 42))
(1095 (define-compilator . 42))
(1096 (compile-constant . 42))
(1097 (compile-begin . 42))
(1098 (compile-call . 42))
(1099 (lambda-node? . 42))
(1100 (compile-redex . 42))
(1101 (compile-unknown-call . 42))
(1102 (maybe-push-continuation . 42))
(1103 (push-arguments . 42))
(1104 (push-all-with-names . 42))
(1105 (compile-lambda . 42))
(1106 (compile-lambda-code . 42))
(1107 (compile-letrec . 42))
(1108 (compile-body . 42))
(1109 (operator/letrec . 42))
(1110 (make-cont . 42))
(1111 (cont-segment . 42))
(1112 (cont-source-info . 42))
(1113 (return-cont-segment . 42))
(1114 (return-cont . 42))
(1115 (return-cont? . 42))
(1116 (fall-through-cont . 42))
(1117 (fall-through-cont? . 42))
(1118 (ignore-values-segment . 42))
(1119 (ignore-values-cont . 42))
(1120 (ignore-values-cont? . 42))
(1121 (deliver-value . 42))
(1122 (named-cont . 42))
(1123 (cont-name . 42))
(1124 (bind-vars . 42))
(1125 (initial-cenv . 42))
(1126 (environment-level . 42))
(1127 (*level-key* . 42))
(1128 (name-node-binding . 42))
(1129 (generate-trap . 42))
(1130 (careful-sequentially . 42))
(1131 (large-segment-size . 42))
(1132 (op/call . 42))
(1133 (op/check-nargs= . 42))
(1134 (op/check-nargs>= . 42))
(1135 (op/closure . 42))
(1136 (op/false . 42))
(1137 (op/global . 42))
(1138 (op/ignore-values . 42))
(1139 (op/jump . 42))
(1140 (op/jump-if-false . 42))
(1141 (op/literal . 42))
(1142 (op/local . 42))
(1143 (op/local0 . 42))
(1144 (op/local1 . 42))
(1145 (op/local2 . 42))
(1146 (op/make-cont . 42))
(1147 (op/make-env . 42))
(1148 (op/make-rest-list . 42))
(1149 (op/push . 42))
(1150 (op/return . 42))
(1151 (op/set-global! . 42))
(1152 (op/set-local! . 42))
(1153 (op/trap . 42))
(1154 (op/unspecific . 42))
(1155 (type-check . 42))
(1156 (report-type-error . 42))
(1157 (define-compiler-primitive . 42))
(1158 (closed-compilators . 42))
(1159 (define-closed-compilator . 42))
(1160 (get-closed-compilator . 42))
(1161 (direct-compilator . 42))
(1162 (direct-closed-compilator . 42))
(1163 (nargs->domain . 42))
(1164 (checked-compilator . 42))
(1165 (define-simple-primitive . 42))
(1166 (simple-compilator . 42))
(1167 (simple-closed-compilator . 42))
(1168 (define-data-struct-primitives . 42))
(1169 (op/stored-object-has-type? . 42))
(1170 (op/make-stored-object . 42))
(1171 (op/stored-object-ref . 42))
(1172 (op/stored-object-set! . 42))
(1173 (op/make-byte-vector-object . 42))
(1174 (op/make-char-vector-object . 42))
(1175 (op/make-vector-object . 42))
(1176 (define-vector-primitives . 42))
(1177 (op/stored-object-byte-length . 42))
(1178 (op/stored-object-indexed-byte-ref . 42))
(1179 (op/stored-object-indexed-byte-set! . 42))
(1180 (op/stored-object-indexed-char-ref . 42))
(1181 (op/stored-object-indexed-char-set! . 42))
(1182 (op/stored-object-indexed-ref . 42))
(1183 (op/stored-object-indexed-set! . 42))
(1184 (op/stored-object-length . 42))
(1185 (define-n-ary-compiler-primitive . 42))
(1186 (n-ary-primitive-compilator . 42))
(1187 (push-all-but-last . 42))
(1188 (op/apply . 42))
(1189 (op/call-with-values . 42))
(1190 (op/current-cont . 42))
(1191 (op/external-call . 42))
(1192 (op/pop . 42))
(1193 (op/return-values . 42))
(1194 (op/stack-ref . 42))
(1195 (op/values . 42))
(1196 (compile-form . 42))
(1197 (compile-file . 42))
(1198 (compile-and-run-forms . 42))
(1199 (compile-and-run-file . 42))
(1200 (compile-and-run-scanned-forms . 42))
(1201 (compile-scanned-forms . 42))
(1202 (compile-scanned-form . 42))
(1203 (compile-definition . 42))
(1204 (prepare-cenv . 42))
(1205 (cenv-package . 42))
(1206 (*the-package* . 42))
(1207 (define-node? . 42))
(1208 (get-location . 42))
(1209 (location-for-undefined . 42))
(1210 (package-accessor-on-demand . 42))
(1211 (location-on-demand . 42))
(1212 (package-undefineds . 42))
(1213 (location-for-reference . 42))
(1214 (package-undefined-but-assigneds . 42))
(1215 (location-for-assignment . 42))
(1216 (note-caching . 42))
(1217 (grumble . 42))
(1218 (make-startup-procedure . 42))
(1219 (an-ignore-values-cont . 42))
(1220 (eval . 47))
(1221 (load . 47))
(1222 (eval-from-file . 47))
(1223 (eval-scanned-forms . 47))
(1224 (invoke-template . 47))
(1225 (continuation-cont . 23))
(1226 (continuation-pc . 23))
(1227 (continuation-template . 23))
(1228 (continuation-env . 23))
(1229 (continuation-overhead . 23))
(1230 (continuation-arg . 23))
(1231 (continuation-arg-count . 23))
(1232 (continuation-parent . 23))
(1233 (usual-exception-handler . 24))
(1234 (define-exception-handler . 24))
(1235 (signal-exception . 24))
(1236 (exception-handlers . 24))
(1237 (make-opcode-generic! . 24))
(1238 (really-signal-condition . 24))
(1239 (with-handler . 24))
(1240 ($condition-handlers . 24))
(1241 (initialize-exceptions! . 24))
(1242 (last-resort-condition-handler . 24))
(1243 (report-utter-lossage . 24))
(1244 (ignore-errors . 24))
(1245 (continuation-preview . 24))
(1246 (*wna-handlers* . 24))
(1247 (define-wna-handler . 24))
(1248 (op/check-nargs= . 24))
(1249 (wna-lose . 24))
(1250 (comparison-wna . 24))
(1251 (display-condition . 31))
(1252 (really-display-condition . 31))
(1253 (*depth* . 31))
(1254 (*length* . 31))
(1255 (disclose-condition-methods . 31))
(1256 (disclose-condition . 31))
(1257 (limited-write . 31))
(1258 (command-processor . 49))
(1259 (mini-load . 49))
(1260 (read-string . 49))
(1261 (interrupt-handlers . 25))
(1262 (initialize-interrupts! . 25))
(1263 (time-option/ticks-per-second . 25))
(1264 (one-second . 25))
(1265 (no-interrupts . 25))
(1266 (all-interrupts . 25))
(1267 (with-interrupts-inhibited . 25))
(1268 (with-interrupts-allowed . 25))
(1269 (with-interrupts . 25))
(1270 (enabled-interrupts . 25))
(1271 (interrupt-before-heap-overflow! . 25))
(1272 (interrupt/memory-shortage . 25))
(1273 (memory-status-option/set-minimum-recovered-space! . 25))
(1274 (memory-status-option/heap-size . 25))
(1275 (usual-resumer . 29))
(1276 (start . 50))
(1277 (make-built-in-structures . 50))
(1278 (scheme-for-syntax . 50))
(1279 (initialize-interaction-environment! . 50))
(1280 (make-initial-package . 50))
(1281 (make-env-for-syntax-promise . 50))
(1282 (inline-transform . 45))
(1283 (make-substitution . 45))
(1284 (substitute . 45))
(1285 (qualified? . 45))
(1286 (qualified->name . 45))
(1287 (get-qualified-env . 45))
(1288 (name->qualified . 45))
(1289 (qlookup . 45))
(1290 (generic-lookup . 45))
(1291 (syntax . 44))
(1292 (any-values . 44))
(1293 (some-values . 44))
(1294 (value . 44))
(1295 (variable . 44))
(1296 (procedure . 44))
(1297 (boolean . 44))
(1298 (pair . 44))
(1299 (number . 44))
(1300 (unspecific . 44))
(1301 (char . 44))
(1302 (structure . 44))
(1303 (type . 44))
(1304 (define-modular . 43))
(1305 (define-values . 43))
(1306 (define-interface . 43))
(1307 (a-interface . 43))
(1308 (really-export . 43))
(1309 (define-structure . 43))
(1310 (define-package . 43))
(1311 (a-package . 43))
(1312 (define-module . 43))
(1313 (make-a-package . 43))
(1314 (init-defpackage! . 43))
(1315 (loser . 43))
(1316 (*evaluator* . 43))
(1317 (*make-package-for-syntax-promise* . 43))
(1318 (interface-of . 43))
(1319 (*verify-later!* . 43))
(1320 (verify-later! . 43))
(1321 (set-verify-later! . 43))
(1322 (ensure-loaded . 51))
-
; Template uid -> name, parent, pc in parent, env maps
(1 current-cont 0 4 ())
(2 closure-template 0 12 ())
(3 continuation-ref 0 20 ())
(4 output-port? 0 28 ())
(5 closure? 0 36 ())
(6 complex? 0 44 ())
(7 arithmetic-shift 0 52 ())
(8 signal-condition 0 60 ())
(9 integer? 0 68 ())
(10 make-closure 0 76 ())
(11 template-ref 0 84 ())
(12 make-rectangular 0 92 ())
(13 string=? 0 100 ())
(14 extended-number? 0 108 ())
(15 reverse-list->string 0 116 ())
(16 denominator 0 124 ())
(17 call-with-values 0 132 ())
(18 weak-pointer-ref 0 140 ())
(19 find-all-symbols 0 148 ())
(20 code-vector? 0 156 ())
(21 pop 0 164 ())
(22 exp 0 172 ())
(23 sin 0 180 ())
(24 make-extended-number 0 188 ())
(25 cos 0 196 ())
(26 collect 0 204 ())
(27 external-lookup 0 212 ())
(28 tan 0 220 ())
(29 log 0 228 ())
(30 continuation-length 0 236 ())
(32 make-code-vector 31 4 ())
(33 cdr 31 12 ())
(34 bitwise-xor 31 20 ())
(35 car 31 28 ())
(36 string? 31 36 ())
(37 symbol? 31 44 ())
(38 set-cdr! 31 52 ())
(39 bitwise-not 31 60 ())
(40 vector? 31 68 ())
(41 closure-env 31 76 ())
(42 set-car! 31 84 ())
(43 bitwise-ior 31 92 ())
(44 number? 31 100 ())
(45 template-length 31 108 ())
(46 string-hash 31 116 ())
(47 pop-env 31 124 ())
(48 primitive-catch 31 132 ())
(49 make-string 31 140 ())
(50 input-port? 31 148 ())
(51 record? 31 156 ())
(52 make-vector 31 164 ())
(53 extended-number-set! 31 172 ())
(54 write-image 31 180 ())
(55 eq? 31 188 ())
(56 bitwise-and 31 196 ())
(57 location-id 31 204 ())
(58 code-vector-set! 31 212 ())
(59 make-record 31 220 ())
(60 intern 31 228 ())
(61 values 31 236 ())
(62 unassigned 31 244 ())
(63 string-set! 31 252 ())
(64 vector-set! 31 260 ())
(65 extended-number-ref 31 268 ())
(66 unspecific 31 276 ())
(67 schedule-interrupt 31 284 ())
(68 code-vector-ref 31 292 ())
(69 find-all-xs 31 300 ())
(70 char-ready? 31 308 ())
(71 set-interrupt-handlers! 31 316 ())
(72 eof-object? 31 324 ())
(73 record-set! 31 332 ())
(74 ascii->char 31 340 ())
(75 char->ascii 31 348 ())
(76 set-enabled-interrupts! 31 356 ())
(77 external-value 31 364 ())
(78 make-immutable! 31 372 ())
(79 close-port 31 380 ())
(80 string-ref 31 388 ())
(81 immutable? 31 396 ())
(82 vector-ref 31 404 ())
(83 exact? 31 412 ())
(84 write-char 31 420 ())
(85 symbol->string 31 428 ())
(86 make-polar 31 436 ())
(87 record-ref 31 444 ())
(88 numerator 31 452 ())
(89 extended-number-length 31 460 ())
(90 error 31 468 ())
(91 exact->inexact 31 476 ())
(92 inexact->exact 31 484 ())
(93 apply 31 492 ())
(94 memory-status 31 500 ())
(96 code-vector-length 95 4 ())
(97 floor 95 12 ())
(98 with-continuation 95 20 ())
(99 magnitude 95 28 ())
(100 nargs 95 36 ())
(101 char=? 95 44 ())
(102 char<? 95 52 ())
(103 continuation? 95 60 ())
(104 remainder 95 68 ())
(105 vm-return 95 76 ())
(106 false 95 84 ())
(107 angle 95 92 ())
(108 open-port 95 100 ())
(109 string-length 95 108 ())
(110 external? 95 116 ())
(111 make-continuation 95 124 ())
(112 vector-length 95 132 ())
(113 template? 95 140 ())
(114 rational? 95 148 ())
(115 location? 95 156 ())
(116 external-name 95 164 ())
(117 set-exception-handler! 95 172 ())
(118 pair? 95 180 ())
(119 make-external 95 188 ())
(120 record-length 95 196 ())
(121 external-call 95 204 ())
(122 set-dynamic-state! 95 212 ())
(123 get-cont-from-heap 95 220 ())
(124 real-part 95 228 ())
(125 real? 95 236 ())
(126 make-template 95 244 ())
(127 imag-part 95 252 ())
(128 make-location 95 260 ())
(129 = 95 268 ())
(130 < 95 276 ())
(131 char? 95 284 ())
(132 quotient 95 292 ())
(133 / 95 300 ())
(134 weak-pointer? 95 308 ())
(135 - 95 316 ())
(136 continuation-set! 95 324 ())
(137 peek-char 95 332 ())
(138 + 95 340 ())
(139 * 95 348 ())
(140 contents 95 356 ())
(141 sqrt 95 364 ())
(142 read-char 95 372 ())
(143 set-contents! 95 380 ())
(144 push 95 388 ())
(145 make-weak-pointer 95 396 ())
(146 get-dynamic-state 95 404 ())
(147 trap 95 412 ())
(148 cons 95 420 ())
(149 template-set! 95 428 ())
(150 time 95 436 ())
(151 location-defined? 95 444 ())
(152 asin 95 452 ())
(153 write-string 95 460 ())
(154 vm-extension 95 468 ())
(155 force-output 95 476 ())
(156 acos 95 484 ())
(157 set-location-defined?! 95 492 ())
(158 atan 95 500 ())
(160 invoke-closure 159 44 (#(7 14 #(closure args) ())))
(161 primitive-cwcc 159 52 (#(4 10 #(p) ())))
(162 #f 161 7 (#(4 11 #(cont) ())))
(163 make-undefined-location 159 60 (#(4 22 #(id) (#(14 22 #(loc) ())))))
(164 location-assigned? 159 68 (#(4 20 #(loc) ())))
(165 vector-unassigned? 159 76 (#(4 15 #(v i) ())))
(166 string-copy 159 84 (#(4 37 #(s) (#(11 37 #(z) (#(21 37 #(copy) (#(25 37 #(loop) ())))))))))
(167 loop 166 26 (#(4 44 #(i) ())))
(168 string->symbol 159 92 (#(4 31 #(string) ())))
(169 really-string->symbol 159 100 (#(4 46 #(string) (#(40 46 #(sym) ())))))
(170 flush-the-symbol-table! 159 115 ())
(171 restore-the-symbol-table! 159 123 ())
(172 maybe-open-input-file 159 143 (#(4 11 #(string) ())))
(173 maybe-open-output-file 159 151 (#(4 11 #(string) ())))
(174 open-input-file 159 159 (#(4 43 #(string) (#(13 43 #(temp##0) ())))))
(175 open-output-file 159 167 (#(4 43 #(string) (#(13 43 #(temp##1) ())))))
(177 signal 176 12 (#(7 17 #(type stuff) ())))
(178 warn 176 20 (#(7 23 #(message irritants) ())))
(179 syntax-error 176 28 (#(5 17 #(rest) ())))
(180 call-error 176 36 (#(7 29 #(message proc args) ())))
(182 not 181 4 (#(4 14 #(x) ())))
(183 boolean? 181 12 (#(4 27 #(x) (#(13 27 #(temp##2) ())))))
(184 eqv? 181 20 (#(4 57 #(x y) (#(13 57 #(temp##3) ())))))
(185 equal? 181 28 (#(4 158 #(obj1 obj2) (#(125 154 #(z) (#(140 152 #(loop) ())))))))
(186 loop 185 141 (#(4 58 #(i) ())))
(187 > 181 36 (#(4 11 #(x y) ())))
(188 <= 181 44 (#(4 18 #(x y) ())))
(189 >= 181 52 (#(4 18 #(x y) ())))
(190 max 181 60 (#(7 20 #(first rest) ())))
(191 #f 190 8 (#(4 19 #(x y) ())))
(192 min 181 68 (#(7 20 #(first rest) ())))
(193 #f 192 8 (#(4 19 #(x y) ())))
(194 abs 181 76 (#(4 23 #(n) ())))
(195 zero? 181 84 (#(4 11 #(x) ())))
(196 positive? 181 92 (#(4 11 #(x) ())))
(197 negative? 181 100 (#(4 11 #(x) ())))
(198 even? 181 108 (#(4 15 #(n) ())))
(199 odd? 181 116 (#(4 22 #(n) ())))
(200 caar 181 124 (#(4 13 #(x) ())))
(201 cadr 181 132 (#(4 13 #(x) ())))
(202 cdar 181 140 (#(4 13 #(x) ())))
(203 cddr 181 148 (#(4 13 #(x) ())))
(204 caaar 181 156 (#(4 16 #(x) ())))
(205 caadr 181 164 (#(4 16 #(x) ())))
(206 cadar 181 172 (#(4 16 #(x) ())))
(207 caddr 181 180 (#(4 16 #(x) ())))
(208 cdaar 181 188 (#(4 16 #(x) ())))
(209 cdadr 181 196 (#(4 16 #(x) ())))
(210 cddar 181 204 (#(4 16 #(x) ())))
(211 cdddr 181 212 (#(4 16 #(x) ())))
(212 caaaar 181 220 (#(4 19 #(x) ())))
(213 caaadr 181 228 (#(4 19 #(x) ())))
(214 caadar 181 236 (#(4 19 #(x) ())))
(215 caaddr 181 244 (#(4 19 #(x) ())))
(216 cadaar 181 252 (#(4 19 #(x) ())))
(217 cadadr 181 260 (#(4 19 #(x) ())))
(218 caddar 181 268 (#(4 19 #(x) ())))
(219 cadddr 181 276 (#(4 19 #(x) ())))
(220 cdaaar 181 284 (#(4 19 #(x) ())))
(221 cdaadr 181 292 (#(4 19 #(x) ())))
(222 cdadar 181 300 (#(4 19 #(x) ())))
(223 cdaddr 181 308 (#(4 19 #(x) ())))
(224 cddaar 181 316 (#(4 19 #(x) ())))
(225 cddadr 181 324 (#(4 19 #(x) ())))
(226 cdddar 181 332 (#(4 19 #(x) ())))
(227 cddddr 181 340 (#(4 19 #(x) ())))
(228 null? 181 348 (#(4 11 #(x) ())))
(229 list 181 356 (#(5 8 #(l) ())))
(230 length 181 364 (#(4 17 #(l) ())))
(231 #f 230 5 (#(4 11 #(ignore n) ())))
(232 append 181 372 (#(5 33 #(lists) (#(21 33 #(recur) ())))))
(233 recur 232 22 (#(4 50 #(lists) ())))
(234 reverse 181 380 (#(4 14 #(list) ())))
(235 append-reverse 181 388 (#(4 38 #(list seed) ())))
(236 list-tail 181 396 (#(4 33 #(l i) ())))
(237 list-ref 181 404 (#(4 22 #(l k) ())))
(238 mem 181 412 (#(4 7 #(pred) ())))
(239 #f 238 5 (#(4 20 #(obj l) (#(8 20 #(loop) ())))))
(240 loop 239 9 (#(4 49 #(l) ())))
(242 ass 241 21 (#(4 7 #(pred) ())))
(243 #f 242 5 (#(4 20 #(obj l) (#(8 20 #(loop) ())))))
(244 loop 243 9 (#(4 55 #(l) ())))
(245 assq 241 63 (#(4 49 #(x l) ())))
(246 list? 241 71 (#(4 23 #(l) (#(8 23 #(recur) ())))))
(247 recur 246 9 (#(4 105 #(l lag) (#(13 105 #(temp##5) (#(40 103 #(temp##4) ())))))))
(248 char>? 241 79 (#(4 11 #(x y) ())))
(249 char>=? 241 87 (#(4 18 #(x y) ())))
(250 char<=? 241 95 (#(4 18 #(x y) ())))
(251 char-whitespace? 241 103 (#(4 27 #(c) ())))
(252 char-lower-case? 241 111 (#(4 38 #(c) ())))
(253 char-upper-case? 241 119 (#(4 38 #(c) ())))
(254 char-numeric? 241 127 (#(4 38 #(c) ())))
(255 char-alphabetic? 241 135 (#(4 33 #(c) (#(18 33 #(temp##6) ())))))
(256 char-upcase 241 157 (#(4 30 #(c) ())))
(257 char-downcase 241 165 (#(4 30 #(c) ())))
(258 char-ci-compare 241 173 (#(4 7 #(pred) ())))
(259 #f 258 5 (#(4 32 #(c1 c2) ())))
(260 string 241 266 (#(5 12 #(rest) ())))
(261 substring 241 274 (#(4 37 #(s start end) (#(18 37 #(new-string) (#(22 37 #(loop##8) ())))))))
(262 loop##7 261 23 (#(4 51 #(i j) ())))
(263 string-append 241 282 (#(5 55 #(strings) (#(25 55 #(len) (#(35 55 #(new-string) (#(39 55 #(loop) ())))))))))
(264 #f 263 10 (#(4 13 #(s n) ())))
(265 loop 263 40 (#(4 51 #(s i) (#(24 51 #(string) (#(31 51 #(l) (#(35 51 #(loop##10) ())))))))))
(266 loop##9 265 36 (#(4 63 #(j i) ())))
(267 string->list 241 290 (#(4 34 #(v) (#(11 34 #(z) (#(15 34 #(loop##12) ())))))))
(268 loop##11 267 16 (#(4 42 #(i l) ())))
(269 list->string 241 298 (#(4 42 #(l) (#(23 42 #(v) (#(27 42 #(loop##14) ())))))))
(270 loop##13 269 28 (#(4 46 #(i l) ())))
(271 string-fill! 241 306 (#(4 27 #(v x) (#(11 27 #(z) (#(15 27 #(loop##16) ())))))))
(272 loop##15 271 16 (#(4 44 #(i) ())))
(273 make-string=? 241 314 (#(4 7 #(char=?) ())))
(274 #f 273 5 (#(4 40 #(s1 s2) (#(11 40 #(z) (#(26 38 #(loop) ())))))))
(275 loop 274 27 (#(4 59 #(i) ())))
(276 make-string<? 241 339 (#(4 7 #(char<? char=?) ())))
(277 #f 276 5 (#(4 49 #(s1 s2) (#(16 49 #(z1 z2) (#(33 49 #(z) (#(37 49 #(loop) ())))))))))
(278 loop 277 38 (#(4 100 #(i) (#(42 100 #(c1 c2) (#(60 100 #(temp##17) ())))))))
(279 string>? 241 387 (#(4 14 #(s1 s2) ())))
(280 string<=? 241 395 (#(4 26 #(s1 s2) ())))
(281 string>=? 241 403 (#(4 26 #(s1 s2) ())))
(282 string-ci>? 241 411 (#(4 14 #(s1 s2) ())))
(283 string-ci<=? 241 419 (#(4 26 #(s1 s2) ())))
(284 string-ci>=? 241 427 (#(4 26 #(s1 s2) ())))
(285 vector 241 435 (#(5 12 #(l) ())))
(286 vector->list 241 443 (#(4 29 #(v) (#(8 29 #(loop##19) ())))))
(287 loop##18 286 9 (#(4 41 #(i l) ())))
(288 list->vector 241 451 (#(4 41 #(l) (#(22 41 #(v) (#(26 41 #(loop##21) ())))))))
(289 loop##20 288 27 (#(4 46 #(i l) ())))
(290 vector-fill! 241 459 (#(4 27 #(v x) (#(11 27 #(z) (#(15 27 #(loop##23) ())))))))
(291 loop##22 290 16 (#(4 44 #(i) ())))
(292 map 241 467 (#(7 39 #(proc first rest) ())))
(293 map1 241 475 (#(4 52 #(proc l) ())))
(294 map2+ 241 483 (#(4 110 #(proc first rest) (#(17 35 #(temp##24) ())))))
(295 for-each 241 491 (#(7 26 #(proc first rest) (#(11 26 #(loop) ())))))
(296 loop 295 12 (#(4 104 #(first rest) (#(17 35 #(temp##25) ())))))
(297 make-promise 241 499 (#(4 11 #(thunk-then-result) (#(8 11 #(already-run?) ())))))
(298 #f 297 9 ())
(299 force 241 507 (#(4 8 #(promise) ())))
(301 unspecific 300 4 ())
(302 reduce 300 12 (#(4 47 #(cons nil list) ())))
(303 filter 300 20 (#(4 17 #(pred lst) ())))
(304 #f 303 5 (#(4 30 #(x rest) ())))
(305 pos 300 28 (#(4 7 #(pred) ())))
(306 #f 305 5 (#(4 23 #(thing l) (#(8 23 #(loop) ())))))
(307 loop 306 9 (#(4 56 #(i l) ())))
(308 any 300 87 (#(4 53 #(pred l) (#(32 53 #(temp##26) ())))))
(309 every 300 95 (#(4 48 #(pred l) ())))
(310 sublist 300 103 (#(4 56 #(l start end) (#(41 56 #(recur) ())))))
(311 recur 310 42 (#(4 47 #(l end) ())))
(312 last 300 111 (#(4 32 #(x) ())))
(314 inexact? 313 4 (#(4 15 #(n) ())))
(315 modulo 313 12 (#(4 49 #(x y) (#(13 49 #(r) ())))))
(316 ceiling 313 20 (#(4 16 #(x) ())))
(317 truncate 313 28 (#(4 29 #(x) ())))
(318 round 313 36 (#(4 68 #(x) (#(17 68 #(x+1/2) (#(23 68 #(r) ())))))))
(319 gcd 313 44 (#(5 18 #(integers) ())))
(320 #f 319 6 (#(4 79 #(x y) ())))
(321 euclid 313 52 (#(4 59 #(x y) ())))
(322 lcm 313 60 (#(5 18 #(integers) ())))
(323 #f 322 6 (#(4 62 #(x y) (#(21 62 #(g) ())))))
(324 expt 313 68 (#(4 39 #(x n) ())))
(325 raise-to-integer-power 313 76 (#(4 64 #(z p) (#(26 41 #(loop##28) ())))))
(326 loop##27 325 27 (#(4 43 #(a p) ())))
(328 rationalize 327 4 (#(4 36 #(x e) (#(18 36 #(e) ())))))
(329 simplest-rational 327 12 (#(4 140 #(x y) (#(8 140 #(simplest-rational-internal) ())))))
(330 simplest-rational-internal 329 9 (#(4 90 #(x y) (#(14 90 #(fx fy) ())))))
(332 make-family 331 4 (#(4 13 #(id prec) ())))
(333 same-family? 331 68 (#(4 32 #(c1 c2) ())))
(334 make-method-table 331 76 (#(4 31 #(id) ())))
(335 #f 334 9 (#(5 18 #(args) ())))
(336 define-method 331 100 (#(4 58 #(disp family method) (#(21 58 #(displace! prec) (#(25 58 #(loop) ())))))))
(337 displace! 336 5 (#(4 21 #(z x y) ())))
(338 loop 336 26 (#(4 138 #(ms cs) ())))
(339 define-default-method 331 108 (#(4 17 #(disp proc) ())))
(340 define-last-method 331 116 (#(4 17 #(disp proc) ())))
(341 make-generic 331 124 (#(4 21 #(disp) (#(18 21 #(ms) ())))))
(342 #f 341 19 (#(5 15 #(args) ())))
(343 perform-dispatch 331 132 (#(4 68 #(ms args) (#(43 68 #(result) ())))))
(344 fail 331 154 ())
(345 #f 331 200 (#(4 6 #(obj) ())))
(346 make-generic-exception-handler 331 211 (#(4 36 #(table opcode signal-exception) (#(33 36 #(ms) ())))))
(347 #f 346 12 (#(5 15 #(args) ())))
(348 #f 346 34 (#(4 14 #(opcode args) ())))
(349 #f #f #f (#(182 216 #(a-minus-ten zero digit->integer do-it string->integer) ()) #(123 152 #(a-minus-10 zero integer->digit integer->string) ())))
(350 #f 349 42 (#(4 74 #(n radix) (#(48 74 #(s) ())))))
(351 #f 349 57 (#(4 17 #(string radix exact?) ())))
(352 number->string 349 102 (#(7 49 #(n radix-or-format-option) ())))
(353 integer->digit 349 140 (#(4 26 #(n) ())))
(354 integer->string 349 145 (#(4 89 #(n radix) (#(53 89 #(magnitude) ()) #(35 50 #(recur) ())))))
(355 recur 354 36 (#(4 59 #(n l) ())))
(356 string->number 349 159 (#(7 193 #(string options) (#(52 193 #(radix) (#(160 193 #(radix) (#(167 193 #(len) (#(171 193 #(loop) ()))))) #(61 157 #(temp##29) ())))))))
(357 loop 356 172 (#(4 251 #(pos exactness? exact? radix? radix) (#(234 246 #(loop) ()) #(48 194 #(pos) (#(77 194 #(radix-is exactness-is) (#(97 194 #(temp##30) ())))))))))
(358 radix-is 357 70 (#(4 35 #(radix) ())))
(359 exactness-is 357 73 (#(4 35 #(exact?) ())))
(360 loop 357 235 (#(4 109 #(pos) ())))
(361 digit->integer 349 199 (#(4 129 #(c radix) (#(93 129 #(n) ()) #(28 42 #(n) ())))))
(362 do-it 349 204 (#(4 83 #(string pos sign radix xact?) (#(11 83 #(len) (#(43 83 #(len) (#(67 83 #(loop) ())))))))))
(363 loop 362 68 (#(4 121 #(n pos) (#(86 121 #(d) ()) #(32 51 #(temp##31) ())))))
(364 string->integer 349 209 (#(4 102 #(string radix xact?) ())))
(366 record-type 365 4 (#(4 12 #(r) ())))
(367 make-record-type 365 37 (#(4 74 #(id field-names) (#(21 74 #(r) ())))))
(368 record-type? 365 45 (#(4 25 #(obj) ())))
(369 record-type-uid 365 53 (#(4 12 #(rt) ())))
(370 record-type-identification 365 61 (#(4 12 #(rt) ())))
(371 record-type-field-names 365 69 (#(4 12 #(rt) ())))
(372 record-type-discloser 365 77 (#(4 12 #(rt) ())))
(373 record-field-index 365 85 (#(4 28 #(rt name) (#(8 28 #(loop) ())))))
(374 loop 373 9 (#(4 78 #(names i) ())))
(375 record-constructor 365 93 (#(4 45 #(rt names) (#(42 45 #(indexes size) ())))))
(376 #f 375 9 (#(4 14 #(name) ())))
(377 #f 375 43 (#(5 45 #(args) (#(14 45 #(r) (#(29 45 #(loop) ())))))))
(378 loop 377 30 (#(4 140 #(is as) ())))
(379 record-accessor 365 101 (#(4 57 #(rt name) (#(54 57 #(index error-cruft) ())))))
(380 #f 379 55 (#(4 39 #(r) ())))
(381 record-modifier 365 109 (#(4 57 #(rt name) (#(54 57 #(index error-cruft) ())))))
(382 #f 381 55 (#(4 45 #(r x) ())))
(383 record-predicate 365 117 (#(4 7 #(rt) ())))
(384 #f 383 5 (#(4 25 #(x) ())))
(385 define-record-discloser 365 125 (#(4 45 #(rt proc) ())))
(386 disclose-record 365 133 (#(4 50 #(r) (#(19 50 #(p) ())))))
(387 default-record-discloser 365 141 (#(4 21 #(r) ())))
(388 #f 365 164 (#(4 91 #(obj) ())))
(391 thread-dynamic-env 390 44 (#(4 12 #(r##32) ())))
(392 current-thread 390 52 ())
(393 set-current-thread! 390 60 (#(4 8 #(thread) ())))
(394 get-dynamic-env 390 68 ())
(395 set-dynamic-env! 390 76 (#(4 14 #(env) ())))
(396 initialize-dynamic-state! 390 84 ())
(397 with-dynamic-env 390 92 (#(4 52 #(env thunk) (#(13 52 #(saved-env) (#(42 49 #(x) ())))))))
(398 #f 397 27 (#(5 21 #(results) ())))
(399 empty-dynamic-env 390 100 ())
(400 fluid-top-level-value 390 148 (#(4 12 #(r##33) ())))
(401 set-fluid-top-level-value! 390 156 (#(4 15 #(r##34 new##35) ())))
(402 fluid 390 164 (#(4 44 #(f) (#(25 44 #(probe) ())))))
(403 set-fluid! 390 172 (#(4 50 #(f val) (#(25 50 #(probe) ())))))
(404 let-fluid 390 180 (#(4 30 #(f val thunk) ())))
(405 let-fluids 390 188 (#(5 28 #(args) (#(9 28 #(loop) ())))))
(406 loop 405 10 (#(4 66 #(args env) ())))
(407 fluid-lookup 390 196 (#(4 40 #(env f) (#(21 40 #(probe) ())))))
(409 dynamic-wind 408 4 (#(4 110 #(in body out) (#(94 110 #(results) ()) #(38 70 #(here) ())))))
(410 #f 409 85 ())
(411 call-with-current-continuation 408 12 (#(4 11 #(proc) ())))
(412 #f 411 5 (#(4 32 #(cont) (#(13 32 #(env) ())))))
(413 continuation->procedure 408 20 (#(4 7 #(cont env) ())))
(414 #f 413 5 (#(5 57 #(results) ())))
(415 #f 414 54 ())
(416 point-parent 408 68 (#(4 12 #(r##36) ())))
(417 point-dynamic-env 408 76 (#(4 12 #(r##37) ())))
(418 point-out 408 84 (#(4 12 #(r##38) ())))
(419 point-in 408 92 (#(4 12 #(r##39) ())))
(420 point-depth 408 100 (#(4 12 #(r##40) ())))
(421 #f 408 112 (#(4 19 #(p) ())))
(424 get-dynamic-point 408 168 ())
(425 env-dynamic-point 408 176 (#(4 14 #(env) ())))
(426 let-dynamic-point 408 184 (#(4 30 #(point thunk) ())))
(427 travel-to-point! 408 192 (#(4 121 #(here target) ())))
(429 current-input-port 428 52 ())
(430 current-output-port 428 60 ())
(431 error-output-port 428 68 ())
(432 with-initial-ports 428 76 (#(4 29 #(in out thunk) ())))
(433 call-with-mumble-file 428 84 (#(4 7 #(open close) ())))
(434 #f 433 5 (#(4 21 #(string proc) (#(8 21 #(port) ())))))
(435 #f 434 9 ())
(436 #f 434 12 ())
(437 #f 434 15 ())
(438 with-input-from-file 428 132 (#(4 14 #(string thunk) ())))
(439 #f 438 8 (#(4 30 #(port) ())))
(440 with-output-to-file 428 140 (#(4 14 #(string thunk) ())))
(441 #f 440 8 (#(4 30 #(port) ())))
(442 newline 428 148 (#(5 21 #(port-option) ())))
(443 output-port-option 428 156 (#(4 60 #(port-option) ())))
(444 input-port-option 428 164 (#(4 60 #(port-option) ())))
(446 write 445 4 (#(7 37 #(obj port-option) (#(21 37 #(port) (#(25 37 #(recur) ())))))))
(447 recur 446 26 (#(4 17 #(obj) ())))
(448 recurring-write 445 12 (#(4 156 #(obj port recur) ())))
(449 write-boolean 445 20 (#(4 20 #(mumble port) ())))
(450 write-number 445 28 (#(4 23 #(n port) ())))
(451 write-char-literal 445 36 (#(4 46 #(obj port) (#(18 46 #(probe) ())))))
(452 character-name 445 44 (#(4 30 #(char) ())))
(453 write-string-literal 445 52 (#(4 33 #(obj port) (#(17 33 #(len) (#(21 33 #(loop##43) ())))))))
(454 loop##41 453 22 (#(4 98 #(i) (#(36 86 #(c) (#(49 64 #(temp##42) ())))))))
(455 write-list 445 60 (#(4 92 #(obj port recur) (#(66 84 #(loop) ())))))
(456 loop 455 67 (#(4 91 #(l n) ())))
(457 quotation? 445 68 (#(4 52 #(obj) ())))
(458 write-vector 445 76 (#(4 73 #(obj port recur) (#(21 65 #(z) (#(51 63 #(loop) ())))))))
(459 loop 458 52 (#(4 67 #(i) (#(22 67 #(temp##44) ())))))
(460 write-other 445 84 (#(4 180 #(obj port recur) (#(18 180 #(temp##45) (#(28 77 #(l) ())))))))
(461 #f 460 57 (#(4 19 #(x) ())))
(462 display-type-name 445 92 (#(4 114 #(name port) (#(19 104 #(s) (#(26 104 #(len) (#(82 94 #(loop##48) ())))))))))
(463 loop##46 462 83 (#(4 63 #(i) (#(22 63 #(temp##47) ())))))
(464 display 445 100 (#(7 37 #(obj port-option) (#(21 37 #(port) (#(25 37 #(recur) ())))))))
(465 recur 464 26 (#(4 44 #(obj) ())))
(467 condition-supertypes 466 12 (#(4 14 #(type) ())))
(468 define-condition-type 466 20 (#(4 42 #(type supertypes) ())))
(469 #f 468 19 (#(4 48 #(sup) (#(18 48 #(temp##49) ())))))
(470 condition-predicate 466 28 (#(4 7 #(name) ())))
(471 #f 470 5 (#(4 59 #(c) (#(28 57 #(probe) ())))))
(472 condition? 466 36 (#(4 39 #(x) ())))
(473 make-exception 466 204 (#(4 19 #(opcode args) ())))
(474 #f #f #f (#(438 448 #(number-sharp-macro) ()) #(154 185 #(sub-read-constituent) ()) #(134 144 #(sub-read-whitespace) ())))
(475 read 474 4 (#(5 32 #(port-option) (#(19 32 #(port) (#(23 32 #(loop) ())))))))
(476 loop 475 24 (#(16 80 #(form) ())))
(477 sub-read-carefully 474 12 (#(4 64 #(port) (#(18 64 #(form) ())))))
(478 make-reader-token 474 37 (#(4 13 #(message) ())))
(479 reader-token? 474 45 (#(4 23 #(form) ())))
(480 sub-read 474 87 (#(4 35 #(port) (#(10 35 #(c) ())))))
(481 #f 474 98 (#(4 17 #(c port) ())))
(482 set-standard-syntax! 474 121 (#(4 27 #(char terminating? reader) ())))
(483 sub-read-whitespace 474 130 (#(4 13 #(c port) ())))
(484 #f 474 135 (#(4 15 #(c) ())))
(485 sub-read-constituent 474 150 (#(4 26 #(c port) ())))
(486 #f 474 155 (#(4 16 #(c) ())))
(487 set-standard-read-macro! 474 190 (#(4 17 #(c terminating? proc) ())))
(488 sub-read-list 474 198 (#(4 130 #(c port) (#(18 130 #(form) (#(69 109 #(last-form) (#(83 109 #(another-form) ())))))))))
(489 #f 474 231 (#(4 11 #(c port) ())))
(490 #f 474 249 (#(4 25 #(c port) ())))
(491 #f 474 267 (#(4 25 #(c port) ())))
(492 #f 474 285 (#(4 76 #(c port) (#(12 76 #(next) (#(57 76 #(keyword) ())))))))
(493 #f 474 303 (#(4 25 #(c port) (#(10 25 #(loop) ())))))
(494 loop 493 11 (#(4 162 #(l i) (#(10 162 #(c) (#(43 126 #(c) (#(73 88 #(temp##50) ())))))))))
(495 #f 474 321 (#(4 25 #(c port) ())))
(496 gobble-line 474 332 (#(4 17 #(port) (#(8 17 #(loop) ())))))
(497 loop 496 9 (#(8 32 #(c) ())))
(498 define-sharp-macro 474 348 (#(4 21 #(c proc) ())))
(499 #f 474 362 (#(4 99 #(c port) (#(12 99 #(c) (#(49 99 #(c) (#(66 99 #(probe) ())))))))))
(500 #f 474 377 (#(4 9 #(c port) ())))
(501 #f 474 392 (#(4 10 #(c port) ())))
(502 #f 474 407 (#(4 123 #(c port) (#(13 123 #(c) (#(57 119 #(name) (#(91 119 #(temp##51) ())))))))))
(503 #f 474 422 (#(4 26 #(c port) ())))
(504 number-sharp-macro 474 434 (#(4 56 #(c port) (#(21 56 #(string) (#(35 56 #(temp##52) ())))))))
(505 #f 474 439 (#(4 14 #(c) ())))
(506 sub-read-token 474 453 (#(4 41 #(c port) (#(8 41 #(loop) ())))))
(507 loop 506 9 (#(4 78 #(l n) (#(10 78 #(c) (#(20 37 #(temp##53) ())))))))
(508 parse-token 474 461 (#(4 163 #(string port) (#(99 156 #(temp##57) ()) #(18 82 #(c) (#(32 82 #(temp##56) (#(49 82 #(temp##55) (#(66 82 #(temp##54) ())))))))))))
(509 reading-error 474 507 (#(7 41 #(port message irritants) ())))
(511 make-some-values-type 510 20 (#(4 75 #(types) (#(32 57 #(temp##58) ())))))
(512 some-values-type? 510 28 (#(4 23 #(type) ())))
(513 some-values-type-components 510 36 (#(4 31 #(type) ())))
(514 check-value-type 510 52 (#(4 42 #(type) ())))
(515 procedure-type 510 68 (#(4 262 #(domain codomain) (#(122 180 #(domain-list) ())))))
(516 #f 515 136 (#(4 11 #(type) ())))
(517 procedure-type? 510 76 (#(4 47 #(type) (#(35 47 #(temp##59) ())))))
(518 fixed-arity-procedure-type? 510 84 (#(4 39 #(type) (#(27 39 #(temp##60) ())))))
(519 procedure-type-codomain 510 92 (#(4 26 #(type) ())))
(520 procedure-type-domain 510 100 (#(4 61 #(type) ())))
(521 nargs->domain-list 510 108 (#(4 38 #(n) ())))
(522 procedure-type-argument-types 510 116 (#(4 61 #(type) ())))
(523 procedure-type-arity 510 124 (#(4 27 #(type) ())))
(524 variable-type 510 132 (#(4 26 #(type) ())))
(525 variable-type? 510 140 (#(4 23 #(type) ())))
(526 compatible-types? 510 156 (#(4 336 #(have-type want-type) (#(310 332 #(c1 c2) ())))))
(527 compatible-type-lists? 510 164 (#(4 128 #(l1 l2) (#(68 126 #(c1) (#(116 126 #(c2) ())))))))
(528 some-values-type 510 229 (#(5 12 #(types) ())))
(530 table-set-procedure 529 44 (#(4 12 #(r##61) ())))
(531 set-table-set-procedure! 529 52 (#(4 15 #(r##62 new##63) ())))
(532 table-ref-procedure 529 60 (#(4 12 #(r##64) ())))
(533 set-table-ref-procedure! 529 68 (#(4 15 #(r##65 new##66) ())))
(534 table-data 529 76 (#(4 12 #(r##67) ())))
(535 set-table-data! 529 84 (#(4 15 #(r##68 new##69) ())))
(536 table-size 529 92 (#(4 12 #(r##70) ())))
(537 set-table-size! 529 100 (#(4 15 #(r##71 new##72) ())))
(538 table-hash-function 529 108 (#(4 12 #(r##73) ())))
(539 make-table 529 133 (#(5 46 #(maybe-hash-function) (#(27 46 #(hash) ())))))
(540 table-ref 529 141 (#(4 19 #(table key) ())))
(541 table-set! 529 149 (#(4 22 #(table key val) ())))
(542 next-table-size 529 173 (#(4 63 #(count) (#(17 63 #(new-size) ())))))
(543 new-entry 529 188 (#(4 46 #(key val others) (#(13 46 #(v) ())))))
(544 get-entry 529 196 (#(4 50 #(entries key) ())))
(545 set-entry! 529 204 (#(4 58 #(entries key val) ())))
(546 for-each-entry 529 212 (#(4 67 #(proc entries) (#(21 65 #(data) ())))))
(547 linear-table-ref 529 220 (#(4 19 #(table key) ())))
(548 linear-table-set! 529 228 (#(4 68 #(table key val) (#(14 68 #(entries) ())))))
(549 linear-table-inc! 529 236 (#(4 102 #(table) (#(18 102 #(count) (#(48 102 #(data) ())))))))
(550 table-expand-table! 529 244 (#(4 30 #(table size) ())))
(551 table-enter-entries! 529 252 (#(4 14 #(table entries) ())))
(552 #f 551 5 (#(4 17 #(key val) ())))
(553 hash-table-ref 529 260 (#(4 49 #(table key) (#(14 49 #(data) ())))))
(554 hash-table-set! 529 268 (#(4 108 #(table key val) (#(14 108 #(data) (#(39 108 #(h) (#(49 108 #(entries) ())))))))))
(555 hash-table-inc! 529 276 (#(4 97 #(table) (#(18 97 #(count) (#(28 97 #(data) (#(35 97 #(size) (#(85 97 #(loop##76) ())))))))))))
(556 loop##74 555 86 (#(4 63 #(i) (#(22 63 #(temp##75) ())))))
(557 table-walk 529 284 (#(4 61 #(proc table) (#(14 61 #(data) (#(45 61 #(size) (#(49 61 #(loop##78) ())))))))))
(558 loop##77 557 50 (#(4 58 #(i) ())))
(559 default-table-hash-function 529 292 (#(4 102 #(obj) ())))
(561 operator-uid-maybe 560 64 (#(4 12 #(r##79) ())))
(562 set-operator-uid-maybe! 560 72 (#(4 15 #(r##80 new##81) ())))
(563 operator-transform 560 80 (#(4 12 #(r##82) ())))
(564 set-operator-transform! 560 88 (#(4 15 #(r##83 new##84) ())))
(565 operator-name 560 96 (#(4 12 #(r##85) ())))
(566 operator-type 560 104 (#(4 12 #(r##86) ())))
(567 #f 560 133 (#(4 27 #(s) ())))
(568 get-operator 560 144 (#(7 202 #(name type-option) (#(43 202 #(type probe) (#(187 202 #(op) ()) #(143 172 #(temp##87) ()) #(67 130 #(previous-type) ())))))))
(569 operator-uid 560 152 (#(4 131 #(op) (#(14 131 #(temp##88) (#(27 131 #(uid) ())))))))
(570 make-operator-table 560 202 (#(7 60 #(default mumble-option) (#(17 60 #(v) ())))))
(571 operator-lookup 560 218 (#(4 21 #(table op) ())))
(572 operator-define! 560 226 (#(4 66 #(table name proc) ())))
(573 node-plist 560 274 (#(4 12 #(r##89) ())))
(574 set-node-plist! 560 282 (#(4 15 #(r##90 new##91) ())))
(575 node-form 560 290 (#(4 12 #(r##92) ())))
(576 node-operator-id 560 298 (#(4 12 #(r##93) ())))
(577 make-node 560 323 (#(4 26 #(operator form) ())))
(578 #f 560 335 (#(4 34 #(n) ())))
(579 node-ref 560 346 (#(4 39 #(node key) (#(26 39 #(probe) ())))))
(580 node-set! 560 354 (#(4 96 #(node key value) (#(77 96 #(loop) ()) #(31 73 #(probe) ())))))
(581 loop 580 78 (#(4 75 #(l prev) ())))
(582 node-operator 560 362 (#(4 17 #(node) ())))
(583 node-predicate 560 370 (#(7 36 #(name type-option) (#(33 36 #(id) ())))))
(584 #f 583 34 (#(4 16 #(node) ())))
(585 make-similar-node 560 378 (#(4 49 #(node form) ())))
(586 generated-parent-name 560 426 (#(4 12 #(r##94) ())))
(587 generated-env 560 434 (#(4 12 #(r##95) ())))
(588 generated-token 560 442 (#(4 12 #(r##96) ())))
(589 generated-symbol 560 450 (#(4 12 #(r##97) ())))
(590 #f 560 479 (#(4 19 #(name) ())))
(591 generate-name 560 490 (#(4 19 #(symbol env parent-name) ())))
(592 name->symbol 560 498 (#(4 66 #(name) (#(19 66 #(uid) ())))))
(593 #f 560 503 (#(440 443 #(operator/with-aliases) ()) #(374 377 #(operator/call) ()) #(344 347 #(op) ())))
(594 name-hash 593 12 (#(4 66 #(name) ())))
(595 desyntaxify 593 20 (#(4 317 #(thing) (#(238 257 #(new) (#(242 257 #(loop) ()))) #(171 211 #(x y) ()) #(22 82 #(temp##101) (#(39 82 #(temp##100) (#(53 82 #(temp##99) (#(69 82 #(temp##98) ())))))))))))
(596 loop 595 243 (#(4 101 #(i same?) (#(57 101 #(x) ())))))
(597 make-immutable 593 28 (#(4 10 #(thing) ())))
(598 transform-id 593 76 (#(4 12 #(r##102) ())))
(599 transform-source 593 84 (#(4 12 #(r##103) ())))
(600 transform-aux-names 593 92 (#(4 12 #(r##104) ())))
(601 transform-type 593 100 (#(4 12 #(r##105) ())))
(602 transform-env 593 108 (#(4 12 #(r##106) ())))
(603 transform-procedure 593 116 (#(4 12 #(r##107) ())))
(604 make-transform 593 141 (#(4 60 #(thing env type source id) ())))
(605 #f 593 153 (#(4 19 #(m) ())))
(606 maybe-transform 593 164 (#(4 105 #(t exp env-of-use) (#(13 105 #(token) (#(33 105 #(new-env) (#(66 105 #(rename) (#(71 105 #(compare) ())))))))))))
(607 compare 606 67 (#(4 91 #(name1 name2) (#(21 91 #(temp##108) ())))))
(608 bind-aliases 593 172 (#(4 27 #(token t env-of-use) (#(14 27 #(env-of-definition) ())))))
(609 #f 608 22 (#(4 55 #(name) ())))
(610 make-name-generator 593 180 (#(4 12 #(env token parent-name) (#(9 12 #(alist) ())))))
(611 #f 610 10 (#(4 114 #(symbol) (#(28 86 #(probe) (#(65 86 #(new-name) ())))))))
(612 same-denotation? 593 188 (#(4 64 #(x y) (#(21 64 #(temp##109) ())))))
(613 binding-type 593 204 (#(4 12 #(b) ())))
(614 binding-place 593 212 (#(4 12 #(b) ())))
(615 binding-static 593 220 (#(4 12 #(b) ())))
(616 really-make-binding 593 228 (#(4 37 #(type place static) (#(14 37 #(b) ())))))
(617 make-binding 593 236 (#(7 117 #(type-or-static place static-option) ())))
(618 clobber-binding! 593 244 (#(4 44 #(b type place static) ())))
(619 binding-transform 593 252 (#(4 33 #(b) (#(14 33 #(foo) ())))))
(620 impose-type 593 260 (#(4 100 #(type b integrate?) (#(39 65 #(type) ())))))
(621 forget-integration 593 268 (#(4 43 #(b) ())))
(622 classify 593 276 (#(4 322 #(form env) (#(55 203 #(op-node) (#(86 190 #(probe) (#(121 177 #(s) ())))))))))
(623 classify-literal 593 345 (#(4 14 #(exp) ())))
(624 classify-call 593 375 (#(4 40 #(proc-node exp env) ())))
(625 classify-name 593 384 (#(4 100 #(name env) (#(18 100 #(binding) (#(52 100 #(node) ())))))))
(626 classify-macro-application 593 412 (#(4 20 #(t form env-of-use) ())))
(627 #f 626 14 ())
(628 classify-transform-application 593 441 (#(4 25 #(t form env-of-use lose) ())))
(629 #f 628 5 (#(4 73 #(new-form new-env token) ())))
(630 maybe-transform-call 593 450 (#(4 127 #(proc-node node env) (#(37 124 #(b) (#(54 121 #(s) ())))))))
(631 #f 630 83 ())
(632 classify-operator-form 593 458 (#(4 69 #(op op-node form env) ())))
(633 #f 593 470 (#(4 23 #(op op-node form env) ())))
(634 define-classifier 593 483 (#(4 29 #(name proc) ())))
(635 #f 593 495 (#(4 41 #(op op-node exp env) ())))
(636 #f 593 503 (#(176 179 #(operator/quote) ()) #(127 130 #(op) ()) #(76 79 #(operator/lambda operator/unassigned) ())))
(637 #f 636 8 (#(4 76 #(op op-node exp env) ())))
(638 #f 636 77 (#(4 149 #(op op-node form env) (#(22 144 #(pat) ())))))
(639 unspecific-node 636 128 ())
(640 #f 636 141 (#(4 172 #(op op-node form env) (#(30 172 #(struct-node lose) (#(88 168 #(b) ())))))))
(641 lose 640 26 ())
(642 #f 636 177 (#(4 35 #(op op-node form env) ())))
(643 lookup 636 189 (#(4 11 #(env name) ())))
(644 bind1 636 197 (#(4 7 #(name binding env) ())))
(645 #f 644 5 (#(4 23 #(a-name) ())))
(646 bind 636 205 (#(4 56 #(names bindings env) ())))
(647 bindrec 636 213 (#(4 36 #(names env->bindings env) ())))
(648 #f 647 16 (#(4 11 #(a-name) ())))
(649 literal? 636 221 (#(4 55 #(exp) (#(10 55 #(temp##112) (#(24 55 #(temp##111) (#(39 55 #(temp##110) ())))))))))
(650 number-of-required-args 636 229 (#(4 23 #(formals) (#(8 23 #(loop##114) ())))))
(651 loop##113 650 9 (#(4 40 #(l i) ())))
(652 n-ary? 636 237 (#(4 35 #(formals) ())))
(653 normalize-formals 636 245 (#(4 54 #(formals) ())))
(654 syntax? 636 253 (#(4 58 #(d) ())))
(655 name? 636 261 (#(4 26 #(thing) (#(11 26 #(temp##115) ())))))
(656 define-usual-suspects 636 293 (#(4 80 #(table mumble) ())))
(657 #f 656 19 (#(4 81 #(node env) (#(14 81 #(form) (#(25 81 #(specs) ())))))))
(658 #f 657 61 (#(4 55 #(spec) ())))
(659 #f 656 46 (#(4 69 #(node env) (#(14 69 #(form) (#(25 69 #(specs) ())))))))
(660 #f 659 57 (#(4 14 #(new-env) ())))
(661 #f 660 5 (#(4 53 #(spec) ())))
(662 #f 656 69 (#(4 81 #(node env) (#(14 81 #(form) ())))))
(663 process-syntax 636 301 (#(4 123 #(form env name p) (#(104 123 #(thing) ()) #(29 84 #(probe) ())))))
(664 #f 663 58 (#(4 7 #(x) ())))
(665 bind-evaluator-for-syntax 636 309 (#(4 7 #(eval-for-syntax env) ())))
(666 #f 665 5 (#(4 23 #(kludge) ())))
(667 evaluator-for-syntax 636 317 (#(4 11 #(env) ())))
(668 scan-body 636 342 (#(4 64 #(forms env cont) (#(17 35 #(temp##116) ())))))
(669 #f 668 58 (#(4 14 #(defs exps env) ())))
(670 scan-body-forms 636 350 (#(4 188 #(forms env defs cont) (#(52 188 #(node forms) (#(89 114 #(name) ())))))))
(671 #f 670 163 (#(4 70 #(new-defs exps env) ())))
(672 body-lossage 636 358 (#(4 23 #(node) ())))
(673 schemify 636 406 (#(4 38 #(node) ())))
(674 #f 636 418 (#(4 41 #(node) (#(14 41 #(form) ())))))
(675 define-schemifier 636 431 (#(4 17 #(name proc) ())))
(676 #f 636 446 (#(4 16 #(node) ())))
(677 #f 636 464 (#(4 25 #(node) ())))
(678 #f 636 482 (#(4 65 #(node) (#(14 65 #(form) ())))))
(679 #f 678 22 (#(4 37 #(spec) ())))
(680 ok-number-of-args? 636 493 (#(4 49 #(form type) ())))
(682 make-population 681 4 ())
(683 add-to-population! 681 12 (#(4 89 #(x pop) ())))
(684 weak-memq 681 20 (#(4 46 #(x weaks) ())))
(685 population-reduce 681 28 (#(4 29 #(cons nil pop) (#(8 29 #(loop##118) ())))))
(686 loop##117 685 9 (#(4 75 #(l prev m) (#(40 70 #(w) ())))))
(687 population->list 681 36 (#(4 17 #(pop) ())))
(688 walk-population 681 44 (#(4 16 #(proc pop) ())))
(689 #f 688 5 (#(4 11 #(thing junk) ())))
(691 interface-name 690 44 (#(4 12 #(r##119) ())))
(692 interface-clients 690 52 (#(4 12 #(r##120) ())))
(693 walk-method 690 60 (#(4 12 #(r##121) ())))
(694 ref-method 690 68 (#(4 12 #(r##122) ())))
(695 #f 690 97 (#(4 19 #(int) ())))
(696 interface-ref 690 108 (#(4 16 #(int name) ())))
(697 for-each-declaration 690 116 (#(4 16 #(proc int) ())))
(698 note-reference-to-interface! 690 124 (#(4 31 #(int thing) (#(14 31 #(pop) ())))))
(699 make-interface 690 132 (#(4 35 #(ref walk name) ())))
(700 make-simple-interface 690 140 (#(4 64 #(name items) (#(18 64 #(table) ())))))
(701 #f 700 23 (#(4 93 #(item) (#(28 80 #(name type) (#(41 54 #(temp##123) ())))))))
(702 #f 701 58 (#(4 18 #(name) ())))
(703 really-make-simple-interface 690 148 (#(4 17 #(table name) ())))
(704 #f 703 5 (#(4 14 #(name) ())))
(705 #f 703 8 (#(4 14 #(proc) ())))
(706 make-compound-interface 690 156 (#(7 45 #(name ints) (#(27 45 #(int) ())))))
(707 #f 706 12 (#(4 20 #(name) (#(8 20 #(loop) ())))))
(708 loop 707 9 (#(4 55 #(ints) (#(37 55 #(temp##124) ())))))
(709 #f 706 15 (#(4 14 #(proc) ())))
(710 #f 709 5 (#(4 16 #(int) ())))
(711 #f 706 32 (#(4 14 #(i) ())))
(713 structure-name 712 44 (#(4 12 #(r##125) ())))
(714 structure-clients 712 52 (#(4 12 #(r##126) ())))
(715 structure-package 712 60 (#(4 12 #(r##127) ())))
(716 structure-interface-really 712 68 (#(4 12 #(r##128) ())))
(717 set-structure-interface! 712 76 (#(4 15 #(r##129 new##130) ())))
(718 structure-interface-thunk 712 84 (#(4 12 #(r##131) ())))
(719 #f 712 113 (#(4 32 #(s) ())))
(720 structure-interface 712 124 (#(4 42 #(s) (#(14 42 #(temp##132) ())))))
(721 initialize-structure! 712 132 (#(4 67 #(s) (#(20 67 #(sig) ())))))
(722 make-structure 712 140 (#(4 121 #(package sig-thunk name) (#(98 121 #(struct) ())))))
(723 #f 722 75 ())
(724 structure-unstable? 712 148 (#(4 16 #(struct) ())))
(725 for-each-export 712 156 (#(4 30 #(proc struct) (#(18 30 #(sig) ())))))
(726 #f 725 19 (#(4 101 #(name want-type) (#(24 101 #(binding) (#(61 87 #(type) ())))))))
(728 package-loaded? 727 4 (#(4 12 #(r##133) ())))
(729 set-package-loaded?! 727 12 (#(4 15 #(r##134 new##135) ())))
(730 package-cached 727 20 (#(4 12 #(r##136) ())))
(731 package-seen 727 28 (#(4 12 #(r##137) ())))
(732 package-clients 727 36 (#(4 12 #(r##138) ())))
(733 package-plist 727 44 (#(4 12 #(r##139) ())))
(734 set-package-plist! 727 52 (#(4 15 #(r##140 new##141) ())))
(735 package-clauses 727 60 (#(4 12 #(r##142) ())))
(736 package-file-name 727 68 (#(4 12 #(r##143) ())))
(737 package-integrate? 727 76 (#(4 12 #(r##144) ())))
(738 set-package-integrate?! 727 84 (#(4 15 #(r##145 new##146) ())))
(739 package-for-syntax-promise 727 92 (#(4 12 #(r##147) ())))
(740 package-evaluator 727 100 (#(4 12 #(r##148) ())))
(741 package-get-location 727 108 (#(4 12 #(r##149) ())))
(742 set-package-get-location! 727 116 (#(4 15 #(r##150 new##151) ())))
(743 package-definitions 727 124 (#(4 12 #(r##152) ())))
(744 package-accesses-thunk 727 132 (#(4 12 #(r##153) ())))
(745 package-opens-thunk 727 140 (#(4 12 #(r##154) ())))
(746 set-package-opens-thunk! 727 148 (#(4 15 #(r##155 new##156) ())))
(747 package-opens-really 727 156 (#(4 12 #(r##157) ())))
(748 set-package-opens! 727 164 (#(4 15 #(r##158 new##159) ())))
(749 package-uid 727 172 (#(4 12 #(r##160) ())))
(750 #f 727 201 (#(4 64 #(p) (#(26 64 #(name) ())))))
(751 make-package 727 212 (#(4 141 #(opens-thunk accesses-thunk evaluator for-syntax-promise dir clauses name) (#(106 141 #(p) ())))))
(752 package-for-syntax 727 220 (#(4 13 #(p) ())))
(753 new-package-uid 727 228 (#(7 18 #(uid) ())))
(754 package-name 727 258 (#(4 19 #(package) ())))
(755 set-package-name! 727 266 (#(4 22 #(package name) ())))
(756 make-simple-package 727 274 (#(7 116 #(opens evaluator efs-promise name-option) (#(103 116 #(p) ())))))
(757 #f 756 60 ())
(758 #f 756 63 ())
(759 package-opens 727 282 (#(4 42 #(p) (#(14 42 #(temp##161) ())))))
(760 package-accesses 727 290 (#(4 13 #(p) ())))
(761 package-definition 727 306 (#(4 53 #(p name) (#(26 53 #(probe) ())))))
(762 package-define! 727 314 (#(7 122 #(p name type-or-static place-option) (#(28 122 #(place) ())))))
(763 really-package-define! 727 322 (#(4 188 #(p name type place static) (#(26 188 #(probe) (#(107 188 #(place) ()) #(71 104 #(temp##163) (#(84 104 #(temp##162) ())))))))))
(764 package-lookup 727 330 (#(7 42 #(p name integrate?-option) ())))
(765 really-package-lookup 727 338 (#(4 90 #(p name integrate?) (#(21 90 #(probe) (#(69 90 #(loop) ())))))))
(766 loop 765 70 (#(4 62 #(opens) (#(42 62 #(probe) ())))))
(767 structure-lookup 727 346 (#(4 88 #(struct name integrate?) (#(32 88 #(type) (#(62 85 #(probe) ())))))))
(768 lookup-generated-name 727 354 (#(4 24 #(ignore-env name) ())))
(769 generic-lookup 727 362 (#(4 97 #(env name) ())))
(770 package->environment 727 370 (#(4 14 #(p) ())))
(771 #f 770 5 (#(4 35 #(form env) (#(20 35 #(f) ())))))
(772 #f 770 8 (#(4 14 #(name) ())))
(773 package-lookup-type 727 378 (#(4 38 #(p name) (#(21 38 #(probe) ())))))
(774 initialize-package! 727 386 (#(4 66 #(p) (#(24 44 #(opens) ())))))
(775 #f 774 35 (#(4 40 #(struct) ())))
(776 #f 774 46 (#(4 28 #(name+struct) ())))
(777 initialize-reified-package! 727 394 (#(4 27 #(p names locs get-location) (#(11 27 #(end) (#(15 27 #(loop##166) ())))))))
(778 loop##164 777 16 (#(4 118 #(i) (#(13 118 #(temp##165) (#(36 106 #(name) (#(54 106 #(probe) ())))))))))
(779 for-each-definition 727 402 (#(4 19 #(proc p) ())))
(780 #f 779 5 (#(4 43 #(name stuff) ())))
(781 get-new-location 727 410 (#(4 19 #(p name) ())))
(782 make-new-location 727 418 (#(4 62 #(p name) (#(9 62 #(uid) ())))))
(783 flush-location-names 727 465 ())
(784 package-get 727 473 (#(4 39 #(p ind) (#(26 39 #(temp##167) ())))))
(785 package-put! 727 481 (#(4 73 #(p ind val) (#(26 73 #(temp##168) (#(36 45 #(z) ())))))))
(786 package-note-caching 727 489 (#(4 90 #(p name place) (#(57 78 #(loop) ())))))
(787 loop 786 58 (#(4 109 #(opens) ())))
(789 environment-ref 788 4 (#(4 76 #(package name) (#(21 76 #(binding) ())))))
(790 environment-set! 788 12 (#(4 139 #(package name value) (#(21 139 #(binding) ())))))
(791 environment-define! 788 20 (#(4 28 #(package name value) ())))
(792 *structure-ref 788 28 (#(4 78 #(struct name) (#(23 78 #(binding) ())))))
(793 contents-carefully 788 36 (#(4 195 #(binding env name) (#(79 167 #(loc) ())))))
(794 interaction-environment 788 60 ())
(795 set-interaction-environment! 788 68 (#(4 41 #(p) ())))
(796 with-interaction-environment 788 76 (#(4 57 #(p thunk) ())))
(797 scheme-report-environment 788 84 (#(4 32 #(n) ())))
(798 set-scheme-report-environment! 788 107 (#(4 13 #(repnum env) ())))
(799 make-package-for-syntax 788 115 (#(4 17 #(eval structs) (#(8 17 #(recur) ())))))
(800 recur 799 9 ())
(801 #f 800 13 ())
(803 define-usual-macro 802 18 (#(4 23 #(name proc aux-names) ())))
(804 #f 803 11 (#(4 20 #(exp rename compare) ())))
(805 usual-transform 802 26 (#(4 14 #(name) ())))
(806 #f 802 38 (#(7 93 #(rename compare conjuncts) ())))
(807 #f 802 56 (#(7 52 #(rename compare clauses) (#(30 52 #(result) ()) #(15 27 #(recur) ())))))
(808 recur 807 16 (#(4 376 #(clauses) (#(34 371 #(clause more-clauses) (#(198 309 #(temp) ())))))))
(809 #f 802 74 (#(7 204 #(rename compare specs end body) (#(57 204 #(%loop %letrec %lambda %cond) ())))))
(810 #f 809 105 (#(4 37 #(y) ())))
(811 #f 802 92 (#(7 233 #(rename compare specs body) (#(130 211 #(tag specs body %letrec %lambda) ())))))
(812 #f 802 110 (#(7 128 #(rename compare specs body) (#(20 38 #(temp##169) ())))))
(813 #f 802 128 (#(7 152 #(rename compare disjuncts) (#(50 152 #(temp) ())))))
(814 #f 802 146 (#(7 132 #(rename compare key clauses) (#(57 132 #(temp %eqv? %memv %quote) ())))))
(815 #f 814 107 (#(4 158 #(clause) ())))
(816 #f 802 160 (#(4 170 #(rename compare x) (#(32 170 #(interesting-to-quasiquote? descend-quasiquote-vector descend-quasiquote-pair descend-quasiquote finalize-quasiquote expand-quasiquote %list->vector %cons %append %unquote-splicing %unquote %quasiquote %quote) ())))))
(817 interesting-to-quasiquote? 816 33 (#(4 26 #(x marker) ())))
(818 descend-quasiquote-vector 816 38 (#(4 26 #(x level return) ())))
(819 #f 818 20 (#(4 61 #(mode arg) (#(9 61 #(temp##170) ())))))
(820 descend-quasiquote-pair 816 43 (#(4 20 #(x level return) ())))
(821 #f 820 14 (#(4 20 #(car-mode car-arg) ())))
(822 #f 821 14 (#(4 162 #(cdr-mode cdr-arg) ())))
(823 descend-quasiquote 816 48 (#(4 215 #(x level return) ())))
(824 finalize-quasiquote 816 53 (#(4 68 #(mode arg) ())))
(825 expand-quasiquote 816 58 (#(4 17 #(x level) ())))
(827 #f 826 8 (#(7 88 #(r c subkeywords rules) ())))
(828 process-rules 826 22 (#(4 389 #(rules subkeywords r c) (#(62 389 #(free-meta-variables meta-variables process-template process-pattern process-segment-match process-match process-rule make-transformer %temp %tail %rename %quote %pair? %map %let* %let %lambda %input %equal? %eq? %else %cons %cond %compare %cdr %car %and %append) ())))))
(829 free-meta-variables 828 63 (#(4 215 #(template dim env free) (#(65 89 #(probe) ())))))
(830 meta-variables 828 68 (#(4 131 #(pattern dim vars) ())))
(831 process-template 828 73 (#(4 404 #(template dim env) (#(145 325 #(vars) (#(191 325 #(x) (#(259 325 #(gen) ()))))) #(35 101 #(probe) ())))))
(832 process-pattern 828 78 (#(4 176 #(pattern path mapit) ())))
(833 #f 832 90 (#(4 67 #(x) ())))
(834 process-segment-match 828 83 (#(4 144 #(input pattern) (#(21 144 #(conjuncts) ())))))
(835 process-match 828 88 (#(4 386 #(input pattern) (#(271 305 #(temp##172) (#(293 305 #(temp##171) ())))))))
(836 process-rule 828 93 (#(4 170 #(rule) (#(64 160 #(pattern template) ())))))
(837 #f 836 99 (#(4 7 #(x) ())))
(838 make-transformer 828 98 (#(4 139 #(rules) ())))
(839 segment-pattern? 826 30 (#(4 53 #(pattern) (#(33 51 #(temp##173) ())))))
(840 segment-template? 826 38 (#(4 41 #(pattern) ())))
(841 find-free-names-in-syntax-rules 826 72 (#(4 39 #(subkeywords rules) (#(10 39 #(free-names meta-variables) (#(24 39 #(loop##176) ())))))))
(842 free-names 841 11 (#(4 167 #(template vars names) (#(39 57 #(temp##174) ())))))
(843 meta-variables 841 16 (#(4 130 #(pattern vars) ())))
(844 loop##175 841 25 (#(4 78 #(rules names) (#(34 73 #(rule) ())))))
(846 namestring 845 4 (#(4 235 #(namelist dir default-type) (#(40 235 #(namelist) (#(82 235 #(subdirs) (#(93 235 #(basename) (#(139 235 #(type) (#(149 160 #(temp##177) ())))))))))))))
(847 #f 846 173 (#(4 23 #(subdir) ())))
(848 namestring-component 845 28 (#(4 74 #(x) ())))
(849 file-name-directory 845 60 (#(4 26 #(filename) ())))
(850 file-name-nondirectory 845 68 (#(4 28 #(filename) ())))
(851 file-nondirectory-position 845 76 (#(4 26 #(filename) (#(8 26 #(loop) ())))))
(852 loop 851 9 (#(4 56 #(i) ())))
(853 string-posq 845 84 (#(4 20 #(thing s) (#(8 20 #(loop) ())))))
(854 loop 853 9 (#(4 54 #(i) ())))
(855 translations 845 100 ())
(856 set-translation! 845 108 (#(4 52 #(from to) (#(21 52 #(probe) ())))))
(857 translate 845 116 (#(4 27 #(name) (#(11 27 #(len) (#(15 27 #(loop) ())))))))
(858 loop 857 16 (#(4 142 #(ts) (#(28 142 #(from) (#(39 142 #(to) (#(46 142 #(k) ())))))))))
(859 #f #f #f (#(204 207 #(operator/define operator/primitive-procedure) ()) #(95 98 #(begin-node? define-node? define-syntax-node?) ())))
(860 scan-forms 859 21 (#(7 97 #(forms p filename env-option) (#(38 97 #(env) ())))))
(861 #f 860 91 ())
(862 scan-file 859 29 (#(7 81 #(pathname p env-option) (#(38 81 #(env) (#(57 81 #(filename) (#(71 81 #(truename) ())))))))))
(863 #f 862 75 (#(4 64 #(port) ())))
(864 #f 863 58 (#(16 75 #(o-port) (#(54 75 #(result) ()) #(42 51 #(recur) ())))))
(865 recur 864 43 (#(16 58 #(form) ())))
(866 scan-form-list 859 37 (#(4 20 #(forms p env) (#(8 20 #(loop) ())))))
(867 loop 866 9 (#(4 61 #(forms) (#(39 61 #(scanned-forms) ())))))
(868 scan-form 859 96 (#(4 158 #(form p env) (#(21 158 #(node) (#(80 111 #(form) ())))))))
(869 process-define-syntax 859 105 (#(4 123 #(form p env) (#(27 123 #(name source) ())))))
(870 eval-for-syntax 859 113 (#(4 35 #(p form) (#(20 35 #(f) ())))))
(871 scan-structures 859 121 (#(4 43 #(structs process-package? package-action) (#(24 43 #(out p-seen s-seen) (#(28 43 #(recur) ())))))))
(872 recur 871 29 (#(4 283 #(s) (#(51 281 #(p) (#(227 237 #(stuff) ())))))))
(873 #f 872 188 (#(4 15 #(name+struct) ())))
(874 #f 872 231 ())
(875 scan-package 859 129 (#(7 120 #(p env-option) (#(38 120 #(env) (#(43 120 #(stuff) (#(53 120 #(config-file) (#(76 120 #(dir) ())))))))))))
(876 #f 875 81 (#(4 231 #(clause) (#(12 231 #(temp##180) (#(146 231 #(temp##179) ()) #(117 134 #(temp##178) ())))))))
(877 #f 876 22 (#(4 61 #(file) (#(25 61 #(file) ())))))
(878 optimize 859 137 (#(4 187 #(stuff p) (#(57 184 #(optimizers) (#(102 184 #(names) (#(119 184 #(passes) ())))))))))
(879 #f 878 33 (#(4 14 #(clause) ())))
(880 #f 878 124 (#(4 7 #(x) ())))
(881 #f 878 137 (#(4 15 #(pass stuff) ())))
(882 check-structure 859 145 (#(4 57 #(s) (#(9 57 #(undefined) ())))))
(883 #f 882 14 (#(4 102 #(name want-type binding) (#(21 90 #(have-type) ())))))
(884 initialize-usual-transforms! 859 153 (#(4 14 #(p names) ())))
(885 #f 884 5 (#(4 71 #(name) ())))
(886 define-all-operators 859 161 (#(4 78 #(p) (#(9 78 #(procs) (#(55 78 #(nodes) ())))))))
(887 #f 886 14 (#(4 54 #(name op) (#(14 54 #(type) ())))))
(888 #f 886 60 (#(4 43 #(name op) ())))
(889 make-define-primitive-node 859 205 (#(4 56 #(name) ())))
(890 get-optimizer 859 228 (#(4 14 #(name) ())))
(891 set-optimizer! 859 236 (#(4 17 #(name opt) ())))
(893 note-undefined! 892 20 (#(4 32 #(name) (#(18 32 #(note) ())))))
(894 noting-undefined-variables 892 28 (#(4 67 #(p thunk) (#(9 67 #(losers) (#(14 67 #(foo) (#(35 46 #(temp##181) ())))))))))
(895 foo 894 10 (#(4 99 #(env name) (#(21 99 #(probe) ())))))
(896 #f 894 44 (#(4 49 #(name) ())))
(897 #f 894 61 (#(13 31 #(result) ())))
(898 #f 897 18 (#(4 166 #(p+names) (#(12 166 #(env) (#(32 166 #(names) ())))))))
(899 #f 898 17 (#(4 23 #(name) ())))
(900 #f 898 133 (#(4 29 #(name) ())))
(902 enumerand->name 901 4 (#(4 12 #(e e-type) ())))
(903 name->enumerand 901 12 (#(4 20 #(e e-type) (#(8 20 #(loop) ())))))
(904 loop 903 9 (#(4 45 #(i) ())))
(905 definitely-name->enumerand 901 20 (#(4 57 #(e e-type e-type-name) (#(21 57 #(temp##182) ())))))
(911 node-type 910 4 (#(4 17 #(node env) ())))
(912 reconstruct 910 12 (#(4 44 #(node env constrained) ())))
(913 #f 910 24 (#(4 17 #(node env constrained) ())))
(914 define-reconstructor 910 37 (#(4 29 #(name type proc) ())))
(915 #f 910 52 (#(4 153 #(node env constrained) (#(14 153 #(form) (#(25 153 #(formals) (#(39 153 #(vars) (#(56 153 #(var-nodes) (#(102 153 #(cod) ())))))))))))))
(916 #f 915 44 (#(4 14 #(formal) ())))
(917 #f 915 131 (#(4 32 #(node) (#(21 32 #(temp##183) ())))))
(918 #f 910 87 (#(4 64 #(node env constrained) (#(21 64 #(probe) (#(53 64 #(temp##184) ())))))))
(919 reconstruct-call 910 98 (#(4 77 #(node env constrained) (#(53 77 #(op-type) ())))))
(920 #f 910 113 (#(4 16 #(node env constrained) ())))
(921 #f 910 131 (#(4 22 #(node env constrained) ())))
(922 #f 910 149 (#(4 96 #(node env constrained) (#(73 96 #(con-type alt-type) ())))))
(923 #f 910 167 (#(4 31 #(node env constrained) ())))
(924 #f 910 185 (#(4 7 #(node env constrained) ())))
(925 #f 910 203 (#(4 7 #(node env constrained) ())))
(926 #f 910 221 (#(4 32 #(node env constrained) ())))
(927 #f 910 239 (#(4 22 #(node env constrained) ())))
(928 node->type 910 250 (#(4 59 #(node) (#(28 52 #(form) ())))))
(929 #f 910 265 (#(4 7 #(node env constrained) ())))
(930 #f 910 283 (#(4 7 #(node env constrained) ())))
(931 constrain-call! 910 294 (#(4 147 #(node want-type env constrained) (#(21 145 #(exp) (#(104 145 #(op-type) ())))))))
(932 #f 931 44 (#(4 7 #(arg) ())))
(933 #f 931 119 (#(4 22 #(want-type arg) ())))
(934 constrain! 910 302 (#(4 267 #(arg want-type env constrained) (#(27 267 #(temp##187) (#(245 265 #(loop##186) ()) #(68 197 #(binding) (#(116 193 #(have-type) ())))))))))
(935 loop##185 934 246 (#(4 74 #(exps) ())))
(936 #f 910 368 (#(4 31 #(node env constrained) ())))
(937 #f 936 9 (#(4 17 #(node) ())))
(938 #f 910 428 (#(4 62 #(node env constrained) (#(38 62 #(proc-type) ())))))
(940 reconstruct-apply 939 4 (#(4 59 #(node env constrained) (#(35 59 #(proc-type) ())))))
(941 declare-operator-type 939 106 (#(4 38 #(ops type) ())))
(942 #f 941 19 (#(4 14 #(op) ())))
(943 last 939 486 (#(4 32 #(x) ())))
(944 constant-type 939 494 (#(4 94 #(x) ())))
(946 template-code 945 12 (#(4 12 #(tem) ())))
(947 template-info 945 20 (#(4 12 #(tem) ())))
(948 set-template-code! 945 28 (#(4 15 #(tem cv) ())))
(949 set-template-info! 945 36 (#(4 15 #(tem info) ())))
(951 segment->template 950 28 (#(4 176 #(segment name pc-in-parent) (#(17 176 #(cv) (#(40 176 #(astate) (#(54 176 #(parent-data) (#(101 176 #(name) (#(150 176 #(debug-data) ())))))))))))))
(952 #f 951 170 (#(21 72 #(maps) ())))
(953 segment-data->template 950 36 (#(4 76 #(cv debug-data literals) (#(27 76 #(template) (#(61 76 #(loop##189) ())))))))
(954 loop##188 953 62 (#(4 46 #(lits i) ())))
(955 astate-literals 950 84 (#(4 12 #(r##190) ())))
(956 set-astate-literals! 950 92 (#(4 15 #(r##191 new##192) ())))
(957 astate-count 950 100 (#(4 12 #(r##193) ())))
(958 set-astate-count! 950 108 (#(4 15 #(r##194 new##195) ())))
(959 astate-pc 950 116 (#(4 12 #(r##196) ())))
(960 set-astate-pc! 950 124 (#(4 15 #(r##197 new##198) ())))
(961 astate-code-vector 950 132 (#(4 12 #(r##199) ())))
(962 make-astate 950 140 (#(4 20 #(cv) ())))
(963 emit-byte! 950 148 (#(4 44 #(a byte) ())))
(964 emit-literal! 950 156 (#(4 143 #(a thing) (#(41 138 #(probe count) ())))))
(965 emit-segment! 950 164 (#(4 14 #(astate segment) ())))
(966 #f 950 175 (#(4 6 #(astate) ())))
(967 instruction 950 186 (#(7 29 #(opcode operands) ())))
(968 #f 967 24 (#(4 29 #(astate) ())))
(969 #f 968 20 (#(4 14 #(operand) ())))
(970 sequentially 950 194 (#(5 18 #(segments) ())))
(971 sequentially-2 950 202 (#(4 47 #(seg1 seg2) ())))
(972 #f 971 42 (#(4 29 #(astate) ())))
(973 instruction-with-literal 950 210 (#(4 13 #(opcode thing) ())))
(974 #f 973 8 (#(4 29 #(astate) ())))
(975 instruction-with-location 950 218 (#(4 13 #(opcode thunk) ())))
(976 #f 975 8 (#(4 35 #(astate) ())))
(977 instruction-with-template 950 226 (#(4 13 #(opcode segment name) ())))
(978 #f 977 8 (#(4 49 #(astate) ())))
(979 make-label 950 234 ())
(980 instruction-using-label 950 242 (#(7 42 #(opcode label rest) (#(30 42 #(segment) ())))))
(981 #f 980 37 (#(4 80 #(astate) (#(18 80 #(instr) ())))))
(982 attach-label 950 250 (#(4 16 #(label segment) ())))
(983 #f 982 11 (#(4 58 #(astate) (#(22 58 #(pc cv) ())))))
(984 #f 983 27 (#(4 62 #(instr+origin) (#(18 62 #(instr origin) (#(27 62 #(offset) ())))))))
(985 note-source-code 950 294 (#(4 30 #(info segment) ())))
(986 #f 985 22 (#(4 66 #(astate) (#(33 66 #(dd) ())))))
(987 note-environment 950 302 (#(4 30 #(vars segment) ())))
(988 #f 987 22 (#(4 101 #(astate) (#(14 101 #(pc-before) (#(31 101 #(env-maps) ())))))))
(989 emit-with-environment-maps! 950 310 (#(4 30 #(astate segment) ())))
(990 #f 989 24 ())
(992 new-template-uid 991 4 (#(7 18 #(uid) ())))
(993 template-uid 991 20 ())
(994 set-template-uid! 991 28 (#(4 9 #(uid) ())))
(995 debug-flag-accessor 991 128 (#(4 24 #(name) (#(21 24 #(access) ())))))
(996 #f 995 22 ())
(997 debug-flag-modifier 991 136 (#(4 24 #(name) (#(21 24 #(modify) ())))))
(998 #f 997 22 (#(4 23 #(new) ())))
(999 with-fresh-compiler-state 991 246 (#(4 58 #(thunk) ())))
(1000 #f 999 52 ())
(1001 #f 1000 3 ())
(1002 #f 1000 6 (#(4 9 #(s) ())))
(1003 saving-and-restoring 991 254 (#(4 22 #(fetch store! other thunk) (#(9 22 #(swap) ())))))
(1004 swap 1003 5 (#(13 31 #(temp) ())))
(1006 debug-data-source 1005 44 (#(4 12 #(r##200) ())))
(1007 set-debug-data-source! 1005 52 (#(4 15 #(r##201 new##202) ())))
(1008 debug-data-env-maps 1005 60 (#(4 12 #(r##203) ())))
(1009 set-debug-data-env-maps! 1005 68 (#(4 15 #(r##204 new##205) ())))
(1010 debug-data-pc-in-parent 1005 76 (#(4 12 #(r##206) ())))
(1011 debug-data-parent 1005 84 (#(4 12 #(r##207) ())))
(1012 debug-data-name 1005 92 (#(4 12 #(r##208) ())))
(1013 debug-data-uid 1005 100 (#(4 12 #(r##209) ())))
(1014 new-debug-data 1005 125 (#(4 32 #(name parent pc-in-parent) ())))
(1015 #f 1005 137 (#(4 27 #(dd) ())))
(1016 debug-data->info 1005 148 (#(4 60 #(debug-data) ())))
(1017 get-debug-data 1005 156 (#(4 45 #(info) ())))
(1018 note-debug-data! 1005 164 (#(4 28 #(dd) ())))
(1019 interesting-debug-data? 1005 172 (#(4 116 #(debug-data) (#(28 114 #(temp##212) (#(55 114 #(temp##211) (#(86 114 #(temp##210) ())))))))))
(1020 debug-data-names 1005 180 (#(4 54 #(info) (#(18 54 #(dd) ())))))
(1021 template-debug-data 1005 188 (#(4 20 #(tem) ())))
(1022 template-id 1005 196 (#(4 43 #(tem) (#(18 43 #(info) ())))))
(1023 template-name 1005 204 (#(4 33 #(tem) (#(18 33 #(probe) ())))))
(1024 template-names 1005 212 (#(4 20 #(tem) ())))
(1026 compile-top 1025 4 (#(4 35 #(exp cenv depth cont) ())))
(1027 compile 1025 12 (#(4 74 #(exp cenv depth cont) (#(21 74 #(node) (#(48 74 #(node) ())))))))
(1028 #f 1025 32 (#(4 26 #(node cenv depth cont) ())))
(1029 #f 1025 35 (#(4 7 #(frob) ())))
(1030 #f 1029 5 (#(4 22 #(node cenv depth cont) ())))
(1031 #f 1030 5 (#(4 20 #(form cenv) ())))
(1032 define-compilator 1025 48 (#(4 17 #(name proc) ())))
(1033 #f 1025 63 (#(4 54 #(node cenv depth cont) (#(14 54 #(obj) ())))))
(1034 #f 1025 81 (#(4 40 #(node cenv depth cont) (#(14 40 #(exp) (#(27 40 #(obj) ())))))))
(1035 compile-constant 1025 92 (#(4 41 #(obj depth cont) ())))
(1036 #f 1025 107 (#(4 216 #(node cenv depth cont) (#(21 216 #(binding) (#(31 216 #(name) (#(68 173 #(level+over) (#(90 173 #(back) (#(98 173 #(over) (#(103 173 #(temp##213) ())))))))))))))))
(1037 #f 1025 125 (#(4 228 #(node cenv depth cont) (#(14 228 #(exp) (#(37 228 #(lhs-node) (#(47 228 #(name) (#(65 228 #(binding) (#(145 178 #(level+over) ())))))))))))))
(1038 #f 1025 143 (#(4 234 #(node cenv depth cont) (#(36 234 #(exp alt-label join-label) ())))))
(1039 #f 1025 161 (#(4 33 #(node cenv depth cont) (#(14 33 #(exp) ())))))
(1040 #f 1025 169 (#(176 179 #(operator/lambda operator/set! operator/unassigned) ())))
(1041 compile-begin 1040 4 (#(4 65 #(exp-list cenv depth cont) (#(46 65 #(dummy) (#(50 65 #(loop) ())))))))
(1042 loop 1041 51 (#(4 110 #(exp-list i) ())))
(1043 compile-call 1040 12 (#(4 207 #(node cenv depth cont) (#(14 207 #(exp) (#(22 207 #(proc-node) (#(158 207 #(new-node) ()) #(56 109 #(formals) ())))))))))
(1044 compile-redex 1040 55 (#(4 140 #(proc-node args cenv depth cont) (#(14 140 #(proc-exp) (#(25 140 #(formals) (#(36 140 #(body) ())))))))))
(1045 compile-unknown-call 1040 63 (#(4 140 #(node cenv depth cont) (#(14 140 #(exp) (#(127 140 #(call) ())))))))
(1046 maybe-push-continuation 1040 71 (#(4 90 #(code depth cont) (#(32 90 #(label) ())))))
(1047 push-arguments 1040 79 (#(4 48 #(node cenv depth) (#(18 48 #(exp) (#(22 48 #(recur) ())))))))
(1048 recur 1047 23 (#(4 98 #(args depth i) ())))
(1049 push-all-with-names 1040 87 (#(4 96 #(exp-list names cenv depth) ())))
(1050 #f 1040 102 (#(4 75 #(node cenv depth cont) (#(26 75 #(exp name) ())))))
(1051 compile-lambda 1040 113 (#(4 118 #(exp cenv body-name) (#(15 118 #(formals) (#(29 118 #(nargs) ())))))))
(1052 compile-lambda-code 1040 121 (#(4 214 #(formals body cenv name) (#(146 209 #(vars) (#(175 209 #(cenv) ()))) #(53 127 #(nargs) ())))))
(1053 compile-letrec 1040 177 (#(4 168 #(node cenv depth cont) (#(14 168 #(exp) (#(25 168 #(specs) (#(36 168 #(body) ())))))))))
(1054 #f 1053 71 (#(4 21 #(spec) ())))
(1055 #f 1053 142 (#(4 15 #(spec) ())))
(1056 compile-body 1040 204 (#(4 17 #(body cenv depth cont) ())))
(1057 #f 1056 11 (#(4 81 #(defs exps) ())))
(1058 #f 1057 44 (#(4 15 #(node) ())))
(1059 make-cont 1040 229 (#(4 13 #(seg source-info) ())))
(1060 return-cont 1040 285 (#(4 13 #(name) ())))
(1061 return-cont? 1040 293 (#(4 14 #(cont) ())))
(1062 fall-through-cont 1040 301 (#(4 19 #(exp i) ())))
(1063 fall-through-cont? 1040 309 (#(4 21 #(cont) ())))
(1064 ignore-values-cont 1040 349 (#(4 19 #(exp i) ())))
(1065 ignore-values-cont? 1040 357 (#(4 14 #(cont) ())))
(1066 deliver-value 1040 365 (#(4 32 #(segment cont) ())))
(1067 named-cont 1040 373 (#(4 13 #(name) ())))
(1068 cont-name 1040 381 (#(4 22 #(cont) ())))
(1069 bind-vars 1040 389 (#(4 25 #(names cenv) (#(22 25 #(level) ())))))
(1070 #f 1069 23 (#(4 36 #(name) (#(20 36 #(loop) ())))))
(1071 loop 1070 21 (#(4 67 #(over names) ())))
(1072 initial-cenv 1040 397 (#(4 17 #(cenv) ())))
(1073 environment-level 1040 405 (#(4 11 #(cenv) ())))
(1074 name-node-binding 1040 430 (#(4 37 #(node cenv) (#(21 37 #(temp##214) ())))))
(1075 generate-trap 1040 438 (#(7 68 #(cont stuff) ())))
(1076 careful-sequentially 1040 446 (#(4 256 #(seg1 seg2 depth cont) ())))
(1078 type-check 1077 487 (#(4 274 #(node cenv) (#(14 274 #(form) (#(62 271 #(proc-type) (#(82 271 #(args) ())))))))))
(1079 #f 1078 132 (#(4 15 #(arg) ())))
(1080 report-type-error 1077 495 (#(4 45 #(message node proc-type) ())))
(1081 #f 1077 506 (#(4 34 #(node cenv depth cont) ())))
(1082 #f #f #f (#(99 111 #(loop##222) ())))
(1083 define-compiler-primitive 1082 4 (#(4 65 #(name type compilator closed) (#(35 46 #(temp##215) ())))))
(1085 define-closed-compilator 1082 29 (#(4 17 #(name proc) ())))
(1086 #f 1082 44 (#(4 81 #(node cenv depth cont) (#(20 81 #(name) ())))))
(1087 get-closed-compilator 1082 55 (#(4 14 #(op) ())))
(1088 direct-compilator 1082 63 (#(4 7 #(opcode) ())))
(1089 #f 1088 5 (#(4 89 #(node cenv depth cont) (#(17 89 #(args) ())))))
(1090 direct-closed-compilator 1082 71 (#(4 7 #(opcode) ())))
(1091 #f 1090 5 (#(12 103 #(arg-specs) ())))
(1092 nargs->domain 1082 79 (#(4 23 #(nargs) (#(8 23 #(loop##217) ())))))
(1093 loop##216 1092 9 (#(4 40 #(nargs l) ())))
(1094 checked-compilator 1082 87 (#(4 7 #(nargs compilator) ())))
(1095 #f 1094 5 (#(4 67 #(node cenv depth cont) (#(14 67 #(exp) ())))))
(1096 loop##218 1082 100 (#(4 311 #(opcode) (#(13 311 #(temp##221) (#(50 299 #(arg-specs name) (#(67 299 #(temp##220) (#(156 299 #(temp##219) ())))))))))))
(1097 define-simple-primitive 1082 116 (#(4 158 #(name type segment) (#(30 158 #(c winner?) (#(118 158 #(nargs) ()) #(67 115 #(temp##223) ())))))))
(1098 simple-compilator 1082 124 (#(4 7 #(segment) ())))
(1099 #f 1098 5 (#(4 80 #(node cenv depth cont) (#(17 80 #(args) ())))))
(1100 simple-closed-compilator 1082 132 (#(4 7 #(nargs segment) ())))
(1101 #f 1100 5 ())
(1102 define-data-struct-primitives 1082 140 (#(7 176 #(name predicate maker slots) (#(24 176 #(type-byte) (#(29 176 #(def-prim) (#(160 176 #(loop##226) ())))))))))
(1103 def-prim 1102 25 (#(7 35 #(name type op stuff) ())))
(1104 loop##224 1102 161 (#(4 179 #(i slots) (#(13 179 #(temp##225) (#(33 161 #(slot) ())))))))
(1105 #f 1082 310 (#(4 11 #(stuff) ())))
(1106 define-vector-primitives 1082 324 (#(4 353 #(name element-type make length ref set!) (#(21 353 #(type-byte) (#(26 353 #(s-a) (#(31 353 #(def-prim) ())))))))))
(1107 s-a 1106 22 (#(5 33 #(syms) ())))
(1108 def-prim 1106 27 (#(4 29 #(name type op) ())))
(1109 #f 1082 490 (#(257 276 #(cons-instruction) ())))
(1110 #f 1109 28 (#(4 26 #(name) ())))
(1111 #f 1109 43 (#(4 26 #(name) ())))
(1112 #f 1109 58 (#(4 26 #(name) ())))
(1113 #f 1109 126 (#(4 125 #(node cenv depth cont) (#(14 125 #(exp) (#(22 125 #(args) ())))))))
(1115 #f 1109 146 (#(4 192 #(node cenv depth cont) (#(29 192 #(args exp) (#(46 192 #(producer consumer) ())))))))
(1116 #f 1109 149 (#(15 148 #(label) ())))
(1117 define-n-ary-compiler-primitive 1109 160 (#(4 66 #(name result-type min-nargs compilator closed) ())))
(1118 n-ary-primitive-compilator 1109 168 (#(4 7 #(name min-nargs compilator) ())))
(1119 #f 1118 5 (#(4 100 #(node cenv depth cont) (#(14 100 #(exp) ())))))
(1120 #f 1109 185 (#(4 151 #(node cenv depth cont) (#(14 151 #(exp) (#(22 151 #(proc+args+rest) (#(42 151 #(rest+args) (#(50 151 #(args) (#(85 151 #(args+proc+rest) ())))))))))))))
(1122 #f 1109 208 (#(4 78 #(node cenv depth cont) (#(17 78 #(args) ())))))
(1124 #f 1109 267 (#(4 142 #(node cenv depth cont) (#(14 142 #(exp) (#(22 142 #(args) ())))))))
(1125 #f 1124 98 (#(4 8 #(arg) ())))
(1128 push-all-but-last 1109 304 (#(4 26 #(args cenv depth exp) (#(8 26 #(recur) ())))))
(1129 recur 1128 9 (#(4 105 #(args depth i) (#(42 105 #(first-code) ())))))
(1130 #f #f #f (#(215 218 #(get-undefined) ()) #(86 89 #(stob/location location-contents-offset) ())))
(1131 compile-form 1130 4 (#(4 41 #(form p) ())))
(1132 compile-file 1130 12 (#(4 76 #(filename p) (#(21 76 #(scanned-forms) (#(35 76 #(o-port) (#(58 76 #(template) ())))))))))
(1133 compile-and-run-forms 1130 20 (#(4 38 #(forms p filename run noisy?) ())))
(1134 compile-and-run-file 1130 28 (#(4 35 #(filename p run noisy?) ())))
(1135 compile-and-run-scanned-forms 1130 36 (#(4 53 #(scanned-forms p filename run noisy?) (#(9 53 #(do-it) (#(14 53 #(do-them) ())))))))
(1136 do-it 1135 5 (#(4 29 #(scanned-form) ())))
(1137 do-them 1135 10 (#(33 45 #(loop##228) ())))
(1138 loop##227 1137 34 (#(4 57 #(scanned-forms) ())))
(1139 #f 1135 20 (#(5 29 #(results) ())))
(1140 compile-scanned-forms 1130 44 (#(7 79 #(scanned-forms p filename noisy? env-option) (#(53 79 #(cenv) ())))))
(1141 #f 1140 73 (#(50 62 #(recur) ())))
(1142 recur 1141 51 (#(4 96 #(scanned-forms) ())))
(1143 compile-scanned-form 1130 52 (#(4 78 #(node cenv cont noisy?) (#(41 62 #(segment) ())))))
(1144 compile-definition 1130 87 (#(4 145 #(node cenv cont noisy?) (#(14 145 #(form) (#(25 145 #(name) (#(44 145 #(loc) ())))))))))
(1145 #f 1144 52 ())
(1146 prepare-cenv 1130 96 (#(4 17 #(p env) ())))
(1147 cenv-package 1130 104 (#(4 11 #(env) ())))
(1148 get-location 1130 146 (#(4 101 #(binding cenv name want-type) ())))
(1149 #f 1148 34 ())
(1150 #f 1148 66 ())
(1151 #f 1148 84 ())
(1152 #f 1148 99 ())
(1153 location-for-undefined 1130 154 (#(4 104 #(cenv name want-type) (#(55 104 #(p) ())))))
(1154 package-accessor-on-demand 1130 162 (#(4 7 #(id init) ())))
(1155 #f 1154 5 (#(4 62 #(p) (#(21 62 #(temp##229) (#(40 62 #(foo) ())))))))
(1156 location-on-demand 1130 170 (#(4 7 #(accessor) ())))
(1157 #f 1156 5 (#(4 82 #(p name) (#(18 82 #(table) (#(35 82 #(temp##230) (#(60 82 #(new) ())))))))))
(1159 location-for-reference 1130 216 (#(4 29 #(p name) (#(8 29 #(loop) ())))))
(1160 loop 1159 9 (#(4 83 #(opens) ())))
(1162 note-caching 1130 262 (#(4 63 #(cenv name place) ())))
(1163 grumble 1130 270 (#(4 59 #(cenv) ())))
(1164 make-startup-procedure 1130 278 (#(4 120 #(inits resumer) (#(9 120 #(nargs) ())))))
(1165 #f 1164 14 (#(4 65 #(init seg) ())))
(1167 eval 1166 4 (#(4 30 #(form p) ())))
(1168 #f 1167 22 (#(4 14 #(template) ())))
(1169 load 1166 12 (#(7 45 #(filename package-option) (#(35 45 #(p) ())))))
(1170 #f 1169 39 ())
(1171 #f 1170 6 ())
(1172 #f 1171 9 (#(4 14 #(template) ())))
(1173 eval-from-file 1166 20 (#(4 14 #(forms p filename) ())))
(1174 #f 1173 8 ())
(1175 #f 1174 6 ())
(1176 #f 1175 12 (#(4 14 #(template) ())))
(1177 eval-scanned-forms 1166 28 (#(4 32 #(forms p filename) ())))
(1178 #f 1177 14 (#(4 14 #(template) ())))
(1179 invoke-template 1166 36 (#(4 22 #(template p) ())))
(1181 continuation-cont 1180 4 (#(4 12 #(c) ())))
(1182 continuation-pc 1180 12 (#(4 12 #(c) ())))
(1183 continuation-template 1180 20 (#(4 12 #(c) ())))
(1184 continuation-env 1180 28 (#(4 12 #(c) ())))
(1185 continuation-arg 1180 44 (#(4 16 #(c i) ())))
(1186 continuation-arg-count 1180 52 (#(4 13 #(c) ())))
(1187 continuation-parent 1180 60 (#(4 133 #(a) (#(18 133 #(b) (#(87 108 #(loop) ())))))))
(1188 loop 1187 88 (#(4 51 #(env) (#(22 51 #(temp##231) ())))))
(1190 usual-exception-handler 1189 4 (#(7 22 #(opcode args) ())))
(1191 define-exception-handler 1189 12 (#(4 15 #(opcode proc) ())))
(1192 signal-exception 1189 20 (#(4 23 #(opcode args) ())))
(1193 #f 1189 60 (#(4 34 #(opcode args) ())))
(1194 make-opcode-generic! 1189 71 (#(4 29 #(opcode table) ())))
(1195 really-signal-condition 1189 79 (#(4 29 #(condition) (#(8 29 #(loop) ())))))
(1196 loop 1195 9 (#(4 17 #(hs) ())))
(1197 #f 1196 8 ())
(1198 with-handler 1189 87 (#(4 45 #(h thunk) ())))
(1199 initialize-exceptions! 1189 111 (#(4 11 #(thunk) ())))
(1200 #f 1199 5 (#(4 44 #(k) ())))
(1201 last-resort-condition-handler 1189 119 (#(4 29 #(halt) (#(26 29 #(interrupt/keyboard losing?) ())))))
(1202 #f 1201 27 (#(4 66 #(condition punt) ())))
(1203 #f 1202 21 (#(4 50 #(c) ())))
(1204 report-utter-lossage 1189 127 (#(4 104 #(condition c) (#(18 104 #(out) ())))))
(1205 #f 1204 76 (#(4 42 #(id+pc) ())))
(1206 ignore-errors 1189 135 (#(4 11 #(thunk) ())))
(1207 #f 1206 5 (#(4 14 #(k) ())))
(1208 #f 1207 5 (#(4 29 #(c next) ())))
(1209 #f 1189 162 (#(4 112 #(obj) ())))
(1210 continuation-preview 1189 173 (#(4 74 #(c) ())))
(1212 #f 1211 23 (#(4 55 #(opcode args) (#(24 55 #(probe) ())))))
(1213 define-wna-handler 1211 42 (#(4 21 #(proc handler) ())))
(1214 wna-lose 1211 73 (#(4 26 #(proc args) ())))
(1215 #f 1211 85 (#(4 17 #(args) ())))
(1216 #f 1211 100 (#(4 17 #(args) ())))
(1217 #f 1211 115 (#(4 58 #(args) ())))
(1218 #f 1211 130 (#(4 58 #(args) ())))
(1219 #f 1211 145 (#(4 58 #(args) ())))
(1220 #f 1211 160 (#(4 59 #(args) ())))
(1221 #f 1211 175 (#(4 63 #(args) (#(46 61 #(recur) ())))))
(1222 recur 1221 47 (#(4 46 #(l) ())))
(1223 #f 1211 190 (#(4 36 #(args) ())))
(1224 #f 1211 205 (#(4 36 #(args) ())))
(1225 #f 1211 220 (#(4 36 #(args) ())))
(1226 #f 1211 235 (#(4 70 #(args) ())))
(1227 #f 1211 250 (#(4 17 #(args) ())))
(1228 comparison-wna 1211 261 (#(4 7 #(compare) ())))
(1229 #f 1228 5 (#(4 82 #(args) (#(51 72 #(loop) ())))))
(1230 loop 1229 52 (#(4 60 #(x args) (#(18 60 #(y args) ())))))
(1231 #f #f #f (#(15 18 #(display newline) ())))
(1232 display-condition 1231 16 (#(4 42 #(c port) ())))
(1233 #f 1232 9 ())
(1234 really-display-condition 1231 25 (#(4 249 #(c port) (#(18 249 #(stuff) (#(90 249 #(stuff) (#(221 237 #(spaces) ()) #(159 194 #(message) ())))))))))
(1235 #f 1234 222 (#(4 50 #(irritant) ())))
(1236 #f 1231 87 (#(4 7 #(c) ())))
(1237 limited-write 1231 98 (#(4 23 #(obj port max-depth max-length) (#(8 23 #(recur) ())))))
(1238 recur 1237 9 (#(4 140 #(obj depth) (#(31 107 #(temp##236) (#(48 107 #(temp##235) (#(62 107 #(temp##234) (#(78 107 #(temp##233) (#(93 107 #(temp##232) ())))))))))))))
(1239 #f 1238 134 (#(4 28 #(escape) (#(20 23 #(count) ())))))
(1240 #f 1239 21 (#(4 103 #(sub) (#(42 56 #(temp##237) ())))))
(1242 command-processor 1241 4 (#(4 58 #(arg) (#(45 58 #(in out batch?) (#(49 58 #(loop) ())))))))
(1243 loop 1242 50 ())
(1244 #f 1243 7 (#(4 14 #(go) ())))
(1245 #f 1244 5 (#(4 103 #(c punt) (#(22 37 #(temp##238) ())))))
(1246 #f 1245 63 ())
(1247 #f 1244 8 (#(49 175 #(form) (#(144 151 #(form) ())))))
(1248 #f 1247 69 ())
(1249 #f 1247 145 ())
(1250 #f 1247 152 (#(5 28 #(results) ())))
(1251 #f 1250 10 (#(4 28 #(result) ())))
(1252 mini-load 1241 12 (#(4 85 #(in) (#(10 85 #(c) (#(66 85 #(filename) ())))))))
(1253 read-string 1241 20 (#(4 23 #(port delimiter?) (#(8 23 #(loop) ())))))
(1254 loop 1253 9 (#(4 80 #(l n) (#(10 80 #(c) (#(20 36 #(temp##239) ())))))))
(1255 #f #f #f (#(21 33 #(loop##242) ())))
(1256 loop##240 1255 22 (#(4 42 #(i) (#(13 42 #(temp##241) ())))))
(1257 #f 1256 28 (#(4 17 #(enabled-int) ())))
(1258 initialize-interrupts! 1255 38 ())
(1259 with-interrupts-inhibited 1255 100 (#(4 14 #(thunk) ())))
(1260 with-interrupts-allowed 1255 108 (#(4 14 #(thunk) ())))
(1261 with-interrupts 1255 116 (#(4 22 #(interrupts thunk) (#(10 22 #(ei) ())))))
(1262 #f 1261 11 (#(5 15 #(results) ())))
(1263 enabled-interrupts 1255 124 (#(8 14 #(e) ())))
(1264 interrupt-before-heap-overflow! 1255 132 (#(5 52 #(maybe-required-space) (#(35 52 #(space) ())))))
(1265 #f 1264 42 (#(4 23 #(ei) ())))
(1267 usual-resumer 1266 4 (#(4 7 #(entry-point) ())))
(1268 #f 1267 5 (#(4 20 #(resume-arg in out) ())))
(1269 #f 1268 14 ())
(1270 #f 1269 22 ())
(1272 start 1271 4 (#(4 7 #(structs-to-open) ())))
(1273 #f 1272 5 (#(4 11 #(structs-thunk) ())))
(1274 #f 1273 5 (#(4 59 #(arg) (#(28 51 #(b) ())))))
(1275 #f 1274 53 ())
(1276 make-built-in-structures 1271 12 (#(4 81 #(structs) (#(25 81 #(p) (#(45 81 #(s) ())))))))
(1277 #f 1276 33 ())
(1278 #f 1276 50 (#(4 23 #(name+struct) ())))
(1279 initialize-interaction-environment! 1271 28 (#(4 130 #(built-in-structures) (#(36 130 #(scheme for-syntax) ())))))
(1280 make-initial-package 1271 36 (#(4 87 #(built-in-structures structs-to-open) (#(66 87 #(p) ())))))
(1281 #f 1280 16 (#(4 14 #(name) ())))
(1282 make-env-for-syntax-promise 1271 44 (#(4 11 #(scheme) ())))
(1283 #f 1282 5 ())
(1285 inline-transform 1284 4 (#(4 69 #(form aux-names) (#(54 57 #(formals body) ())))))
(1286 #f 1285 55 (#(4 82 #(e r c) (#(12 82 #(args) ())))))
(1287 #f 1285 61 (#(4 28 #(e r c) ())))
(1288 make-substitution 1284 12 (#(4 27 #(r formals args) (#(24 27 #(subs) ())))))
(1289 #f 1288 25 (#(4 57 #(name) (#(21 57 #(probe) ())))))
(1290 substitute 1284 20 (#(4 205 #(form r) (#(57 186 #(temp##243) (#(146 186 #(keyword) ())))))))
(1291 #f 1290 126 (#(4 14 #(form) ())))
(1292 #f 1290 166 (#(4 15 #(form) ())))
(1293 qualified? 1284 28 (#(4 23 #(thing) ())))
(1294 qualified->name 1284 36 (#(4 20 #(q r) (#(8 20 #(recur) ())))))
(1295 recur 1294 9 (#(4 91 #(q) (#(38 84 #(name) ())))))
(1296 get-qualified-env 1284 44 (#(4 157 #(env parent) (#(21 157 #(binding) (#(50 123 #(s) ())))))))
(1297 name->qualified 1284 52 (#(4 87 #(name env) (#(35 63 #(symbol) (#(43 55 #(loop) ())))))))
(1298 loop 1297 44 (#(4 125 #(name) (#(14 125 #(parent) (#(38 122 #(gparent) ())))))))
(1299 qlookup 1284 60 (#(4 41 #(env parent symbol) (#(21 41 #(binding) ())))))
(1300 generic-lookup 1284 68 (#(4 97 #(env name) ())))
(1304 make-a-package 1303 4 (#(4 69 #(opens-thunk accesses-thunk for-syntax-thunk dir clauses names) ())))
(1305 #f 1304 23 ())
(1306 init-defpackage! 1303 12 (#(4 13 #(evaluator foo) ())))
(1307 loser 1303 20 (#(5 21 #(rest) ())))
(1308 *verify-later!* 1303 52 (#(4 6 #(thunk) ())))
(1309 verify-later! 1303 60 (#(4 11 #(thunk) ())))
(1310 set-verify-later! 1303 68 (#(4 9 #(proc) ())))
(1312 ensure-loaded 1311 4 (#(5 18 #(structs) ())))
(1313 #f 1312 9 (#(4 19 #(p) ())))
(1314 #f 1312 12 (#(4 14 #(stuff p) ())))
(1315 #f 1314 8 ())
(1316 #f 1315 7 (#(4 23 #(filename+scanned-forms) ())))
(1318 #f 1317 1 (#(14 158 #(the-objects get-location) ())))
(1319 get-location 1318 10 (#(4 7 #(loc) ())))
(1342 #f 1341 472 (#(4 105 #(input##246 rename##247 compare##248) (#(12 105 #(tail##245) (#(51 102 #(?exp) ()) #(21 40 #(temp##244) ())))))))
(1358 #f 1357 74 (#(4 102 #(form rename compare) (#(51 102 #(type-name component-name %definitely-name->enumerand %quote) ())))))
(1359 #f 1357 202 (#(4 88 #(form rename compare) (#(66 88 #(name parts conc %define %begin %quote) (#(70 88 #(loop##250) ())))))))
(1360 conc 1359 26 (#(5 33 #(things) ())))
(1361 #f 1360 17 (#(4 20 #(thing) ())))
(1362 loop##249 1359 71 (#(4 180 #(i p r) ())))
(1364 #f 1363 34 (#(4 799 #(input##265 rename##266 compare##267) (#(12 799 #(tail##264) (#(589 796 #(?id) (#(600 796 #(?type) (#(617 796 #(?constructor) (#(635 796 #(?arg) (#(653 796 #(?pred) (#(671 796 #(?more) ()))))))))))) #(472 578 #(temp##263) (#(487 576 #(temp##262) (#(502 574 #(temp##261) (#(551 570 #(temp##260) ()) #(521 540 #(temp##259) ()))))))) #(130 463 #(?id) (#(141 463 #(?type) (#(158 463 #(?constructor) (#(176 463 #(?arg) (#(203 463 #(?field) (#(230 463 #(?field-stuff) ()))))))))))) #(21 119 #(temp##256) (#(36 117 #(temp##255) (#(51 115 #(temp##254) (#(96 111 #(loop) ()) #(70 89 #(temp##251) ())))))))))))))
(1365 loop 1364 97 (#(4 62 #(l) (#(13 62 #(temp##253) (#(40 45 #(temp##252) ())))))))
(1366 #f 1364 181 (#(4 10 #(temp##257) ())))
(1367 #f 1364 208 (#(4 10 #(temp##258) ())))
(1368 #f 1364 378 (#(4 29 #(?arg) ())))
(1369 #f 1364 426 (#(4 13 #(?field ?field-stuff) ())))
(1370 #f 1363 216 (#(4 315 #(input##277 rename##278 compare##279) (#(12 315 #(tail##276) (#(94 312 #(?constructor) (#(105 312 #(?id) (#(119 312 #(?type) (#(146 312 #(?arg) (#(173 312 #(?arg-type) ()))))))))) #(21 83 #(temp##273) (#(36 81 #(temp##272) (#(51 79 #(temp##271) (#(62 77 #(loop) ())))))))))))))
(1371 loop 1370 63 (#(4 93 #(l) (#(13 93 #(temp##270) (#(40 76 #(temp##269) (#(55 74 #(temp##268) ())))))))))
(1372 #f 1370 124 (#(4 10 #(temp##274) ())))
(1373 #f 1370 151 (#(4 13 #(temp##275) ())))
(1374 #f 1363 344 (#(4 85 #(e r c) (#(63 85 #(%define-accessor %begin type id field-specs) (#(67 85 #(loop##281) ())))))))
(1375 loop##280 1374 68 (#(4 72 #(i field-specs ds) ())))
(1376 #f 1363 385 (#(4 728 #(input##290 rename##291 compare##292) (#(12 728 #(tail##289) (#(385 725 #(?id) (#(396 725 #(?index) (#(410 725 #(?accessor) (#(428 725 #(?modifier) ()))))))) #(304 374 #(temp##288) (#(319 372 #(temp##287) (#(334 370 #(temp##286) (#(349 368 #(temp##285) ()))))))) #(85 295 #(?id) (#(96 295 #(?index) (#(110 295 #(?accessor) ()))))) #(21 74 #(temp##284) (#(36 72 #(temp##283) (#(51 70 #(temp##282) ())))))))))))
(1391 #f 1390 128 (#(4 229 #(input##296 rename##297 compare##298) (#(12 229 #(tail##295) (#(76 226 #(?name) (#(87 226 #(?args) (#(95 226 #(?body) ()))))) #(21 62 #(temp##294) (#(40 45 #(temp##293) ())))))))))
(1392 #f 1390 303 (#(4 119 #(input##302 rename##303 compare##304) (#(12 119 #(tail##301) (#(68 116 #(?name) (#(79 116 #(?exp) ()))) #(21 57 #(temp##300) (#(36 55 #(temp##299) ())))))))))
(1393 #f 1390 344 (#(4 393 #(input##311 rename##312 compare##313) (#(12 393 #(tail##310) (#(302 390 #(?name) (#(313 390 #(?exp) ()))) #(236 291 #(temp##309) (#(268 287 #(temp##308) ()))) #(107 227 #(?name) (#(118 227 #(?exp) ()))) #(21 93 #(temp##307) (#(70 89 #(temp##306) ()) #(40 59 #(temp##305) ())))))))))
(1394 #f 1393 335 (#(4 57 #(?name) ())))
(1395 #f 1390 385 (#(4 350 #(input##317 rename##318 compare##319) (#(12 350 #(tail##316) (#(87 347 #(?name) (#(98 347 #(?exp) ()))) #(21 76 #(temp##315) (#(53 72 #(temp##314) ())))))))))
(1396 #f 1395 120 (#(4 29 #(?name) ())))
(1397 #f 1395 187 (#(4 165 #(?name) ())))
(1399 #f 1398 272 (#(4 219 #(input##323 rename##324 compare##325) (#(12 219 #(tail##322) (#(68 216 #(?name) (#(79 216 #(?int) ()))) #(21 57 #(temp##321) (#(36 55 #(temp##320) ())))))))))
(1400 #f 1398 313 (#(4 469 #(input##335 rename##336 compare##337) (#(12 469 #(tail##334) (#(452 466 #(?name) (#(463 466 #(?int) ()))) #(405 441 #(temp##333) (#(420 439 #(temp##332) ()))) #(323 396 #(?name) (#(337 396 #(?int) ()))) #(207 312 #(temp##331) (#(222 310 #(temp##330) (#(241 293 #(temp##329) ()))))) #(137 198 #(?name) (#(151 198 #(?item) ()))) #(21 126 #(temp##328) (#(36 124 #(temp##327) (#(55 107 #(temp##326) ())))))))))))
(1401 #f 1400 380 (#(4 35 #(?int) ())))
(1402 #f 1398 354 (#(4 46 #(e r c) (#(24 46 #(name items) (#(28 46 #(loop) ())))))))
(1403 loop 1402 29 (#(4 249 #(items plain others) (#(139 249 #(item) ())))))
(1404 #f 1398 472 (#(139 147 #(parse-package-clauses) ())))
(1405 #f 1404 91 (#(4 322 #(input##349 rename##350 compare##351) (#(12 322 #(tail##348) (#(100 319 #(?name) (#(120 319 #(?int) (#(140 319 #(?keyword) (#(161 319 #(?stuff) ()))))))) #(21 77 #(temp##343) (#(58 73 #(loop) ()) #(36 51 #(loop) ())))))))))
(1406 loop 1405 37 (#(4 93 #(l) (#(13 93 #(temp##340) (#(40 76 #(temp##339) (#(55 74 #(temp##338) ())))))))))
(1407 loop 1405 59 (#(4 76 #(l) (#(13 76 #(temp##342) (#(40 59 #(temp##341) ())))))))
(1408 #f 1405 85 (#(4 10 #(temp##344) ())))
(1409 #f 1405 105 (#(4 13 #(temp##345) ())))
(1410 #f 1405 125 (#(4 10 #(temp##346) ())))
(1411 #f 1405 145 (#(4 10 #(temp##347) ())))
(1412 #f 1405 226 (#(4 13 #(?keyword ?stuff) ())))
(1413 #f 1405 278 (#(4 129 #(?int ?name) ())))
(1414 parse-package-clauses 1404 140 (#(4 70 #(clauses rename compare) (#(42 70 #(%open %access %for-syntax) (#(46 70 #(loop) ())))))))
(1415 loop 1414 47 (#(4 351 #(clauses opens accesses for-syntaxes others) (#(143 351 #(keyword) ())))))
(1416 #f 1404 145 (#(4 45 #(form rename compare) (#(24 45 #(names clauses) ())))))
(1417 #f 1416 25 (#(4 288 #(opens accesses for-syntaxes others) (#(90 288 #(%make %lambda %cons %list %quote %a-package %file-name) ())))))
(1418 #f 1417 134 (#(4 37 #(a) ())))
(1425 #f 1424 231 (#(4 148 #(input##355 rename##356 compare##357) (#(12 148 #(tail##354) (#(87 145 #(?type) (#(98 145 #(?cod) ()))) #(21 76 #(temp##353) (#(53 72 #(temp##352) ())))))))))
(1447 #f 1444 494 (#(2929 2940 #(structs) ())))
-
