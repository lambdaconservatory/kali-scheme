; Package uid -> name
(0 module-system)
(1 run-time-structures)
(2 compiler-structures)
(3 initial-structures)
(4 usual-structures)
(5 vanilla-features-structures)
(6 cheat)
(7 alternate-structures)
(8 compiler-structures)
(9 linker-structures)
(10 scheme-level-0)
(11 scheme-level-1)
(12 generics)
(13 number-i/o)
(14 records)
(15 bummed-define-record-types)
(16 fluids)
(17 wind)
(18 ports)
(19 enumerated)
(20 architecture)
(21 conditions)
(22 templates)
(23 continuations)
(24 exceptions)
(25 interrupts)
(26 writing)
(27 reading)
(28 scheme-level-2)
(29 scheme-level-2-internal)
(30 weak)
(31 display-conditions)
(32 tables)
(33 filenames)
(34 meta-types)
(35 interfaces)
(36 syntactic)
(37 usual-macros)
(38 reconstruction)
(39 packages)
(40 scan)
(41 segments)
(42 compiler)
(43 defpackage)
(44 types)
(45 inline)
(46 environments)
(47 evaluation)
(48 scheme)
(49 mini-command)
(50 initial-system)
(51 ensures-loaded)
(52 for-reification)
(58 (for-syntax defpackage))
-
; Location uid -> (name . package-uid)
(0 (current-cont . 10))
(1 (closure-template . 10))
(2 (continuation-ref . 10))
(3 (output-port? . 10))
(4 (closure? . 10))
(5 (complex? . 10))
(6 (arithmetic-shift . 10))
(7 (signal-condition . 10))
(8 (integer? . 10))
(9 (make-closure . 10))
(10 (template-ref . 10))
(11 (make-rectangular . 10))
(12 (string=? . 10))
(13 (extended-number? . 10))
(14 (reverse-list->string . 10))
(15 (denominator . 10))
(16 (call-with-values . 10))
(17 (weak-pointer-ref . 10))
(18 (find-all-symbols . 10))
(19 (code-vector? . 10))
(20 (pop . 10))
(21 (exp . 10))
(22 (sin . 10))
(23 (make-extended-number . 10))
(24 (cos . 10))
(25 (collect . 10))
(26 (external-lookup . 10))
(27 (tan . 10))
(28 (log . 10))
(29 (continuation-length . 10))
(30 (make-code-vector . 10))
(31 (cdr . 10))
(32 (bitwise-xor . 10))
(33 (car . 10))
(34 (string? . 10))
(35 (symbol? . 10))
(36 (set-cdr! . 10))
(37 (bitwise-not . 10))
(38 (vector? . 10))
(39 (closure-env . 10))
(40 (set-car! . 10))
(41 (bitwise-ior . 10))
(42 (number? . 10))
(43 (template-length . 10))
(44 (string-hash . 10))
(45 (pop-env . 10))
(46 (primitive-catch . 10))
(47 (make-string . 10))
(48 (input-port? . 10))
(49 (record? . 10))
(50 (make-vector . 10))
(51 (extended-number-set! . 10))
(52 (write-image . 10))
(53 (eq? . 10))
(54 (bitwise-and . 10))
(55 (location-id . 10))
(56 (code-vector-set! . 10))
(57 (make-record . 10))
(58 (intern . 10))
(59 (values . 10))
(60 (unassigned . 10))
(61 (string-set! . 10))
(62 (vector-set! . 10))
(63 (extended-number-ref . 10))
(64 (unspecific . 10))
(65 (schedule-interrupt . 10))
(66 (code-vector-ref . 10))
(67 (find-all-xs . 10))
(68 (char-ready? . 10))
(69 (set-interrupt-handlers! . 10))
(70 (eof-object? . 10))
(71 (record-set! . 10))
(72 (ascii->char . 10))
(73 (char->ascii . 10))
(74 (set-enabled-interrupts! . 10))
(75 (external-value . 10))
(76 (make-immutable! . 10))
(77 (close-port . 10))
(78 (string-ref . 10))
(79 (immutable? . 10))
(80 (vector-ref . 10))
(81 (exact? . 10))
(82 (write-char . 10))
(83 (symbol->string . 10))
(84 (make-polar . 10))
(85 (record-ref . 10))
(86 (numerator . 10))
(87 (extended-number-length . 10))
(88 (error . 10))
(89 (exact->inexact . 10))
(90 (inexact->exact . 10))
(91 (apply . 10))
(92 (memory-status . 10))
(93 (code-vector-length . 10))
(94 (floor . 10))
(95 (with-continuation . 10))
(96 (magnitude . 10))
(97 (nargs . 10))
(98 (char=? . 10))
(99 (char<? . 10))
(100 (continuation? . 10))
(101 (remainder . 10))
(102 (vm-return . 10))
(103 (false . 10))
(104 (angle . 10))
(105 (open-port . 10))
(106 (string-length . 10))
(107 (external? . 10))
(108 (make-continuation . 10))
(109 (vector-length . 10))
(110 (template? . 10))
(111 (rational? . 10))
(112 (location? . 10))
(113 (external-name . 10))
(114 (set-exception-handler! . 10))
(115 (pair? . 10))
(116 (make-external . 10))
(117 (record-length . 10))
(118 (external-call . 10))
(119 (set-dynamic-state! . 10))
(120 (get-cont-from-heap . 10))
(121 (real-part . 10))
(122 (real? . 10))
(123 (make-template . 10))
(124 (imag-part . 10))
(125 (make-location . 10))
(126 (= . 10))
(127 (< . 10))
(128 (char? . 10))
(129 (quotient . 10))
(130 (/ . 10))
(131 (weak-pointer? . 10))
(132 (- . 10))
(133 (continuation-set! . 10))
(134 (peek-char . 10))
(135 (+ . 10))
(136 (* . 10))
(137 (contents . 10))
(138 (sqrt . 10))
(139 (read-char . 10))
(140 (set-contents! . 10))
(141 (push . 10))
(142 (make-weak-pointer . 10))
(143 (get-dynamic-state . 10))
(144 (trap . 10))
(145 (cons . 10))
(146 (template-set! . 10))
(147 (time . 10))
(148 (location-defined? . 10))
(149 (asin . 10))
(150 (write-string . 10))
(151 (vm-extension . 10))
(152 (force-output . 10))
(153 (acos . 10))
(154 (set-location-defined?! . 10))
(155 (atan . 10))
(156 (loophole . 10))
(157 (define-syntax . 10))
(158 (begin . 10))
(159 (letrec-syntax . 10))
(160 (%file-name% . 10))
(161 (structure-ref . 10))
(162 (quote . 10))
(163 (lambda . 10))
(164 (define . 10))
(165 (if . 10))
(166 (let-syntax . 10))
(167 (letrec . 10))
(168 (primitive-procedure . 10))
(169 (set! . 10))
(170 (with-aliases . 10))
(171 (call . 10))
(172 (and . 10))
(173 (cond . 10))
(174 (do . 10))
(175 (let . 10))
(176 (let* . 10))
(177 (or . 10))
(178 (char->integer . 10))
(179 (integer->char . 10))
(180 (ascii-limit . 10))
(181 (ascii-whitespaces . 10))
(182 (procedure? . 10))
(183 (invoke-closure . 10))
(184 (primitive-cwcc . 10))
(185 (make-undefined-location . 10))
(186 (vector-unassigned? . 10))
(187 (string-copy . 10))
(188 (string->symbol . 10))
(189 (really-string->symbol . 10))
(190 (*the-symbol-table* . 10))
(191 (flush-the-symbol-table! . 10))
(192 (restore-the-symbol-table! . 10))
(193 (maybe-open-input-file . 10))
(194 (maybe-open-output-file . 10))
(195 (open-input-file . 10))
(196 (open-output-file . 10))
(197 (close-input-port . 10))
(198 (close-output-port . 10))
(199 (make-condition . 10))
(200 (signal . 10))
(201 (warn . 10))
(202 (syntax-error . 10))
(203 (call-error . 10))
(204 (case . 11))
(205 (delay . 11))
(206 (quasiquote . 11))
(207 (syntax-rules . 11))
(208 (not . 11))
(209 (boolean? . 11))
(210 (eqv? . 11))
(211 (equal? . 11))
(212 (> . 11))
(213 (<= . 11))
(214 (>= . 11))
(215 (max . 11))
(216 (min . 11))
(217 (abs . 11))
(218 (zero? . 11))
(219 (positive? . 11))
(220 (negative? . 11))
(221 (even? . 11))
(222 (odd? . 11))
(223 (caar . 11))
(224 (cadr . 11))
(225 (cdar . 11))
(226 (cddr . 11))
(227 (caaar . 11))
(228 (caadr . 11))
(229 (cadar . 11))
(230 (caddr . 11))
(231 (cdaar . 11))
(232 (cdadr . 11))
(233 (cddar . 11))
(234 (cdddr . 11))
(235 (caaaar . 11))
(236 (caaadr . 11))
(237 (caadar . 11))
(238 (caaddr . 11))
(239 (cadaar . 11))
(240 (cadadr . 11))
(241 (caddar . 11))
(242 (cadddr . 11))
(243 (cdaaar . 11))
(244 (cdaadr . 11))
(245 (cdadar . 11))
(246 (cdaddr . 11))
(247 (cddaar . 11))
(248 (cddadr . 11))
(249 (cdddar . 11))
(250 (cddddr . 11))
(251 (null? . 11))
(252 (list . 11))
(253 (length . 11))
(254 (append . 11))
(255 (reverse . 11))
(256 (append-reverse . 11))
(257 (list-tail . 11))
(258 (list-ref . 11))
(259 (mem . 11))
(260 (memq . 11))
(261 (memv . 11))
(262 (member . 11))
(263 (ass . 11))
(264 (assv . 11))
(265 (assoc . 11))
(266 (assq . 11))
(267 (list? . 11))
(268 (char>? . 11))
(269 (char>=? . 11))
(270 (char<=? . 11))
(271 (char-whitespace? . 11))
(272 (char-lower-case? . 11))
(273 (char-upper-case? . 11))
(274 (char-numeric? . 11))
(275 (char-alphabetic? . 11))
(276 (char-case-delta . 11))
(277 (char-upcase . 11))
(278 (char-downcase . 11))
(279 (char-ci-compare . 11))
(280 (char-ci=? . 11))
(281 (char-ci<? . 11))
(282 (char-ci<=? . 11))
(283 (char-ci>? . 11))
(284 (char-ci>=? . 11))
(285 (string . 11))
(286 (substring . 11))
(287 (string-append . 11))
(288 (string->list . 11))
(289 (list->string . 11))
(290 (string-fill! . 11))
(291 (make-string=? . 11))
(292 (string-ci=? . 11))
(293 (make-string<? . 11))
(294 (string<? . 11))
(295 (string-ci<? . 11))
(296 (string>? . 11))
(297 (string<=? . 11))
(298 (string>=? . 11))
(299 (string-ci>? . 11))
(300 (string-ci<=? . 11))
(301 (string-ci>=? . 11))
(302 (vector . 11))
(303 (vector->list . 11))
(304 (list->vector . 11))
(305 (vector-fill! . 11))
(306 (map . 11))
(307 (map1 . 11))
(308 (map2+ . 11))
(309 (for-each . 11))
(310 (make-promise . 11))
(311 (force . 11))
(312 (unspecific . 11))
(313 (reduce . 11))
(314 (filter . 11))
(315 (pos . 11))
(316 (posq . 11))
(317 (posv . 11))
(318 (position . 11))
(319 (any . 11))
(320 (every . 11))
(321 (sublist . 11))
(322 (last . 11))
(323 (inexact? . 11))
(324 (modulo . 11))
(325 (ceiling . 11))
(326 (truncate . 11))
(327 (round . 11))
(328 (gcd . 11))
(329 (euclid . 11))
(330 (lcm . 11))
(331 (expt . 11))
(332 (raise-to-integer-power . 11))
(333 (rationalize . 11))
(334 (simplest-rational . 11))
(335 (make-family . 12))
(336 (family-identity . 12))
(337 (family-precedence . 12))
(338 (family-of-last-resort . 12))
(339 (default-family . 12))
(340 (same-family? . 12))
(341 (make-method-table . 12))
(342 (method-table-methods . 12))
(343 (method-table-families . 12))
(344 (define-method . 12))
(345 (define-default-method . 12))
(346 (define-last-method . 12))
(347 (make-generic . 12))
(348 (perform-dispatch . 12))
(349 (*fail* . 12))
(350 (fail . 12))
(351 (disclose-methods . 12))
(352 (disclose . 12))
(353 (make-generic-exception-handler . 12))
(354 (number->string-table . 13))
(355 (string->number-table . 13))
(356 (really-number->string . 13))
(357 (really-string->number . 13))
(358 (number->string . 13))
(359 (integer->string . 13))
(360 (string->number . 13))
(361 (string->integer . 13))
(362 (record-type . 14))
(363 (*record-type-uid* . 14))
(364 (record-type-marker . 14))
(365 (make-record-type . 14))
(366 (record-type? . 14))
(367 (record-type-uid . 14))
(368 (record-type-identification . 14))
(369 (record-type-field-names . 14))
(370 (record-type-discloser . 14))
(371 (record-field-index . 14))
(372 (record-constructor . 14))
(373 (record-accessor . 14))
(374 (record-modifier . 14))
(375 (record-predicate . 14))
(376 (define-record-discloser . 14))
(377 (disclose-record . 14))
(378 (default-record-discloser . 14))
(379 (define-record-type . 15))
(380 (define-constructor . 15))
(381 (define-accessors . 15))
(382 (define-accessor . 15))
(383 (thread-type . 16))
(384 (make-thread . 16))
(385 (thread-dynamic-env . 16))
(386 (current-thread . 16))
(387 (set-current-thread! . 16))
(388 (get-dynamic-env . 16))
(389 (set-dynamic-env! . 16))
(390 (initialize-dynamic-state! . 16))
(391 (with-dynamic-env . 16))
(392 (empty-dynamic-env . 16))
(393 (fluid-type . 16))
(394 (make-fluid . 16))
(395 (fluid-top-level-value . 16))
(396 (set-fluid-top-level-value! . 16))
(397 (fluid . 16))
(398 (set-fluid! . 16))
(399 (let-fluid . 16))
(400 (let-fluids . 16))
(401 (fluid-lookup . 16))
(402 (dynamic-wind . 17))
(403 (call-with-current-continuation . 17))
(404 (continuation->procedure . 17))
(405 (point-type . 17))
(406 (make-point . 17))
(407 (point-parent . 17))
(408 (point-dynamic-env . 17))
(409 (point-out . 17))
(410 (point-in . 17))
(411 (point-depth . 17))
(412 (root-point . 17))
(413 ($dynamic-point . 17))
(414 (get-dynamic-point . 17))
(415 (env-dynamic-point . 17))
(416 (let-dynamic-point . 17))
(417 (travel-to-point! . 17))
(418 ($current-input-port . 18))
(419 ($current-output-port . 18))
(420 ($error-output-port . 18))
(421 (current-input-port . 18))
(422 (current-output-port . 18))
(423 (error-output-port . 18))
(424 (with-initial-ports . 18))
(425 (call-with-mumble-file . 18))
(426 (call-with-input-file . 18))
(427 (call-with-output-file . 18))
(428 (with-input-from-file . 18))
(429 (with-output-to-file . 18))
(430 (newline . 18))
(431 (output-port-option . 18))
(432 (input-port-option . 18))
(433 (write . 26))
(434 (recurring-write . 26))
(435 (write-boolean . 26))
(436 (write-number . 26))
(437 (write-char-literal . 26))
(438 (character-name . 26))
(439 (write-string-literal . 26))
(440 (write-list . 26))
(441 (quotation? . 26))
(442 (write-vector . 26))
(443 (write-other . 26))
(444 (display-type-name . 26))
(445 (display . 26))
(446 (*condition-types* . 21))
(447 (condition-supertypes . 21))
(448 (define-condition-type . 21))
(449 (condition-predicate . 21))
(450 (condition? . 21))
(451 (condition-type . 21))
(452 (condition-stuff . 21))
(453 (error? . 21))
(454 (call-error? . 21))
(455 (read-error? . 21))
(456 (exception? . 21))
(457 (exception-opcode . 21))
(458 (exception-arguments . 21))
(459 (make-exception . 21))
(460 (warning? . 21))
(461 (syntax-error? . 21))
(462 (interrupt? . 21))
(463 (read . 27))
(464 (sub-read-carefully . 27))
(465 (reader-token-marker . 27))
(466 (make-reader-token . 27))
(467 (reader-token? . 27))
(468 (close-paren . 27))
(469 (dot . 27))
(470 (sub-read . 27))
(471 (read-dispatch-vector . 27))
(472 (read-terminating?-vector . 27))
(473 (set-standard-syntax! . 27))
(474 (set-standard-read-macro! . 27))
(475 (sub-read-list . 27))
(476 (gobble-line . 27))
(477 (*sharp-macros* . 27))
(478 (define-sharp-macro . 27))
(479 (sub-read-token . 27))
(480 (parse-token . 27))
(481 (strange-symbol-names . 27))
(482 (preferred-case . 27))
(483 (reading-error . 27))
(484 (syntax-type . 34))
(485 (any-values-type . 34))
(486 (make-some-values-type . 34))
(487 (some-values-type? . 34))
(488 (some-values-type-components . 34))
(489 (value-type . 34))
(490 (check-value-type . 34))
(491 (undeclared-type . 34))
(492 (procedure-type . 34))
(493 (procedure-type? . 34))
(494 (fixed-arity-procedure-type? . 34))
(495 (procedure-type-codomain . 34))
(496 (procedure-type-domain . 34))
(497 (nargs->domain-list . 34))
(498 (procedure-type-argument-types . 34))
(499 (procedure-type-arity . 34))
(500 (variable-type . 34))
(501 (variable-type? . 34))
(502 (variable-value-type . 34))
(503 (compatible-types? . 34))
(504 (compatible-type-lists? . 34))
(505 (usual-variable-type . 34))
(506 (boolean-type . 34))
(507 (char-type . 34))
(508 (number-type . 34))
(509 (null-type . 34))
(510 (unspecific-type . 34))
(511 (pair-type . 34))
(512 (string-type . 34))
(513 (symbol-type . 34))
(514 (vector-type . 34))
(515 (zero-type . 34))
(516 (escape-type . 34))
(517 (some-values-type . 34))
(518 (any-procedure-type . 34))
(519 (proc . 34))
(520 (table-type . 32))
(521 (really-make-table . 32))
(522 (table-set-procedure . 32))
(523 (set-table-set-procedure! . 32))
(524 (table-ref-procedure . 32))
(525 (set-table-ref-procedure! . 32))
(526 (table-data . 32))
(527 (set-table-data! . 32))
(528 (table-size . 32))
(529 (set-table-size! . 32))
(530 (table-hash-function . 32))
(531 (table? . 32))
(532 (make-table . 32))
(533 (table-ref . 32))
(534 (table-set! . 32))
(535 (linear-table-size-limit . 32))
(536 (table-size-limit . 32))
(537 (next-table-size . 32))
(538 (null-entry . 32))
(539 (new-entry . 32))
(540 (get-entry . 32))
(541 (set-entry! . 32))
(542 (for-each-entry . 32))
(543 (linear-table-ref . 32))
(544 (linear-table-set! . 32))
(545 (linear-table-inc! . 32))
(546 (table-expand-table! . 32))
(547 (table-enter-entries! . 32))
(548 (hash-table-ref . 32))
(549 (hash-table-set! . 32))
(550 (hash-table-inc! . 32))
(551 (table-walk . 32))
(552 (default-table-hash-function . 32))
(553 (usual-operator-type . 36))
(554 (type/operator . 36))
(555 (make-operator . 36))
(556 (operator-uid-maybe . 36))
(557 (set-operator-uid-maybe! . 36))
(558 (operator-transform . 36))
(559 (set-operator-transform! . 36))
(560 (operator-name . 36))
(561 (operator-type . 36))
(562 (operator? . 36))
(563 (get-operator . 36))
(564 (operator-uid . 36))
(565 (*operator-uid* . 36))
(566 (operators-table . 36))
(567 (number-of-operators . 36))
(568 (the-operators . 36))
(569 (make-operator-table . 36))
(570 (operator-table-ref . 36))
(571 (operator-lookup . 36))
(572 (operator-define! . 36))
(573 (type/node . 36))
(574 (really-make-node . 36))
(575 (node-plist . 36))
(576 (set-node-plist! . 36))
(577 (node-form . 36))
(578 (node-operator-id . 36))
(579 (node? . 36))
(580 (make-node . 36))
(581 (node-ref . 36))
(582 (node-set! . 36))
(583 (node-operator . 36))
(584 (node-predicate . 36))
(585 (make-similar-node . 36))
(586 (type/generated . 36))
(587 (make-generated . 36))
(588 (generated-parent-name . 36))
(589 (generated-env . 36))
(590 (generated-token . 36))
(591 (generated-symbol . 36))
(592 (generated? . 36))
(593 (generate-name . 36))
(594 (name->symbol . 36))
(595 (*generated-uid* . 36))
(596 (name-hash . 36))
(597 (desyntaxify . 36))
(598 (make-immutable . 36))
(599 (type/transform . 36))
(600 (really-make-transform . 36))
(601 (transform-id . 36))
(602 (transform-source . 36))
(603 (transform-aux-names . 36))
(604 (transform-type . 36))
(605 (transform-env . 36))
(606 (transform-procedure . 36))
(607 (transform? . 36))
(608 (make-transform . 36))
(609 (maybe-transform . 36))
(610 (bind-aliases . 36))
(611 (make-name-generator . 36))
(612 (same-denotation? . 36))
(613 (binding? . 36))
(614 (binding-type . 36))
(615 (binding-place . 36))
(616 (binding-static . 36))
(617 (really-make-binding . 36))
(618 (make-binding . 36))
(619 (clobber-binding! . 36))
(620 (binding-transform . 36))
(621 (impose-type . 36))
(622 (forget-integration . 36))
(623 (classify . 36))
(624 (call-node? . 36))
(625 (name-node? . 36))
(626 (classify-literal . 36))
(627 (classify-call . 36))
(628 (classify-name . 36))
(629 (operator/name . 36))
(630 (classify-macro-application . 36))
(631 (classify-transform-application . 36))
(632 (maybe-transform-call . 36))
(633 (classify-operator-form . 36))
(634 (classifiers . 36))
(635 (define-classifier . 36))
(636 (unspecific-node . 36))
(637 (lookup . 36))
(638 (bind1 . 36))
(639 (bind . 36))
(640 (bindrec . 36))
(641 (literal? . 36))
(642 (number-of-required-args . 36))
(643 (n-ary? . 36))
(644 (normalize-formals . 36))
(645 (syntax? . 36))
(646 (name? . 36))
(647 (unbound? . 36))
(648 ($source-file-name . 36))
(649 (define-usual-suspects . 36))
(650 (process-syntax . 36))
(651 (bind-evaluator-for-syntax . 36))
(652 (evaluator-for-syntax . 36))
(653 (*evaluator-for-syntax-key* . 36))
(654 (scan-body . 36))
(655 (scan-body-forms . 36))
(656 (body-lossage . 36))
(657 (begin-node? . 36))
(658 (define-node? . 36))
(659 (schemify . 36))
(660 (schemifiers . 36))
(661 (define-schemifier . 36))
(662 (ok-number-of-args? . 36))
(663 (make-population . 30))
(664 (add-to-population! . 30))
(665 (weak-memq . 30))
(666 (population-reduce . 30))
(667 (population->list . 30))
(668 (walk-population . 30))
(669 (type/interface . 35))
(670 (really-make-interface . 35))
(671 (interface-name . 35))
(672 (interface-clients . 35))
(673 (walk-method . 35))
(674 (ref-method . 35))
(675 (interface? . 35))
(676 (interface-ref . 35))
(677 (for-each-declaration . 35))
(678 (note-reference-to-interface! . 35))
(679 (make-interface . 35))
(680 (make-simple-interface . 35))
(681 (really-make-simple-interface . 35))
(682 (make-compound-interface . 35))
(683 (type/structure . 39))
(684 (really-make-structure . 39))
(685 (structure-name . 39))
(686 (structure-clients . 39))
(687 (structure-package . 39))
(688 (structure-interface-really . 39))
(689 (set-structure-interface! . 39))
(690 (structure-interface-thunk . 39))
(691 (structure? . 39))
(692 (structure-interface . 39))
(693 (initialize-structure! . 39))
(694 (make-structure . 39))
(695 (structure-unstable? . 39))
(696 (for-each-export . 39))
(697 (type/package . 39))
(698 (really-make-package . 39))
(699 (package-loaded? . 39))
(700 (set-package-loaded?! . 39))
(701 (package-cached . 39))
(702 (package-seen . 39))
(703 (package-clients . 39))
(704 (package-plist . 39))
(705 (set-package-plist! . 39))
(706 (package-clauses . 39))
(707 (package-file-name . 39))
(708 (package-integrate? . 39))
(709 (set-package-integrate?! . 39))
(710 (package-for-syntax-promise . 39))
(711 (package-evaluator . 39))
(712 (package-get-location . 39))
(713 (set-package-get-location! . 39))
(714 (package-definitions . 39))
(715 (package-accesses-thunk . 39))
(716 (package-opens-thunk . 39))
(717 (set-package-opens-thunk! . 39))
(718 (package-opens-really . 39))
(719 (set-package-opens! . 39))
(720 (package-uid . 39))
(721 (package? . 39))
(722 (make-package . 39))
(723 (package-for-syntax . 39))
(724 (new-package-uid . 39))
(725 (*package-uid* . 39))
(726 (package-name-table . 39))
(727 (package-name . 39))
(728 (set-package-name! . 39))
(729 (make-simple-package . 39))
(730 (package-opens . 39))
(731 (package-accesses . 39))
(732 (package-unstable? . 39))
(733 (package-definition . 39))
(734 (package-define! . 39))
(735 (really-package-define! . 39))
(736 (package-lookup . 39))
(737 (really-package-lookup . 39))
(738 (structure-lookup . 39))
(739 (lookup-generated-name . 39))
(740 (generic-lookup . 39))
(741 (package->environment . 39))
(742 (package-lookup-type . 39))
(743 (initialize-package! . 39))
(744 (initialize-reified-package! . 39))
(745 (for-each-definition . 39))
(746 (get-new-location . 39))
(747 (make-new-location . 39))
(748 ($get-location . 39))
(749 (*location-uid* . 39))
(750 (location-info-table . 39))
(751 (flush-location-names . 39))
(752 (package-get . 39))
(753 (package-put! . 39))
(754 (package-note-caching . 39))
(755 (environment-ref . 46))
(756 (environment-set! . 46))
(757 (environment-define! . 46))
(758 (*structure-ref . 46))
(759 (contents-carefully . 46))
(760 ($interaction-environment . 46))
(761 (interaction-environment . 46))
(762 (set-interaction-environment! . 46))
(763 (with-interaction-environment . 46))
(764 (scheme-report-environment . 46))
(765 (*scheme-report-environment* . 46))
(766 (*scheme-report-number* . 46))
(767 (set-scheme-report-environment! . 46))
(768 (make-package-for-syntax . 46))
(769 (the-usual-transforms . 37))
(770 (define-usual-macro . 37))
(771 (usual-transform . 37))
(772 (process-rules . 37))
(773 (segment-pattern? . 37))
(774 (segment-template? . 37))
(775 (indicators-for-zero-or-more . 37))
(776 (find-free-names-in-syntax-rules . 37))
(777 (namestring . 33))
(778 (directory-component-separator . 33))
(779 (type-component-separator . 33))
(780 (namestring-component . 33))
(781 (file-name-preferred-case . 33))
(782 (*scheme-file-type* . 33))
(783 (*load-file-type* . 33))
(784 (file-name-directory . 33))
(785 (file-name-nondirectory . 33))
(786 (file-nondirectory-position . 33))
(787 (string-posq . 33))
(788 (*translations* . 33))
(789 (translations . 33))
(790 (set-translation! . 33))
(791 (translate . 33))
(792 ($note-file-package . 40))
(793 (scan-forms . 40))
(794 (scan-file . 40))
(795 (scan-form-list . 40))
(796 (scan-form . 40))
(797 (process-define-syntax . 40))
(798 (eval-for-syntax . 40))
(799 (scan-structures . 40))
(800 (scan-package . 40))
(801 (optimize . 40))
(802 (check-structure . 40))
(803 (initialize-usual-transforms! . 40))
(804 (define-all-operators . 40))
(805 (make-define-primitive-node . 40))
(806 (optimizers-table . 40))
(807 (get-optimizer . 40))
(808 (set-optimizer! . 40))
(809 ($note-undefined . 40))
(810 (note-undefined! . 40))
(811 (noting-undefined-variables . 40))
(812 (enumerand->name . 19))
(813 (name->enumerand . 19))
(814 (definitely-name->enumerand . 19))
(815 (define-enumeration . 19))
(816 (enum . 19))
(817 (bits-used-per-byte . 20))
(818 (maximum-stack-args . 20))
(819 (define-instruction-set . 20))
(820 (op/intern . 20))
(821 (op/reverse-list->string . 20))
(822 (op/string-hash . 20))
(823 (op/string=? . 20))
(824 (op/vm-return . 20))
(825 (op/vm-extension . 20))
(826 (op/time . 20))
(827 (op/external-call . 20))
(828 (op/external-lookup . 20))
(829 (op/schedule-interrupt . 20))
(830 (op/return-from-interrupt . 20))
(831 (op/set-enabled-interrupts! . 20))
(832 (op/set-interrupt-handlers! . 20))
(833 (op/set-exception-handler! . 20))
(834 (op/set-dynamic-state! . 20))
(835 (op/get-dynamic-state . 20))
(836 (op/find-all-xs . 20))
(837 (op/find-all-symbols . 20))
(838 (op/memory-status . 20))
(839 (op/collect . 20))
(840 (op/write-image . 20))
(841 (op/false . 20))
(842 (op/trap . 20))
(843 (op/unspecific . 20))
(844 (op/unassigned . 20))
(845 (op/force-output . 20))
(846 (op/write-string . 20))
(847 (op/write-char . 20))
(848 (op/char-ready? . 20))
(849 (op/peek-char . 20))
(850 (op/read-char . 20))
(851 (op/output-port? . 20))
(852 (op/input-port? . 20))
(853 (op/close-port . 20))
(854 (op/open-port . 20))
(855 (op/make-immutable! . 20))
(856 (op/immutable? . 20))
(857 (op/set-location-defined?! . 20))
(858 (op/location-defined? . 20))
(859 (op/stored-object-indexed-char-set! . 20))
(860 (op/stored-object-indexed-byte-set! . 20))
(861 (op/stored-object-indexed-set! . 20))
(862 (op/stored-object-indexed-char-ref . 20))
(863 (op/stored-object-indexed-byte-ref . 20))
(864 (op/stored-object-indexed-ref . 20))
(865 (op/stored-object-set! . 20))
(866 (op/stored-object-ref . 20))
(867 (op/stored-object-byte-length . 20))
(868 (op/stored-object-length . 20))
(869 (op/stored-object-has-type? . 20))
(870 (op/make-char-vector-object . 20))
(871 (op/make-byte-vector-object . 20))
(872 (op/make-vector-object . 20))
(873 (op/make-stored-object . 20))
(874 (op/eof-object? . 20))
(875 (op/ascii->char . 20))
(876 (op/char->ascii . 20))
(877 (op/char<? . 20))
(878 (op/char=? . 20))
(879 (op/char? . 20))
(880 (op/arithmetic-shift . 20))
(881 (op/bitwise-xor . 20))
(882 (op/bitwise-ior . 20))
(883 (op/bitwise-and . 20))
(884 (op/bitwise-not . 20))
(885 (op/make-rectangular . 20))
(886 (op/make-polar . 20))
(887 (op/magnitude . 20))
(888 (op/angle . 20))
(889 (op/sqrt . 20))
(890 (op/atan . 20))
(891 (op/acos . 20))
(892 (op/asin . 20))
(893 (op/tan . 20))
(894 (op/cos . 20))
(895 (op/sin . 20))
(896 (op/log . 20))
(897 (op/exp . 20))
(898 (op/imag-part . 20))
(899 (op/real-part . 20))
(900 (op/denominator . 20))
(901 (op/numerator . 20))
(902 (op/floor . 20))
(903 (op/remainder . 20))
(904 (op/quotient . 20))
(905 (op/< . 20))
(906 (op/= . 20))
(907 (op// . 20))
(908 (op/- . 20))
(909 (op/* . 20))
(910 (op/+ . 20))
(911 (op/inexact->exact . 20))
(912 (op/exact->inexact . 20))
(913 (op/exact? . 20))
(914 (op/complex? . 20))
(915 (op/real? . 20))
(916 (op/rational? . 20))
(917 (op/integer? . 20))
(918 (op/number? . 20))
(919 (op/eq? . 20))
(920 (op/computed-goto . 20))
(921 (op/jump . 20))
(922 (op/jump-if-false . 20))
(923 (op/call-template . 20))
(924 (op/goto-template . 20))
(925 (op/ignore-values . 20))
(926 (op/return-values . 20))
(927 (op/values . 20))
(928 (op/return . 20))
(929 (op/call-with-values . 20))
(930 (op/with-continuation . 20))
(931 (op/apply . 20))
(932 (op/move-args-and-call . 20))
(933 (op/call . 20))
(934 (op/get-cont-from-heap . 20))
(935 (op/current-cont . 20))
(936 (op/make-cont . 20))
(937 (op/stack-set! . 20))
(938 (op/stack-ref . 20))
(939 (op/pop . 20))
(940 (op/push . 20))
(941 (op/closure . 20))
(942 (op/set-global! . 20))
(943 (op/global . 20))
(944 (op/set-local! . 20))
(945 (op/local2 . 20))
(946 (op/local1 . 20))
(947 (op/local0 . 20))
(948 (op/local . 20))
(949 (op/literal . 20))
(950 (op/make-rest-list . 20))
(951 (op/pop-env . 20))
(952 (op/make-heap-env . 20))
(953 (op/make-env . 20))
(954 (op/nargs . 20))
(955 (op/check-nargs>= . 20))
(956 (op/check-nargs= . 20))
(957 (op-count . 20))
(958 (op . 20))
(959 (opcode-arg-specs . 20))
(960 (interrupt/memory-shortage . 20))
(961 (interrupt/keyboard . 20))
(962 (interrupt/alarm . 20))
(963 (interrupt-count . 20))
(964 (interrupt . 20))
(965 (time-option/real-time . 20))
(966 (time-option/run-time . 20))
(967 (time-option/ticks-per-second . 20))
(968 (time-option-count . 20))
(969 (time-option . 20))
(970 (memory-status-option/gc-count . 20))
(971 (memory-status-option/set-minimum-recovered-space! . 20))
(972 (memory-status-option/stack-size . 20))
(973 (memory-status-option/heap-size . 20))
(974 (memory-status-option/available . 20))
(975 (memory-status-option-count . 20))
(976 (memory-status-option . 20))
(977 (stob/bignum . 20))
(978 (stob/double . 20))
(979 (stob/code-vector . 20))
(980 (stob/string . 20))
(981 (stob/unused-d-header2 . 20))
(982 (stob/unused-d-header1 . 20))
(983 (stob/external . 20))
(984 (stob/weak-pointer . 20))
(985 (stob/template . 20))
(986 (stob/extended-number . 20))
(987 (stob/continuation . 20))
(988 (stob/record . 20))
(989 (stob/ratio . 20))
(990 (stob/port . 20))
(991 (stob/location . 20))
(992 (stob/closure . 20))
(993 (stob/vector . 20))
(994 (stob/symbol . 20))
(995 (stob/pair . 20))
(996 (stob-count . 20))
(997 (stob . 20))
(998 (stob-data . 20))
(999 (node-type . 38))
(1000 (reconstruct . 38))
(1001 (reconstructors . 38))
(1002 (define-reconstructor . 38))
(1003 (operator/name . 38))
(1004 (reconstruct-call . 38))
(1005 (node->type . 38))
(1006 (constrain-call! . 38))
(1007 (constrain! . 38))
(1008 (call-node? . 38))
(1009 (name-node? . 38))
(1010 (begin-node? . 38))
(1011 (reconstruct-apply . 38))
(1012 (declare-operator-type . 38))
(1013 (last . 38))
(1014 (constant-type . 38))
(1015 (template-overhead . 22))
(1016 (template-code . 22))
(1017 (template-info . 22))
(1018 (set-template-code! . 22))
(1019 (set-template-info! . 22))
(1020 (make-segment . 41))
(1021 (segment-size . 41))
(1022 (segment-emitter . 41))
(1023 (segment->template . 41))
(1024 (segment-data->template . 41))
(1025 (type/assembly-state . 41))
(1026 (make-assembly-state . 41))
(1027 (astate-literals . 41))
(1028 (set-astate-literals! . 41))
(1029 (astate-count . 41))
(1030 (set-astate-count! . 41))
(1031 (astate-pc . 41))
(1032 (set-astate-pc! . 41))
(1033 (astate-code-vector . 41))
(1034 (make-astate . 41))
(1035 (emit-byte! . 41))
(1036 (emit-literal! . 41))
(1037 (emit-segment! . 41))
(1038 (empty-segment . 41))
(1039 (instruction . 41))
(1040 (sequentially . 41))
(1041 (sequentially-2 . 41))
(1042 (instruction-with-literal . 41))
(1043 (instruction-with-location . 41))
(1044 (instruction-with-template . 41))
(1045 (make-label . 41))
(1046 (instruction-using-label . 41))
(1047 (attach-label . 41))
(1048 (byte-limit . 41))
(1049 ($debug-data . 41))
(1050 (note-source-code . 41))
(1051 (note-environment . 41))
(1052 (emit-with-environment-maps! . 41))
(1053 ($environment-maps . 41))
(1054 (environment-maps-table . 41))
(1055 (new-template-uid . 41))
(1056 (*template-uid* . 41))
(1057 (template-uid . 41))
(1058 (set-template-uid! . 41))
(1059 (debug-flag-names . 41))
(1060 (type/debug-flags . 41))
(1061 (make-debug-flags . 41))
(1062 ($debug-flags . 41))
(1063 (debug-flag-accessor . 41))
(1064 (debug-flag-modifier . 41))
(1065 (keep-source-code? . 41))
(1066 (keep-environment-maps? . 41))
(1067 (keep-procedure-names? . 41))
(1068 (keep-file-names? . 41))
(1069 (tabulate-debug-data? . 41))
(1070 (debug-data-table . 41))
(1071 (with-fresh-compiler-state . 41))
(1072 (saving-and-restoring . 41))
(1073 (debug-data-type . 41))
(1074 (make-debug-data . 41))
(1075 (debug-data-source . 41))
(1076 (set-debug-data-source! . 41))
(1077 (debug-data-env-maps . 41))
(1078 (set-debug-data-env-maps! . 41))
(1079 (debug-data-pc-in-parent . 41))
(1080 (debug-data-parent . 41))
(1081 (debug-data-name . 41))
(1082 (debug-data-uid . 41))
(1083 (debug-data? . 41))
(1084 (new-debug-data . 41))
(1085 (debug-data->info . 41))
(1086 (get-debug-data . 41))
(1087 (note-debug-data! . 41))
(1088 (interesting-debug-data? . 41))
(1089 (debug-data-names . 41))
(1090 (template-debug-data . 41))
(1091 (template-id . 41))
(1092 (template-name . 41))
(1093 (template-names . 41))
(1094 (compile-top . 42))
(1095 (compile . 42))
(1096 (*type-check?* . 42))
(1097 (compilators . 42))
(1098 (define-compilator . 42))
(1099 (compile-constant . 42))
(1100 (compile-begin . 42))
(1101 (compile-call . 42))
(1102 (lambda-node? . 42))
(1103 (compile-redex . 42))
(1104 (compile-unknown-call . 42))
(1105 (maybe-push-continuation . 42))
(1106 (push-arguments . 42))
(1107 (push-all-with-names . 42))
(1108 (compile-lambda . 42))
(1109 (compile-lambda-code . 42))
(1110 (compile-letrec . 42))
(1111 (compile-body . 42))
(1112 (operator/letrec . 42))
(1113 (make-cont . 42))
(1114 (cont-segment . 42))
(1115 (cont-source-info . 42))
(1116 (return-cont-segment . 42))
(1117 (return-cont . 42))
(1118 (return-cont? . 42))
(1119 (fall-through-cont . 42))
(1120 (fall-through-cont? . 42))
(1121 (ignore-values-segment . 42))
(1122 (ignore-values-cont . 42))
(1123 (ignore-values-cont? . 42))
(1124 (deliver-value . 42))
(1125 (named-cont . 42))
(1126 (cont-name . 42))
(1127 (bind-vars . 42))
(1128 (initial-cenv . 42))
(1129 (environment-level . 42))
(1130 (*level-key* . 42))
(1131 (name-node-binding . 42))
(1132 (generate-trap . 42))
(1133 (careful-sequentially . 42))
(1134 (large-segment-size . 42))
(1135 (op/call . 42))
(1136 (op/check-nargs= . 42))
(1137 (op/check-nargs>= . 42))
(1138 (op/closure . 42))
(1139 (op/false . 42))
(1140 (op/global . 42))
(1141 (op/ignore-values . 42))
(1142 (op/jump . 42))
(1143 (op/jump-if-false . 42))
(1144 (op/literal . 42))
(1145 (op/local . 42))
(1146 (op/local0 . 42))
(1147 (op/local1 . 42))
(1148 (op/local2 . 42))
(1149 (op/make-cont . 42))
(1150 (op/make-env . 42))
(1151 (op/make-rest-list . 42))
(1152 (op/push . 42))
(1153 (op/return . 42))
(1154 (op/set-global! . 42))
(1155 (op/set-local! . 42))
(1156 (op/trap . 42))
(1157 (op/unspecific . 42))
(1158 (type-check . 42))
(1159 (report-type-error . 42))
(1160 (define-compiler-primitive . 42))
(1161 (closed-compilators . 42))
(1162 (define-closed-compilator . 42))
(1163 (get-closed-compilator . 42))
(1164 (direct-compilator . 42))
(1165 (direct-closed-compilator . 42))
(1166 (nargs->domain . 42))
(1167 (checked-compilator . 42))
(1168 (define-simple-primitive . 42))
(1169 (simple-compilator . 42))
(1170 (simple-closed-compilator . 42))
(1171 (symbol-append . 42))
(1172 (define-data-struct-primitives . 42))
(1173 (op/stored-object-has-type? . 42))
(1174 (op/make-stored-object . 42))
(1175 (op/stored-object-ref . 42))
(1176 (op/stored-object-set! . 42))
(1177 (op/make-byte-vector-object . 42))
(1178 (op/make-char-vector-object . 42))
(1179 (op/make-vector-object . 42))
(1180 (define-vector-primitives . 42))
(1181 (op/stored-object-byte-length . 42))
(1182 (op/stored-object-indexed-byte-ref . 42))
(1183 (op/stored-object-indexed-byte-set! . 42))
(1184 (op/stored-object-indexed-char-ref . 42))
(1185 (op/stored-object-indexed-char-set! . 42))
(1186 (op/stored-object-indexed-ref . 42))
(1187 (op/stored-object-indexed-set! . 42))
(1188 (op/stored-object-length . 42))
(1189 (define-n-ary-compiler-primitive . 42))
(1190 (n-ary-primitive-compilator . 42))
(1191 (push-all-but-last . 42))
(1192 (op/apply . 42))
(1193 (op/call-with-values . 42))
(1194 (op/current-cont . 42))
(1195 (op/external-call . 42))
(1196 (op/pop . 42))
(1197 (op/return-values . 42))
(1198 (op/stack-ref . 42))
(1199 (op/values . 42))
(1200 (compile-form . 42))
(1201 (compile-file . 42))
(1202 (compile-and-run-forms . 42))
(1203 (compile-and-run-file . 42))
(1204 (compile-and-run-scanned-forms . 42))
(1205 (compile-scanned-forms . 42))
(1206 (compile-scanned-form . 42))
(1207 (compile-definition . 42))
(1208 (prepare-cenv . 42))
(1209 (cenv-package . 42))
(1210 (*the-package* . 42))
(1211 (define-node? . 42))
(1212 (get-location . 42))
(1213 (location-for-undefined . 42))
(1214 (package-accessor-on-demand . 42))
(1215 (location-on-demand . 42))
(1216 (package-undefineds . 42))
(1217 (location-for-reference . 42))
(1218 (package-undefined-but-assigneds . 42))
(1219 (location-for-assignment . 42))
(1220 (note-caching . 42))
(1221 (grumble . 42))
(1222 (make-startup-procedure . 42))
(1223 (an-ignore-values-cont . 42))
(1224 (eval . 47))
(1225 (load . 47))
(1226 (eval-from-file . 47))
(1227 (eval-scanned-forms . 47))
(1228 (invoke-template . 47))
(1229 (continuation-cont . 23))
(1230 (continuation-pc . 23))
(1231 (continuation-template . 23))
(1232 (continuation-env . 23))
(1233 (continuation-overhead . 23))
(1234 (continuation-arg . 23))
(1235 (continuation-arg-count . 23))
(1236 (continuation-parent . 23))
(1237 (usual-exception-handler . 24))
(1238 (define-exception-handler . 24))
(1239 (signal-exception . 24))
(1240 (exception-handlers . 24))
(1241 (make-opcode-generic! . 24))
(1242 (really-signal-condition . 24))
(1243 (with-handler . 24))
(1244 ($condition-handlers . 24))
(1245 (initialize-exceptions! . 24))
(1246 (last-resort-condition-handler . 24))
(1247 (report-utter-lossage . 24))
(1248 (ignore-errors . 24))
(1249 (continuation-preview . 24))
(1250 (*wna-handlers* . 24))
(1251 (define-wna-handler . 24))
(1252 (op/check-nargs= . 24))
(1253 (wna-lose . 24))
(1254 (comparison-wna . 24))
(1255 (display-condition . 31))
(1256 (really-display-condition . 31))
(1257 (*depth* . 31))
(1258 (*length* . 31))
(1259 (disclose-condition-methods . 31))
(1260 (disclose-condition . 31))
(1261 (limited-write . 31))
(1262 (command-processor . 49))
(1263 (mini-load . 49))
(1264 (read-string . 49))
(1265 (interrupt-handlers . 25))
(1266 (initialize-interrupts! . 25))
(1267 (time-option/ticks-per-second . 25))
(1268 (one-second . 25))
(1269 (no-interrupts . 25))
(1270 (all-interrupts . 25))
(1271 (with-interrupts-inhibited . 25))
(1272 (with-interrupts-allowed . 25))
(1273 (with-interrupts . 25))
(1274 (enabled-interrupts . 25))
(1275 (interrupt-before-heap-overflow! . 25))
(1276 (interrupt/memory-shortage . 25))
(1277 (memory-status-option/set-minimum-recovered-space! . 25))
(1278 (memory-status-option/heap-size . 25))
(1279 (usual-resumer . 29))
(1280 (start . 50))
(1281 (make-built-in-structures . 50))
(1282 (scheme-for-syntax . 50))
(1283 (initialize-interaction-environment! . 50))
(1284 (make-initial-package . 50))
(1285 (make-env-for-syntax-promise . 50))
(1286 (inline-transform . 45))
(1287 (make-substitution . 45))
(1288 (substitute . 45))
(1289 (qualified? . 45))
(1290 (qualified->name . 45))
(1291 (get-qualified-env . 45))
(1292 (name->qualified . 45))
(1293 (qlookup . 45))
(1294 (generic-lookup . 45))
(1295 (:syntax . 44))
(1296 (:values . 44))
(1297 (some-values . 44))
(1298 (:value . 44))
(1299 (variable . 44))
(1300 (procedure . 44))
(1301 (:boolean . 44))
(1302 (:char . 44))
(1303 (:number . 44))
(1304 (:null . 44))
(1305 (:unspecific . 44))
(1306 (:pair . 44))
(1307 (:string . 44))
(1308 (:symbol . 44))
(1309 (:vector . 44))
(1310 (:procedure . 44))
(1311 (:zero . 44))
(1312 (:escape . 44))
(1313 (:structure . 44))
(1314 (:type . 44))
(1315 (def . 43))
(1316 (define-values . 43))
(1317 (define-interface . 43))
(1318 (export . 43))
(1319 (an-interface . 43))
(1320 (really-export . 43))
(1321 (define-structure . 43))
(1322 (define-structures . 43))
(1323 (a-package . 43))
(1324 (define-module . 43))
(1325 (make-a-package . 43))
(1326 (init-defpackage! . 43))
(1327 (loser . 43))
(1328 (*evaluator* . 43))
(1329 (*make-package-for-syntax-promise* . 43))
(1330 (interface-of . 43))
(1331 (*verify-later!* . 43))
(1332 (verify-later! . 43))
(1333 (set-verify-later! . 43))
(1334 (ensure-loaded . 51))
-
; Template uid -> name, parent, pc in parent, env maps
(1 current-cont 0 4 ())
(2 closure-template 0 12 ())
(3 continuation-ref 0 20 ())
(4 output-port? 0 28 ())
(5 closure? 0 36 ())
(6 complex? 0 44 ())
(7 arithmetic-shift 0 52 ())
(8 signal-condition 0 60 ())
(9 integer? 0 68 ())
(10 make-closure 0 76 ())
(11 template-ref 0 84 ())
(12 make-rectangular 0 92 ())
(13 string=? 0 100 ())
(14 extended-number? 0 108 ())
(15 reverse-list->string 0 116 ())
(16 denominator 0 124 ())
(17 call-with-values 0 132 ())
(18 weak-pointer-ref 0 140 ())
(19 find-all-symbols 0 148 ())
(20 code-vector? 0 156 ())
(21 pop 0 164 ())
(22 exp 0 172 ())
(23 sin 0 180 ())
(24 make-extended-number 0 188 ())
(25 cos 0 196 ())
(26 collect 0 204 ())
(27 external-lookup 0 212 ())
(28 tan 0 220 ())
(29 log 0 228 ())
(30 continuation-length 0 236 ())
(32 make-code-vector 31 4 ())
(33 cdr 31 12 ())
(34 bitwise-xor 31 20 ())
(35 car 31 28 ())
(36 string? 31 36 ())
(37 symbol? 31 44 ())
(38 set-cdr! 31 52 ())
(39 bitwise-not 31 60 ())
(40 vector? 31 68 ())
(41 closure-env 31 76 ())
(42 set-car! 31 84 ())
(43 bitwise-ior 31 92 ())
(44 number? 31 100 ())
(45 template-length 31 108 ())
(46 string-hash 31 116 ())
(47 pop-env 31 124 ())
(48 primitive-catch 31 132 ())
(49 make-string 31 140 ())
(50 input-port? 31 148 ())
(51 record? 31 156 ())
(52 make-vector 31 164 ())
(53 extended-number-set! 31 172 ())
(54 write-image 31 180 ())
(55 eq? 31 188 ())
(56 bitwise-and 31 196 ())
(57 location-id 31 204 ())
(58 code-vector-set! 31 212 ())
(59 make-record 31 220 ())
(60 intern 31 228 ())
(61 values 31 236 ())
(62 unassigned 31 244 ())
(63 string-set! 31 252 ())
(64 vector-set! 31 260 ())
(65 extended-number-ref 31 268 ())
(66 unspecific 31 276 ())
(67 schedule-interrupt 31 284 ())
(68 code-vector-ref 31 292 ())
(69 find-all-xs 31 300 ())
(70 char-ready? 31 308 ())
(71 set-interrupt-handlers! 31 316 ())
(72 eof-object? 31 324 ())
(73 record-set! 31 332 ())
(74 ascii->char 31 340 ())
(75 char->ascii 31 348 ())
(76 set-enabled-interrupts! 31 356 ())
(77 external-value 31 364 ())
(78 make-immutable! 31 372 ())
(79 close-port 31 380 ())
(80 string-ref 31 388 ())
(81 immutable? 31 396 ())
(82 vector-ref 31 404 ())
(83 exact? 31 412 ())
(84 write-char 31 420 ())
(85 symbol->string 31 428 ())
(86 make-polar 31 436 ())
(87 record-ref 31 444 ())
(88 numerator 31 452 ())
(89 extended-number-length 31 460 ())
(90 error 31 468 ())
(91 exact->inexact 31 476 ())
(92 inexact->exact 31 484 ())
(93 apply 31 492 ())
(94 memory-status 31 500 ())
(96 code-vector-length 95 4 ())
(97 floor 95 12 ())
(98 with-continuation 95 20 ())
(99 magnitude 95 28 ())
(100 nargs 95 36 ())
(101 char=? 95 44 ())
(102 char<? 95 52 ())
(103 continuation? 95 60 ())
(104 remainder 95 68 ())
(105 vm-return 95 76 ())
(106 false 95 84 ())
(107 angle 95 92 ())
(108 open-port 95 100 ())
(109 string-length 95 108 ())
(110 external? 95 116 ())
(111 make-continuation 95 124 ())
(112 vector-length 95 132 ())
(113 template? 95 140 ())
(114 rational? 95 148 ())
(115 location? 95 156 ())
(116 external-name 95 164 ())
(117 set-exception-handler! 95 172 ())
(118 pair? 95 180 ())
(119 make-external 95 188 ())
(120 record-length 95 196 ())
(121 external-call 95 204 ())
(122 set-dynamic-state! 95 212 ())
(123 get-cont-from-heap 95 220 ())
(124 real-part 95 228 ())
(125 real? 95 236 ())
(126 make-template 95 244 ())
(127 imag-part 95 252 ())
(128 make-location 95 260 ())
(129 = 95 268 ())
(130 < 95 276 ())
(131 char? 95 284 ())
(132 quotient 95 292 ())
(133 / 95 300 ())
(134 weak-pointer? 95 308 ())
(135 - 95 316 ())
(136 continuation-set! 95 324 ())
(137 peek-char 95 332 ())
(138 + 95 340 ())
(139 * 95 348 ())
(140 contents 95 356 ())
(141 sqrt 95 364 ())
(142 read-char 95 372 ())
(143 set-contents! 95 380 ())
(144 push 95 388 ())
(145 make-weak-pointer 95 396 ())
(146 get-dynamic-state 95 404 ())
(147 trap 95 412 ())
(148 cons 95 420 ())
(149 template-set! 95 428 ())
(150 time 95 436 ())
(151 location-defined? 95 444 ())
(152 asin 95 452 ())
(153 write-string 95 460 ())
(154 vm-extension 95 468 ())
(155 force-output 95 476 ())
(156 acos 95 484 ())
(157 set-location-defined?! 95 492 ())
(158 atan 95 500 ())
(160 char->integer 159 4 (#(4 12 #(c) ())))
(161 integer->char 159 12 (#(4 12 #(n) ())))
(162 invoke-closure 159 44 (#(7 14 #(closure args) ())))
(163 primitive-cwcc 159 52 (#(4 10 #(p) ())))
(164 #f 163 7 (#(4 11 #(cont) ())))
(165 make-undefined-location 159 60 (#(4 22 #(id) (#(14 22 #(loc) ())))))
(166 vector-unassigned? 159 68 (#(4 15 #(v i) ())))
(167 string-copy 159 76 (#(4 37 #(s) (#(11 37 #(z) (#(21 37 #(copy) (#(25 37 #(loop) ())))))))))
(168 loop 167 26 (#(4 44 #(i) ())))
(169 string->symbol 159 84 (#(4 31 #(string) ())))
(170 really-string->symbol 159 92 (#(4 46 #(string) (#(40 46 #(sym) ())))))
(171 flush-the-symbol-table! 159 107 ())
(172 restore-the-symbol-table! 159 115 ())
(173 maybe-open-input-file 159 135 (#(4 11 #(string) ())))
(174 maybe-open-output-file 159 143 (#(4 11 #(string) ())))
(175 open-input-file 159 151 (#(4 43 #(string) (#(13 43 #(temp##0) ())))))
(176 open-output-file 159 159 (#(4 43 #(string) (#(13 43 #(temp##1) ())))))
(178 signal 177 12 (#(7 17 #(type stuff) ())))
(179 warn 177 20 (#(7 23 #(message irritants) ())))
(180 syntax-error 177 28 (#(5 17 #(rest) ())))
(181 call-error 177 36 (#(7 29 #(message proc args) ())))
(183 not 182 4 (#(4 14 #(x) ())))
(184 boolean? 182 12 (#(4 27 #(x) (#(13 27 #(temp##2) ())))))
(185 eqv? 182 20 (#(4 57 #(x y) (#(13 57 #(temp##3) ())))))
(186 equal? 182 28 (#(4 158 #(obj1 obj2) (#(125 154 #(z) (#(140 152 #(loop) ())))))))
(187 loop 186 141 (#(4 58 #(i) ())))
(188 > 182 36 (#(4 11 #(x y) ())))
(189 <= 182 44 (#(4 18 #(x y) ())))
(190 >= 182 52 (#(4 18 #(x y) ())))
(191 max 182 60 (#(7 20 #(first rest) ())))
(192 #f 191 8 (#(4 19 #(x y) ())))
(193 min 182 68 (#(7 20 #(first rest) ())))
(194 #f 193 8 (#(4 19 #(x y) ())))
(195 abs 182 76 (#(4 23 #(n) ())))
(196 zero? 182 84 (#(4 11 #(x) ())))
(197 positive? 182 92 (#(4 11 #(x) ())))
(198 negative? 182 100 (#(4 11 #(x) ())))
(199 even? 182 108 (#(4 15 #(n) ())))
(200 odd? 182 116 (#(4 22 #(n) ())))
(201 caar 182 124 (#(4 13 #(x) ())))
(202 cadr 182 132 (#(4 13 #(x) ())))
(203 cdar 182 140 (#(4 13 #(x) ())))
(204 cddr 182 148 (#(4 13 #(x) ())))
(205 caaar 182 156 (#(4 16 #(x) ())))
(206 caadr 182 164 (#(4 16 #(x) ())))
(207 cadar 182 172 (#(4 16 #(x) ())))
(208 caddr 182 180 (#(4 16 #(x) ())))
(209 cdaar 182 188 (#(4 16 #(x) ())))
(210 cdadr 182 196 (#(4 16 #(x) ())))
(211 cddar 182 204 (#(4 16 #(x) ())))
(212 cdddr 182 212 (#(4 16 #(x) ())))
(213 caaaar 182 220 (#(4 19 #(x) ())))
(214 caaadr 182 228 (#(4 19 #(x) ())))
(215 caadar 182 236 (#(4 19 #(x) ())))
(216 caaddr 182 244 (#(4 19 #(x) ())))
(217 cadaar 182 252 (#(4 19 #(x) ())))
(218 cadadr 182 260 (#(4 19 #(x) ())))
(219 caddar 182 268 (#(4 19 #(x) ())))
(220 cadddr 182 276 (#(4 19 #(x) ())))
(221 cdaaar 182 284 (#(4 19 #(x) ())))
(222 cdaadr 182 292 (#(4 19 #(x) ())))
(223 cdadar 182 300 (#(4 19 #(x) ())))
(224 cdaddr 182 308 (#(4 19 #(x) ())))
(225 cddaar 182 316 (#(4 19 #(x) ())))
(226 cddadr 182 324 (#(4 19 #(x) ())))
(227 cdddar 182 332 (#(4 19 #(x) ())))
(228 cddddr 182 340 (#(4 19 #(x) ())))
(229 null? 182 348 (#(4 11 #(x) ())))
(230 list 182 356 (#(5 8 #(l) ())))
(231 length 182 364 (#(4 17 #(l) ())))
(232 #f 231 5 (#(4 11 #(ignore n) ())))
(233 append 182 372 (#(5 33 #(lists) (#(21 33 #(recur) ())))))
(234 recur 233 22 (#(4 50 #(lists) ())))
(235 reverse 182 380 (#(4 14 #(list) ())))
(236 append-reverse 182 388 (#(4 38 #(list seed) ())))
(237 list-tail 182 396 (#(4 33 #(l i) ())))
(238 list-ref 182 404 (#(4 22 #(l k) ())))
(239 mem 182 412 (#(4 7 #(pred) ())))
(240 #f 239 5 (#(4 20 #(obj l) (#(8 20 #(loop) ())))))
(241 loop 240 9 (#(4 49 #(l) ())))
(243 ass 242 21 (#(4 7 #(pred) ())))
(244 #f 243 5 (#(4 20 #(obj l) (#(8 20 #(loop) ())))))
(245 loop 244 9 (#(4 55 #(l) ())))
(246 assq 242 63 (#(4 49 #(x l) ())))
(247 list? 242 71 (#(4 23 #(l) (#(8 23 #(recur) ())))))
(248 recur 247 9 (#(4 105 #(l lag) (#(13 105 #(temp##5) (#(40 103 #(temp##4) ())))))))
(249 char>? 242 79 (#(4 11 #(x y) ())))
(250 char>=? 242 87 (#(4 18 #(x y) ())))
(251 char<=? 242 95 (#(4 18 #(x y) ())))
(252 char-whitespace? 242 103 (#(4 27 #(c) ())))
(253 char-lower-case? 242 111 (#(4 38 #(c) ())))
(254 char-upper-case? 242 119 (#(4 38 #(c) ())))
(255 char-numeric? 242 127 (#(4 38 #(c) ())))
(256 char-alphabetic? 242 135 (#(4 33 #(c) (#(18 33 #(temp##6) ())))))
(257 char-upcase 242 157 (#(4 30 #(c) ())))
(258 char-downcase 242 165 (#(4 30 #(c) ())))
(259 char-ci-compare 242 173 (#(4 7 #(pred) ())))
(260 #f 259 5 (#(4 32 #(c1 c2) ())))
(261 string 242 266 (#(5 12 #(rest) ())))
(262 substring 242 274 (#(4 37 #(s start end) (#(18 37 #(new-string) (#(22 37 #(loop##8) ())))))))
(263 loop##7 262 23 (#(4 51 #(i j) ())))
(264 string-append 242 282 (#(5 55 #(strings) (#(25 55 #(len) (#(35 55 #(new-string) (#(39 55 #(loop) ())))))))))
(265 #f 264 10 (#(4 13 #(s n) ())))
(266 loop 264 40 (#(4 51 #(s i) (#(24 51 #(string) (#(31 51 #(l) (#(35 51 #(loop##10) ())))))))))
(267 loop##9 266 36 (#(4 63 #(j i) ())))
(268 string->list 242 290 (#(4 34 #(v) (#(11 34 #(z) (#(15 34 #(loop##12) ())))))))
(269 loop##11 268 16 (#(4 42 #(i l) ())))
(270 list->string 242 298 (#(4 42 #(l) (#(23 42 #(v) (#(27 42 #(loop##14) ())))))))
(271 loop##13 270 28 (#(4 46 #(i l) ())))
(272 string-fill! 242 306 (#(4 27 #(v x) (#(11 27 #(z) (#(15 27 #(loop##16) ())))))))
(273 loop##15 272 16 (#(4 44 #(i) ())))
(274 make-string=? 242 314 (#(4 7 #(char=?) ())))
(275 #f 274 5 (#(4 40 #(s1 s2) (#(11 40 #(z) (#(26 38 #(loop) ())))))))
(276 loop 275 27 (#(4 59 #(i) ())))
(277 make-string<? 242 339 (#(4 7 #(char<? char=?) ())))
(278 #f 277 5 (#(4 49 #(s1 s2) (#(16 49 #(z1 z2) (#(33 49 #(z) (#(37 49 #(loop) ())))))))))
(279 loop 278 38 (#(4 100 #(i) (#(42 100 #(c1 c2) (#(60 100 #(temp##17) ())))))))
(280 string>? 242 387 (#(4 14 #(s1 s2) ())))
(281 string<=? 242 395 (#(4 26 #(s1 s2) ())))
(282 string>=? 242 403 (#(4 26 #(s1 s2) ())))
(283 string-ci>? 242 411 (#(4 14 #(s1 s2) ())))
(284 string-ci<=? 242 419 (#(4 26 #(s1 s2) ())))
(285 string-ci>=? 242 427 (#(4 26 #(s1 s2) ())))
(286 vector 242 435 (#(5 12 #(l) ())))
(287 vector->list 242 443 (#(4 29 #(v) (#(8 29 #(loop##19) ())))))
(288 loop##18 287 9 (#(4 41 #(i l) ())))
(289 list->vector 242 451 (#(4 41 #(l) (#(22 41 #(v) (#(26 41 #(loop##21) ())))))))
(290 loop##20 289 27 (#(4 46 #(i l) ())))
(291 vector-fill! 242 459 (#(4 27 #(v x) (#(11 27 #(z) (#(15 27 #(loop##23) ())))))))
(292 loop##22 291 16 (#(4 44 #(i) ())))
(293 map 242 467 (#(7 39 #(proc first rest) ())))
(294 map1 242 475 (#(4 52 #(proc l) ())))
(295 map2+ 242 483 (#(4 110 #(proc first rest) (#(17 35 #(temp##24) ())))))
(296 for-each 242 491 (#(7 26 #(proc first rest) (#(11 26 #(loop) ())))))
(297 loop 296 12 (#(4 104 #(first rest) (#(17 35 #(temp##25) ())))))
(298 make-promise 242 499 (#(4 13 #(thunk-then-result) (#(10 13 #(already-run? started?) ())))))
(299 #f 298 11 ())
(300 force 242 507 (#(4 8 #(promise) ())))
(302 unspecific 301 4 ())
(303 reduce 301 12 (#(4 47 #(cons nil list) ())))
(304 filter 301 20 (#(4 17 #(pred lst) ())))
(305 #f 304 5 (#(4 30 #(x rest) ())))
(306 pos 301 28 (#(4 7 #(pred) ())))
(307 #f 306 5 (#(4 23 #(thing l) (#(8 23 #(loop) ())))))
(308 loop 307 9 (#(4 56 #(i l) ())))
(309 any 301 87 (#(4 53 #(pred l) (#(32 53 #(temp##26) ())))))
(310 every 301 95 (#(4 48 #(pred l) ())))
(311 sublist 301 103 (#(4 56 #(l start end) (#(41 56 #(recur) ())))))
(312 recur 311 42 (#(4 47 #(l end) ())))
(313 last 301 111 (#(4 32 #(x) ())))
(315 inexact? 314 4 (#(4 15 #(n) ())))
(316 modulo 314 12 (#(4 49 #(x y) (#(13 49 #(r) ())))))
(317 ceiling 314 20 (#(4 16 #(x) ())))
(318 truncate 314 28 (#(4 29 #(x) ())))
(319 round 314 36 (#(4 68 #(x) (#(17 68 #(x+1/2) (#(23 68 #(r) ())))))))
(320 gcd 314 44 (#(5 18 #(integers) ())))
(321 #f 320 6 (#(4 79 #(x y) ())))
(322 euclid 314 52 (#(4 59 #(x y) ())))
(323 lcm 314 60 (#(5 18 #(integers) ())))
(324 #f 323 6 (#(4 62 #(x y) (#(21 62 #(g) ())))))
(325 expt 314 68 (#(4 39 #(x n) ())))
(326 raise-to-integer-power 314 76 (#(4 64 #(z p) (#(26 41 #(loop##28) ())))))
(327 loop##27 326 27 (#(4 43 #(a p) ())))
(329 rationalize 328 4 (#(4 36 #(x e) (#(18 36 #(e) ())))))
(330 simplest-rational 328 12 (#(4 140 #(x y) (#(8 140 #(simplest-rational-internal) ())))))
(331 simplest-rational-internal 330 9 (#(4 90 #(x y) (#(14 90 #(fx fy) ())))))
(333 make-family 332 4 (#(4 13 #(id prec) ())))
(334 same-family? 332 68 (#(4 32 #(c1 c2) ())))
(335 make-method-table 332 76 (#(4 31 #(id) ())))
(336 #f 335 9 (#(5 18 #(args) ())))
(337 define-method 332 100 (#(4 58 #(disp family method) (#(21 58 #(displace! prec) (#(25 58 #(loop) ())))))))
(338 displace! 337 5 (#(4 21 #(z x y) ())))
(339 loop 337 26 (#(4 138 #(ms cs) ())))
(340 define-default-method 332 108 (#(4 17 #(disp proc) ())))
(341 define-last-method 332 116 (#(4 17 #(disp proc) ())))
(342 make-generic 332 124 (#(4 21 #(disp) (#(18 21 #(ms) ())))))
(343 #f 342 19 (#(5 15 #(args) ())))
(344 perform-dispatch 332 132 (#(4 68 #(ms args) (#(43 68 #(result) ())))))
(345 fail 332 154 ())
(346 #f 332 200 (#(4 6 #(obj) ())))
(347 make-generic-exception-handler 332 211 (#(4 36 #(table opcode signal-exception) (#(33 36 #(ms) ())))))
(348 #f 347 12 (#(5 15 #(args) ())))
(349 #f 347 34 (#(4 14 #(opcode args) ())))
(350 #f #f #f (#(182 216 #(a-minus-ten zero digit->integer do-it string->integer) ()) #(123 152 #(a-minus-10 zero integer->digit integer->string) ())))
(351 #f 350 42 (#(4 74 #(n radix) (#(48 74 #(s) ())))))
(352 #f 350 57 (#(4 17 #(string radix exact?) ())))
(353 number->string 350 102 (#(7 49 #(n radix-or-format-option) ())))
(354 integer->digit 350 140 (#(4 26 #(n) ())))
(355 integer->string 350 145 (#(4 89 #(n radix) (#(53 89 #(magnitude) ()) #(35 50 #(recur) ())))))
(356 recur 355 36 (#(4 59 #(n l) ())))
(357 string->number 350 159 (#(7 193 #(string options) (#(52 193 #(radix) (#(160 193 #(radix) (#(167 193 #(len) (#(171 193 #(loop) ()))))) #(61 157 #(temp##29) ())))))))
(358 loop 357 172 (#(4 251 #(pos exactness? exact? radix? radix) (#(234 246 #(loop) ()) #(48 194 #(pos) (#(77 194 #(radix-is exactness-is) (#(97 194 #(temp##30) ())))))))))
(359 radix-is 358 70 (#(4 35 #(radix) ())))
(360 exactness-is 358 73 (#(4 35 #(exact?) ())))
(361 loop 358 235 (#(4 109 #(pos) ())))
(362 digit->integer 350 199 (#(4 129 #(c radix) (#(93 129 #(n) ()) #(28 42 #(n) ())))))
(363 do-it 350 204 (#(4 83 #(string pos sign radix xact?) (#(11 83 #(len) (#(43 83 #(len) (#(67 83 #(loop) ())))))))))
(364 loop 363 68 (#(4 121 #(n pos) (#(86 121 #(d) ()) #(32 51 #(temp##31) ())))))
(365 string->integer 350 209 (#(4 102 #(string radix xact?) ())))
(367 record-type 366 4 (#(4 12 #(r) ())))
(368 make-record-type 366 37 (#(4 74 #(id field-names) (#(21 74 #(r) ())))))
(369 record-type? 366 45 (#(4 25 #(obj) ())))
(370 record-type-uid 366 53 (#(4 12 #(rt) ())))
(371 record-type-identification 366 61 (#(4 12 #(rt) ())))
(372 record-type-field-names 366 69 (#(4 12 #(rt) ())))
(373 record-type-discloser 366 77 (#(4 12 #(rt) ())))
(374 record-field-index 366 85 (#(4 28 #(rt name) (#(8 28 #(loop) ())))))
(375 loop 374 9 (#(4 78 #(names i) ())))
(376 record-constructor 366 93 (#(4 45 #(rt names) (#(42 45 #(indexes size) ())))))
(377 #f 376 9 (#(4 14 #(name) ())))
(378 #f 376 43 (#(5 45 #(args) (#(14 45 #(r) (#(29 45 #(loop) ())))))))
(379 loop 378 30 (#(4 140 #(is as) ())))
(380 record-accessor 366 101 (#(4 57 #(rt name) (#(54 57 #(index error-cruft) ())))))
(381 #f 380 55 (#(4 39 #(r) ())))
(382 record-modifier 366 109 (#(4 57 #(rt name) (#(54 57 #(index error-cruft) ())))))
(383 #f 382 55 (#(4 45 #(r x) ())))
(384 record-predicate 366 117 (#(4 7 #(rt) ())))
(385 #f 384 5 (#(4 25 #(x) ())))
(386 define-record-discloser 366 125 (#(4 45 #(rt proc) ())))
(387 disclose-record 366 133 (#(4 50 #(r) (#(19 50 #(p) ())))))
(388 default-record-discloser 366 141 (#(4 21 #(r) ())))
(389 #f 366 164 (#(4 91 #(obj) ())))
(392 thread-dynamic-env 391 44 (#(4 12 #(r##32) ())))
(393 current-thread 391 52 ())
(394 set-current-thread! 391 60 (#(4 8 #(thread) ())))
(395 get-dynamic-env 391 68 ())
(396 set-dynamic-env! 391 76 (#(4 14 #(env) ())))
(397 initialize-dynamic-state! 391 84 ())
(398 with-dynamic-env 391 92 (#(4 52 #(env thunk) (#(13 52 #(saved-env) (#(42 49 #(x) ())))))))
(399 #f 398 27 (#(5 21 #(results) ())))
(400 empty-dynamic-env 391 100 ())
(401 fluid-top-level-value 391 148 (#(4 12 #(r##33) ())))
(402 set-fluid-top-level-value! 391 156 (#(4 15 #(r##34 new##35) ())))
(403 fluid 391 164 (#(4 44 #(f) (#(25 44 #(probe) ())))))
(404 set-fluid! 391 172 (#(4 50 #(f val) (#(25 50 #(probe) ())))))
(405 let-fluid 391 180 (#(4 30 #(f val thunk) ())))
(406 let-fluids 391 188 (#(5 28 #(args) (#(9 28 #(loop) ())))))
(407 loop 406 10 (#(4 66 #(args env) ())))
(408 fluid-lookup 391 196 (#(4 40 #(env f) (#(21 40 #(probe) ())))))
(410 dynamic-wind 409 4 (#(4 110 #(in body out) (#(94 110 #(results) ()) #(38 70 #(here) ())))))
(411 #f 410 85 ())
(412 call-with-current-continuation 409 12 (#(4 11 #(proc) ())))
(413 #f 412 5 (#(4 32 #(cont) (#(13 32 #(env) ())))))
(414 continuation->procedure 409 20 (#(4 7 #(cont env) ())))
(415 #f 414 5 (#(5 57 #(results) ())))
(416 #f 415 54 ())
(417 point-parent 409 68 (#(4 12 #(r##36) ())))
(418 point-dynamic-env 409 76 (#(4 12 #(r##37) ())))
(419 point-out 409 84 (#(4 12 #(r##38) ())))
(420 point-in 409 92 (#(4 12 #(r##39) ())))
(421 point-depth 409 100 (#(4 12 #(r##40) ())))
(422 #f 409 112 (#(4 19 #(p) ())))
(425 get-dynamic-point 409 168 ())
(426 env-dynamic-point 409 176 (#(4 14 #(env) ())))
(427 let-dynamic-point 409 184 (#(4 30 #(point thunk) ())))
(428 travel-to-point! 409 192 (#(4 121 #(here target) ())))
(430 current-input-port 429 52 ())
(431 current-output-port 429 60 ())
(432 error-output-port 429 68 ())
(433 with-initial-ports 429 76 (#(4 29 #(in out thunk) ())))
(434 call-with-mumble-file 429 84 (#(4 7 #(open close) ())))
(435 #f 434 5 (#(4 21 #(string proc) (#(8 21 #(port) ())))))
(436 #f 435 9 ())
(437 #f 435 12 ())
(438 #f 435 15 ())
(439 with-input-from-file 429 132 (#(4 14 #(string thunk) ())))
(440 #f 439 8 (#(4 30 #(port) ())))
(441 with-output-to-file 429 140 (#(4 14 #(string thunk) ())))
(442 #f 441 8 (#(4 30 #(port) ())))
(443 newline 429 148 (#(5 21 #(port-option) ())))
(444 output-port-option 429 156 (#(4 60 #(port-option) ())))
(445 input-port-option 429 164 (#(4 60 #(port-option) ())))
(447 write 446 4 (#(7 37 #(obj port-option) (#(21 37 #(port) (#(25 37 #(recur) ())))))))
(448 recur 447 26 (#(4 17 #(obj) ())))
(449 recurring-write 446 12 (#(4 156 #(obj port recur) ())))
(450 write-boolean 446 20 (#(4 20 #(mumble port) ())))
(451 write-number 446 28 (#(4 23 #(n port) ())))
(452 write-char-literal 446 36 (#(4 46 #(obj port) (#(18 46 #(probe) ())))))
(453 character-name 446 44 (#(4 30 #(char) ())))
(454 write-string-literal 446 52 (#(4 33 #(obj port) (#(17 33 #(len) (#(21 33 #(loop##43) ())))))))
(455 loop##41 454 22 (#(4 98 #(i) (#(36 86 #(c) (#(49 64 #(temp##42) ())))))))
(456 write-list 446 60 (#(4 92 #(obj port recur) (#(66 84 #(loop) ())))))
(457 loop 456 67 (#(4 91 #(l n) ())))
(458 quotation? 446 68 (#(4 52 #(obj) ())))
(459 write-vector 446 76 (#(4 73 #(obj port recur) (#(21 65 #(z) (#(51 63 #(loop) ())))))))
(460 loop 459 52 (#(4 67 #(i) (#(22 67 #(temp##44) ())))))
(461 write-other 446 84 (#(4 180 #(obj port recur) (#(18 180 #(temp##45) (#(28 77 #(l) ())))))))
(462 #f 461 57 (#(4 19 #(x) ())))
(463 display-type-name 446 92 (#(4 114 #(name port) (#(19 104 #(s) (#(26 104 #(len) (#(82 94 #(loop##48) ())))))))))
(464 loop##46 463 83 (#(4 63 #(i) (#(22 63 #(temp##47) ())))))
(465 display 446 100 (#(7 37 #(obj port-option) (#(21 37 #(port) (#(25 37 #(recur) ())))))))
(466 recur 465 26 (#(4 44 #(obj) ())))
(468 condition-supertypes 467 12 (#(4 14 #(type) ())))
(469 define-condition-type 467 20 (#(4 42 #(type supertypes) ())))
(470 #f 469 19 (#(4 48 #(sup) (#(18 48 #(temp##49) ())))))
(471 condition-predicate 467 28 (#(4 7 #(name) ())))
(472 #f 471 5 (#(4 59 #(c) (#(28 57 #(probe) ())))))
(473 condition? 467 36 (#(4 39 #(x) ())))
(474 make-exception 467 204 (#(4 19 #(opcode args) ())))
(475 #f #f #f (#(438 448 #(number-sharp-macro) ()) #(154 185 #(sub-read-constituent) ()) #(134 144 #(sub-read-whitespace) ())))
(476 read 475 4 (#(5 32 #(port-option) (#(19 32 #(port) (#(23 32 #(loop) ())))))))
(477 loop 476 24 (#(16 80 #(form) ())))
(478 sub-read-carefully 475 12 (#(4 64 #(port) (#(18 64 #(form) ())))))
(479 make-reader-token 475 37 (#(4 13 #(message) ())))
(480 reader-token? 475 45 (#(4 23 #(form) ())))
(481 sub-read 475 87 (#(4 35 #(port) (#(10 35 #(c) ())))))
(482 #f 475 98 (#(4 17 #(c port) ())))
(483 set-standard-syntax! 475 121 (#(4 27 #(char terminating? reader) ())))
(484 sub-read-whitespace 475 130 (#(4 13 #(c port) ())))
(485 #f 475 135 (#(4 15 #(c) ())))
(486 sub-read-constituent 475 150 (#(4 26 #(c port) ())))
(487 #f 475 155 (#(4 16 #(c) ())))
(488 set-standard-read-macro! 475 190 (#(4 17 #(c terminating? proc) ())))
(489 sub-read-list 475 198 (#(4 130 #(c port) (#(18 130 #(form) (#(69 109 #(last-form) (#(83 109 #(another-form) ())))))))))
(490 #f 475 231 (#(4 11 #(c port) ())))
(491 #f 475 249 (#(4 25 #(c port) ())))
(492 #f 475 267 (#(4 25 #(c port) ())))
(493 #f 475 285 (#(4 76 #(c port) (#(12 76 #(next) (#(57 76 #(keyword) ())))))))
(494 #f 475 303 (#(4 25 #(c port) (#(10 25 #(loop) ())))))
(495 loop 494 11 (#(4 162 #(l i) (#(10 162 #(c) (#(43 126 #(c) (#(73 88 #(temp##50) ())))))))))
(496 #f 475 321 (#(4 25 #(c port) ())))
(497 gobble-line 475 332 (#(4 17 #(port) (#(8 17 #(loop) ())))))
(498 loop 497 9 (#(8 32 #(c) ())))
(499 define-sharp-macro 475 348 (#(4 21 #(c proc) ())))
(500 #f 475 362 (#(4 99 #(c port) (#(12 99 #(c) (#(49 99 #(c) (#(66 99 #(probe) ())))))))))
(501 #f 475 377 (#(4 9 #(c port) ())))
(502 #f 475 392 (#(4 10 #(c port) ())))
(503 #f 475 407 (#(4 123 #(c port) (#(13 123 #(c) (#(57 119 #(name) (#(91 119 #(temp##51) ())))))))))
(504 #f 475 422 (#(4 26 #(c port) ())))
(505 number-sharp-macro 475 434 (#(4 56 #(c port) (#(21 56 #(string) (#(35 56 #(temp##52) ())))))))
(506 #f 475 439 (#(4 14 #(c) ())))
(507 sub-read-token 475 453 (#(4 41 #(c port) (#(8 41 #(loop) ())))))
(508 loop 507 9 (#(4 78 #(l n) (#(10 78 #(c) (#(20 37 #(temp##53) ())))))))
(509 parse-token 475 461 (#(4 163 #(string port) (#(99 156 #(temp##57) ()) #(18 82 #(c) (#(32 82 #(temp##56) (#(49 82 #(temp##55) (#(66 82 #(temp##54) ())))))))))))
(510 reading-error 475 507 (#(7 41 #(port message irritants) ())))
(512 make-some-values-type 511 20 (#(4 75 #(types) (#(32 57 #(temp##58) ())))))
(513 some-values-type? 511 28 (#(4 23 #(type) ())))
(514 some-values-type-components 511 36 (#(4 31 #(type) ())))
(515 check-value-type 511 52 (#(4 42 #(type) ())))
(516 procedure-type 511 68 (#(4 262 #(domain codomain) (#(122 180 #(domain-list) ())))))
(517 #f 516 136 (#(4 11 #(type) ())))
(518 procedure-type? 511 76 (#(4 47 #(type) (#(35 47 #(temp##59) ())))))
(519 fixed-arity-procedure-type? 511 84 (#(4 39 #(type) (#(27 39 #(temp##60) ())))))
(520 procedure-type-codomain 511 92 (#(4 26 #(type) ())))
(521 procedure-type-domain 511 100 (#(4 61 #(type) ())))
(522 nargs->domain-list 511 108 (#(4 38 #(n) ())))
(523 procedure-type-argument-types 511 116 (#(4 61 #(type) ())))
(524 procedure-type-arity 511 124 (#(4 27 #(type) ())))
(525 variable-type 511 132 (#(4 26 #(type) ())))
(526 variable-type? 511 140 (#(4 23 #(type) ())))
(527 compatible-types? 511 156 (#(4 336 #(have-type want-type) (#(310 332 #(c1 c2) ())))))
(528 compatible-type-lists? 511 164 (#(4 128 #(l1 l2) (#(68 126 #(c1) (#(116 126 #(c2) ())))))))
(529 some-values-type 511 277 (#(5 12 #(types) ())))
(531 table-set-procedure 530 44 (#(4 12 #(r##61) ())))
(532 set-table-set-procedure! 530 52 (#(4 15 #(r##62 new##63) ())))
(533 table-ref-procedure 530 60 (#(4 12 #(r##64) ())))
(534 set-table-ref-procedure! 530 68 (#(4 15 #(r##65 new##66) ())))
(535 table-data 530 76 (#(4 12 #(r##67) ())))
(536 set-table-data! 530 84 (#(4 15 #(r##68 new##69) ())))
(537 table-size 530 92 (#(4 12 #(r##70) ())))
(538 set-table-size! 530 100 (#(4 15 #(r##71 new##72) ())))
(539 table-hash-function 530 108 (#(4 12 #(r##73) ())))
(540 make-table 530 133 (#(5 46 #(maybe-hash-function) (#(27 46 #(hash) ())))))
(541 table-ref 530 141 (#(4 19 #(table key) ())))
(542 table-set! 530 149 (#(4 22 #(table key val) ())))
(543 next-table-size 530 173 (#(4 63 #(count) (#(17 63 #(new-size) ())))))
(544 new-entry 530 188 (#(4 46 #(key val others) (#(13 46 #(v) ())))))
(545 get-entry 530 196 (#(4 50 #(entries key) ())))
(546 set-entry! 530 204 (#(4 58 #(entries key val) ())))
(547 for-each-entry 530 212 (#(4 67 #(proc entries) (#(21 65 #(data) ())))))
(548 linear-table-ref 530 220 (#(4 19 #(table key) ())))
(549 linear-table-set! 530 228 (#(4 68 #(table key val) (#(14 68 #(entries) ())))))
(550 linear-table-inc! 530 236 (#(4 102 #(table) (#(18 102 #(count) (#(48 102 #(data) ())))))))
(551 table-expand-table! 530 244 (#(4 30 #(table size) ())))
(552 table-enter-entries! 530 252 (#(4 14 #(table entries) ())))
(553 #f 552 5 (#(4 17 #(key val) ())))
(554 hash-table-ref 530 260 (#(4 49 #(table key) (#(14 49 #(data) ())))))
(555 hash-table-set! 530 268 (#(4 108 #(table key val) (#(14 108 #(data) (#(39 108 #(h) (#(49 108 #(entries) ())))))))))
(556 hash-table-inc! 530 276 (#(4 97 #(table) (#(18 97 #(count) (#(28 97 #(data) (#(35 97 #(size) (#(85 97 #(loop##76) ())))))))))))
(557 loop##74 556 86 (#(4 63 #(i) (#(22 63 #(temp##75) ())))))
(558 table-walk 530 284 (#(4 61 #(proc table) (#(14 61 #(data) (#(45 61 #(size) (#(49 61 #(loop##78) ())))))))))
(559 loop##77 558 50 (#(4 58 #(i) ())))
(560 default-table-hash-function 530 292 (#(4 106 #(obj) ())))
(562 operator-uid-maybe 561 64 (#(4 12 #(r##79) ())))
(563 set-operator-uid-maybe! 561 72 (#(4 15 #(r##80 new##81) ())))
(564 operator-transform 561 80 (#(4 12 #(r##82) ())))
(565 set-operator-transform! 561 88 (#(4 15 #(r##83 new##84) ())))
(566 operator-name 561 96 (#(4 12 #(r##85) ())))
(567 operator-type 561 104 (#(4 12 #(r##86) ())))
(568 #f 561 133 (#(4 27 #(s) ())))
(569 get-operator 561 144 (#(7 202 #(name type-option) (#(43 202 #(type probe) (#(187 202 #(op) ()) #(143 172 #(temp##87) ()) #(67 130 #(previous-type) ())))))))
(570 operator-uid 561 152 (#(4 131 #(op) (#(14 131 #(temp##88) (#(27 131 #(uid) ())))))))
(571 make-operator-table 561 202 (#(7 60 #(default mumble-option) (#(17 60 #(v) ())))))
(572 operator-lookup 561 218 (#(4 21 #(table op) ())))
(573 operator-define! 561 226 (#(4 66 #(table name proc) ())))
(574 node-plist 561 274 (#(4 12 #(r##89) ())))
(575 set-node-plist! 561 282 (#(4 15 #(r##90 new##91) ())))
(576 node-form 561 290 (#(4 12 #(r##92) ())))
(577 node-operator-id 561 298 (#(4 12 #(r##93) ())))
(578 make-node 561 323 (#(4 26 #(operator form) ())))
(579 #f 561 335 (#(4 34 #(n) ())))
(580 node-ref 561 346 (#(4 39 #(node key) (#(26 39 #(probe) ())))))
(581 node-set! 561 354 (#(4 96 #(node key value) (#(77 96 #(loop) ()) #(31 73 #(probe) ())))))
(582 loop 581 78 (#(4 75 #(l prev) ())))
(583 node-operator 561 362 (#(4 17 #(node) ())))
(584 node-predicate 561 370 (#(7 36 #(name type-option) (#(33 36 #(id) ())))))
(585 #f 584 34 (#(4 16 #(node) ())))
(586 make-similar-node 561 378 (#(4 49 #(node form) ())))
(587 generated-parent-name 561 426 (#(4 12 #(r##94) ())))
(588 generated-env 561 434 (#(4 12 #(r##95) ())))
(589 generated-token 561 442 (#(4 12 #(r##96) ())))
(590 generated-symbol 561 450 (#(4 12 #(r##97) ())))
(591 #f 561 479 (#(4 19 #(name) ())))
(592 generate-name 561 490 (#(4 19 #(symbol env parent-name) ())))
(593 name->symbol 561 498 (#(4 66 #(name) (#(19 66 #(uid) ())))))
(594 #f 561 503 (#(440 443 #(operator/with-aliases) ()) #(374 377 #(operator/call) ()) #(344 347 #(op) ())))
(595 name-hash 594 12 (#(4 66 #(name) ())))
(596 desyntaxify 594 20 (#(4 317 #(thing) (#(238 257 #(new) (#(242 257 #(loop) ()))) #(171 211 #(x y) ()) #(22 82 #(temp##101) (#(39 82 #(temp##100) (#(53 82 #(temp##99) (#(69 82 #(temp##98) ())))))))))))
(597 loop 596 243 (#(4 101 #(i same?) (#(57 101 #(x) ())))))
(598 make-immutable 594 28 (#(4 10 #(thing) ())))
(599 transform-id 594 76 (#(4 12 #(r##102) ())))
(600 transform-source 594 84 (#(4 12 #(r##103) ())))
(601 transform-aux-names 594 92 (#(4 12 #(r##104) ())))
(602 transform-type 594 100 (#(4 12 #(r##105) ())))
(603 transform-env 594 108 (#(4 12 #(r##106) ())))
(604 transform-procedure 594 116 (#(4 12 #(r##107) ())))
(605 make-transform 594 141 (#(4 60 #(thing env type source id) ())))
(606 #f 594 153 (#(4 19 #(m) ())))
(607 maybe-transform 594 164 (#(4 105 #(t exp env-of-use) (#(13 105 #(token) (#(33 105 #(new-env) (#(66 105 #(rename) (#(71 105 #(compare) ())))))))))))
(608 compare 607 67 (#(4 91 #(name1 name2) (#(21 91 #(temp##108) ())))))
(609 bind-aliases 594 172 (#(4 27 #(token t env-of-use) (#(14 27 #(env-of-definition) ())))))
(610 #f 609 22 (#(4 55 #(name) ())))
(611 make-name-generator 594 180 (#(4 12 #(env token parent-name) (#(9 12 #(alist) ())))))
(612 #f 611 10 (#(4 114 #(symbol) (#(28 86 #(probe) (#(65 86 #(new-name) ())))))))
(613 same-denotation? 594 188 (#(4 64 #(x y) (#(21 64 #(temp##109) ())))))
(614 binding-type 594 204 (#(4 12 #(b) ())))
(615 binding-place 594 212 (#(4 12 #(b) ())))
(616 binding-static 594 220 (#(4 12 #(b) ())))
(617 really-make-binding 594 228 (#(4 37 #(type place static) (#(14 37 #(b) ())))))
(618 make-binding 594 236 (#(7 117 #(type-or-static place static-option) ())))
(619 clobber-binding! 594 244 (#(4 44 #(b type place static) ())))
(620 binding-transform 594 252 (#(4 33 #(b) (#(14 33 #(foo) ())))))
(621 impose-type 594 260 (#(4 100 #(type b integrate?) (#(39 65 #(type) ())))))
(622 forget-integration 594 268 (#(4 43 #(b) ())))
(623 classify 594 276 (#(4 322 #(form env) (#(55 203 #(op-node) (#(86 190 #(probe) (#(121 177 #(s) ())))))))))
(624 classify-literal 594 345 (#(4 14 #(exp) ())))
(625 classify-call 594 375 (#(4 40 #(proc-node exp env) ())))
(626 classify-name 594 384 (#(4 100 #(name env) (#(18 100 #(binding) (#(52 100 #(node) ())))))))
(627 classify-macro-application 594 412 (#(4 20 #(t form env-of-use) ())))
(628 #f 627 14 ())
(629 classify-transform-application 594 441 (#(4 25 #(t form env-of-use lose) ())))
(630 #f 629 5 (#(4 73 #(new-form new-env token) ())))
(631 maybe-transform-call 594 450 (#(4 127 #(proc-node node env) (#(37 124 #(b) (#(54 121 #(s) ())))))))
(632 #f 631 83 ())
(633 classify-operator-form 594 458 (#(4 69 #(op op-node form env) ())))
(634 #f 594 470 (#(4 23 #(op op-node form env) ())))
(635 define-classifier 594 483 (#(4 29 #(name proc) ())))
(636 #f 594 495 (#(4 41 #(op op-node exp env) ())))
(637 #f 594 503 (#(176 179 #(operator/quote) ()) #(127 130 #(op) ()) #(76 79 #(operator/lambda operator/unassigned) ())))
(638 #f 637 8 (#(4 76 #(op op-node exp env) ())))
(639 #f 637 77 (#(4 149 #(op op-node form env) (#(22 144 #(pat) ())))))
(640 unspecific-node 637 128 ())
(641 #f 637 141 (#(4 172 #(op op-node form env) (#(30 172 #(struct-node lose) (#(88 168 #(b) ())))))))
(642 lose 641 26 ())
(643 #f 637 177 (#(4 35 #(op op-node form env) ())))
(644 lookup 637 189 (#(4 11 #(env name) ())))
(645 bind1 637 197 (#(4 7 #(name binding env) ())))
(646 #f 645 5 (#(4 23 #(a-name) ())))
(647 bind 637 205 (#(4 56 #(names bindings env) ())))
(648 bindrec 637 213 (#(4 36 #(names env->bindings env) ())))
(649 #f 648 16 (#(4 11 #(a-name) ())))
(650 literal? 637 221 (#(4 55 #(exp) (#(10 55 #(temp##112) (#(24 55 #(temp##111) (#(39 55 #(temp##110) ())))))))))
(651 number-of-required-args 637 229 (#(4 23 #(formals) (#(8 23 #(loop##114) ())))))
(652 loop##113 651 9 (#(4 40 #(l i) ())))
(653 n-ary? 637 237 (#(4 35 #(formals) ())))
(654 normalize-formals 637 245 (#(4 54 #(formals) ())))
(655 syntax? 637 253 (#(4 58 #(d) ())))
(656 name? 637 261 (#(4 26 #(thing) (#(11 26 #(temp##115) ())))))
(657 define-usual-suspects 637 293 (#(4 104 #(table mumble) ())))
(658 #f 657 31 (#(4 81 #(node env) (#(14 81 #(form) (#(25 81 #(specs) ())))))))
(659 #f 658 61 (#(4 55 #(spec) ())))
(660 #f 657 70 (#(4 69 #(node env) (#(14 69 #(form) (#(25 69 #(specs) ())))))))
(661 #f 660 57 (#(4 14 #(new-env) ())))
(662 #f 661 5 (#(4 53 #(spec) ())))
(663 #f 657 93 (#(4 81 #(node env) (#(14 81 #(form) ())))))
(664 process-syntax 637 301 (#(4 123 #(form env name p) (#(104 123 #(thing) ()) #(29 84 #(probe) ())))))
(665 #f 664 58 (#(4 7 #(x) ())))
(666 bind-evaluator-for-syntax 637 309 (#(4 7 #(eval-for-syntax env) ())))
(667 #f 666 5 (#(4 23 #(kludge) ())))
(668 evaluator-for-syntax 637 317 (#(4 11 #(env) ())))
(669 scan-body 637 342 (#(4 64 #(forms env cont) (#(17 35 #(temp##116) ())))))
(670 #f 669 58 (#(4 14 #(defs exps env) ())))
(671 scan-body-forms 637 350 (#(4 188 #(forms env defs cont) (#(52 188 #(node forms) (#(89 114 #(name) ())))))))
(672 #f 671 163 (#(4 70 #(new-defs exps env) ())))
(673 body-lossage 637 358 (#(4 23 #(node) ())))
(674 schemify 637 406 (#(4 38 #(node) ())))
(675 #f 637 418 (#(4 41 #(node) (#(14 41 #(form) ())))))
(676 define-schemifier 637 431 (#(4 17 #(name proc) ())))
(677 #f 637 446 (#(4 16 #(node) ())))
(678 #f 637 464 (#(4 25 #(node) ())))
(679 #f 637 494 (#(4 65 #(node) (#(14 65 #(form) ())))))
(680 #f 679 22 (#(4 37 #(spec) ())))
(681 ok-number-of-args? 637 505 (#(4 49 #(form type) ())))
(683 make-population 682 4 ())
(684 add-to-population! 682 12 (#(4 89 #(x pop) ())))
(685 weak-memq 682 20 (#(4 46 #(x weaks) ())))
(686 population-reduce 682 28 (#(4 29 #(cons nil pop) (#(8 29 #(loop##118) ())))))
(687 loop##117 686 9 (#(4 75 #(l prev m) (#(40 70 #(w) ())))))
(688 population->list 682 36 (#(4 17 #(pop) ())))
(689 walk-population 682 44 (#(4 16 #(proc pop) ())))
(690 #f 689 5 (#(4 11 #(thing junk) ())))
(692 interface-name 691 44 (#(4 12 #(r##119) ())))
(693 interface-clients 691 52 (#(4 12 #(r##120) ())))
(694 walk-method 691 60 (#(4 12 #(r##121) ())))
(695 ref-method 691 68 (#(4 12 #(r##122) ())))
(696 #f 691 97 (#(4 19 #(int) ())))
(697 interface-ref 691 108 (#(4 16 #(int name) ())))
(698 for-each-declaration 691 116 (#(4 16 #(proc int) ())))
(699 note-reference-to-interface! 691 124 (#(4 31 #(int thing) (#(14 31 #(pop) ())))))
(700 make-interface 691 132 (#(4 35 #(ref walk name) ())))
(701 make-simple-interface 691 140 (#(4 64 #(name items) (#(18 64 #(table) ())))))
(702 #f 701 23 (#(4 93 #(item) (#(28 80 #(name type) (#(41 54 #(temp##123) ())))))))
(703 #f 702 58 (#(4 18 #(name) ())))
(704 really-make-simple-interface 691 148 (#(4 17 #(table name) ())))
(705 #f 704 5 (#(4 14 #(name) ())))
(706 #f 704 8 (#(4 14 #(proc) ())))
(707 make-compound-interface 691 156 (#(7 45 #(name ints) (#(27 45 #(int) ())))))
(708 #f 707 12 (#(4 20 #(name) (#(8 20 #(loop) ())))))
(709 loop 708 9 (#(4 55 #(ints) (#(37 55 #(temp##124) ())))))
(710 #f 707 15 (#(4 14 #(proc) ())))
(711 #f 710 5 (#(4 16 #(int) ())))
(712 #f 707 32 (#(4 14 #(i) ())))
(714 structure-name 713 44 (#(4 12 #(r##125) ())))
(715 structure-clients 713 52 (#(4 12 #(r##126) ())))
(716 structure-package 713 60 (#(4 12 #(r##127) ())))
(717 structure-interface-really 713 68 (#(4 12 #(r##128) ())))
(718 set-structure-interface! 713 76 (#(4 15 #(r##129 new##130) ())))
(719 structure-interface-thunk 713 84 (#(4 12 #(r##131) ())))
(720 #f 713 113 (#(4 32 #(s) ())))
(721 structure-interface 713 124 (#(4 42 #(s) (#(14 42 #(temp##132) ())))))
(722 initialize-structure! 713 132 (#(4 67 #(s) (#(20 67 #(sig) ())))))
(723 make-structure 713 140 (#(4 121 #(package sig-thunk name) (#(98 121 #(struct) ())))))
(724 #f 723 75 ())
(725 structure-unstable? 713 148 (#(4 16 #(struct) ())))
(726 for-each-export 713 156 (#(4 30 #(proc struct) (#(18 30 #(sig) ())))))
(727 #f 726 19 (#(4 101 #(name want-type) (#(24 101 #(binding) (#(61 87 #(type) ())))))))
(729 package-loaded? 728 4 (#(4 12 #(r##133) ())))
(730 set-package-loaded?! 728 12 (#(4 15 #(r##134 new##135) ())))
(731 package-cached 728 20 (#(4 12 #(r##136) ())))
(732 package-seen 728 28 (#(4 12 #(r##137) ())))
(733 package-clients 728 36 (#(4 12 #(r##138) ())))
(734 package-plist 728 44 (#(4 12 #(r##139) ())))
(735 set-package-plist! 728 52 (#(4 15 #(r##140 new##141) ())))
(736 package-clauses 728 60 (#(4 12 #(r##142) ())))
(737 package-file-name 728 68 (#(4 12 #(r##143) ())))
(738 package-integrate? 728 76 (#(4 12 #(r##144) ())))
(739 set-package-integrate?! 728 84 (#(4 15 #(r##145 new##146) ())))
(740 package-for-syntax-promise 728 92 (#(4 12 #(r##147) ())))
(741 package-evaluator 728 100 (#(4 12 #(r##148) ())))
(742 package-get-location 728 108 (#(4 12 #(r##149) ())))
(743 set-package-get-location! 728 116 (#(4 15 #(r##150 new##151) ())))
(744 package-definitions 728 124 (#(4 12 #(r##152) ())))
(745 package-accesses-thunk 728 132 (#(4 12 #(r##153) ())))
(746 package-opens-thunk 728 140 (#(4 12 #(r##154) ())))
(747 set-package-opens-thunk! 728 148 (#(4 15 #(r##155 new##156) ())))
(748 package-opens-really 728 156 (#(4 12 #(r##157) ())))
(749 set-package-opens! 728 164 (#(4 15 #(r##158 new##159) ())))
(750 package-uid 728 172 (#(4 12 #(r##160) ())))
(751 #f 728 201 (#(4 64 #(p) (#(26 64 #(name) ())))))
(752 make-package 728 212 (#(4 141 #(opens-thunk accesses-thunk evaluator for-syntax-promise dir clauses name) (#(106 141 #(p) ())))))
(753 package-for-syntax 728 220 (#(4 13 #(p) ())))
(754 new-package-uid 728 228 (#(7 18 #(uid) ())))
(755 package-name 728 258 (#(4 19 #(package) ())))
(756 set-package-name! 728 266 (#(4 22 #(package name) ())))
(757 make-simple-package 728 274 (#(7 116 #(opens evaluator efs-promise name-option) (#(103 116 #(p) ())))))
(758 #f 757 60 ())
(759 #f 757 63 ())
(760 package-opens 728 282 (#(4 42 #(p) (#(14 42 #(temp##161) ())))))
(761 package-accesses 728 290 (#(4 13 #(p) ())))
(762 package-definition 728 306 (#(4 53 #(p name) (#(26 53 #(probe) ())))))
(763 package-define! 728 314 (#(7 122 #(p name type-or-static place-option) (#(28 122 #(place) ())))))
(764 really-package-define! 728 322 (#(4 188 #(p name type place static) (#(26 188 #(probe) (#(107 188 #(place) ()) #(71 104 #(temp##163) (#(84 104 #(temp##162) ())))))))))
(765 package-lookup 728 330 (#(7 42 #(p name integrate?-option) ())))
(766 really-package-lookup 728 338 (#(4 90 #(p name integrate?) (#(21 90 #(probe) (#(69 90 #(loop) ())))))))
(767 loop 766 70 (#(4 62 #(opens) (#(42 62 #(probe) ())))))
(768 structure-lookup 728 346 (#(4 88 #(struct name integrate?) (#(32 88 #(type) (#(62 85 #(probe) ())))))))
(769 lookup-generated-name 728 354 (#(4 24 #(ignore-env name) ())))
(770 generic-lookup 728 362 (#(4 97 #(env name) ())))
(771 package->environment 728 370 (#(4 14 #(p) ())))
(772 #f 771 5 (#(4 35 #(form env) (#(20 35 #(f) ())))))
(773 #f 771 8 (#(4 14 #(name) ())))
(774 package-lookup-type 728 378 (#(4 38 #(p name) (#(21 38 #(probe) ())))))
(775 initialize-package! 728 386 (#(4 66 #(p) (#(24 44 #(opens) ())))))
(776 #f 775 35 (#(4 40 #(struct) ())))
(777 #f 775 46 (#(4 28 #(name+struct) ())))
(778 initialize-reified-package! 728 394 (#(4 27 #(p names locs get-location) (#(11 27 #(end) (#(15 27 #(loop##166) ())))))))
(779 loop##164 778 16 (#(4 118 #(i) (#(13 118 #(temp##165) (#(36 106 #(name) (#(54 106 #(probe) ())))))))))
(780 for-each-definition 728 402 (#(4 19 #(proc p) ())))
(781 #f 780 5 (#(4 43 #(name stuff) ())))
(782 get-new-location 728 410 (#(4 19 #(p name) ())))
(783 make-new-location 728 418 (#(4 62 #(p name) (#(9 62 #(uid) ())))))
(784 flush-location-names 728 465 ())
(785 package-get 728 473 (#(4 39 #(p ind) (#(26 39 #(temp##167) ())))))
(786 package-put! 728 481 (#(4 73 #(p ind val) (#(26 73 #(temp##168) (#(36 45 #(z) ())))))))
(787 package-note-caching 728 489 (#(4 90 #(p name place) (#(57 78 #(loop) ())))))
(788 loop 787 58 (#(4 109 #(opens) ())))
(790 environment-ref 789 4 (#(4 76 #(package name) (#(21 76 #(binding) ())))))
(791 environment-set! 789 12 (#(4 139 #(package name value) (#(21 139 #(binding) ())))))
(792 environment-define! 789 20 (#(4 28 #(package name value) ())))
(793 *structure-ref 789 28 (#(4 78 #(struct name) (#(23 78 #(binding) ())))))
(794 contents-carefully 789 36 (#(4 147 #(binding env name) (#(79 119 #(loc) ())))))
(795 interaction-environment 789 60 ())
(796 set-interaction-environment! 789 68 (#(4 41 #(p) ())))
(797 with-interaction-environment 789 76 (#(4 57 #(p thunk) ())))
(798 scheme-report-environment 789 84 (#(4 32 #(n) ())))
(799 set-scheme-report-environment! 789 107 (#(4 13 #(repnum env) ())))
(800 make-package-for-syntax 789 115 (#(4 17 #(eval structs) (#(8 17 #(recur) ())))))
(801 recur 800 9 ())
(802 #f 801 13 ())
(804 define-usual-macro 803 18 (#(4 23 #(name proc aux-names) ())))
(805 #f 804 11 (#(4 20 #(exp rename compare) ())))
(806 usual-transform 803 26 (#(4 14 #(name) ())))
(807 #f 803 38 (#(7 93 #(rename compare conjuncts) ())))
(808 #f 803 56 (#(7 52 #(rename compare clauses) (#(30 52 #(result) ()) #(15 27 #(recur) ())))))
(809 recur 808 16 (#(4 376 #(clauses) (#(34 371 #(clause more-clauses) (#(198 309 #(temp) ())))))))
(810 #f 803 74 (#(7 204 #(rename compare specs end body) (#(57 204 #(%loop %letrec %lambda %cond) ())))))
(811 #f 810 105 (#(4 37 #(y) ())))
(812 #f 803 92 (#(7 233 #(rename compare specs body) (#(130 211 #(tag specs body %letrec %lambda) ())))))
(813 #f 803 110 (#(7 128 #(rename compare specs body) (#(20 38 #(temp##169) ())))))
(814 #f 803 128 (#(7 152 #(rename compare disjuncts) (#(50 152 #(temp) ())))))
(815 #f 803 146 (#(7 132 #(rename compare key clauses) (#(57 132 #(temp %eqv? %memv %quote) ())))))
(816 #f 815 107 (#(4 158 #(clause) ())))
(817 #f 803 160 (#(4 170 #(rename compare x) (#(32 170 #(interesting-to-quasiquote? descend-quasiquote-vector descend-quasiquote-pair descend-quasiquote finalize-quasiquote expand-quasiquote %list->vector %cons %append %unquote-splicing %unquote %quasiquote %quote) ())))))
(818 interesting-to-quasiquote? 817 33 (#(4 26 #(x marker) ())))
(819 descend-quasiquote-vector 817 38 (#(4 26 #(x level return) ())))
(820 #f 819 20 (#(4 61 #(mode arg) (#(9 61 #(temp##170) ())))))
(821 descend-quasiquote-pair 817 43 (#(4 20 #(x level return) ())))
(822 #f 821 14 (#(4 20 #(car-mode car-arg) ())))
(823 #f 822 14 (#(4 162 #(cdr-mode cdr-arg) ())))
(824 descend-quasiquote 817 48 (#(4 215 #(x level return) ())))
(825 finalize-quasiquote 817 53 (#(4 68 #(mode arg) ())))
(826 expand-quasiquote 817 58 (#(4 17 #(x level) ())))
(828 #f 827 8 (#(7 88 #(r c subkeywords rules) ())))
(829 process-rules 827 22 (#(4 389 #(rules subkeywords r c) (#(62 389 #(free-meta-variables meta-variables process-template process-pattern process-segment-match process-match process-rule make-transformer %temp %tail %rename %quote %pair? %map %let* %let %lambda %input %equal? %eq? %else %cons %cond %compare %cdr %car %and %append) ())))))
(830 free-meta-variables 829 63 (#(4 215 #(template dim env free) (#(65 89 #(probe) ())))))
(831 meta-variables 829 68 (#(4 131 #(pattern dim vars) ())))
(832 process-template 829 73 (#(4 404 #(template dim env) (#(145 325 #(vars) (#(191 325 #(x) (#(259 325 #(gen) ()))))) #(35 101 #(probe) ())))))
(833 process-pattern 829 78 (#(4 176 #(pattern path mapit) ())))
(834 #f 833 90 (#(4 67 #(x) ())))
(835 process-segment-match 829 83 (#(4 144 #(input pattern) (#(21 144 #(conjuncts) ())))))
(836 process-match 829 88 (#(4 386 #(input pattern) (#(271 305 #(temp##172) (#(293 305 #(temp##171) ())))))))
(837 process-rule 829 93 (#(4 170 #(rule) (#(64 160 #(pattern template) ())))))
(838 #f 837 99 (#(4 7 #(x) ())))
(839 make-transformer 829 98 (#(4 139 #(rules) ())))
(840 segment-pattern? 827 30 (#(4 53 #(pattern) (#(33 51 #(temp##173) ())))))
(841 segment-template? 827 38 (#(4 41 #(pattern) ())))
(842 find-free-names-in-syntax-rules 827 72 (#(4 39 #(subkeywords rules) (#(10 39 #(free-names meta-variables) (#(24 39 #(loop##176) ())))))))
(843 free-names 842 11 (#(4 167 #(template vars names) (#(39 57 #(temp##174) ())))))
(844 meta-variables 842 16 (#(4 130 #(pattern vars) ())))
(845 loop##175 842 25 (#(4 78 #(rules names) (#(34 73 #(rule) ())))))
(847 namestring 846 4 (#(4 235 #(namelist dir default-type) (#(40 235 #(namelist) (#(82 235 #(subdirs) (#(93 235 #(basename) (#(139 235 #(type) (#(149 160 #(temp##177) ())))))))))))))
(848 #f 847 173 (#(4 23 #(subdir) ())))
(849 namestring-component 846 28 (#(4 74 #(x) ())))
(850 file-name-directory 846 60 (#(4 26 #(filename) ())))
(851 file-name-nondirectory 846 68 (#(4 28 #(filename) ())))
(852 file-nondirectory-position 846 76 (#(4 26 #(filename) (#(8 26 #(loop) ())))))
(853 loop 852 9 (#(4 56 #(i) ())))
(854 string-posq 846 84 (#(4 20 #(thing s) (#(8 20 #(loop) ())))))
(855 loop 854 9 (#(4 54 #(i) ())))
(856 translations 846 100 ())
(857 set-translation! 846 108 (#(4 52 #(from to) (#(21 52 #(probe) ())))))
(858 translate 846 116 (#(4 27 #(name) (#(11 27 #(len) (#(15 27 #(loop) ())))))))
(859 loop 858 16 (#(4 142 #(ts) (#(28 142 #(from) (#(39 142 #(to) (#(46 142 #(k) ())))))))))
(860 #f #f #f (#(204 207 #(operator/define operator/primitive-procedure) ()) #(95 98 #(begin-node? define-node? define-syntax-node?) ())))
(861 scan-forms 860 21 (#(7 97 #(forms p filename env-option) (#(38 97 #(env) ())))))
(862 #f 861 91 ())
(863 scan-file 860 29 (#(7 81 #(pathname p env-option) (#(38 81 #(env) (#(57 81 #(filename) (#(71 81 #(truename) ())))))))))
(864 #f 863 75 (#(4 64 #(port) ())))
(865 #f 864 58 (#(16 75 #(o-port) (#(54 75 #(result) ()) #(42 51 #(recur) ())))))
(866 recur 865 43 (#(16 58 #(form) ())))
(867 scan-form-list 860 37 (#(4 20 #(forms p env) (#(8 20 #(loop) ())))))
(868 loop 867 9 (#(4 61 #(forms) (#(39 61 #(scanned-forms) ())))))
(869 scan-form 860 96 (#(4 158 #(form p env) (#(21 158 #(node) (#(80 111 #(form) ())))))))
(870 process-define-syntax 860 105 (#(4 123 #(form p env) (#(27 123 #(name source) ())))))
(871 eval-for-syntax 860 113 (#(4 35 #(p form) (#(20 35 #(f) ())))))
(872 scan-structures 860 121 (#(4 43 #(structs process-package? package-action) (#(24 43 #(out p-seen s-seen) (#(28 43 #(recur) ())))))))
(873 recur 872 29 (#(4 283 #(s) (#(51 281 #(p) (#(227 237 #(stuff) ())))))))
(874 #f 873 188 (#(4 15 #(name+struct) ())))
(875 #f 873 231 ())
(876 scan-package 860 129 (#(7 120 #(p env-option) (#(38 120 #(env) (#(43 120 #(stuff) (#(53 120 #(config-file) (#(76 120 #(dir) ())))))))))))
(877 #f 876 81 (#(4 231 #(clause) (#(12 231 #(temp##180) (#(146 231 #(temp##179) ()) #(117 134 #(temp##178) ())))))))
(878 #f 877 22 (#(4 61 #(file) (#(25 61 #(file) ())))))
(879 optimize 860 137 (#(4 187 #(stuff p) (#(57 184 #(optimizers) (#(102 184 #(names) (#(119 184 #(passes) ())))))))))
(880 #f 879 33 (#(4 14 #(clause) ())))
(881 #f 879 124 (#(4 7 #(x) ())))
(882 #f 879 137 (#(4 15 #(pass stuff) ())))
(883 check-structure 860 145 (#(4 57 #(s) (#(9 57 #(undefined) ())))))
(884 #f 883 14 (#(4 102 #(name want-type binding) (#(21 90 #(have-type) ())))))
(885 initialize-usual-transforms! 860 153 (#(4 14 #(p names) ())))
(886 #f 885 5 (#(4 71 #(name) ())))
(887 define-all-operators 860 161 (#(4 78 #(p) (#(9 78 #(procs) (#(55 78 #(nodes) ())))))))
(888 #f 887 14 (#(4 71 #(name op) (#(14 71 #(type) (#(27 45 #(temp##181) ())))))))
(889 #f 887 60 (#(4 43 #(name op) ())))
(890 make-define-primitive-node 860 205 (#(4 56 #(name) ())))
(891 get-optimizer 860 228 (#(4 14 #(name) ())))
(892 set-optimizer! 860 236 (#(4 17 #(name opt) ())))
(894 note-undefined! 893 20 (#(4 32 #(name) (#(18 32 #(note) ())))))
(895 noting-undefined-variables 893 28 (#(4 67 #(p thunk) (#(9 67 #(losers) (#(14 67 #(foo) (#(35 46 #(temp##182) ())))))))))
(896 foo 895 10 (#(4 99 #(env name) (#(21 99 #(probe) ())))))
(897 #f 895 44 (#(4 49 #(name) ())))
(898 #f 895 61 (#(13 31 #(result) ())))
(899 #f 898 18 (#(4 166 #(p+names) (#(12 166 #(env) (#(32 166 #(names) ())))))))
(900 #f 899 17 (#(4 23 #(name) ())))
(901 #f 899 133 (#(4 29 #(name) ())))
(903 enumerand->name 902 4 (#(4 12 #(e e-type) ())))
(904 name->enumerand 902 12 (#(4 20 #(e e-type) (#(8 20 #(loop) ())))))
(905 loop 904 9 (#(4 45 #(i) ())))
(906 definitely-name->enumerand 902 20 (#(4 57 #(e e-type e-type-name) (#(21 57 #(temp##183) ())))))
(912 node-type 911 4 (#(4 17 #(node env) ())))
(913 reconstruct 911 12 (#(4 44 #(node env constrained) ())))
(914 #f 911 24 (#(4 17 #(node env constrained) ())))
(915 define-reconstructor 911 37 (#(4 29 #(name type proc) ())))
(916 #f 911 52 (#(4 153 #(node env constrained) (#(14 153 #(form) (#(25 153 #(formals) (#(39 153 #(vars) (#(56 153 #(var-nodes) (#(102 153 #(cod) ())))))))))))))
(917 #f 916 44 (#(4 14 #(formal) ())))
(918 #f 916 131 (#(4 32 #(node) (#(21 32 #(temp##184) ())))))
(919 #f 911 87 (#(4 64 #(node env constrained) (#(21 64 #(probe) (#(53 64 #(temp##185) ())))))))
(920 reconstruct-call 911 98 (#(4 77 #(node env constrained) (#(53 77 #(op-type) ())))))
(921 #f 911 113 (#(4 16 #(node env constrained) ())))
(922 #f 911 131 (#(4 22 #(node env constrained) ())))
(923 #f 911 149 (#(4 96 #(node env constrained) (#(73 96 #(con-type alt-type) ())))))
(924 #f 911 167 (#(4 31 #(node env constrained) ())))
(925 #f 911 185 (#(4 7 #(node env constrained) ())))
(926 #f 911 203 (#(4 7 #(node env constrained) ())))
(927 #f 911 221 (#(4 32 #(node env constrained) ())))
(928 #f 911 239 (#(4 22 #(node env constrained) ())))
(929 node->type 911 250 (#(4 59 #(node) (#(28 52 #(form) ())))))
(930 #f 911 265 (#(4 7 #(node env constrained) ())))
(931 #f 911 283 (#(4 7 #(node env constrained) ())))
(932 constrain-call! 911 294 (#(4 147 #(node want-type env constrained) (#(21 145 #(exp) (#(104 145 #(op-type) ())))))))
(933 #f 932 44 (#(4 7 #(arg) ())))
(934 #f 932 119 (#(4 22 #(want-type arg) ())))
(935 constrain! 911 302 (#(4 267 #(arg want-type env constrained) (#(27 267 #(temp##188) (#(245 265 #(loop##187) ()) #(68 197 #(binding) (#(116 193 #(have-type) ())))))))))
(936 loop##186 935 246 (#(4 74 #(exps) ())))
(937 #f 911 368 (#(4 31 #(node env constrained) ())))
(938 #f 937 9 (#(4 17 #(node) ())))
(939 #f 911 428 (#(4 62 #(node env constrained) (#(38 62 #(proc-type) ())))))
(941 reconstruct-apply 940 4 (#(4 59 #(node env constrained) (#(35 59 #(proc-type) ())))))
(942 declare-operator-type 940 90 (#(4 38 #(ops type) ())))
(943 #f 942 19 (#(4 14 #(op) ())))
(944 last 940 470 (#(4 32 #(x) ())))
(945 constant-type 940 478 (#(4 94 #(x) ())))
(947 template-code 946 12 (#(4 12 #(tem) ())))
(948 template-info 946 20 (#(4 12 #(tem) ())))
(949 set-template-code! 946 28 (#(4 15 #(tem cv) ())))
(950 set-template-info! 946 36 (#(4 15 #(tem info) ())))
(952 segment->template 951 28 (#(4 176 #(segment name pc-in-parent) (#(17 176 #(cv) (#(40 176 #(astate) (#(54 176 #(parent-data) (#(101 176 #(name) (#(150 176 #(debug-data) ())))))))))))))
(953 #f 952 170 (#(21 72 #(maps) ())))
(954 segment-data->template 951 36 (#(4 76 #(cv debug-data literals) (#(27 76 #(template) (#(61 76 #(loop##190) ())))))))
(955 loop##189 954 62 (#(4 46 #(lits i) ())))
(956 astate-literals 951 84 (#(4 12 #(r##191) ())))
(957 set-astate-literals! 951 92 (#(4 15 #(r##192 new##193) ())))
(958 astate-count 951 100 (#(4 12 #(r##194) ())))
(959 set-astate-count! 951 108 (#(4 15 #(r##195 new##196) ())))
(960 astate-pc 951 116 (#(4 12 #(r##197) ())))
(961 set-astate-pc! 951 124 (#(4 15 #(r##198 new##199) ())))
(962 astate-code-vector 951 132 (#(4 12 #(r##200) ())))
(963 make-astate 951 140 (#(4 20 #(cv) ())))
(964 emit-byte! 951 148 (#(4 44 #(a byte) ())))
(965 emit-literal! 951 156 (#(4 143 #(a thing) (#(41 138 #(probe count) ())))))
(966 emit-segment! 951 164 (#(4 14 #(astate segment) ())))
(967 #f 951 175 (#(4 6 #(astate) ())))
(968 instruction 951 186 (#(7 29 #(opcode operands) ())))
(969 #f 968 24 (#(4 29 #(astate) ())))
(970 #f 969 20 (#(4 14 #(operand) ())))
(971 sequentially 951 194 (#(5 18 #(segments) ())))
(972 sequentially-2 951 202 (#(4 47 #(seg1 seg2) ())))
(973 #f 972 42 (#(4 29 #(astate) ())))
(974 instruction-with-literal 951 210 (#(4 13 #(opcode thing) ())))
(975 #f 974 8 (#(4 29 #(astate) ())))
(976 instruction-with-location 951 218 (#(4 13 #(opcode thunk) ())))
(977 #f 976 8 (#(4 35 #(astate) ())))
(978 instruction-with-template 951 226 (#(4 13 #(opcode segment name) ())))
(979 #f 978 8 (#(4 49 #(astate) ())))
(980 make-label 951 234 ())
(981 instruction-using-label 951 242 (#(7 42 #(opcode label rest) (#(30 42 #(segment) ())))))
(982 #f 981 37 (#(4 80 #(astate) (#(18 80 #(instr) ())))))
(983 attach-label 951 250 (#(4 16 #(label segment) ())))
(984 #f 983 11 (#(4 58 #(astate) (#(22 58 #(pc cv) ())))))
(985 #f 984 27 (#(4 62 #(instr+origin) (#(18 62 #(instr origin) (#(27 62 #(offset) ())))))))
(986 note-source-code 951 294 (#(4 30 #(info segment) ())))
(987 #f 986 22 (#(4 66 #(astate) (#(33 66 #(dd) ())))))
(988 note-environment 951 302 (#(4 30 #(vars segment) ())))
(989 #f 988 22 (#(4 101 #(astate) (#(14 101 #(pc-before) (#(31 101 #(env-maps) ())))))))
(990 emit-with-environment-maps! 951 310 (#(4 30 #(astate segment) ())))
(991 #f 990 24 ())
(993 new-template-uid 992 4 (#(7 18 #(uid) ())))
(994 template-uid 992 20 ())
(995 set-template-uid! 992 28 (#(4 9 #(uid) ())))
(996 debug-flag-accessor 992 128 (#(4 24 #(name) (#(21 24 #(access) ())))))
(997 #f 996 22 ())
(998 debug-flag-modifier 992 136 (#(4 24 #(name) (#(21 24 #(modify) ())))))
(999 #f 998 22 (#(4 23 #(new) ())))
(1000 with-fresh-compiler-state 992 246 (#(4 58 #(thunk) ())))
(1001 #f 1000 52 ())
(1002 #f 1001 3 ())
(1003 #f 1001 6 (#(4 9 #(s) ())))
(1004 saving-and-restoring 992 254 (#(4 22 #(fetch store! other thunk) (#(9 22 #(swap) ())))))
(1005 swap 1004 5 (#(13 31 #(temp) ())))
(1007 debug-data-source 1006 44 (#(4 12 #(r##201) ())))
(1008 set-debug-data-source! 1006 52 (#(4 15 #(r##202 new##203) ())))
(1009 debug-data-env-maps 1006 60 (#(4 12 #(r##204) ())))
(1010 set-debug-data-env-maps! 1006 68 (#(4 15 #(r##205 new##206) ())))
(1011 debug-data-pc-in-parent 1006 76 (#(4 12 #(r##207) ())))
(1012 debug-data-parent 1006 84 (#(4 12 #(r##208) ())))
(1013 debug-data-name 1006 92 (#(4 12 #(r##209) ())))
(1014 debug-data-uid 1006 100 (#(4 12 #(r##210) ())))
(1015 new-debug-data 1006 125 (#(4 32 #(name parent pc-in-parent) ())))
(1016 #f 1006 137 (#(4 27 #(dd) ())))
(1017 debug-data->info 1006 148 (#(4 60 #(debug-data) ())))
(1018 get-debug-data 1006 156 (#(4 45 #(info) ())))
(1019 note-debug-data! 1006 164 (#(4 28 #(dd) ())))
(1020 interesting-debug-data? 1006 172 (#(4 116 #(debug-data) (#(28 114 #(temp##213) (#(55 114 #(temp##212) (#(86 114 #(temp##211) ())))))))))
(1021 debug-data-names 1006 180 (#(4 54 #(info) (#(18 54 #(dd) ())))))
(1022 template-debug-data 1006 188 (#(4 20 #(tem) ())))
(1023 template-id 1006 196 (#(4 43 #(tem) (#(18 43 #(info) ())))))
(1024 template-name 1006 204 (#(4 33 #(tem) (#(18 33 #(probe) ())))))
(1025 template-names 1006 212 (#(4 20 #(tem) ())))
(1027 compile-top 1026 4 (#(4 35 #(exp cenv depth cont) ())))
(1028 compile 1026 12 (#(4 74 #(exp cenv depth cont) (#(21 74 #(node) (#(48 74 #(node) ())))))))
(1029 #f 1026 32 (#(4 26 #(node cenv depth cont) ())))
(1030 #f 1026 35 (#(4 7 #(frob) ())))
(1031 #f 1030 5 (#(4 22 #(node cenv depth cont) ())))
(1032 #f 1031 5 (#(4 20 #(form cenv) ())))
(1033 define-compilator 1026 48 (#(4 17 #(name proc) ())))
(1034 #f 1026 63 (#(4 54 #(node cenv depth cont) (#(14 54 #(obj) ())))))
(1035 #f 1026 81 (#(4 40 #(node cenv depth cont) (#(14 40 #(exp) (#(27 40 #(obj) ())))))))
(1036 compile-constant 1026 92 (#(4 41 #(obj depth cont) ())))
(1037 #f 1026 107 (#(4 216 #(node cenv depth cont) (#(21 216 #(binding) (#(31 216 #(name) (#(68 173 #(level+over) (#(90 173 #(back) (#(98 173 #(over) (#(103 173 #(temp##214) ())))))))))))))))
(1038 #f 1026 137 (#(4 228 #(node cenv depth cont) (#(14 228 #(exp) (#(37 228 #(lhs-node) (#(47 228 #(name) (#(65 228 #(binding) (#(145 178 #(level+over) ())))))))))))))
(1039 #f 1026 167 (#(4 234 #(node cenv depth cont) (#(36 234 #(exp alt-label join-label) ())))))
(1040 #f 1026 197 (#(4 33 #(node cenv depth cont) (#(14 33 #(exp) ())))))
(1041 compile-begin 1026 208 (#(4 65 #(exp-list cenv depth cont) (#(46 65 #(dummy) (#(50 65 #(loop) ())))))))
(1042 loop 1041 51 (#(4 110 #(exp-list i) ())))
(1043 compile-call 1026 216 (#(4 207 #(node cenv depth cont) (#(14 207 #(exp) (#(22 207 #(proc-node) (#(158 207 #(new-node) ()) #(56 109 #(formals) ())))))))))
(1044 #f 1026 256 (#(137 140 #(operator/lambda operator/set! operator/unassigned) ())))
(1045 compile-redex 1044 4 (#(4 140 #(proc-node args cenv depth cont) (#(14 140 #(proc-exp) (#(25 140 #(formals) (#(36 140 #(body) ())))))))))
(1046 compile-unknown-call 1044 12 (#(4 140 #(node cenv depth cont) (#(14 140 #(exp) (#(127 140 #(call) ())))))))
(1047 maybe-push-continuation 1044 20 (#(4 90 #(code depth cont) (#(32 90 #(label) ())))))
(1048 push-arguments 1044 28 (#(4 48 #(node cenv depth) (#(18 48 #(exp) (#(22 48 #(recur) ())))))))
(1049 recur 1048 23 (#(4 98 #(args depth i) ())))
(1050 push-all-with-names 1044 36 (#(4 96 #(exp-list names cenv depth) ())))
(1051 #f 1044 63 (#(4 75 #(node cenv depth cont) (#(26 75 #(exp name) ())))))
(1052 compile-lambda 1044 74 (#(4 118 #(exp cenv body-name) (#(15 118 #(formals) (#(29 118 #(nargs) ())))))))
(1053 compile-lambda-code 1044 82 (#(4 214 #(formals body cenv name) (#(146 209 #(vars) (#(175 209 #(cenv) ()))) #(53 127 #(nargs) ())))))
(1054 compile-letrec 1044 138 (#(4 168 #(node cenv depth cont) (#(14 168 #(exp) (#(25 168 #(specs) (#(36 168 #(body) ())))))))))
(1055 #f 1054 71 (#(4 21 #(spec) ())))
(1056 #f 1054 142 (#(4 15 #(spec) ())))
(1057 compile-body 1044 177 (#(4 17 #(body cenv depth cont) ())))
(1058 #f 1057 11 (#(4 81 #(defs exps) ())))
(1059 #f 1058 44 (#(4 15 #(node) ())))
(1060 make-cont 1044 202 (#(4 13 #(seg source-info) ())))
(1061 return-cont 1044 258 (#(4 13 #(name) ())))
(1062 return-cont? 1044 266 (#(4 14 #(cont) ())))
(1063 fall-through-cont 1044 274 (#(4 19 #(exp i) ())))
(1064 fall-through-cont? 1044 282 (#(4 21 #(cont) ())))
(1065 ignore-values-cont 1044 322 (#(4 19 #(exp i) ())))
(1066 ignore-values-cont? 1044 330 (#(4 14 #(cont) ())))
(1067 deliver-value 1044 338 (#(4 32 #(segment cont) ())))
(1068 named-cont 1044 346 (#(4 13 #(name) ())))
(1069 cont-name 1044 354 (#(4 22 #(cont) ())))
(1070 bind-vars 1044 362 (#(4 25 #(names cenv) (#(22 25 #(level) ())))))
(1071 #f 1070 23 (#(4 36 #(name) (#(20 36 #(loop) ())))))
(1072 loop 1071 21 (#(4 67 #(over names) ())))
(1073 initial-cenv 1044 370 (#(4 17 #(cenv) ())))
(1074 environment-level 1044 378 (#(4 11 #(cenv) ())))
(1075 name-node-binding 1044 403 (#(4 37 #(node cenv) (#(21 37 #(temp##215) ())))))
(1076 generate-trap 1044 411 (#(7 68 #(cont stuff) ())))
(1077 careful-sequentially 1044 419 (#(4 256 #(seg1 seg2 depth cont) ())))
(1079 type-check 1078 464 (#(4 274 #(node cenv) (#(14 274 #(form) (#(62 271 #(proc-type) (#(82 271 #(args) ())))))))))
(1080 #f 1079 132 (#(4 15 #(arg) ())))
(1081 report-type-error 1078 472 (#(4 45 #(message node proc-type) ())))
(1082 #f 1078 495 (#(4 34 #(node cenv depth cont) ())))
(1084 define-compiler-primitive 1083 4 (#(4 65 #(name type compilator closed) (#(35 46 #(temp##216) ())))))
(1085 #f 1083 9 (#(103 115 #(loop##223) ())))
(1087 define-closed-compilator 1085 21 (#(4 17 #(name proc) ())))
(1088 #f 1085 48 (#(4 81 #(node cenv depth cont) (#(20 81 #(name) ())))))
(1089 get-closed-compilator 1085 59 (#(4 14 #(op) ())))
(1090 direct-compilator 1085 67 (#(4 7 #(opcode) ())))
(1091 #f 1090 5 (#(4 89 #(node cenv depth cont) (#(17 89 #(args) ())))))
(1092 direct-closed-compilator 1085 75 (#(4 7 #(opcode) ())))
(1093 #f 1092 5 (#(12 103 #(arg-specs) ())))
(1094 nargs->domain 1085 83 (#(4 23 #(nargs) (#(8 23 #(loop##218) ())))))
(1095 loop##217 1094 9 (#(4 40 #(nargs l) ())))
(1096 checked-compilator 1085 91 (#(4 7 #(nargs compilator) ())))
(1097 #f 1096 5 (#(4 67 #(node cenv depth cont) (#(14 67 #(exp) ())))))
(1098 loop##219 1085 104 (#(4 311 #(opcode) (#(13 311 #(temp##222) (#(50 299 #(arg-specs name) (#(67 299 #(temp##221) (#(156 299 #(temp##220) ())))))))))))
(1099 define-simple-primitive 1085 120 (#(4 158 #(name type segment) (#(30 158 #(c winner?) (#(118 158 #(nargs) ()) #(67 115 #(temp##224) ())))))))
(1100 simple-compilator 1085 128 (#(4 7 #(segment) ())))
(1101 #f 1100 5 (#(4 80 #(node cenv depth cont) (#(17 80 #(args) ())))))
(1102 simple-closed-compilator 1085 136 (#(4 7 #(nargs segment) ())))
(1103 #f 1102 5 ())
(1104 symbol-append 1085 144 (#(5 33 #(syms) ())))
(1105 define-data-struct-primitives 1085 152 (#(7 198 #(name predicate maker slots) (#(24 198 #(type-byte) (#(29 198 #(def-prim) (#(46 198 #(type) (#(182 198 #(loop##227) ())))))))))))
(1106 def-prim 1105 25 (#(7 35 #(name type op stuff) ())))
(1107 loop##225 1105 183 (#(4 179 #(i slots) (#(13 179 #(temp##226) (#(33 161 #(slot) ())))))))
(1108 #f 1085 322 (#(4 11 #(stuff) ())))
(1109 define-vector-primitives 1085 336 (#(4 360 #(name element-type make length ref set!) (#(21 360 #(type-byte) (#(26 360 #(def-prim) (#(43 360 #(type) ())))))))))
(1110 def-prim 1109 22 (#(4 29 #(name type op) ())))
(1111 #f 1085 502 (#(257 276 #(cons-instruction) ())))
(1112 #f 1111 28 (#(4 26 #(name) ())))
(1113 #f 1111 43 (#(4 26 #(name) ())))
(1114 #f 1111 58 (#(4 26 #(name) ())))
(1115 #f 1111 126 (#(4 125 #(node cenv depth cont) (#(14 125 #(exp) (#(22 125 #(args) ())))))))
(1117 #f 1111 146 (#(4 192 #(node cenv depth cont) (#(29 192 #(args exp) (#(46 192 #(producer consumer) ())))))))
(1118 #f 1111 149 (#(15 148 #(label) ())))
(1119 define-n-ary-compiler-primitive 1111 160 (#(4 66 #(name result-type min-nargs compilator closed) ())))
(1120 n-ary-primitive-compilator 1111 168 (#(4 7 #(name min-nargs compilator) ())))
(1121 #f 1120 5 (#(4 100 #(node cenv depth cont) (#(14 100 #(exp) ())))))
(1122 #f 1111 185 (#(4 151 #(node cenv depth cont) (#(14 151 #(exp) (#(22 151 #(proc+args+rest) (#(42 151 #(rest+args) (#(50 151 #(args) (#(85 151 #(args+proc+rest) ())))))))))))))
(1124 #f 1111 208 (#(4 78 #(node cenv depth cont) (#(17 78 #(args) ())))))
(1126 #f 1111 267 (#(4 142 #(node cenv depth cont) (#(14 142 #(exp) (#(22 142 #(args) ())))))))
(1127 #f 1126 98 (#(4 8 #(arg) ())))
(1130 push-all-but-last 1111 304 (#(4 26 #(args cenv depth exp) (#(8 26 #(recur) ())))))
(1131 recur 1130 9 (#(4 105 #(args depth i) (#(42 105 #(first-code) ())))))
(1132 #f #f #f (#(215 218 #(get-undefined) ()) #(86 89 #(stob/location location-contents-offset) ())))
(1133 compile-form 1132 4 (#(4 41 #(form p) ())))
(1134 compile-file 1132 12 (#(4 76 #(filename p) (#(21 76 #(scanned-forms) (#(35 76 #(o-port) (#(58 76 #(template) ())))))))))
(1135 compile-and-run-forms 1132 20 (#(4 38 #(forms p filename run noisy?) ())))
(1136 compile-and-run-file 1132 28 (#(4 35 #(filename p run noisy?) ())))
(1137 compile-and-run-scanned-forms 1132 36 (#(4 53 #(scanned-forms p filename run noisy?) (#(9 53 #(do-it) (#(14 53 #(do-them) ())))))))
(1138 do-it 1137 5 (#(4 29 #(scanned-form) ())))
(1139 do-them 1137 10 (#(33 45 #(loop##229) ())))
(1140 loop##228 1139 34 (#(4 57 #(scanned-forms) ())))
(1141 #f 1137 20 (#(5 29 #(results) ())))
(1142 compile-scanned-forms 1132 44 (#(7 79 #(scanned-forms p filename noisy? env-option) (#(53 79 #(cenv) ())))))
(1143 #f 1142 73 (#(50 62 #(recur) ())))
(1144 recur 1143 51 (#(4 96 #(scanned-forms) ())))
(1145 compile-scanned-form 1132 52 (#(4 78 #(node cenv cont noisy?) (#(41 62 #(segment) ())))))
(1146 compile-definition 1132 87 (#(4 145 #(node cenv cont noisy?) (#(14 145 #(form) (#(25 145 #(name) (#(44 145 #(loc) ())))))))))
(1147 #f 1146 52 ())
(1148 prepare-cenv 1132 96 (#(4 17 #(p env) ())))
(1149 cenv-package 1132 104 (#(4 11 #(env) ())))
(1150 get-location 1132 146 (#(4 101 #(binding cenv name want-type) ())))
(1151 #f 1150 34 ())
(1152 #f 1150 66 ())
(1153 #f 1150 84 ())
(1154 #f 1150 99 ())
(1155 location-for-undefined 1132 154 (#(4 104 #(cenv name want-type) (#(55 104 #(p) ())))))
(1156 package-accessor-on-demand 1132 162 (#(4 7 #(id init) ())))
(1157 #f 1156 5 (#(4 62 #(p) (#(21 62 #(temp##230) (#(40 62 #(foo) ())))))))
(1158 location-on-demand 1132 170 (#(4 7 #(accessor) ())))
(1159 #f 1158 5 (#(4 82 #(p name) (#(18 82 #(table) (#(35 82 #(temp##231) (#(60 82 #(new) ())))))))))
(1161 location-for-reference 1132 216 (#(4 29 #(p name) (#(8 29 #(loop) ())))))
(1162 loop 1161 9 (#(4 83 #(opens) ())))
(1164 note-caching 1132 262 (#(4 63 #(cenv name place) ())))
(1165 grumble 1132 270 (#(4 59 #(cenv) ())))
(1166 make-startup-procedure 1132 278 (#(4 120 #(inits resumer) (#(9 120 #(nargs) ())))))
(1167 #f 1166 14 (#(4 65 #(init seg) ())))
(1169 eval 1168 4 (#(4 30 #(form p) ())))
(1170 #f 1169 22 (#(4 14 #(template) ())))
(1171 load 1168 12 (#(7 45 #(filename package-option) (#(35 45 #(p) ())))))
(1172 #f 1171 39 ())
(1173 #f 1172 6 ())
(1174 #f 1173 9 (#(4 14 #(template) ())))
(1175 eval-from-file 1168 20 (#(4 14 #(forms p filename) ())))
(1176 #f 1175 8 ())
(1177 #f 1176 6 ())
(1178 #f 1177 12 (#(4 14 #(template) ())))
(1179 eval-scanned-forms 1168 28 (#(4 32 #(forms p filename) ())))
(1180 #f 1179 14 (#(4 14 #(template) ())))
(1181 invoke-template 1168 36 (#(4 22 #(template p) ())))
(1183 continuation-cont 1182 4 (#(4 12 #(c) ())))
(1184 continuation-pc 1182 12 (#(4 12 #(c) ())))
(1185 continuation-template 1182 20 (#(4 12 #(c) ())))
(1186 continuation-env 1182 28 (#(4 12 #(c) ())))
(1187 continuation-arg 1182 44 (#(4 16 #(c i) ())))
(1188 continuation-arg-count 1182 52 (#(4 13 #(c) ())))
(1189 continuation-parent 1182 60 (#(4 133 #(a) (#(18 133 #(b) (#(87 108 #(loop) ())))))))
(1190 loop 1189 88 (#(4 51 #(env) (#(22 51 #(temp##232) ())))))
(1192 usual-exception-handler 1191 4 (#(7 22 #(opcode args) ())))
(1193 define-exception-handler 1191 12 (#(4 15 #(opcode proc) ())))
(1194 signal-exception 1191 20 (#(4 23 #(opcode args) ())))
(1195 #f 1191 60 (#(4 34 #(opcode args) ())))
(1196 make-opcode-generic! 1191 71 (#(4 29 #(opcode table) ())))
(1197 really-signal-condition 1191 79 (#(4 29 #(condition) (#(8 29 #(loop) ())))))
(1198 loop 1197 9 (#(4 17 #(hs) ())))
(1199 #f 1198 8 ())
(1200 with-handler 1191 87 (#(4 45 #(h thunk) ())))
(1201 initialize-exceptions! 1191 111 (#(4 11 #(thunk) ())))
(1202 #f 1201 5 (#(4 44 #(k) ())))
(1203 last-resort-condition-handler 1191 119 (#(4 29 #(halt) (#(26 29 #(interrupt/keyboard losing?) ())))))
(1204 #f 1203 27 (#(4 66 #(condition punt) ())))
(1205 #f 1204 21 (#(4 50 #(c) ())))
(1206 report-utter-lossage 1191 127 (#(4 104 #(condition c) (#(18 104 #(out) ())))))
(1207 #f 1206 76 (#(4 42 #(id+pc) ())))
(1208 ignore-errors 1191 135 (#(4 11 #(thunk) ())))
(1209 #f 1208 5 (#(4 14 #(k) ())))
(1210 #f 1209 5 (#(4 29 #(c next) ())))
(1211 #f 1191 162 (#(4 112 #(obj) ())))
(1212 continuation-preview 1191 173 (#(4 74 #(c) ())))
(1214 #f 1213 23 (#(4 55 #(opcode args) (#(24 55 #(probe) ())))))
(1215 define-wna-handler 1213 42 (#(4 21 #(proc handler) ())))
(1216 wna-lose 1213 73 (#(4 26 #(proc args) ())))
(1217 #f 1213 85 (#(4 17 #(args) ())))
(1218 #f 1213 100 (#(4 17 #(args) ())))
(1219 #f 1213 115 (#(4 58 #(args) ())))
(1220 #f 1213 130 (#(4 58 #(args) ())))
(1221 #f 1213 145 (#(4 58 #(args) ())))
(1222 #f 1213 160 (#(4 59 #(args) ())))
(1223 #f 1213 175 (#(4 63 #(args) (#(46 61 #(recur) ())))))
(1224 recur 1223 47 (#(4 46 #(l) ())))
(1225 #f 1213 190 (#(4 36 #(args) ())))
(1226 #f 1213 205 (#(4 36 #(args) ())))
(1227 #f 1213 220 (#(4 36 #(args) ())))
(1228 #f 1213 235 (#(4 70 #(args) ())))
(1229 #f 1213 250 (#(4 17 #(args) ())))
(1230 comparison-wna 1213 261 (#(4 7 #(compare) ())))
(1231 #f 1230 5 (#(4 82 #(args) (#(51 72 #(loop) ())))))
(1232 loop 1231 52 (#(4 60 #(x args) (#(18 60 #(y args) ())))))
(1233 #f #f #f (#(15 18 #(display newline) ())))
(1234 display-condition 1233 16 (#(4 42 #(c port) ())))
(1235 #f 1234 9 ())
(1236 really-display-condition 1233 25 (#(4 249 #(c port) (#(18 249 #(stuff) (#(90 249 #(stuff) (#(221 237 #(spaces) ()) #(159 194 #(message) ())))))))))
(1237 #f 1236 222 (#(4 50 #(irritant) ())))
(1238 #f 1233 87 (#(4 7 #(c) ())))
(1239 limited-write 1233 98 (#(4 23 #(obj port max-depth max-length) (#(8 23 #(recur) ())))))
(1240 recur 1239 9 (#(4 140 #(obj depth) (#(31 107 #(temp##237) (#(48 107 #(temp##236) (#(62 107 #(temp##235) (#(78 107 #(temp##234) (#(93 107 #(temp##233) ())))))))))))))
(1241 #f 1240 134 (#(4 28 #(escape) (#(20 23 #(count) ())))))
(1242 #f 1241 21 (#(4 103 #(sub) (#(42 56 #(temp##238) ())))))
(1244 command-processor 1243 4 (#(4 58 #(arg) (#(45 58 #(in out batch?) (#(49 58 #(loop) ())))))))
(1245 loop 1244 50 ())
(1246 #f 1245 7 (#(4 14 #(go) ())))
(1247 #f 1246 5 (#(4 103 #(c punt) (#(22 37 #(temp##239) ())))))
(1248 #f 1247 63 ())
(1249 #f 1246 8 (#(49 175 #(form) (#(144 151 #(form) ())))))
(1250 #f 1249 69 ())
(1251 #f 1249 145 ())
(1252 #f 1249 152 (#(5 28 #(results) ())))
(1253 #f 1252 10 (#(4 28 #(result) ())))
(1254 mini-load 1243 12 (#(4 85 #(in) (#(10 85 #(c) (#(66 85 #(filename) ())))))))
(1255 read-string 1243 20 (#(4 23 #(port delimiter?) (#(8 23 #(loop) ())))))
(1256 loop 1255 9 (#(4 80 #(l n) (#(10 80 #(c) (#(20 36 #(temp##240) ())))))))
(1257 #f #f #f (#(21 33 #(loop##243) ())))
(1258 loop##241 1257 22 (#(4 42 #(i) (#(13 42 #(temp##242) ())))))
(1259 #f 1258 28 (#(4 17 #(enabled-int) ())))
(1260 initialize-interrupts! 1257 38 ())
(1261 with-interrupts-inhibited 1257 100 (#(4 14 #(thunk) ())))
(1262 with-interrupts-allowed 1257 108 (#(4 14 #(thunk) ())))
(1263 with-interrupts 1257 116 (#(4 22 #(interrupts thunk) (#(10 22 #(ei) ())))))
(1264 #f 1263 11 (#(5 15 #(results) ())))
(1265 enabled-interrupts 1257 124 (#(8 14 #(e) ())))
(1266 interrupt-before-heap-overflow! 1257 132 (#(5 52 #(maybe-required-space) (#(35 52 #(space) ())))))
(1267 #f 1266 42 (#(4 23 #(ei) ())))
(1269 usual-resumer 1268 4 (#(4 7 #(entry-point) ())))
(1270 #f 1269 5 (#(4 20 #(resume-arg in out) ())))
(1271 #f 1270 14 ())
(1272 #f 1271 22 ())
(1274 start 1273 4 (#(4 7 #(structs-to-open) ())))
(1275 #f 1274 5 (#(4 11 #(structs-thunk) ())))
(1276 #f 1275 5 (#(4 59 #(arg) (#(28 51 #(b) ())))))
(1277 #f 1276 53 ())
(1278 make-built-in-structures 1273 12 (#(4 81 #(structs) (#(25 81 #(p) (#(45 81 #(s) ())))))))
(1279 #f 1278 33 ())
(1280 #f 1278 50 (#(4 23 #(name+struct) ())))
(1281 initialize-interaction-environment! 1273 28 (#(4 130 #(built-in-structures) (#(36 130 #(scheme for-syntax) ())))))
(1282 make-initial-package 1273 36 (#(4 87 #(built-in-structures structs-to-open) (#(66 87 #(p) ())))))
(1283 #f 1282 16 (#(4 14 #(name) ())))
(1284 make-env-for-syntax-promise 1273 44 (#(4 11 #(scheme) ())))
(1285 #f 1284 5 ())
(1287 inline-transform 1286 4 (#(4 69 #(form aux-names) (#(54 57 #(formals body) ())))))
(1288 #f 1287 55 (#(4 82 #(e r c) (#(12 82 #(args) ())))))
(1289 #f 1287 61 (#(4 28 #(e r c) ())))
(1290 make-substitution 1286 12 (#(4 27 #(r formals args) (#(24 27 #(subs) ())))))
(1291 #f 1290 25 (#(4 57 #(name) (#(21 57 #(probe) ())))))
(1292 substitute 1286 20 (#(4 205 #(form r) (#(57 186 #(temp##244) (#(146 186 #(keyword) ())))))))
(1293 #f 1292 126 (#(4 14 #(form) ())))
(1294 #f 1292 166 (#(4 15 #(form) ())))
(1295 qualified? 1286 28 (#(4 23 #(thing) ())))
(1296 qualified->name 1286 36 (#(4 20 #(q r) (#(8 20 #(recur) ())))))
(1297 recur 1296 9 (#(4 91 #(q) (#(38 84 #(name) ())))))
(1298 get-qualified-env 1286 44 (#(4 157 #(env parent) (#(21 157 #(binding) (#(50 123 #(s) ())))))))
(1299 name->qualified 1286 52 (#(4 87 #(name env) (#(35 63 #(symbol) (#(43 55 #(loop) ())))))))
(1300 loop 1299 44 (#(4 125 #(name) (#(14 125 #(parent) (#(38 122 #(gparent) ())))))))
(1301 qlookup 1286 60 (#(4 41 #(env parent symbol) (#(21 41 #(binding) ())))))
(1302 generic-lookup 1286 68 (#(4 97 #(env name) ())))
(1306 make-a-package 1305 4 (#(4 69 #(opens-thunk accesses-thunk for-syntax-thunk dir clauses names) ())))
(1307 #f 1306 23 ())
(1308 init-defpackage! 1305 12 (#(4 13 #(evaluator foo) ())))
(1309 loser 1305 20 (#(5 21 #(rest) ())))
(1310 *verify-later!* 1305 52 (#(4 6 #(thunk) ())))
(1311 verify-later! 1305 60 (#(4 11 #(thunk) ())))
(1312 set-verify-later! 1305 68 (#(4 9 #(proc) ())))
(1314 ensure-loaded 1313 4 (#(5 18 #(structs) ())))
(1315 #f 1314 9 (#(4 19 #(p) ())))
(1316 #f 1314 12 (#(4 14 #(stuff p) ())))
(1317 #f 1316 8 ())
(1318 #f 1317 7 (#(4 23 #(filename+scanned-forms) ())))
(1320 #f 1319 1 (#(14 252 #(the-objects get-location) ())))
(1321 get-location 1320 10 (#(4 7 #(loc) ())))
(1344 #f 1343 472 (#(4 105 #(input##247 rename##248 compare##249) (#(12 105 #(tail##246) (#(51 102 #(?exp) ()) #(21 40 #(temp##245) ())))))))
(1359 #f 1358 248 (#(4 102 #(form rename compare) (#(51 102 #(type-name component-name %definitely-name->enumerand %quote) ())))))
(1360 #f 1358 376 (#(4 88 #(form rename compare) (#(66 88 #(name parts conc %define %begin %quote) (#(70 88 #(loop##251) ())))))))
(1361 conc 1360 26 (#(5 33 #(things) ())))
(1362 #f 1361 17 (#(4 20 #(thing) ())))
(1363 loop##250 1360 71 (#(4 180 #(i p r) ())))
(1365 #f 1364 215 (#(4 799 #(input##266 rename##267 compare##268) (#(12 799 #(tail##265) (#(589 796 #(?id) (#(600 796 #(?type) (#(617 796 #(?constructor) (#(635 796 #(?arg) (#(653 796 #(?pred) (#(671 796 #(?more) ()))))))))))) #(472 578 #(temp##264) (#(487 576 #(temp##263) (#(502 574 #(temp##262) (#(551 570 #(temp##261) ()) #(521 540 #(temp##260) ()))))))) #(130 463 #(?id) (#(141 463 #(?type) (#(158 463 #(?constructor) (#(176 463 #(?arg) (#(203 463 #(?field) (#(230 463 #(?field-stuff) ()))))))))))) #(21 119 #(temp##257) (#(36 117 #(temp##256) (#(51 115 #(temp##255) (#(96 111 #(loop) ()) #(70 89 #(temp##252) ())))))))))))))
(1366 loop 1365 97 (#(4 62 #(l) (#(13 62 #(temp##254) (#(40 45 #(temp##253) ())))))))
(1367 #f 1365 181 (#(4 10 #(temp##258) ())))
(1368 #f 1365 208 (#(4 10 #(temp##259) ())))
(1369 #f 1365 378 (#(4 29 #(?arg) ())))
(1370 #f 1365 426 (#(4 13 #(?field ?field-stuff) ())))
(1371 #f 1364 397 (#(4 315 #(input##278 rename##279 compare##280) (#(12 315 #(tail##277) (#(94 312 #(?constructor) (#(105 312 #(?id) (#(119 312 #(?type) (#(146 312 #(?arg) (#(173 312 #(?arg-type) ()))))))))) #(21 83 #(temp##274) (#(36 81 #(temp##273) (#(51 79 #(temp##272) (#(62 77 #(loop) ())))))))))))))
(1372 loop 1371 63 (#(4 93 #(l) (#(13 93 #(temp##271) (#(40 76 #(temp##270) (#(55 74 #(temp##269) ())))))))))
(1373 #f 1371 124 (#(4 10 #(temp##275) ())))
(1374 #f 1371 151 (#(4 13 #(temp##276) ())))
(1376 #f 1375 51 (#(4 85 #(e r c) (#(63 85 #(%define-accessor %begin type id field-specs) (#(67 85 #(loop##282) ())))))))
(1377 loop##281 1376 68 (#(4 72 #(i field-specs ds) ())))
(1378 #f 1375 92 (#(4 728 #(input##291 rename##292 compare##293) (#(12 728 #(tail##290) (#(385 725 #(?id) (#(396 725 #(?index) (#(410 725 #(?accessor) (#(428 725 #(?modifier) ()))))))) #(304 374 #(temp##289) (#(319 372 #(temp##288) (#(334 370 #(temp##287) (#(349 368 #(temp##286) ()))))))) #(85 295 #(?id) (#(96 295 #(?index) (#(110 295 #(?accessor) ()))))) #(21 74 #(temp##285) (#(36 72 #(temp##284) (#(51 70 #(temp##283) ())))))))))))
(1392 #f 1391 445 (#(4 73 #(input##295 rename##296 compare##297) (#(12 73 #(tail##294) (#(31 70 #(?spec) ())))))))
(1394 #f 1393 11 (#(4 469 #(input##307 rename##308 compare##309) (#(12 469 #(tail##306) (#(452 466 #(?name) (#(463 466 #(?int) ()))) #(405 441 #(temp##305) (#(420 439 #(temp##304) ()))) #(323 396 #(?name) (#(337 396 #(?int) ()))) #(207 312 #(temp##303) (#(222 310 #(temp##302) (#(241 293 #(temp##301) ()))))) #(137 198 #(?name) (#(151 198 #(?item) ()))) #(21 126 #(temp##300) (#(36 124 #(temp##299) (#(55 107 #(temp##298) ())))))))))))
(1395 #f 1394 380 (#(4 35 #(?int) ())))
(1396 #f 1393 52 (#(4 46 #(e r c) (#(24 46 #(name items) (#(28 46 #(loop) ())))))))
(1397 loop 1396 29 (#(4 249 #(items plain others) (#(139 249 #(item) ())))))
(1398 #f 1393 307 (#(4 151 #(input##313 rename##314 compare##315) (#(12 151 #(tail##312) (#(76 148 #(?name) (#(87 148 #(?args) (#(95 148 #(?body) ()))))) #(21 62 #(temp##311) (#(40 45 #(temp##310) ())))))))))
(1399 #f 1393 348 (#(4 491 #(input##324 rename##325 compare##326) (#(12 491 #(tail##323) (#(368 488 #(?name) (#(379 488 #(?exp) ()))) #(321 357 #(temp##322) (#(336 355 #(temp##321) ()))) #(224 312 #(?name) (#(235 312 #(?exp) ()))) #(158 213 #(temp##320) (#(190 209 #(temp##319) ()))) #(107 149 #(?name) (#(118 149 #(?exp) ()))) #(21 93 #(temp##318) (#(70 89 #(temp##317) ()) #(40 59 #(temp##316) ())))))))))
(1400 #f 1399 257 (#(4 57 #(?name) ())))
(1402 #f 1401 11 (#(4 350 #(input##330 rename##331 compare##332) (#(12 350 #(tail##329) (#(87 347 #(?name) (#(98 347 #(?exp) ()))) #(21 76 #(temp##328) (#(53 72 #(temp##327) ())))))))))
(1403 #f 1402 120 (#(4 29 #(?name) ())))
(1404 #f 1402 187 (#(4 165 #(?name) ())))
(1405 #f 1401 400 (#(4 276 #(input##339 rename##340 compare##341) (#(12 276 #(tail##338) (#(231 273 #(?name) (#(242 273 #(?exp) ()))) #(184 220 #(temp##337) (#(199 218 #(temp##336) ()))) #(85 175 #(?name) (#(96 175 #(?int) (#(110 175 #(?clause1) (#(125 175 #(?clause) ()))))))) #(21 74 #(temp##335) (#(36 72 #(temp##334) (#(51 70 #(temp##333) ())))))))))))
(1406 #f 1401 441 (#(4 322 #(input##353 rename##354 compare##355) (#(12 322 #(tail##352) (#(100 319 #(?name) (#(120 319 #(?int) (#(140 319 #(?keyword) (#(161 319 #(?stuff) ()))))))) #(21 77 #(temp##347) (#(58 73 #(loop) ()) #(36 51 #(loop) ())))))))))
(1407 loop 1406 37 (#(4 93 #(l) (#(13 93 #(temp##344) (#(40 76 #(temp##343) (#(55 74 #(temp##342) ())))))))))
(1408 loop 1406 59 (#(4 76 #(l) (#(13 76 #(temp##346) (#(40 59 #(temp##345) ())))))))
(1409 #f 1406 85 (#(4 10 #(temp##348) ())))
(1410 #f 1406 105 (#(4 13 #(temp##349) ())))
(1411 #f 1406 125 (#(4 10 #(temp##350) ())))
(1412 #f 1406 145 (#(4 10 #(temp##351) ())))
(1413 #f 1406 226 (#(4 13 #(?keyword ?stuff) ())))
(1414 #f 1406 278 (#(4 129 #(?int ?name) ())))
(1415 #f 1401 472 (#(18 26 #(parse-package-clauses) ())))
(1416 parse-package-clauses 1415 19 (#(4 70 #(clauses rename compare) (#(42 70 #(%open %access %for-syntax) (#(46 70 #(loop) ())))))))
(1417 loop 1416 47 (#(4 351 #(clauses opens accesses for-syntaxes others) (#(143 351 #(keyword) ())))))
(1418 #f 1415 24 (#(4 45 #(form rename compare) (#(24 45 #(names clauses) ())))))
(1419 #f 1418 25 (#(4 288 #(opens accesses for-syntaxes others) (#(90 288 #(%make %lambda %cons %list %quote %a-package %file-name) ())))))
(1420 #f 1419 134 (#(4 37 #(a) ())))
(1421 #f 1415 327 (#(4 219 #(input##359 rename##360 compare##361) (#(12 219 #(tail##358) (#(68 216 #(?name) (#(79 216 #(?int) ()))) #(21 57 #(temp##357) (#(36 55 #(temp##356) ())))))))))
(1428 #f 1427 231 (#(4 148 #(input##365 rename##366 compare##367) (#(12 148 #(tail##364) (#(87 145 #(?type) (#(98 145 #(?cod) ()))) #(21 76 #(temp##363) (#(53 72 #(temp##362) ())))))))))
(1450 #f 1447 480 (#(2972 2983 #(structs) ())))
-
