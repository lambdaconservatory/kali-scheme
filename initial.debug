; Package uid -> name
(0 the-interfaces)
(1 meta-module-system)
(2 low-structures)
(3 run-time-structures)
(4 compiler-structures)
(5 initial-structures)
(6 (for-syntax defpackage))
(7 vanilla-features-structures)
(8 cheat)
(9 alternate-structures)
(10 compiler-structures)
(11 linker-structures)
(12 scheme-level-0)
(13 scheme-level-1)
(14 records)
(15 bummed-define-record-types)
(16 methods)
(17 number-i/o)
(18 fluids)
(19 wind)
(20 ports)
(21 enumerated)
(22 architecture)
(23 conditions)
(24 templates)
(25 continuations)
(26 more-types)
(27 exceptions)
(28 interrupts)
(29 writing)
(30 reading)
(31 scheme-level-2)
(32 scheme-level-2-internal)
(33 weak)
(34 display-conditions)
(35 tables)
(36 filenames)
(37 meta-types)
(38 interfaces)
(39 syntactic)
(40 usual-macros)
(41 reconstruction)
(42 packages)
(43 scan)
(44 segments)
(45 compiler)
(46 defpackage)
(47 types)
(48 module-system)
(49 inline)
(50 environments)
(51 evaluation)
(52 scheme)
(53 mini-command)
(54 initial-system)
(55 ensures-loaded)
(56 for-reification)
-
; Location uid -> (name . package-uid)
(0 (current-cont . 12))
(1 (closure-template . 12))
(2 (continuation-ref . 12))
(3 (output-port? . 12))
(4 (closure? . 12))
(5 (complex? . 12))
(6 (arithmetic-shift . 12))
(7 (signal-condition . 12))
(8 (integer? . 12))
(9 (make-closure . 12))
(10 (template-ref . 12))
(11 (make-rectangular . 12))
(12 (string=? . 12))
(13 (extended-number? . 12))
(14 (reverse-list->string . 12))
(15 (denominator . 12))
(16 (call-with-values . 12))
(17 (weak-pointer-ref . 12))
(18 (find-all-symbols . 12))
(19 (code-vector? . 12))
(20 (pop . 12))
(21 (exp . 12))
(22 (sin . 12))
(23 (make-extended-number . 12))
(24 (cos . 12))
(25 (collect . 12))
(26 (external-lookup . 12))
(27 (tan . 12))
(28 (log . 12))
(29 (continuation-length . 12))
(30 (make-code-vector . 12))
(31 (cdr . 12))
(32 (bitwise-xor . 12))
(33 (car . 12))
(34 (string? . 12))
(35 (symbol? . 12))
(36 (set-cdr! . 12))
(37 (bitwise-not . 12))
(38 (vector? . 12))
(39 (closure-env . 12))
(40 (set-car! . 12))
(41 (bitwise-ior . 12))
(42 (number? . 12))
(43 (template-length . 12))
(44 (string-hash . 12))
(45 (pop-env . 12))
(46 (primitive-catch . 12))
(47 (make-string . 12))
(48 (input-port? . 12))
(49 (record? . 12))
(50 (make-vector . 12))
(51 (extended-number-set! . 12))
(52 (write-image . 12))
(53 (eq? . 12))
(54 (bitwise-and . 12))
(55 (location-id . 12))
(56 (code-vector-set! . 12))
(57 (set-location-id! . 12))
(58 (make-record . 12))
(59 (intern . 12))
(60 (values . 12))
(61 (unassigned . 12))
(62 (string-set! . 12))
(63 (vector-set! . 12))
(64 (extended-number-ref . 12))
(65 (unspecific . 12))
(66 (schedule-interrupt . 12))
(67 (code-vector-ref . 12))
(68 (find-all-xs . 12))
(69 (char-ready? . 12))
(70 (set-interrupt-handlers! . 12))
(71 (eof-object? . 12))
(72 (record-set! . 12))
(73 (ascii->char . 12))
(74 (char->ascii . 12))
(75 (set-enabled-interrupts! . 12))
(76 (external-value . 12))
(77 (make-immutable! . 12))
(78 (close-port . 12))
(79 (string-ref . 12))
(80 (immutable? . 12))
(81 (vector-ref . 12))
(82 (exact? . 12))
(83 (write-char . 12))
(84 (symbol->string . 12))
(85 (make-polar . 12))
(86 (record-ref . 12))
(87 (numerator . 12))
(88 (extended-number-length . 12))
(89 (error . 12))
(90 (exact->inexact . 12))
(91 (inexact->exact . 12))
(92 (apply . 12))
(93 (memory-status . 12))
(94 (code-vector-length . 12))
(95 (floor . 12))
(96 (with-continuation . 12))
(97 (magnitude . 12))
(98 (nargs . 12))
(99 (char=? . 12))
(100 (char<? . 12))
(101 (continuation? . 12))
(102 (remainder . 12))
(103 (vm-return . 12))
(104 (false . 12))
(105 (angle . 12))
(106 (open-port . 12))
(107 (string-length . 12))
(108 (external? . 12))
(109 (make-continuation . 12))
(110 (vector-length . 12))
(111 (template? . 12))
(112 (rational? . 12))
(113 (location? . 12))
(114 (external-name . 12))
(115 (set-exception-handler! . 12))
(116 (pair? . 12))
(117 (make-external . 12))
(118 (record-length . 12))
(119 (external-call . 12))
(120 (set-dynamic-state! . 12))
(121 (get-cont-from-heap . 12))
(122 (real-part . 12))
(123 (real? . 12))
(124 (make-template . 12))
(125 (imag-part . 12))
(126 (make-location . 12))
(127 (= . 12))
(128 (< . 12))
(129 (char? . 12))
(130 (quotient . 12))
(131 (/ . 12))
(132 (weak-pointer? . 12))
(133 (- . 12))
(134 (continuation-set! . 12))
(135 (peek-char . 12))
(136 (+ . 12))
(137 (* . 12))
(138 (contents . 12))
(139 (sqrt . 12))
(140 (read-char . 12))
(141 (set-contents! . 12))
(142 (push . 12))
(143 (make-weak-pointer . 12))
(144 (get-dynamic-state . 12))
(145 (trap . 12))
(146 (cons . 12))
(147 (template-set! . 12))
(148 (time . 12))
(149 (location-defined? . 12))
(150 (asin . 12))
(151 (write-string . 12))
(152 (vm-extension . 12))
(153 (force-output . 12))
(154 (acos . 12))
(155 (set-location-defined?! . 12))
(156 (atan . 12))
(157 (loophole . 12))
(158 (define-syntax . 12))
(159 (begin . 12))
(160 (letrec-syntax . 12))
(161 (%file-name% . 12))
(162 (structure-ref . 12))
(163 (quote . 12))
(164 (lambda . 12))
(165 (define . 12))
(166 (if . 12))
(167 (let-syntax . 12))
(168 (letrec . 12))
(169 (primitive-procedure . 12))
(170 (set! . 12))
(171 (with-aliases . 12))
(172 (call . 12))
(173 (and . 12))
(174 (cond . 12))
(175 (do . 12))
(176 (let . 12))
(177 (let* . 12))
(178 (or . 12))
(179 (char->integer . 12))
(180 (integer->char . 12))
(181 (ascii-limit . 12))
(182 (ascii-whitespaces . 12))
(183 (procedure? . 12))
(184 (invoke-closure . 12))
(185 (primitive-cwcc . 12))
(186 (make-undefined-location . 12))
(187 (vector-unassigned? . 12))
(188 (string-copy . 12))
(189 (string->symbol . 12))
(190 (really-string->symbol . 12))
(191 (*the-symbol-table* . 12))
(192 (flush-the-symbol-table! . 12))
(193 (restore-the-symbol-table! . 12))
(194 (maybe-open-input-file . 12))
(195 (maybe-open-output-file . 12))
(196 (open-input-file . 12))
(197 (open-output-file . 12))
(198 (close-input-port . 12))
(199 (close-output-port . 12))
(200 (make-condition . 12))
(201 (signal . 12))
(202 (warn . 12))
(203 (syntax-error . 12))
(204 (call-error . 12))
(205 (case . 13))
(206 (delay . 13))
(207 (quasiquote . 13))
(208 (syntax-rules . 13))
(209 (not . 13))
(210 (boolean? . 13))
(211 (eqv? . 13))
(212 (equal? . 13))
(213 (> . 13))
(214 (<= . 13))
(215 (>= . 13))
(216 (max . 13))
(217 (min . 13))
(218 (abs . 13))
(219 (zero? . 13))
(220 (positive? . 13))
(221 (negative? . 13))
(222 (even? . 13))
(223 (odd? . 13))
(224 (caar . 13))
(225 (cadr . 13))
(226 (cdar . 13))
(227 (cddr . 13))
(228 (caaar . 13))
(229 (caadr . 13))
(230 (cadar . 13))
(231 (caddr . 13))
(232 (cdaar . 13))
(233 (cdadr . 13))
(234 (cddar . 13))
(235 (cdddr . 13))
(236 (caaaar . 13))
(237 (caaadr . 13))
(238 (caadar . 13))
(239 (caaddr . 13))
(240 (cadaar . 13))
(241 (cadadr . 13))
(242 (caddar . 13))
(243 (cadddr . 13))
(244 (cdaaar . 13))
(245 (cdaadr . 13))
(246 (cdadar . 13))
(247 (cdaddr . 13))
(248 (cddaar . 13))
(249 (cddadr . 13))
(250 (cdddar . 13))
(251 (cddddr . 13))
(252 (null? . 13))
(253 (list . 13))
(254 (length . 13))
(255 (append . 13))
(256 (reverse . 13))
(257 (append-reverse . 13))
(258 (list-tail . 13))
(259 (list-ref . 13))
(260 (mem . 13))
(261 (memq . 13))
(262 (memv . 13))
(263 (member . 13))
(264 (ass . 13))
(265 (assv . 13))
(266 (assoc . 13))
(267 (assq . 13))
(268 (list? . 13))
(269 (char>? . 13))
(270 (char>=? . 13))
(271 (char<=? . 13))
(272 (char-whitespace? . 13))
(273 (char-lower-case? . 13))
(274 (char-upper-case? . 13))
(275 (char-numeric? . 13))
(276 (char-alphabetic? . 13))
(277 (char-case-delta . 13))
(278 (char-upcase . 13))
(279 (char-downcase . 13))
(280 (char-ci-compare . 13))
(281 (char-ci=? . 13))
(282 (char-ci<? . 13))
(283 (char-ci<=? . 13))
(284 (char-ci>? . 13))
(285 (char-ci>=? . 13))
(286 (string . 13))
(287 (substring . 13))
(288 (string-append . 13))
(289 (string->list . 13))
(290 (list->string . 13))
(291 (string-fill! . 13))
(292 (make-string=? . 13))
(293 (string-ci=? . 13))
(294 (make-string<? . 13))
(295 (string<? . 13))
(296 (string-ci<? . 13))
(297 (string>? . 13))
(298 (string<=? . 13))
(299 (string>=? . 13))
(300 (string-ci>? . 13))
(301 (string-ci<=? . 13))
(302 (string-ci>=? . 13))
(303 (vector . 13))
(304 (vector->list . 13))
(305 (list->vector . 13))
(306 (vector-fill! . 13))
(307 (map . 13))
(308 (map1 . 13))
(309 (map2+ . 13))
(310 (for-each . 13))
(311 (make-promise . 13))
(312 (force . 13))
(313 (unspecific . 13))
(314 (reduce . 13))
(315 (filter . 13))
(316 (pos . 13))
(317 (posq . 13))
(318 (posv . 13))
(319 (position . 13))
(320 (any . 13))
(321 (every . 13))
(322 (sublist . 13))
(323 (last . 13))
(324 (insert . 13))
(325 (inexact? . 13))
(326 (modulo . 13))
(327 (ceiling . 13))
(328 (truncate . 13))
(329 (round . 13))
(330 (gcd . 13))
(331 (euclid . 13))
(332 (lcm . 13))
(333 (expt . 13))
(334 (raise-to-integer-power . 13))
(335 (rationalize . 13))
(336 (simplest-rational . 13))
(337 (record-type . 14))
(338 (*record-type-uid* . 14))
(339 (*record-type* . 14))
(340 (make-record-type . 14))
(341 (record-type? . 14))
(342 (record-type-uid . 14))
(343 (record-type-name . 14))
(344 (record-type-field-names . 14))
(345 (record-type-discloser . 14))
(346 (record-field-index . 14))
(347 (record-constructor . 14))
(348 (record-accessor . 14))
(349 (record-modifier . 14))
(350 (record-predicate . 14))
(351 (define-record-discloser . 14))
(352 (disclose-record . 14))
(353 (default-record-discloser . 14))
(354 (:record-type . 14))
(355 (define-record-type . 15))
(356 (define-constructor . 15))
(357 (define-accessors . 15))
(358 (define-accessor . 15))
(359 (:simple-type . 16))
(360 (really-make-simple-type . 16))
(361 (simple-type-id . 16))
(362 (simple-type-priority . 16))
(363 (simple-type-predicate . 16))
(364 (simple-type-superiors . 16))
(365 (simple-type? . 16))
(366 (make-simple-type . 16))
(367 (compute-priority . 16))
(368 (*increment* . 16))
(369 (%type-priority . 16))
(370 (%type-predicate . 16))
(371 (%same-type? . 16))
(372 (define-simple-type . 16))
(373 (:syntax . 16))
(374 (:values . 16))
(375 (value? . 16))
(376 (:value . 16))
(377 (:zero . 16))
(378 (:number . 16))
(379 (:complex . 16))
(380 (:real . 16))
(381 (:rational . 16))
(382 (:integer . 16))
(383 (:exact-integer . 16))
(384 (:boolean . 16))
(385 (:symbol . 16))
(386 (:char . 16))
(387 (:null . 16))
(388 (:pair . 16))
(389 (:vector . 16))
(390 (:string . 16))
(391 (:procedure . 16))
(392 (:input-port . 16))
(393 (:output-port . 16))
(394 (:eof-object . 16))
(395 (:record . 16))
(396 (record-type-priority . 16))
(397 (:method-info . 16))
(398 (make-method-info . 16))
(399 (method-info-proc . 16))
(400 (method-info-n-ary? . 16))
(401 (method-info-types . 16))
(402 (method-info? . 16))
(403 (empty-method-list . 16))
(404 (insert-method . 16))
(405 (same-applicability? . 16))
(406 (every2 . 16))
(407 (more-specific? . 16))
(408 (more-specific-type? . 16))
(409 (:method-table . 16))
(410 (really-make-method-table . 16))
(411 (method-table-id . 16))
(412 (method-table-set-perform! . 16))
(413 (method-table-get-perform . 16))
(414 (make-generic . 16))
(415 (method-table-prototype . 16))
(416 (method-table-methods . 16))
(417 (set-method-table-methods! . 16))
(418 (method-table? . 16))
(419 (make-method-table . 16))
(420 (make-cell-for-generic . 16))
(421 (add-to-method-table! . 16))
(422 (set-final-method! . 16))
(423 (apply-generic . 16))
(424 (define-generic . 16))
(425 (methods->perform . 16))
(426 (last-action . 16))
(427 (one-action . 16))
(428 (argument-sequence-predicate . 16))
(429 (check-for-next . 16))
(430 (check-next . 16))
(431 (method-info . 16))
(432 (method-internal . 16))
(433 (with-next-method . 16))
(434 (define-method . 16))
(435 (&add-method! . 16))
(436 (add-method! . 16))
(437 (&type-predicate . 16))
(438 (type-predicate . 16))
(439 (&type-priority . 16))
(440 (type-priority . 16))
(441 (&type-superiors . 16))
(442 (type-superiors . 16))
(443 (&same-type? . 16))
(444 (same-type? . 16))
(445 (:singleton . 16))
(446 (singleton . 16))
(447 (singleton-value . 16))
(448 (compare-to . 16))
(449 (&disclose . 16))
(450 (disclose . 16))
(451 (proc->discloser . 16))
(452 (&number->string . 17))
(453 (number->string . 17))
(454 (integer->string . 17))
(455 (string->number . 17))
(456 (&really-string->number . 17))
(457 (really-string->number . 17))
(458 (:integer-string . 17))
(459 (set-exactness . 17))
(460 (string->integer . 17))
(461 (:thread . 18))
(462 (make-thread . 18))
(463 (thread-dynamic-env . 18))
(464 (current-thread . 18))
(465 (set-current-thread! . 18))
(466 (get-dynamic-env . 18))
(467 (set-dynamic-env! . 18))
(468 (initialize-dynamic-state! . 18))
(469 (with-dynamic-env . 18))
(470 (empty-dynamic-env . 18))
(471 (:fluid . 18))
(472 (make-fluid . 18))
(473 (fluid-top-level-value . 18))
(474 (set-fluid-top-level-value! . 18))
(475 (fluid . 18))
(476 (set-fluid! . 18))
(477 (let-fluid . 18))
(478 (let-fluids . 18))
(479 (fluid-lookup . 18))
(480 (dynamic-wind . 19))
(481 (call-with-current-continuation . 19))
(482 (continuation->procedure . 19))
(483 (:point . 19))
(484 (make-point . 19))
(485 (point-parent . 19))
(486 (point-dynamic-env . 19))
(487 (point-out . 19))
(488 (point-in . 19))
(489 (point-depth . 19))
(490 (root-point . 19))
(491 ($dynamic-point . 19))
(492 (get-dynamic-point . 19))
(493 (env-dynamic-point . 19))
(494 (let-dynamic-point . 19))
(495 (travel-to-point! . 19))
(496 ($current-input-port . 20))
(497 ($current-output-port . 20))
(498 ($error-output-port . 20))
(499 (current-input-port . 20))
(500 (current-output-port . 20))
(501 (error-output-port . 20))
(502 (with-initial-ports . 20))
(503 (call-with-mumble-file . 20))
(504 (call-with-input-file . 20))
(505 (call-with-output-file . 20))
(506 (with-input-from-file . 20))
(507 (with-output-to-file . 20))
(508 (newline . 20))
(509 (output-port-option . 20))
(510 (input-port-option . 20))
(511 (write . 29))
(512 (recurring-write . 29))
(513 (write-boolean . 29))
(514 (write-number . 29))
(515 (write-char-literal . 29))
(516 (character-name . 29))
(517 (write-string-literal . 29))
(518 (write-list . 29))
(519 (quotation? . 29))
(520 (write-vector . 29))
(521 (write-other . 29))
(522 (display-type-name . 29))
(523 (display . 29))
(524 (*condition-types* . 23))
(525 (condition-supertypes . 23))
(526 (define-condition-type . 23))
(527 (condition-predicate . 23))
(528 (condition? . 23))
(529 (condition-type . 23))
(530 (condition-stuff . 23))
(531 (error? . 23))
(532 (call-error? . 23))
(533 (read-error? . 23))
(534 (exception? . 23))
(535 (exception-opcode . 23))
(536 (exception-arguments . 23))
(537 (make-exception . 23))
(538 (warning? . 23))
(539 (syntax-error? . 23))
(540 (interrupt? . 23))
(541 (read . 30))
(542 (sub-read-carefully . 30))
(543 (reader-token-marker . 30))
(544 (make-reader-token . 30))
(545 (reader-token? . 30))
(546 (close-paren . 30))
(547 (dot . 30))
(548 (sub-read . 30))
(549 (read-dispatch-vector . 30))
(550 (read-terminating?-vector . 30))
(551 (set-standard-syntax! . 30))
(552 (set-standard-read-macro! . 30))
(553 (sub-read-list . 30))
(554 (gobble-line . 30))
(555 (*sharp-macros* . 30))
(556 (define-sharp-macro . 30))
(557 (sub-read-token . 30))
(558 (parse-token . 30))
(559 (strange-symbol-names . 30))
(560 (preferred-case . 30))
(561 (reading-error . 30))
(562 (:table . 35))
(563 (really-make-table . 35))
(564 (table-set!-procedure . 35))
(565 (set-table-set!-procedure! . 35))
(566 (table-ref-procedure . 35))
(567 (set-table-ref-procedure! . 35))
(568 (table-data . 35))
(569 (set-table-data! . 35))
(570 (table-size . 35))
(571 (set-table-size! . 35))
(572 (table? . 35))
(573 (table-ref . 35))
(574 (table-set! . 35))
(575 (linear-table-size-limit . 35))
(576 (table-size-limit . 35))
(577 (next-table-size . 35))
(578 (make-table-maker . 35))
(579 (null-entry . 35))
(580 (new-entry . 35))
(581 (make-assoc . 35))
(582 (eq?-assoc . 35))
(583 (make-linear-table-ref . 35))
(584 (make-linear-table-set! . 35))
(585 (make->hash-table . 35))
(586 (make-hash-table-ref . 35))
(587 (make-hash-table-set! . 35))
(588 (expand-hash-table! . 35))
(589 (table-enter-alist! . 35))
(590 (table-expand-table! . 35))
(591 (table-walk . 35))
(592 (alist-walk . 35))
(593 (table->entry-list . 35))
(594 (default-table-hash-function . 35))
(595 (symbol-hash . 35))
(596 (make-table . 35))
(597 (make-string-table . 35))
(598 (make-symbol-table . 35))
(599 (make-integer-table . 35))
(600 (:meta-type . 37))
(601 (make-type . 37))
(602 (type-info . 37))
(603 (type-more . 37))
(604 (type-mask . 37))
(605 (meta-type? . 37))
(606 (name->type-table . 37))
(607 (mask->name-table . 37))
(608 (name->type . 37))
(609 (set-type-name! . 37))
(610 (*mask* . 37))
(611 (new-type-bit . 37))
(612 (mask->type . 37))
(613 (bottom-type . 37))
(614 (error-type . 37))
(615 (bottom-type? . 37))
(616 (new-atomic-type . 37))
(617 (named-atomic-type . 37))
(618 (syntax-type . 37))
(619 (other-static-type . 37))
(620 (empty-rail-type . 37))
(621 (rail-type . 37))
(622 (make-optional-type . 37))
(623 (make-rest-type . 37))
(624 (head-type . 37))
(625 (head-type-really . 37))
(626 (tail-type . 37))
(627 (empty-rail-type? . 37))
(628 (rest-type? . 37))
(629 (optional-type? . 37))
(630 (mask/no-values . 37))
(631 (mask/two-or-more . 37))
(632 (mask/&rest . 37))
(633 (value-type . 37))
(634 (mask/value . 37))
(635 (value-type? . 37))
(636 (any-values-type . 37))
(637 (any-arguments-type . 37))
(638 (mask/one-or-more . 37))
(639 (same-type? . 37))
(640 (subtype? . 37))
(641 (meet-type . 37))
(642 (other-type-info . 37))
(643 (p . 37))
(644 (meet-rail . 37))
(645 (meet-procedure . 37))
(646 (meet? . 37))
(647 (meet-procedure? . 37))
(648 (join-type . 37))
(649 (join-rail . 37))
(650 (join-procedure . 37))
(651 (number-hierarchy . 37))
(652 (integer-type . 37))
(653 (rational-type . 37))
(654 (real-type . 37))
(655 (complex-type . 37))
(656 (number-type . 37))
(657 (exact-type . 37))
(658 (inexact-type . 37))
(659 (exact-integer-type . 37))
(660 (boolean-type . 37))
(661 (pair-type . 37))
(662 (null-type . 37))
(663 (record-type . 37))
(664 (any-procedure-type . 37))
(665 (other-value-type . 37))
(666 (mask/other . 37))
(667 (make-other-type . 37))
(668 (char-type . 37))
(669 (unspecific-type . 37))
(670 (string-type . 37))
(671 (symbol-type . 37))
(672 (vector-type . 37))
(673 (escape-type . 37))
(674 (structure-type . 37))
(675 (mask/procedure . 37))
(676 (procedure-type . 37))
(677 (make-procedure-type . 37))
(678 (procedure-type-domain . 37))
(679 (procedure-type-codomain . 37))
(680 (restrictive? . 37))
(681 (sexp->type . 37))
(682 (sexp->values-type . 37))
(683 (type->sexp . 37))
(684 (atomic-type->sexp . 37))
(685 (rail-type->sexp . 37))
(686 (disjoin-type . 37))
(687 (disjoin-rest . 37))
(688 (mask/number . 37))
(689 (make-some-values-type . 37))
(690 (proc . 37))
(691 (some-values . 37))
(692 (procedure-type? . 37))
(693 (fixed-arity-procedure-type? . 37))
(694 (procedure-type-arity . 37))
(695 (procedure-type-argument-types . 37))
(696 (usual-operator-type . 39))
(697 (:operator . 39))
(698 (make-operator . 39))
(699 (operator-name . 39))
(700 (operator-uid . 39))
(701 (operator-nargs . 39))
(702 (operator-type . 39))
(703 (set-operator-type! . 39))
(704 (operator? . 39))
(705 (get-operator . 39))
(706 (*operator-uid* . 39))
(707 (operators-table . 39))
(708 (number-of-operators . 39))
(709 (the-operators . 39))
(710 (make-operator-table . 39))
(711 (operator-table-ref . 39))
(712 (operator-lookup . 39))
(713 (operator-define! . 39))
(714 (:node . 39))
(715 (really-make-node . 39))
(716 (node-plist . 39))
(717 (set-node-plist! . 39))
(718 (node-form . 39))
(719 (node-operator-id . 39))
(720 (node? . 39))
(721 (make-node . 39))
(722 (node-ref . 39))
(723 (node-set! . 39))
(724 (node-operator . 39))
(725 (node-predicate . 39))
(726 (make-similar-node . 39))
(727 (:generated . 39))
(728 (make-generated . 39))
(729 (generated-parent-name . 39))
(730 (generated-env . 39))
(731 (generated-token . 39))
(732 (generated-symbol . 39))
(733 (generated? . 39))
(734 (generate-name . 39))
(735 (name->symbol . 39))
(736 (*generated-uid* . 39))
(737 (name-hash . 39))
(738 (desyntaxify . 39))
(739 (make-immutable . 39))
(740 (:transform . 39))
(741 (really-make-transform . 39))
(742 (transform-id . 39))
(743 (transform-source . 39))
(744 (transform-aux-names . 39))
(745 (transform-type . 39))
(746 (transform-env . 39))
(747 (transform-procedure . 39))
(748 (transform? . 39))
(749 (make-transform . 39))
(750 (maybe-transform . 39))
(751 (bind-aliases . 39))
(752 (make-name-generator . 39))
(753 (same-denotation? . 39))
(754 (binding? . 39))
(755 (binding-type . 39))
(756 (binding-place . 39))
(757 (binding-static . 39))
(758 (set-binding-place! . 39))
(759 (really-make-binding . 39))
(760 (make-binding . 39))
(761 (clobber-binding! . 39))
(762 (binding-transform . 39))
(763 (impose-type . 39))
(764 (forget-integration . 39))
(765 (classify . 39))
(766 (call-node? . 39))
(767 (name-node? . 39))
(768 (classify-literal . 39))
(769 (classify-call . 39))
(770 (classify-name . 39))
(771 (operator/name . 39))
(772 (classify-macro-application . 39))
(773 (classify-transform-application . 39))
(774 (maybe-transform-call . 39))
(775 (classify-operator-form . 39))
(776 (classifiers . 39))
(777 (define-classifier . 39))
(778 (unspecific-node . 39))
(779 (lookup . 39))
(780 (bind1 . 39))
(781 (bind . 39))
(782 (bindrec . 39))
(783 (literal? . 39))
(784 (number-of-required-args . 39))
(785 (n-ary? . 39))
(786 (normalize-formals . 39))
(787 (syntax? . 39))
(788 (name? . 39))
(789 (unbound? . 39))
(790 ($source-file-name . 39))
(791 (define-usual-suspects . 39))
(792 (process-syntax . 39))
(793 (get-funny . 39))
(794 (funny-name/evaluator-for-syntax . 39))
(795 (evaluator-for-syntax . 39))
(796 (scan-body . 39))
(797 (scan-body-forms . 39))
(798 (body-lossage . 39))
(799 (begin-node? . 39))
(800 (define-node? . 39))
(801 (schemify . 39))
(802 (schemifiers . 39))
(803 (define-schemifier . 39))
(804 (variable-type . 39))
(805 (variable-type? . 39))
(806 (variable-value-type . 39))
(807 (compatible-types? . 39))
(808 (usual-variable-type . 39))
(809 (undeclared-type . 39))
(810 (make-population . 33))
(811 (add-to-population! . 33))
(812 (weak-memq . 33))
(813 (population-reduce . 33))
(814 (population->list . 33))
(815 (walk-population . 33))
(816 (:interface . 38))
(817 (really-make-interface . 38))
(818 (interface-name . 38))
(819 (interface-clients . 38))
(820 (walk-method . 38))
(821 (ref-method . 38))
(822 (interface? . 38))
(823 (interface-ref . 38))
(824 (for-each-declaration . 38))
(825 (note-reference-to-interface! . 38))
(826 (make-interface . 38))
(827 (make-simple-interface . 38))
(828 (really-make-simple-interface . 38))
(829 (make-compound-interface . 38))
(830 (:structure . 42))
(831 (really-make-structure . 42))
(832 (structure-name . 42))
(833 (structure-clients . 42))
(834 (structure-package . 42))
(835 (structure-interface-really . 42))
(836 (set-structure-interface! . 42))
(837 (structure-interface-thunk . 42))
(838 (structure? . 42))
(839 (structure-interface . 42))
(840 (initialize-structure! . 42))
(841 (make-structure . 42))
(842 (structure-unstable? . 42))
(843 (for-each-export . 42))
(844 (:package . 42))
(845 (really-make-package . 42))
(846 (package-cached . 42))
(847 (package-clients . 42))
(848 (package-plist . 42))
(849 (set-package-plist! . 42))
(850 (package-accesses-thunk . 42))
(851 (package-opens-thunk . 42))
(852 (set-package-opens-thunk! . 42))
(853 (package-loaded? . 42))
(854 (set-package-loaded?! . 42))
(855 (package-clauses . 42))
(856 (package-file-name . 42))
(857 (package-get-location . 42))
(858 (set-package-get-location! . 42))
(859 (package-integrate? . 42))
(860 (set-package-integrate?! . 42))
(861 (package-unstable? . 42))
(862 (package-definitions . 42))
(863 (package-opens-really . 42))
(864 (set-package-opens! . 42))
(865 (package-uid . 42))
(866 (package? . 42))
(867 (make-package . 42))
(868 (new-package-uid . 42))
(869 (*package-uid* . 42))
(870 (package-name-table . 42))
(871 (package-name . 42))
(872 (set-package-name! . 42))
(873 (package-opens . 42))
(874 (package-accesses . 42))
(875 (make-simple-package . 42))
(876 (package-definition . 42))
(877 (package-define! . 42))
(878 (really-package-define! . 42))
(879 (package-lookup . 42))
(880 (really-package-lookup . 42))
(881 (structure-lookup . 42))
(882 (lookup-generated-name . 42))
(883 (generic-lookup . 42))
(884 (package->environment . 42))
(885 (package-lookup-type . 42))
(886 (initialize-package! . 42))
(887 (define-funny-names! . 42))
(888 (generic-eval . 42))
(889 (package-define-funny! . 42))
(890 (funny-name/the-package . 42))
(891 (extract-package-from-environment . 42))
(892 (generic-get-funny . 42))
(893 (funny-name/evaluator . 42))
(894 (set-package-evaluator! . 42))
(895 (package-evaluator . 42))
(896 (funny-name/for-syntax-promise . 42))
(897 (package-for-syntax-promise . 42))
(898 (package-for-syntax . 42))
(899 (for-each-definition . 42))
(900 (get-new-location . 42))
(901 (make-new-location . 42))
(902 ($get-location . 42))
(903 (*location-uid* . 42))
(904 (location-info-table . 42))
(905 (flush-location-names . 42))
(906 (package-get . 42))
(907 (package-put! . 42))
(908 (package-note-caching . 42))
(909 (with-fresh-packages-state . 42))
(910 (environment-ref . 50))
(911 (environment-set! . 50))
(912 (environment-define! . 50))
(913 (*structure-ref . 50))
(914 (contents-carefully . 50))
(915 ($interaction-environment . 50))
(916 (interaction-environment . 50))
(917 (set-interaction-environment! . 50))
(918 (with-interaction-environment . 50))
(919 (scheme-report-environment . 50))
(920 (*scheme-report-environment* . 50))
(921 (*scheme-report-number* . 50))
(922 (set-scheme-report-environment! . 50))
(923 (make-package-for-syntax . 50))
(924 (the-usual-transforms . 40))
(925 (define-usual-macro . 40))
(926 (usual-transform . 40))
(927 (process-rules . 40))
(928 (segment-pattern? . 40))
(929 (segment-template? . 40))
(930 (indicators-for-zero-or-more . 40))
(931 (find-free-names-in-syntax-rules . 40))
(932 (namestring . 36))
(933 (directory-component-separator . 36))
(934 (type-component-separator . 36))
(935 (namestring-component . 36))
(936 (file-name-preferred-case . 36))
(937 (*scheme-file-type* . 36))
(938 (*load-file-type* . 36))
(939 (file-name-directory . 36))
(940 (file-name-nondirectory . 36))
(941 (file-nondirectory-position . 36))
(942 (string-posq . 36))
(943 (*translations* . 36))
(944 (translations . 36))
(945 (set-translation! . 36))
(946 (translate . 36))
(947 ($note-file-package . 43))
(948 (scan-forms . 43))
(949 (scan-file . 43))
(950 (scan-form-list . 43))
(951 (scan-form . 43))
(952 (process-define-syntax . 43))
(953 (scan-structures . 43))
(954 (scan-package . 43))
(955 (optimize . 43))
(956 (check-structure . 43))
(957 (initialize-usual-transforms! . 43))
(958 (define-all-operators . 43))
(959 (make-define-primitive-node . 43))
(960 (optimizers-table . 43))
(961 (get-optimizer . 43))
(962 (set-optimizer! . 43))
(963 ($note-undefined . 43))
(964 (note-undefined! . 43))
(965 (noting-undefined-variables . 43))
(966 (define-enumeration . 21))
(967 (components . 21))
(968 (enum . 21))
(969 (enumerand->name . 21))
(970 (name->enumerand . 21))
(971 (lookup-enumerand . 21))
(972 (bits-used-per-byte . 22))
(973 (maximum-stack-args . 22))
(974 (define-instruction-set . 22))
(975 (op . 22))
(976 (op-enumeration . 22))
(977 (op-count . 22))
(978 (opcode-arg-specs . 22))
(979 (interrupt . 22))
(980 (interrupt-enumeration . 22))
(981 (interrupt-count . 22))
(982 (time-option . 22))
(983 (time-option-enumeration . 22))
(984 (time-option-count . 22))
(985 (memory-status-option . 22))
(986 (memory-status-option-enumeration . 22))
(987 (memory-status-option-count . 22))
(988 (stob . 22))
(989 (stob-enumeration . 22))
(990 (stob-count . 22))
(991 (stob-data . 22))
(992 (node-type . 41))
(993 (reconstruct-type . 41))
(994 (reconstruct . 41))
(995 (reconstructors . 41))
(996 (define-reconstructor . 41))
(997 (careful-codomain . 41))
(998 (reconstruct-body . 41))
(999 (operator/name . 41))
(1000 (reconstruct-name . 41))
(1001 (reconstruct-call . 41))
(1002 (fork-constraints . 41))
(1003 (examine . 41))
(1004 (node->type . 41))
(1005 (call-node? . 41))
(1006 (name-node? . 41))
(1007 (begin-node? . 41))
(1008 (reconstruct-apply . 41))
(1009 (declare-operator-type . 41))
(1010 (last . 41))
(1011 (constant-type . 41))
(1012 (template-overhead . 24))
(1013 (template-code . 24))
(1014 (template-info . 24))
(1015 (set-template-code! . 24))
(1016 (set-template-info! . 24))
(1017 (make-segment . 44))
(1018 (segment-size . 44))
(1019 (segment-emitter . 44))
(1020 (segment->template . 44))
(1021 (segment-data->template . 44))
(1022 (:assembly-state . 44))
(1023 (make-assembly-state . 44))
(1024 (astate-literals . 44))
(1025 (set-astate-literals! . 44))
(1026 (astate-count . 44))
(1027 (set-astate-count! . 44))
(1028 (astate-pc . 44))
(1029 (set-astate-pc! . 44))
(1030 (astate-code-vector . 44))
(1031 (make-astate . 44))
(1032 (emit-byte! . 44))
(1033 (emit-literal! . 44))
(1034 (emit-segment! . 44))
(1035 (empty-segment . 44))
(1036 (instruction . 44))
(1037 (sequentially . 44))
(1038 (sequentially-2 . 44))
(1039 (instruction-with-literal . 44))
(1040 (instruction-with-location . 44))
(1041 (instruction-with-template . 44))
(1042 (make-label . 44))
(1043 (instruction-using-label . 44))
(1044 (attach-label . 44))
(1045 (byte-limit . 44))
(1046 ($debug-data . 44))
(1047 (note-source-code . 44))
(1048 (note-environment . 44))
(1049 (emit-with-environment-maps! . 44))
(1050 ($environment-maps . 44))
(1051 (environment-maps-table . 44))
(1052 (new-template-uid . 44))
(1053 (*template-uid* . 44))
(1054 (template-uid . 44))
(1055 (set-template-uid! . 44))
(1056 (debug-flag-names . 44))
(1057 (type/debug-flags . 44))
(1058 (make-debug-flags . 44))
(1059 ($debug-flags . 44))
(1060 (debug-flag-accessor . 44))
(1061 (debug-flag-modifier . 44))
(1062 (keep-source-code? . 44))
(1063 (keep-environment-maps? . 44))
(1064 (keep-procedure-names? . 44))
(1065 (keep-file-names? . 44))
(1066 (tabulate-debug-data? . 44))
(1067 (debug-data-table . 44))
(1068 (with-fresh-compiler-state . 44))
(1069 (saving-and-restoring . 44))
(1070 (:debug-data . 44))
(1071 (make-debug-data . 44))
(1072 (debug-data-source . 44))
(1073 (set-debug-data-source! . 44))
(1074 (debug-data-env-maps . 44))
(1075 (set-debug-data-env-maps! . 44))
(1076 (debug-data-pc-in-parent . 44))
(1077 (debug-data-parent . 44))
(1078 (debug-data-name . 44))
(1079 (debug-data-uid . 44))
(1080 (debug-data? . 44))
(1081 (new-debug-data . 44))
(1082 (debug-data->info . 44))
(1083 (get-debug-data . 44))
(1084 (note-debug-data! . 44))
(1085 (interesting-debug-data? . 44))
(1086 (debug-data-names . 44))
(1087 (template-debug-data . 44))
(1088 (template-id . 44))
(1089 (template-name . 44))
(1090 (template-names . 44))
(1091 (compile-top . 45))
(1092 (compile . 45))
(1093 (compilators . 45))
(1094 (define-compilator . 45))
(1095 (compile-constant . 45))
(1096 (compile-begin . 45))
(1097 (compile-call . 45))
(1098 (lambda-node? . 45))
(1099 (compile-redex . 45))
(1100 (compile-unknown-call . 45))
(1101 (maybe-push-continuation . 45))
(1102 (push-arguments . 45))
(1103 (push-all-with-names . 45))
(1104 (compile-lambda . 45))
(1105 (compile-lambda-code . 45))
(1106 (compile-letrec . 45))
(1107 (compile-body . 45))
(1108 (operator/letrec . 45))
(1109 (make-cont . 45))
(1110 (cont-segment . 45))
(1111 (cont-source-info . 45))
(1112 (return-cont-segment . 45))
(1113 (return-cont . 45))
(1114 (return-cont? . 45))
(1115 (fall-through-cont . 45))
(1116 (fall-through-cont? . 45))
(1117 (ignore-values-segment . 45))
(1118 (ignore-values-cont . 45))
(1119 (ignore-values-cont? . 45))
(1120 (deliver-value . 45))
(1121 (named-cont . 45))
(1122 (cont-name . 45))
(1123 (bind-vars . 45))
(1124 (initial-cenv . 45))
(1125 (environment-level . 45))
(1126 (funny-name/lexical-level . 45))
(1127 (name-node-binding . 45))
(1128 (generate-trap . 45))
(1129 (careful-sequentially . 45))
(1130 (large-segment-size . 45))
(1131 (type-check . 45))
(1132 (set-type-check?! . 45))
(1133 (*type-check?* . 45))
(1134 (diagnose-call-error . 45))
(1135 (define-compiler-primitive . 45))
(1136 (closed-compilators . 45))
(1137 (define-closed-compilator . 45))
(1138 (get-closed-compilator . 45))
(1139 (direct-compilator . 45))
(1140 (direct-closed-compilator . 45))
(1141 (nargs->domain . 45))
(1142 (define-simple-primitive . 45))
(1143 (simple-compilator . 45))
(1144 (simple-closed-compilator . 45))
(1145 (symbol-append . 45))
(1146 (define-data-struct-primitives . 45))
(1147 (define-vector-primitives . 45))
(1148 (define-n-ary-compiler-primitive . 45))
(1149 (n-ary-primitive-compilator . 45))
(1150 (push-all-but-last . 45))
(1151 (compile-form . 45))
(1152 (compile-file . 45))
(1153 (compile-and-run-forms . 45))
(1154 (compile-and-run-file . 45))
(1155 (compile-and-run-scanned-forms . 45))
(1156 (compile-scanned-forms . 45))
(1157 (compile-scanned-form . 45))
(1158 (define-node? . 45))
(1159 (compile-definition . 45))
(1160 (get-location . 45))
(1161 (location-for-undefined . 45))
(1162 (package-accessor-on-demand . 45))
(1163 (location-on-demand . 45))
(1164 (package-undefineds . 45))
(1165 (location-for-reference . 45))
(1166 (package-undefined-but-assigneds . 45))
(1167 (location-for-assignment . 45))
(1168 (note-caching . 45))
(1169 (grumble . 45))
(1170 (make-startup-procedure . 45))
(1171 (an-ignore-values-cont . 45))
(1172 (eval . 51))
(1173 (load . 51))
(1174 (eval-from-file . 51))
(1175 (eval-scanned-forms . 51))
(1176 (invoke-template . 51))
(1177 (:closure . 26))
(1178 (:code-vector . 26))
(1179 (:location . 26))
(1180 (:template . 26))
(1181 (continuation-cont . 25))
(1182 (continuation-pc . 25))
(1183 (continuation-template . 25))
(1184 (continuation-env . 25))
(1185 (continuation-overhead . 25))
(1186 (continuation-arg . 25))
(1187 (continuation-arg-count . 25))
(1188 (continuation-parent . 25))
(1189 (:continuation . 25))
(1190 (usual-exception-handler . 27))
(1191 (define-exception-handler . 27))
(1192 (signal-exception . 27))
(1193 (exception-handlers . 27))
(1194 (make-opcode-generic! . 27))
(1195 (really-signal-condition . 27))
(1196 (with-handler . 27))
(1197 ($condition-handlers . 27))
(1198 (initialize-exceptions! . 27))
(1199 (last-resort-condition-handler . 27))
(1200 (report-utter-lossage . 27))
(1201 (continuation-preview . 27))
(1202 (ignore-errors . 27))
(1203 (*wna-handlers* . 27))
(1204 (define-wna-handler . 27))
(1205 (op/check-nargs= . 27))
(1206 (wna-lose . 27))
(1207 (comparison-wna . 27))
(1208 (display-condition . 34))
(1209 (really-display-condition . 34))
(1210 (*depth* . 34))
(1211 (*length* . 34))
(1212 (&disclose-condition . 34))
(1213 (disclose-condition . 34))
(1214 (limited-write . 34))
(1215 (command-processor . 53))
(1216 (mini-load . 53))
(1217 (read-string . 53))
(1218 (interrupt-handlers . 28))
(1219 (initialize-interrupts! . 28))
(1220 (time-option/ticks-per-second . 28))
(1221 (one-second . 28))
(1222 (no-interrupts . 28))
(1223 (all-interrupts . 28))
(1224 (with-interrupts-inhibited . 28))
(1225 (with-interrupts-allowed . 28))
(1226 (with-interrupts . 28))
(1227 (enabled-interrupts . 28))
(1228 (interrupt-before-heap-overflow! . 28))
(1229 (interrupt/memory-shortage . 28))
(1230 (memory-status-option/set-minimum-recovered-space! . 28))
(1231 (memory-status-option/heap-size . 28))
(1232 (usual-resumer . 32))
(1233 (start . 54))
(1234 (make-built-in-structures . 54))
(1235 (scheme-for-syntax . 54))
(1236 (initialize-interaction-environment! . 54))
(1237 (make-initial-package . 54))
(1238 (make-env-for-syntax-promise . 54))
(1239 (inline-transform . 49))
(1240 (make-substitution . 49))
(1241 (substitute . 49))
(1242 (qualified? . 49))
(1243 (qualified->name . 49))
(1244 (get-qualified-env . 49))
(1245 (name->qualified . 49))
(1246 (qlookup . 49))
(1247 (generic-lookup . 49))
(1248 (operator . 56))
(1249 (simple-interface . 56))
(1250 (package . 56))
(1251 (transform . 56))
(1252 (:syntax . 47))
(1253 (:values . 47))
(1254 (:arguments . 47))
(1255 (:value . 47))
(1256 (procedure . 47))
(1257 (:boolean . 47))
(1258 (:char . 47))
(1259 (:null . 47))
(1260 (:unspecific . 47))
(1261 (:number . 47))
(1262 (:complex . 47))
(1263 (:real . 47))
(1264 (:rational . 47))
(1265 (:integer . 47))
(1266 (:exact-integer . 47))
(1267 (:pair . 47))
(1268 (:string . 47))
(1269 (:symbol . 47))
(1270 (:vector . 47))
(1271 (:procedure . 47))
(1272 (:input-port . 47))
(1273 (:output-port . 47))
(1274 (:error . 47))
(1275 (:escape . 47))
(1276 (:structure . 47))
(1277 (:type . 47))
(1278 (def . 46))
(1279 (define-values . 46))
(1280 (define-interface . 46))
(1281 (export . 46))
(1282 (an-interface . 46))
(1283 (really-export . 46))
(1284 (define-structure . 46))
(1285 (define-structures . 46))
(1286 (a-package . 46))
(1287 (define-module . 46))
(1288 (make-a-package . 46))
(1289 (init-defpackage! . 46))
(1290 (loser . 46))
(1291 (*evaluator* . 46))
(1292 (*make-package-for-syntax-promise* . 46))
(1293 (interface-of . 46))
(1294 (*verify-later!* . 46))
(1295 (verify-later! . 46))
(1296 (set-verify-later! . 46))
(1297 (ensure-loaded . 55))
-
; Template uid -> name, parent, pc in parent, env maps
(1 current-cont 0 4 ())
(2 closure-template 0 12 ())
(3 continuation-ref 0 20 ())
(4 output-port? 0 28 ())
(5 closure? 0 36 ())
(6 complex? 0 44 ())
(7 arithmetic-shift 0 52 ())
(8 signal-condition 0 60 ())
(9 integer? 0 68 ())
(10 make-closure 0 76 ())
(11 template-ref 0 84 ())
(12 make-rectangular 0 92 ())
(13 string=? 0 100 ())
(14 extended-number? 0 108 ())
(15 reverse-list->string 0 116 ())
(16 denominator 0 124 ())
(17 call-with-values 0 132 ())
(18 weak-pointer-ref 0 140 ())
(19 find-all-symbols 0 148 ())
(20 code-vector? 0 156 ())
(21 pop 0 164 ())
(22 exp 0 172 ())
(23 sin 0 180 ())
(24 make-extended-number 0 188 ())
(25 cos 0 196 ())
(26 collect 0 204 ())
(27 external-lookup 0 212 ())
(28 tan 0 220 ())
(29 log 0 228 ())
(30 continuation-length 0 236 ())
(31 make-code-vector 0 244 ())
(33 cdr 32 4 ())
(34 bitwise-xor 32 12 ())
(35 car 32 20 ())
(36 string? 32 28 ())
(37 symbol? 32 36 ())
(38 set-cdr! 32 44 ())
(39 bitwise-not 32 52 ())
(40 vector? 32 60 ())
(41 closure-env 32 68 ())
(42 set-car! 32 76 ())
(43 bitwise-ior 32 84 ())
(44 number? 32 92 ())
(45 template-length 32 100 ())
(46 string-hash 32 108 ())
(47 pop-env 32 116 ())
(48 primitive-catch 32 124 ())
(49 make-string 32 132 ())
(50 input-port? 32 140 ())
(51 record? 32 148 ())
(52 make-vector 32 156 ())
(53 extended-number-set! 32 164 ())
(54 write-image 32 172 ())
(55 eq? 32 180 ())
(56 bitwise-and 32 188 ())
(57 location-id 32 196 ())
(58 code-vector-set! 32 204 ())
(59 set-location-id! 32 212 ())
(60 make-record 32 220 ())
(61 intern 32 228 ())
(62 values 32 236 ())
(63 unassigned 32 244 ())
(64 string-set! 32 252 ())
(65 vector-set! 32 260 ())
(66 extended-number-ref 32 268 ())
(67 unspecific 32 276 ())
(68 schedule-interrupt 32 284 ())
(69 code-vector-ref 32 292 ())
(70 find-all-xs 32 300 ())
(71 char-ready? 32 308 ())
(72 set-interrupt-handlers! 32 316 ())
(73 eof-object? 32 324 ())
(74 record-set! 32 332 ())
(75 ascii->char 32 340 ())
(76 char->ascii 32 348 ())
(77 set-enabled-interrupts! 32 356 ())
(78 external-value 32 364 ())
(79 make-immutable! 32 372 ())
(80 close-port 32 380 ())
(81 string-ref 32 388 ())
(82 immutable? 32 396 ())
(83 vector-ref 32 404 ())
(84 exact? 32 412 ())
(85 write-char 32 420 ())
(86 symbol->string 32 428 ())
(87 make-polar 32 436 ())
(88 record-ref 32 444 ())
(89 numerator 32 452 ())
(90 extended-number-length 32 460 ())
(91 error 32 468 ())
(92 exact->inexact 32 476 ())
(93 inexact->exact 32 484 ())
(94 apply 32 492 ())
(95 memory-status 32 500 ())
(97 code-vector-length 96 4 ())
(98 floor 96 12 ())
(99 with-continuation 96 20 ())
(100 magnitude 96 28 ())
(101 nargs 96 36 ())
(102 char=? 96 44 ())
(103 char<? 96 52 ())
(104 continuation? 96 60 ())
(105 remainder 96 68 ())
(106 vm-return 96 76 ())
(107 false 96 84 ())
(108 angle 96 92 ())
(109 open-port 96 100 ())
(110 string-length 96 108 ())
(111 external? 96 116 ())
(112 make-continuation 96 124 ())
(113 vector-length 96 132 ())
(114 template? 96 140 ())
(115 rational? 96 148 ())
(116 location? 96 156 ())
(117 external-name 96 164 ())
(118 set-exception-handler! 96 172 ())
(119 pair? 96 180 ())
(120 make-external 96 188 ())
(121 record-length 96 196 ())
(122 external-call 96 204 ())
(123 set-dynamic-state! 96 212 ())
(124 get-cont-from-heap 96 220 ())
(125 real-part 96 228 ())
(126 real? 96 236 ())
(127 make-template 96 244 ())
(128 imag-part 96 252 ())
(129 make-location 96 260 ())
(130 = 96 268 ())
(131 < 96 276 ())
(132 char? 96 284 ())
(133 quotient 96 292 ())
(134 / 96 300 ())
(135 weak-pointer? 96 308 ())
(136 - 96 316 ())
(137 continuation-set! 96 324 ())
(138 peek-char 96 332 ())
(139 + 96 340 ())
(140 * 96 348 ())
(141 contents 96 356 ())
(142 sqrt 96 364 ())
(143 read-char 96 372 ())
(144 set-contents! 96 380 ())
(145 push 96 388 ())
(146 make-weak-pointer 96 396 ())
(147 get-dynamic-state 96 404 ())
(148 trap 96 412 ())
(149 cons 96 420 ())
(150 template-set! 96 428 ())
(151 time 96 436 ())
(152 location-defined? 96 444 ())
(153 asin 96 452 ())
(154 write-string 96 460 ())
(155 vm-extension 96 468 ())
(156 force-output 96 476 ())
(157 acos 96 484 ())
(158 set-location-defined?! 96 492 ())
(159 atan 96 500 ())
(161 char->integer 160 4 (#(4 12 #(c) ())))
(162 integer->char 160 12 (#(4 12 #(n) ())))
(163 invoke-closure 160 44 (#(7 14 #(closure args) ())))
(164 primitive-cwcc 160 52 (#(4 10 #(p) ())))
(165 #f 164 7 (#(4 11 #(cont) ())))
(166 make-undefined-location 160 60 (#(4 22 #(id) (#(14 22 #(loc) ())))))
(167 vector-unassigned? 160 68 (#(4 15 #(v i) ())))
(168 string-copy 160 76 (#(4 37 #(s) (#(11 37 #(z) (#(21 37 #(copy) (#(25 37 #(loop) ())))))))))
(169 loop 168 26 (#(4 44 #(i) ())))
(170 string->symbol 160 84 (#(4 31 #(string) ())))
(171 really-string->symbol 160 92 (#(4 46 #(string) (#(40 46 #(sym) ())))))
(172 flush-the-symbol-table! 160 107 ())
(173 restore-the-symbol-table! 160 115 ())
(174 maybe-open-input-file 160 135 (#(4 11 #(string) ())))
(175 maybe-open-output-file 160 143 (#(4 11 #(string) ())))
(176 open-input-file 160 151 (#(4 43 #(string) (#(13 43 #(temp##0) ())))))
(177 open-output-file 160 159 (#(4 43 #(string) (#(13 43 #(temp##1) ())))))
(179 signal 178 12 (#(7 17 #(type stuff) ())))
(180 warn 178 20 (#(7 23 #(message irritants) ())))
(181 syntax-error 178 28 (#(5 17 #(rest) ())))
(182 call-error 178 36 (#(7 29 #(message proc args) ())))
(184 not 183 4 (#(4 14 #(x) ())))
(185 boolean? 183 12 (#(4 27 #(x) (#(13 27 #(temp##2) ())))))
(186 eqv? 183 20 (#(4 57 #(x y) (#(13 57 #(temp##3) ())))))
(187 equal? 183 28 (#(4 158 #(obj1 obj2) (#(125 154 #(z) (#(140 152 #(loop) ())))))))
(188 loop 187 141 (#(4 58 #(i) ())))
(189 > 183 36 (#(4 11 #(x y) ())))
(190 <= 183 44 (#(4 18 #(x y) ())))
(191 >= 183 52 (#(4 18 #(x y) ())))
(192 max 183 60 (#(7 20 #(first rest) ())))
(193 #f 192 8 (#(4 19 #(x y) ())))
(194 min 183 68 (#(7 20 #(first rest) ())))
(195 #f 194 8 (#(4 19 #(x y) ())))
(196 abs 183 76 (#(4 23 #(n) ())))
(197 zero? 183 84 (#(4 11 #(x) ())))
(198 positive? 183 92 (#(4 11 #(x) ())))
(199 negative? 183 100 (#(4 11 #(x) ())))
(200 even? 183 108 (#(4 15 #(n) ())))
(201 odd? 183 116 (#(4 22 #(n) ())))
(202 caar 183 124 (#(4 13 #(x) ())))
(203 cadr 183 132 (#(4 13 #(x) ())))
(204 cdar 183 140 (#(4 13 #(x) ())))
(205 cddr 183 148 (#(4 13 #(x) ())))
(206 caaar 183 156 (#(4 16 #(x) ())))
(207 caadr 183 164 (#(4 16 #(x) ())))
(208 cadar 183 172 (#(4 16 #(x) ())))
(209 caddr 183 180 (#(4 16 #(x) ())))
(210 cdaar 183 188 (#(4 16 #(x) ())))
(211 cdadr 183 196 (#(4 16 #(x) ())))
(212 cddar 183 204 (#(4 16 #(x) ())))
(213 cdddr 183 212 (#(4 16 #(x) ())))
(214 caaaar 183 220 (#(4 19 #(x) ())))
(215 caaadr 183 228 (#(4 19 #(x) ())))
(216 caadar 183 236 (#(4 19 #(x) ())))
(217 caaddr 183 244 (#(4 19 #(x) ())))
(218 cadaar 183 252 (#(4 19 #(x) ())))
(219 cadadr 183 260 (#(4 19 #(x) ())))
(220 caddar 183 268 (#(4 19 #(x) ())))
(221 cadddr 183 276 (#(4 19 #(x) ())))
(222 cdaaar 183 284 (#(4 19 #(x) ())))
(223 cdaadr 183 292 (#(4 19 #(x) ())))
(224 cdadar 183 300 (#(4 19 #(x) ())))
(225 cdaddr 183 308 (#(4 19 #(x) ())))
(226 cddaar 183 316 (#(4 19 #(x) ())))
(227 cddadr 183 324 (#(4 19 #(x) ())))
(228 cdddar 183 332 (#(4 19 #(x) ())))
(229 cddddr 183 340 (#(4 19 #(x) ())))
(230 null? 183 348 (#(4 11 #(x) ())))
(231 list 183 356 (#(5 8 #(l) ())))
(232 length 183 364 (#(4 17 #(l) ())))
(233 #f 232 5 (#(4 11 #(ignore n) ())))
(234 append 183 372 (#(5 33 #(lists) (#(21 33 #(recur) ())))))
(235 recur 234 22 (#(4 50 #(lists) ())))
(236 reverse 183 380 (#(4 14 #(list) ())))
(237 append-reverse 183 388 (#(4 38 #(list seed) ())))
(238 list-tail 183 396 (#(4 33 #(l i) ())))
(239 list-ref 183 404 (#(4 22 #(l k) ())))
(240 mem 183 412 (#(4 7 #(pred) ())))
(241 #f 240 5 (#(4 20 #(obj l) (#(8 20 #(loop) ())))))
(242 loop 241 9 (#(4 49 #(l) ())))
(244 ass 243 21 (#(4 7 #(pred) ())))
(245 #f 244 5 (#(4 20 #(obj l) (#(8 20 #(loop) ())))))
(246 loop 245 9 (#(4 55 #(l) ())))
(247 assq 243 63 (#(4 49 #(x l) ())))
(248 list? 243 71 (#(4 23 #(l) (#(8 23 #(recur) ())))))
(249 recur 248 9 (#(4 105 #(l lag) (#(13 105 #(temp##5) (#(40 103 #(temp##4) ())))))))
(250 char>? 243 79 (#(4 11 #(x y) ())))
(251 char>=? 243 87 (#(4 18 #(x y) ())))
(252 char<=? 243 95 (#(4 18 #(x y) ())))
(253 char-whitespace? 243 103 (#(4 27 #(c) ())))
(254 char-lower-case? 243 111 (#(4 38 #(c) ())))
(255 char-upper-case? 243 119 (#(4 38 #(c) ())))
(256 char-numeric? 243 127 (#(4 38 #(c) ())))
(257 char-alphabetic? 243 135 (#(4 33 #(c) (#(18 33 #(temp##6) ())))))
(258 char-upcase 243 157 (#(4 30 #(c) ())))
(259 char-downcase 243 165 (#(4 30 #(c) ())))
(260 char-ci-compare 243 173 (#(4 7 #(pred) ())))
(261 #f 260 5 (#(4 32 #(c1 c2) ())))
(262 string 243 266 (#(5 12 #(rest) ())))
(263 substring 243 274 (#(4 37 #(s start end) (#(18 37 #(new-string) (#(22 37 #(loop##8) ())))))))
(264 loop##7 263 23 (#(4 51 #(i j) ())))
(265 string-append 243 282 (#(5 55 #(strings) (#(25 55 #(len) (#(35 55 #(new-string) (#(39 55 #(loop) ())))))))))
(266 #f 265 10 (#(4 13 #(s n) ())))
(267 loop 265 40 (#(4 51 #(s i) (#(24 51 #(string) (#(31 51 #(l) (#(35 51 #(loop##10) ())))))))))
(268 loop##9 267 36 (#(4 63 #(j i) ())))
(269 string->list 243 290 (#(4 34 #(v) (#(11 34 #(z) (#(15 34 #(loop##12) ())))))))
(270 loop##11 269 16 (#(4 42 #(i l) ())))
(271 list->string 243 298 (#(4 42 #(l) (#(23 42 #(v) (#(27 42 #(loop##14) ())))))))
(272 loop##13 271 28 (#(4 46 #(i l) ())))
(273 string-fill! 243 306 (#(4 27 #(v x) (#(11 27 #(z) (#(15 27 #(loop##16) ())))))))
(274 loop##15 273 16 (#(4 44 #(i) ())))
(275 make-string=? 243 314 (#(4 7 #(char=?) ())))
(276 #f 275 5 (#(4 40 #(s1 s2) (#(11 40 #(z) (#(26 38 #(loop) ())))))))
(277 loop 276 27 (#(4 59 #(i) ())))
(278 make-string<? 243 339 (#(4 7 #(char<? char=?) ())))
(279 #f 278 5 (#(4 49 #(s1 s2) (#(16 49 #(z1 z2) (#(33 49 #(z) (#(37 49 #(loop) ())))))))))
(280 loop 279 38 (#(4 100 #(i) (#(42 100 #(c1 c2) (#(60 100 #(temp##17) ())))))))
(281 string>? 243 387 (#(4 14 #(s1 s2) ())))
(282 string<=? 243 395 (#(4 26 #(s1 s2) ())))
(283 string>=? 243 403 (#(4 26 #(s1 s2) ())))
(284 string-ci>? 243 411 (#(4 14 #(s1 s2) ())))
(285 string-ci<=? 243 419 (#(4 26 #(s1 s2) ())))
(286 string-ci>=? 243 427 (#(4 26 #(s1 s2) ())))
(287 vector 243 435 (#(5 12 #(l) ())))
(288 vector->list 243 443 (#(4 29 #(v) (#(8 29 #(loop##19) ())))))
(289 loop##18 288 9 (#(4 41 #(i l) ())))
(290 list->vector 243 451 (#(4 41 #(l) (#(22 41 #(v) (#(26 41 #(loop##21) ())))))))
(291 loop##20 290 27 (#(4 46 #(i l) ())))
(292 vector-fill! 243 459 (#(4 27 #(v x) (#(11 27 #(z) (#(15 27 #(loop##23) ())))))))
(293 loop##22 292 16 (#(4 44 #(i) ())))
(294 map 243 467 (#(7 39 #(proc first rest) ())))
(295 map1 243 475 (#(4 52 #(proc l) ())))
(296 map2+ 243 483 (#(4 110 #(proc first rest) (#(17 35 #(temp##24) ())))))
(297 for-each 243 491 (#(7 26 #(proc first rest) (#(11 26 #(loop) ())))))
(298 loop 297 12 (#(4 104 #(first rest) (#(17 35 #(temp##25) ())))))
(299 make-promise 243 499 (#(4 13 #(thunk-then-result) (#(10 13 #(already-run? started?) ())))))
(300 #f 299 11 ())
(301 force 243 507 (#(4 8 #(promise) ())))
(303 unspecific 302 4 ())
(304 reduce 302 12 (#(4 47 #(cons nil list) ())))
(305 filter 302 20 (#(4 17 #(pred lst) ())))
(306 #f 305 5 (#(4 30 #(x rest) ())))
(307 pos 302 28 (#(4 7 #(pred) ())))
(308 #f 307 5 (#(4 23 #(thing l) (#(8 23 #(loop) ())))))
(309 loop 308 9 (#(4 56 #(i l) ())))
(310 any 302 87 (#(4 53 #(pred l) (#(32 53 #(temp##26) ())))))
(311 every 302 95 (#(4 48 #(pred l) ())))
(312 sublist 302 103 (#(4 56 #(l start end) (#(41 56 #(recur) ())))))
(313 recur 312 42 (#(4 47 #(l end) ())))
(314 last 302 111 (#(4 32 #(x) ())))
(315 insert 302 119 (#(4 79 #(x l <) ())))
(317 inexact? 316 4 (#(4 15 #(n) ())))
(318 modulo 316 12 (#(4 49 #(x y) (#(13 49 #(r) ())))))
(319 ceiling 316 20 (#(4 16 #(x) ())))
(320 truncate 316 28 (#(4 29 #(x) ())))
(321 round 316 36 (#(4 68 #(x) (#(17 68 #(x+1/2) (#(23 68 #(r) ())))))))
(322 gcd 316 44 (#(5 18 #(integers) ())))
(323 #f 322 6 (#(4 79 #(x y) ())))
(324 euclid 316 52 (#(4 59 #(x y) ())))
(325 lcm 316 60 (#(5 18 #(integers) ())))
(326 #f 325 6 (#(4 62 #(x y) (#(21 62 #(g) ())))))
(327 expt 316 68 (#(4 39 #(x n) ())))
(328 raise-to-integer-power 316 76 (#(4 64 #(z p) (#(26 41 #(loop##28) ())))))
(329 loop##27 328 27 (#(4 43 #(a p) ())))
(331 rationalize 330 4 (#(4 36 #(x e) (#(18 36 #(e) ())))))
(332 simplest-rational 330 12 (#(4 140 #(x y) (#(8 140 #(simplest-rational-internal) ())))))
(333 simplest-rational-internal 332 9 (#(4 90 #(x y) (#(14 90 #(fx fy) ())))))
(335 record-type 334 4 (#(4 12 #(r) ())))
(336 make-record-type 334 27 (#(4 74 #(name field-names) (#(21 74 #(r) ())))))
(337 record-type? 334 35 (#(4 25 #(obj) ())))
(338 record-type-uid 334 43 (#(4 12 #(rt) ())))
(339 record-type-name 334 51 (#(4 12 #(rt) ())))
(340 record-type-field-names 334 59 (#(4 12 #(rt) ())))
(341 record-type-discloser 334 67 (#(4 12 #(rt) ())))
(342 record-field-index 334 75 (#(4 28 #(rt name) (#(8 28 #(loop) ())))))
(343 loop 342 9 (#(4 78 #(names i) ())))
(344 record-constructor 334 83 (#(4 45 #(rt names) (#(42 45 #(indexes size) ())))))
(345 #f 344 9 (#(4 14 #(name) ())))
(346 #f 344 43 (#(5 45 #(args) (#(14 45 #(r) (#(29 45 #(loop) ())))))))
(347 loop 346 30 (#(4 140 #(is as) ())))
(348 record-accessor 334 91 (#(4 57 #(rt name) (#(54 57 #(index error-cruft) ())))))
(349 #f 348 55 (#(4 39 #(r) ())))
(350 record-modifier 334 99 (#(4 57 #(rt name) (#(54 57 #(index error-cruft) ())))))
(351 #f 350 55 (#(4 45 #(r x) ())))
(352 record-predicate 334 107 (#(4 7 #(rt) ())))
(353 #f 352 5 (#(4 25 #(x) ())))
(354 define-record-discloser 334 115 (#(4 56 #(rt proc) ())))
(355 disclose-record 334 123 (#(4 78 #(r) (#(21 76 #(rt) (#(54 74 #(temp##29) ())))))))
(356 default-record-discloser 334 131 (#(4 6 #(r) ())))
(357 #f 334 173 (#(4 27 #(rt) ())))
(360 simple-type-id 359 44 (#(4 12 #(r##30) ())))
(361 simple-type-priority 359 52 (#(4 12 #(r##31) ())))
(362 simple-type-predicate 359 60 (#(4 12 #(r##32) ())))
(363 simple-type-superiors 359 68 (#(4 12 #(r##33) ())))
(364 #f 359 97 (#(4 24 #(c) ())))
(365 make-simple-type 359 108 (#(4 29 #(supers predicate id) ())))
(366 compute-priority 359 116 (#(4 44 #(supers) ())))
(367 %type-priority 359 132 (#(4 54 #(type) ())))
(368 %type-predicate 359 140 (#(4 54 #(type) ())))
(369 %same-type? 359 148 (#(4 63 #(t1 t2) (#(13 63 #(temp##34) ())))))
(370 value? 359 212 (#(4 7 #(x) ())))
(371 #f 359 268 (#(4 6 #(x) ())))
(373 #f 372 116 (#(4 16 #(n) ())))
(374 #f 372 481 (#(491 494 #(add-method!) ()) #(71 74 #(r-priority) ())))
(375 record-type-priority 374 72 (#(4 7 #(rt) ())))
(376 method-info-proc 374 121 (#(4 12 #(r##35) ())))
(377 method-info-n-ary? 374 129 (#(4 12 #(r##36) ())))
(378 method-info-types 374 137 (#(4 12 #(r##37) ())))
(379 #f 374 166 (#(4 35 #(info) ())))
(380 empty-method-list 374 177 ())
(381 insert-method 374 185 (#(4 20 #(info ms) (#(8 20 #(recur) ())))))
(382 recur 381 9 (#(4 103 #(ms) ())))
(383 same-applicability? 374 193 (#(4 53 #(info1 info2) ())))
(384 every2 374 201 (#(4 75 #(pred l1 l2) ())))
(385 more-specific? 374 209 (#(4 136 #(info1 info2) (#(22 136 #(t1 t2) (#(79 136 #(l1 l2 foo?) (#(93 122 #(temp##39) (#(105 122 #(loop) ())))))))))))
(386 loop 385 106 (#(4 87 #(l1 l2) (#(38 87 #(temp##38) ())))))
(387 more-specific-type? 374 217 (#(4 29 #(t1 t2) ())))
(388 method-table-id 374 265 (#(4 12 #(r##40) ())))
(389 method-table-set-perform! 374 273 (#(4 12 #(r##41) ())))
(390 method-table-get-perform 374 281 (#(4 12 #(r##42) ())))
(391 make-generic 374 289 (#(4 12 #(r##43) ())))
(392 method-table-prototype 374 297 (#(4 12 #(r##44) ())))
(393 method-table-methods 374 305 (#(4 12 #(r##45) ())))
(394 set-method-table-methods! 374 313 (#(4 15 #(r##46 new##47) ())))
(395 #f 374 342 (#(4 24 #(t) ())))
(396 make-method-table 374 353 (#(7 80 #(id option) (#(43 80 #(prototype) (#(62 80 #(mtable) ())))))))
(397 #f 396 48 (#(4 26 #(generic get-perform set-perform!) ())))
(398 #f 396 70 (#(7 21 #(next-method args) ())))
(399 make-cell-for-generic 374 361 (#(6 17 #(perform) ())))
(400 #f 399 7 (#(5 12 #(args) ())))
(401 #f 399 10 ())
(402 #f 399 13 (#(4 10 #(new) ())))
(403 add-to-method-table! 374 369 (#(4 65 #(mtable info) (#(26 65 #(l) ())))))
(404 set-final-method! 374 377 (#(4 29 #(mtable proc) ())))
(405 apply-generic 374 385 (#(4 22 #(mtable args) ())))
(406 methods->perform 374 393 (#(4 20 #(l prototype) (#(8 20 #(recur) ())))))
(407 recur 406 9 (#(4 76 #(l) (#(12 76 #(info) (#(22 76 #(proc) ())))))))
(408 last-action 374 401 (#(4 7 #(proc) ())))
(409 #f 408 5 (#(4 13 #(args) ())))
(410 one-action 374 409 (#(4 7 #(pred proc perform-next) ())))
(411 #f 410 5 (#(4 35 #(args) ())))
(412 #f 411 19 ())
(413 argument-sequence-predicate 374 417 (#(4 25 #(info) (#(8 25 #(recur) ())))))
(414 recur 413 9 (#(4 87 #(types) (#(61 87 #(pred check-rest) ())))))
(415 check-for-next 374 425 (#(4 7 #(check-rest) ())))
(416 #f 415 5 (#(4 25 #(args) ())))
(417 check-next 374 433 (#(4 7 #(pred check-rest) ())))
(418 #f 417 5 (#(4 44 #(args) ())))
(419 add-method! 374 487 (#(4 8 #(next-method##48 mtable info) ())))
(420 #f 374 508 (#(477 480 #(&type-priority) ()) #(415 418 #(&type-priority) ()) #(338 341 #(type-priority) ()) #(273 276 #(&type-predicate) ()) #(211 214 #(&type-predicate) ()) #(134 137 #(type-predicate) ()) #(72 82 #(info) ()) #(61 64 #(add-method!) ())))
(421 add-method! 420 57 (#(4 14 #(next-method mtable info) ())))
(422 type-predicate 420 130 (#(4 8 #(next-method##49 t) ())))
(423 &type-predicate 420 207 (#(4 11 #(next-method t) ())))
(424 &type-predicate 420 269 (#(4 12 #(next-method t) ())))
(425 type-priority 420 334 (#(4 8 #(next-method##50 t) ())))
(426 &type-priority 420 411 (#(4 11 #(next-method t) ())))
(427 &type-priority 420 473 (#(4 12 #(next-method t) ())))
(428 #f 420 492 (#(403 406 #(&same-type?) ()) #(338 341 #(&same-type?) ()) #(258 261 #(same-type?) ()) #(190 193 #(&type-superiors) ()) #(128 131 #(&type-superiors) ()) #(51 54 #(type-superiors) ())))
(429 type-superiors 428 47 (#(4 8 #(next-method##51 t) ())))
(430 &type-superiors 428 124 (#(4 11 #(next-method t) ())))
(431 &type-superiors 428 186 (#(4 12 #(next-method t) ())))
(432 same-type? 428 254 (#(4 8 #(next-method##52 t1 t2) ())))
(433 &same-type? 428 334 (#(4 11 #(next-method t1 t2) ())))
(434 &same-type? 428 399 (#(4 42 #(next-method t1 t2) ())))
(435 #f 428 458 (#(484 487 #(&add-method!) ()) #(410 413 #(&disclose) ()) #(348 351 #(&disclose) ()) #(271 274 #(disclose) ()) #(206 209 #(&same-type?) ()) #(141 144 #(&type-priority) ()) #(79 82 #(&type-predicate) ())))
(436 singleton-value 435 4 (#(4 12 #(r##53) ())))
(437 #f 435 16 (#(4 24 #(s) ())))
(438 compare-to 435 27 (#(4 7 #(val) ())))
(439 #f 438 5 (#(4 14 #(x) ())))
(440 &type-predicate 435 75 (#(4 16 #(next-method s) ())))
(441 &type-priority 435 137 (#(4 7 #(next-method s) ())))
(442 &same-type? 435 202 (#(4 24 #(next-method s1 s2) ())))
(443 disclose 435 267 (#(4 8 #(next-method##54 x) ())))
(444 &disclose 435 344 (#(4 6 #(next-method obj) ())))
(445 &disclose 435 406 (#(4 29 #(next-method obj) (#(18 29 #(temp##55) ())))))
(446 &add-method! 435 480 (#(4 59 #(next-method d info) (#(17 59 #(t) ())))))
(447 proc->discloser 435 502 (#(4 7 #(proc) ())))
(448 #f 447 5 (#(4 14 #(arg) ())))
(449 #f 448 5 ())
(451 #f 450 31 (#(474 508 #(a-minus-ten zero digit->integer do-it string->integer) ()) #(433 436 #(&really-string->number) ()) #(333 336 #(&really-string->number) ()) #(209 238 #(a-minus-10 zero integer->digit integer->string) ()) #(178 181 #(&number->string) ()) #(113 116 #(&number->string) ()) #(48 51 #(&number->string) ())))
(452 &number->string 451 44 (#(4 14 #(next-method n) ())))
(453 &number->string 451 109 (#(4 7 #(next-method n radix) ())))
(454 &number->string 451 174 (#(4 14 #(next-method n radix) ())))
(455 integer->digit 451 226 (#(4 26 #(n) ())))
(456 integer->string 451 231 (#(4 89 #(n radix) (#(53 89 #(magnitude) ()) #(35 50 #(recur) ())))))
(457 recur 456 36 (#(4 59 #(n l) ())))
(458 string->number 451 245 (#(7 181 #(string options) (#(52 181 #(radix) (#(148 181 #(radix) (#(155 181 #(len) (#(159 181 #(loop) ()))))) #(61 145 #(temp##56) ())))))))
(459 loop 458 160 (#(4 251 #(pos exactness? exact? radix? radix) (#(234 246 #(loop) ()) #(48 194 #(pos) (#(77 194 #(radix-is exactness-is) (#(97 194 #(temp##57) ())))))))))
(460 radix-is 459 70 (#(4 35 #(radix) ())))
(461 exactness-is 459 73 (#(4 35 #(exact?) ())))
(462 loop 459 235 (#(4 109 #(pos) ())))
(463 &really-string->number 451 329 (#(4 6 #(next-method string radix xact?) ())))
(464 #f 451 367 (#(4 35 #(s) (#(15 33 #(loop) ())))))
(465 loop 464 16 (#(4 202 #(i) (#(26 202 #(c) (#(44 186 #(temp##61) (#(92 186 #(temp##60) (#(140 186 #(temp##59) (#(168 184 #(temp##58) ())))))))))))))
(466 &really-string->number 451 429 (#(4 38 #(next-method string radix xact?) (#(21 38 #(n) ())))))
(467 set-exactness 451 451 (#(4 34 #(n xact?) ())))
(468 digit->integer 451 491 (#(4 117 #(c radix) (#(81 117 #(n) ()) #(28 42 #(n) ())))))
(469 do-it 451 496 (#(4 50 #(string pos sign radix) (#(11 50 #(len) (#(35 50 #(loop) ())))))))
(470 loop 469 36 (#(4 85 #(n pos) (#(50 85 #(d) ())))))
(471 string->integer 451 501 (#(4 93 #(string radix) ())))
(473 thread-dynamic-env 472 44 (#(4 12 #(r##62) ())))
(474 current-thread 472 52 ())
(475 set-current-thread! 472 60 (#(4 8 #(thread) ())))
(476 get-dynamic-env 472 68 ())
(477 set-dynamic-env! 472 76 (#(4 14 #(env) ())))
(478 initialize-dynamic-state! 472 84 ())
(479 with-dynamic-env 472 92 (#(4 52 #(env thunk) (#(13 52 #(saved-env) (#(42 49 #(x) ())))))))
(480 #f 479 27 (#(5 21 #(results) ())))
(481 empty-dynamic-env 472 100 ())
(482 fluid-top-level-value 472 148 (#(4 12 #(r##63) ())))
(483 set-fluid-top-level-value! 472 156 (#(4 15 #(r##64 new##65) ())))
(484 fluid 472 164 (#(4 44 #(f) (#(25 44 #(probe) ())))))
(485 set-fluid! 472 172 (#(4 50 #(f val) (#(25 50 #(probe) ())))))
(486 let-fluid 472 180 (#(4 30 #(f val thunk) ())))
(487 let-fluids 472 188 (#(5 28 #(args) (#(9 28 #(loop) ())))))
(488 loop 487 10 (#(4 66 #(args env) ())))
(489 fluid-lookup 472 196 (#(4 40 #(env f) (#(21 40 #(probe) ())))))
(491 dynamic-wind 490 4 (#(4 110 #(in body out) (#(94 110 #(results) ()) #(38 70 #(here) ())))))
(492 #f 491 85 ())
(493 call-with-current-continuation 490 12 (#(4 11 #(proc) ())))
(494 #f 493 5 (#(4 32 #(cont) (#(13 32 #(env) ())))))
(495 continuation->procedure 490 20 (#(4 7 #(cont env) ())))
(496 #f 495 5 (#(5 57 #(results) ())))
(497 #f 496 54 ())
(498 point-parent 490 68 (#(4 12 #(r##66) ())))
(499 point-dynamic-env 490 76 (#(4 12 #(r##67) ())))
(500 point-out 490 84 (#(4 12 #(r##68) ())))
(501 point-in 490 92 (#(4 12 #(r##69) ())))
(502 point-depth 490 100 (#(4 12 #(r##70) ())))
(505 get-dynamic-point 490 153 ())
(506 env-dynamic-point 490 161 (#(4 14 #(env) ())))
(507 let-dynamic-point 490 169 (#(4 30 #(point thunk) ())))
(508 travel-to-point! 490 177 (#(4 121 #(here target) ())))
(510 current-input-port 509 52 ())
(511 current-output-port 509 60 ())
(512 error-output-port 509 68 ())
(513 with-initial-ports 509 76 (#(4 29 #(in out thunk) ())))
(514 call-with-mumble-file 509 84 (#(4 7 #(open close) ())))
(515 #f 514 5 (#(4 21 #(string proc) (#(8 21 #(port) ())))))
(516 #f 515 9 ())
(517 #f 515 12 ())
(518 #f 515 15 ())
(519 with-input-from-file 509 132 (#(4 14 #(string thunk) ())))
(520 #f 519 8 (#(4 30 #(port) ())))
(521 with-output-to-file 509 140 (#(4 14 #(string thunk) ())))
(522 #f 521 8 (#(4 30 #(port) ())))
(523 newline 509 148 (#(5 21 #(port-option) ())))
(524 output-port-option 509 156 (#(4 60 #(port-option) ())))
(525 input-port-option 509 164 (#(4 60 #(port-option) ())))
(527 write 526 4 (#(7 37 #(obj port-option) (#(21 37 #(port) (#(25 37 #(recur) ())))))))
(528 recur 527 26 (#(4 17 #(obj) ())))
(529 recurring-write 526 12 (#(4 156 #(obj port recur) ())))
(530 write-boolean 526 20 (#(4 20 #(mumble port) ())))
(531 write-number 526 28 (#(4 23 #(n port) ())))
(532 write-char-literal 526 36 (#(4 46 #(obj port) (#(18 46 #(probe) ())))))
(533 character-name 526 44 (#(4 30 #(char) ())))
(534 write-string-literal 526 52 (#(4 33 #(obj port) (#(17 33 #(len) (#(21 33 #(loop##73) ())))))))
(535 loop##71 534 22 (#(4 98 #(i) (#(36 86 #(c) (#(49 64 #(temp##72) ())))))))
(536 write-list 526 60 (#(4 92 #(obj port recur) (#(66 84 #(loop) ())))))
(537 loop 536 67 (#(4 91 #(l n) ())))
(538 quotation? 526 68 (#(4 52 #(obj) ())))
(539 write-vector 526 76 (#(4 73 #(obj port recur) (#(21 65 #(z) (#(51 63 #(loop) ())))))))
(540 loop 539 52 (#(4 67 #(i) (#(22 67 #(temp##74) ())))))
(541 write-other 526 84 (#(4 180 #(obj port recur) (#(18 180 #(temp##75) (#(28 77 #(l) ())))))))
(542 #f 541 57 (#(4 19 #(x) ())))
(543 display-type-name 526 92 (#(4 114 #(name port) (#(19 104 #(s) (#(26 104 #(len) (#(82 94 #(loop##78) ())))))))))
(544 loop##76 543 83 (#(4 63 #(i) (#(22 63 #(temp##77) ())))))
(545 display 526 100 (#(7 37 #(obj port-option) (#(21 37 #(port) (#(25 37 #(recur) ())))))))
(546 recur 545 26 (#(4 44 #(obj) ())))
(548 condition-supertypes 547 12 (#(4 14 #(type) ())))
(549 define-condition-type 547 20 (#(4 42 #(type supertypes) ())))
(550 #f 549 19 (#(4 48 #(sup) (#(18 48 #(temp##79) ())))))
(551 condition-predicate 547 28 (#(4 7 #(name) ())))
(552 #f 551 5 (#(4 59 #(c) (#(28 57 #(probe) ())))))
(553 condition? 547 36 (#(4 39 #(x) ())))
(554 make-exception 547 204 (#(4 19 #(opcode args) ())))
(555 #f #f #f (#(438 448 #(number-sharp-macro) ()) #(154 185 #(sub-read-constituent) ()) #(134 144 #(sub-read-whitespace) ())))
(556 read 555 4 (#(5 32 #(port-option) (#(19 32 #(port) (#(23 32 #(loop) ())))))))
(557 loop 556 24 (#(16 80 #(form) ())))
(558 sub-read-carefully 555 12 (#(4 64 #(port) (#(18 64 #(form) ())))))
(559 make-reader-token 555 37 (#(4 13 #(message) ())))
(560 reader-token? 555 45 (#(4 23 #(form) ())))
(561 sub-read 555 87 (#(4 35 #(port) (#(10 35 #(c) ())))))
(562 #f 555 98 (#(4 17 #(c port) ())))
(563 set-standard-syntax! 555 121 (#(4 27 #(char terminating? reader) ())))
(564 sub-read-whitespace 555 130 (#(4 13 #(c port) ())))
(565 #f 555 135 (#(4 15 #(c) ())))
(566 sub-read-constituent 555 150 (#(4 26 #(c port) ())))
(567 #f 555 155 (#(4 16 #(c) ())))
(568 set-standard-read-macro! 555 190 (#(4 17 #(c terminating? proc) ())))
(569 sub-read-list 555 198 (#(4 130 #(c port) (#(18 130 #(form) (#(69 109 #(last-form) (#(83 109 #(another-form) ())))))))))
(570 #f 555 231 (#(4 11 #(c port) ())))
(571 #f 555 249 (#(4 25 #(c port) ())))
(572 #f 555 267 (#(4 25 #(c port) ())))
(573 #f 555 285 (#(4 76 #(c port) (#(12 76 #(next) (#(57 76 #(keyword) ())))))))
(574 #f 555 303 (#(4 25 #(c port) (#(10 25 #(loop) ())))))
(575 loop 574 11 (#(4 162 #(l i) (#(10 162 #(c) (#(43 126 #(c) (#(73 88 #(temp##80) ())))))))))
(576 #f 555 321 (#(4 25 #(c port) ())))
(577 gobble-line 555 332 (#(4 17 #(port) (#(8 17 #(loop) ())))))
(578 loop 577 9 (#(8 32 #(c) ())))
(579 define-sharp-macro 555 348 (#(4 21 #(c proc) ())))
(580 #f 555 362 (#(4 99 #(c port) (#(12 99 #(c) (#(49 99 #(c) (#(66 99 #(probe) ())))))))))
(581 #f 555 377 (#(4 9 #(c port) ())))
(582 #f 555 392 (#(4 10 #(c port) ())))
(583 #f 555 407 (#(4 123 #(c port) (#(13 123 #(c) (#(57 119 #(name) (#(91 119 #(temp##81) ())))))))))
(584 #f 555 422 (#(4 26 #(c port) ())))
(585 number-sharp-macro 555 434 (#(4 56 #(c port) (#(21 56 #(string) (#(35 56 #(temp##82) ())))))))
(586 #f 555 439 (#(4 14 #(c) ())))
(587 sub-read-token 555 453 (#(4 41 #(c port) (#(8 41 #(loop) ())))))
(588 loop 587 9 (#(4 78 #(l n) (#(10 78 #(c) (#(20 37 #(temp##83) ())))))))
(589 parse-token 555 461 (#(4 163 #(string port) (#(99 156 #(temp##87) ()) #(18 82 #(c) (#(32 82 #(temp##86) (#(49 82 #(temp##85) (#(66 82 #(temp##84) ())))))))))))
(590 reading-error 555 507 (#(7 41 #(port message irritants) ())))
(591 #f #f #f (#(328 331 #(make-usual-table) ())))
(592 table-set!-procedure 591 44 (#(4 12 #(r##88) ())))
(593 set-table-set!-procedure! 591 52 (#(4 15 #(r##89 new##90) ())))
(594 table-ref-procedure 591 60 (#(4 12 #(r##91) ())))
(595 set-table-ref-procedure! 591 68 (#(4 15 #(r##92 new##93) ())))
(596 table-data 591 76 (#(4 12 #(r##94) ())))
(597 set-table-data! 591 84 (#(4 15 #(r##95 new##96) ())))
(598 table-size 591 92 (#(4 12 #(r##97) ())))
(599 set-table-size! 591 100 (#(4 15 #(r##98 new##99) ())))
(600 table-ref 591 125 (#(4 19 #(table key) ())))
(601 table-set! 591 133 (#(4 22 #(table key value) ())))
(602 next-table-size 591 157 (#(4 63 #(count) (#(17 63 #(new-size) ())))))
(603 make-table-maker 591 165 (#(4 69 #(comparison-function hash-function) (#(18 69 #(assoc) (#(32 69 #(ref-proc) (#(49 69 #(x->hash-table!) (#(66 69 #(set!-proc) ())))))))))))
(604 #f 603 67 ())
(605 new-entry 591 180 (#(4 46 #(key val others) (#(13 46 #(v) ())))))
(606 make-assoc 591 188 (#(4 19 #(pred) ())))
(607 #f 606 17 (#(4 20 #(thing alist) (#(8 20 #(loop) ())))))
(608 loop 607 9 (#(4 58 #(alist) ())))
(609 eq?-assoc 591 196 (#(4 20 #(thing alist) (#(8 20 #(loop) ())))))
(610 loop 609 9 (#(4 49 #(alist) ())))
(611 make-linear-table-ref 591 204 (#(4 7 #(assoc) ())))
(612 #f 611 5 (#(4 41 #(table key) (#(26 41 #(probe) ())))))
(613 make-linear-table-set! 591 212 (#(4 7 #(assoc x->hash-table!) ())))
(614 #f 613 5 (#(4 119 #(table key value) (#(14 119 #(data) (#(31 119 #(probe) (#(82 119 #(size) ())))))))))
(615 make->hash-table 591 220 (#(4 39 #(assoc hash-function) (#(36 39 #(hash-table-ref hash-table-set!) ())))))
(616 #f 615 37 (#(4 68 #(table size) (#(14 68 #(data) ())))))
(617 make-hash-table-ref 591 228 (#(4 7 #(assoc hash-function) ())))
(618 #f 617 5 (#(4 86 #(table key) (#(14 86 #(data) (#(42 86 #(h) (#(52 86 #(alist) (#(71 86 #(probe) ())))))))))))
(619 make-hash-table-set! 591 236 (#(4 7 #(assoc hash-function) ())))
(620 #f 619 5 (#(4 166 #(table key value) (#(14 166 #(data) (#(42 166 #(h) (#(52 166 #(alist) (#(71 166 #(probe) (#(131 166 #(size) ())))))))))))))
(621 expand-hash-table! 591 244 (#(4 54 #(table size) (#(14 54 #(data) (#(42 54 #(loop##102) ())))))))
(622 loop##100 621 43 (#(4 65 #(i) (#(24 65 #(temp##101) ())))))
(623 table-enter-alist! 591 252 (#(4 30 #(table alist) (#(14 30 #(set!-proc) (#(18 30 #(loop##105) ())))))))
(624 loop##103 623 19 (#(4 68 #(alist) (#(18 68 #(temp##104) ())))))
(625 table-expand-table! 591 260 (#(4 60 #(table size) ())))
(626 table-walk 591 268 (#(4 73 #(proc table) (#(14 73 #(data) (#(28 73 #(temp##109) (#(61 73 #(loop##108) ())))))))))
(627 loop##106 626 62 (#(4 66 #(i) (#(25 66 #(temp##107) ())))))
(628 alist-walk 591 276 (#(4 20 #(proc alist) (#(8 20 #(loop##112) ())))))
(629 loop##110 628 9 (#(4 76 #(alist) (#(18 76 #(temp##111) (#(40 63 #(value) ())))))))
(630 table->entry-list 591 284 (#(4 27 #(table) (#(9 27 #(list) ())))))
(631 #f 630 14 (#(4 16 #(k v) ())))
(632 default-table-hash-function 591 292 (#(4 102 #(obj) ())))
(633 symbol-hash 591 300 (#(4 11 #(symbol) ())))
(634 make-table 591 329 (#(5 37 #(hash-function-option) ())))
(635 #f 591 385 (#(4 7 #(x) ())))
(637 type-info 636 44 (#(4 12 #(r##113) ())))
(638 type-more 636 52 (#(4 12 #(r##114) ())))
(639 type-mask 636 60 (#(4 12 #(r##115) ())))
(640 #f 636 89 (#(4 117 #(t) (#(64 93 #(more) ()) #(21 49 #(m) (#(38 49 #(temp##116) ())))))))
(641 name->type 636 128 (#(4 36 #(x) (#(21 36 #(temp##117) ())))))
(642 set-type-name! 636 136 (#(4 84 #(type name) (#(36 52 #(temp##118) ())))))
(643 new-type-bit 636 152 (#(7 18 #(m) ())))
(644 mask->type 636 160 (#(4 15 #(mask) ())))
(645 bottom-type? 636 197 (#(4 16 #(t) ())))
(646 #f 636 202 (#(436 454 #(loop) ())))
(647 new-atomic-type 646 19 ())
(648 named-atomic-type 646 27 (#(4 33 #(name) (#(15 33 #(t) ())))))
(649 rail-type 646 80 (#(4 228 #(t1 t2) (#(150 174 #(temp##119) ())))))
(650 make-optional-type 646 88 (#(4 59 #(t) ())))
(651 make-rest-type 646 96 (#(4 85 #(t) (#(40 85 #(z) (#(74 85 #(t) ())))))))
(652 head-type 646 104 (#(4 28 #(t) (#(14 28 #(more) ())))))
(653 head-type-really 646 112 (#(4 66 #(t) (#(18 66 #(h) ())))))
(654 tail-type 646 120 (#(4 65 #(t) (#(51 65 #(more) ())))))
(655 empty-rail-type? 646 128 (#(4 20 #(t) ())))
(656 rest-type? 646 136 (#(4 31 #(t) (#(14 31 #(more) ())))))
(657 optional-type? 646 144 (#(4 20 #(t) ())))
(658 value-type? 646 268 (#(4 25 #(t) (#(14 25 #(m) ())))))
(659 same-type? 646 328 (#(4 302 #(t1 t2) (#(13 302 #(temp##121) (#(182 298 #(info1 info2) (#(191 298 #(temp##120) ()))) #(62 161 #(more1 more2) ())))))))
(660 subtype? 646 336 (#(4 26 #(t1 t2) ())))
(661 meet-type 646 344 (#(4 238 #(t1 t2) (#(43 238 #(m) (#(141 201 #(i1 i2) (#(185 196 #(temp##122) ())))))))))
(662 other-type-info 646 352 (#(4 26 #(t) (#(14 26 #(i) ())))))
(663 p 646 360 (#(4 40 #(name x) ())))
(664 meet-rail 646 368 (#(4 118 #(t1 t2) (#(39 118 #(t) ())))))
(665 meet-procedure 646 376 (#(4 311 #(m t1 t2) (#(54 311 #(dom1 dom2 cod1 cod2) (#(122 243 #(dom cod) (#(140 208 #(temp##124) ()))) #(72 87 #(temp##123) ())))))))
(666 meet? 646 384 (#(4 215 #(t1 t2) (#(13 215 #(temp##125) (#(40 215 #(m) ())))))))
(667 meet-procedure? 646 392 (#(4 108 #(t1 t2) (#(22 37 #(temp##126) ())))))
(668 join-type 646 400 (#(4 196 #(t1 t2) (#(43 196 #(m) (#(84 196 #(info1 info2) ())))))))
(669 join-rail 646 408 (#(4 166 #(t1 t2) (#(39 166 #(t) ())))))
(670 join-procedure 646 416 (#(4 183 #(m t1 t2) (#(82 149 #(dom1 dom2 cod1 cod2) ())))))
(671 loop 646 437 (#(4 131 #(names exact inexact) (#(61 131 #(exact) (#(84 131 #(inexact) ())))))))
(673 make-other-type 672 222 (#(4 41 #(id) (#(23 41 #(t) ())))))
(674 procedure-type 672 362 (#(4 20 #(dom cod r?) ())))
(675 make-procedure-type 672 370 (#(4 91 #(m dom cod r?) ())))
(676 procedure-type-domain 672 378 (#(4 30 #(t) (#(14 30 #(info) ())))))
(677 procedure-type-codomain 672 386 (#(4 33 #(t) (#(14 33 #(info) ())))))
(678 restrictive? 672 394 (#(4 35 #(t) (#(14 35 #(info) ())))))
(679 sexp->type 672 402 (#(4 386 #(x r?) (#(33 364 #(temp##128) (#(297 316 #(l) ()) #(249 268 #(l) ()) #(138 205 #(r?) ()) #(89 116 #(temp##127) ())))))))
(680 #f 679 234 (#(4 14 #(x) ())))
(681 #f 679 282 (#(4 14 #(x) ())))
(682 sexp->values-type 672 410 (#(4 147 #(l req? r?) (#(100 147 #(t) ())))))
(683 type->sexp 672 418 (#(4 135 #(t r?) (#(77 135 #(j) ())))))
(684 #f 683 122 (#(4 14 #(t) ())))
(685 atomic-type->sexp 672 426 (#(4 443 #(t r?) (#(14 443 #(m) (#(54 443 #(temp##130) (#(382 393 #(m) ()) #(296 307 #(m) ()) #(115 210 #(r) ()) #(81 92 #(temp##129) ())))))))))
(686 rail-type->sexp 672 434 (#(4 26 #(t r?) (#(8 26 #(recur) ())))))
(687 recur 686 9 (#(4 219 #(t prev-req? r?) (#(148 165 #(tail) ())))))
(688 disjoin-type 672 442 (#(4 239 #(t) (#(227 239 #(loop##132) ())))))
(689 loop##131 688 228 (#(4 67 #(i) ())))
(690 disjoin-rest 672 450 (#(4 34 #(t mask) ())))
(691 make-some-values-type 672 471 (#(4 41 #(types) ())))
(692 procedure-type? 672 479 (#(4 16 #(t) ())))
(693 fixed-arity-procedure-type? 672 487 (#(4 45 #(t) (#(22 43 #(loop) ())))))
(694 loop 693 23 (#(4 61 #(d) ())))
(695 procedure-type-arity 672 495 (#(4 32 #(t) (#(8 32 #(loop##134) ())))))
(696 loop##133 695 9 (#(4 97 #(d i) ())))
(697 procedure-type-argument-types 672 503 (#(4 29 #(t) (#(8 29 #(recur) ())))))
(698 recur 697 9 (#(4 92 #(d) ())))
(700 operator-name 699 69 (#(4 12 #(r##135) ())))
(702 operator-uid 701 4 (#(4 12 #(r##136) ())))
(703 operator-nargs 701 12 (#(4 12 #(r##137) ())))
(704 operator-type 701 20 (#(4 12 #(r##138) ())))
(705 set-operator-type! 701 28 (#(4 15 #(r##139 new##140) ())))
(706 #f 701 57 (#(4 39 #(s) ())))
(707 get-operator 701 68 (#(7 524 #(name type-option) (#(43 524 #(type probe) (#(323 524 #(uid) (#(430 524 #(op) ()) #(336 366 #(temp##143) ()))) #(67 318 #(previous-type) (#(85 314 #(temp##142) (#(154 314 #(temp##141) ())))))))))))
(708 make-operator-table 701 118 (#(7 60 #(default mumble-option) (#(17 60 #(v) ())))))
(709 operator-lookup 701 134 (#(4 17 #(table op) ())))
(710 operator-define! 701 142 (#(4 62 #(table name proc) ())))
(711 node-plist 701 190 (#(4 12 #(r##144) ())))
(712 set-node-plist! 701 198 (#(4 15 #(r##145 new##146) ())))
(713 node-form 701 206 (#(4 12 #(r##147) ())))
(714 node-operator-id 701 214 (#(4 12 #(r##148) ())))
(715 #f 701 243 (#(4 34 #(n) ())))
(716 make-node 701 254 (#(4 22 #(operator form) ())))
(717 node-ref 701 262 (#(4 39 #(node key) (#(26 39 #(probe) ())))))
(718 node-set! 701 270 (#(4 96 #(node key value) (#(77 96 #(loop) ()) #(31 73 #(probe) ())))))
(719 loop 718 78 (#(4 75 #(l prev) ())))
(720 node-operator 701 278 (#(4 17 #(node) ())))
(721 node-predicate 701 286 (#(7 32 #(name type-option) (#(29 32 #(id) ())))))
(722 #f 721 30 (#(4 16 #(node) ())))
(723 make-similar-node 701 294 (#(4 57 #(node form) ())))
(724 generated-parent-name 701 342 (#(4 12 #(r##149) ())))
(725 generated-env 701 350 (#(4 12 #(r##150) ())))
(726 generated-token 701 358 (#(4 12 #(r##151) ())))
(727 generated-symbol 701 366 (#(4 12 #(r##152) ())))
(728 #f 701 395 (#(4 19 #(name) ())))
(729 generate-name 701 406 (#(4 19 #(symbol env parent-name) ())))
(730 name->symbol 701 414 (#(4 66 #(name) (#(19 66 #(uid) ())))))
(731 name-hash 701 430 (#(4 66 #(name) ())))
(732 desyntaxify 701 438 (#(4 317 #(thing) (#(238 257 #(new) (#(242 257 #(loop) ()))) #(171 211 #(x y) ()) #(22 82 #(temp##156) (#(39 82 #(temp##155) (#(53 82 #(temp##154) (#(69 82 #(temp##153) ())))))))))))
(733 loop 732 243 (#(4 101 #(i same?) (#(57 101 #(x) ())))))
(734 make-immutable 701 446 (#(4 10 #(thing) ())))
(735 transform-id 701 494 (#(4 12 #(r##157) ())))
(736 transform-source 701 502 (#(4 12 #(r##158) ())))
(737 #f 701 507 (#(498 501 #(operator/lambda operator/unassigned) ()) #(360 363 #(operator/with-aliases) ()) #(294 297 #(operator/call) ()) #(264 267 #(op) ())))
(738 transform-aux-names 737 4 (#(4 12 #(r##159) ())))
(739 transform-type 737 12 (#(4 12 #(r##160) ())))
(740 transform-env 737 20 (#(4 12 #(r##161) ())))
(741 transform-procedure 737 28 (#(4 12 #(r##162) ())))
(742 make-transform 737 53 (#(4 109 #(thing env type source id) (#(53 109 #(type) ()) #(15 28 #(temp##163) ())))))
(743 #f 737 65 (#(4 19 #(m) ())))
(744 maybe-transform 737 76 (#(4 105 #(t exp env-of-use) (#(13 105 #(token) (#(33 105 #(new-env) (#(66 105 #(rename) (#(71 105 #(compare) ())))))))))))
(745 compare 744 67 (#(4 91 #(name1 name2) (#(21 91 #(temp##164) ())))))
(746 bind-aliases 737 84 (#(4 27 #(token t env-of-use) (#(14 27 #(env-of-definition) ())))))
(747 #f 746 22 (#(4 55 #(name) ())))
(748 make-name-generator 737 92 (#(4 12 #(env token parent-name) (#(9 12 #(alist) ())))))
(749 #f 748 10 (#(4 114 #(symbol) (#(28 86 #(probe) (#(65 86 #(new-name) ())))))))
(750 same-denotation? 737 100 (#(4 64 #(x y) (#(21 64 #(temp##165) ())))))
(751 binding-type 737 116 (#(4 12 #(b) ())))
(752 binding-place 737 124 (#(4 12 #(b) ())))
(753 binding-static 737 132 (#(4 12 #(b) ())))
(754 set-binding-place! 737 140 (#(4 15 #(b place) ())))
(755 really-make-binding 737 148 (#(4 37 #(type place static) (#(14 37 #(b) ())))))
(756 make-binding 737 156 (#(7 117 #(type-or-static place static-option) ())))
(757 clobber-binding! 737 164 (#(4 44 #(b type place static) ())))
(758 binding-transform 737 172 (#(4 33 #(b) (#(14 33 #(foo) ())))))
(759 impose-type 737 180 (#(4 100 #(type b integrate?) (#(39 65 #(type) ())))))
(760 forget-integration 737 188 (#(4 65 #(b) ())))
(761 classify 737 196 (#(4 351 #(form env) (#(131 308 #(op-node) (#(162 295 #(probe) (#(179 282 #(s) ())))))))))
(762 classify-literal 737 265 (#(4 22 #(exp) ())))
(763 classify-call 737 295 (#(4 48 #(proc-node exp env) ())))
(764 classify-name 737 304 (#(4 108 #(name env) (#(18 108 #(binding) (#(60 108 #(node) ())))))))
(765 classify-macro-application 737 332 (#(4 20 #(t form env-of-use) ())))
(766 #f 765 14 ())
(767 classify-transform-application 737 361 (#(4 25 #(t form env-of-use lose) ())))
(768 #f 767 5 (#(4 81 #(new-form new-env token) ())))
(769 maybe-transform-call 737 370 (#(4 123 #(proc-node node env) (#(62 120 #(b) (#(79 117 #(s) ()))) #(39 59 #(temp##166) ())))))
(770 #f 769 108 ())
(771 classify-operator-form 737 378 (#(4 30 #(op op-node form env) ())))
(772 #f 737 390 (#(4 102 #(op op-node form env) (#(18 59 #(nargs) (#(32 59 #(temp##167) ())))))))
(773 define-classifier 737 403 (#(4 29 #(name proc) ())))
(774 #f 737 415 (#(4 49 #(op op-node exp env) ())))
(775 #f 737 430 (#(4 84 #(op op-node exp env) ())))
(776 #f 737 499 (#(4 173 #(op op-node form env) (#(27 165 #(pat) ())))))
(777 #f 737 508 (#(91 94 #(operator/quote) ()) #(42 45 #(op) ())))
(778 unspecific-node 777 43 ())
(779 #f 777 56 (#(4 172 #(op op-node form env) (#(30 172 #(struct-node lose) (#(88 168 #(b) ())))))))
(780 lose 779 26 ())
(781 #f 777 92 (#(4 43 #(op op-node form env) ())))
(782 lookup 777 104 (#(4 11 #(env name) ())))
(783 bind1 777 112 (#(4 7 #(name binding env) ())))
(784 #f 783 5 (#(4 23 #(a-name) ())))
(785 bind 777 120 (#(4 56 #(names bindings env) ())))
(786 bindrec 777 128 (#(4 36 #(names env->bindings env) ())))
(787 #f 786 16 (#(4 11 #(a-name) ())))
(788 literal? 777 136 (#(4 55 #(exp) (#(10 55 #(temp##170) (#(24 55 #(temp##169) (#(39 55 #(temp##168) ())))))))))
(789 number-of-required-args 777 144 (#(4 23 #(formals) (#(8 23 #(loop##172) ())))))
(790 loop##171 789 9 (#(4 40 #(l i) ())))
(791 n-ary? 777 152 (#(4 35 #(formals) ())))
(792 normalize-formals 777 160 (#(4 54 #(formals) ())))
(793 syntax? 777 168 (#(4 58 #(d) ())))
(794 name? 777 176 (#(4 26 #(thing) (#(11 26 #(temp##173) ())))))
(795 define-usual-suspects 777 208 (#(4 104 #(table mumble) ())))
(796 #f 795 31 (#(4 81 #(node env) (#(14 81 #(form) (#(25 81 #(specs) ())))))))
(797 #f 796 61 (#(4 55 #(spec) ())))
(798 #f 795 70 (#(4 69 #(node env) (#(14 69 #(form) (#(25 69 #(specs) ())))))))
(799 #f 798 57 (#(4 14 #(new-env) ())))
(800 #f 799 5 (#(4 53 #(spec) ())))
(801 #f 795 93 (#(4 81 #(node env) (#(14 81 #(form) ())))))
(802 process-syntax 777 216 (#(4 120 #(form env name env-or-whatever) (#(101 120 #(thing) ()) #(29 84 #(probe) ())))))
(803 #f 802 58 (#(4 7 #(x) ())))
(804 get-funny 777 224 (#(4 7 #(name) ())))
(805 #f 804 5 (#(4 61 #(env) (#(18 61 #(binding) ())))))
(806 scan-body 777 266 (#(4 64 #(forms env cont) (#(17 35 #(temp##174) ())))))
(807 #f 806 58 (#(4 14 #(defs exps env) ())))
(808 scan-body-forms 777 274 (#(4 196 #(forms env defs cont) (#(52 196 #(node forms) (#(89 122 #(name) ())))))))
(809 #f 808 171 (#(4 70 #(new-defs exps env) ())))
(810 body-lossage 777 282 (#(4 23 #(node) ())))
(811 schemify 777 330 (#(4 95 #(node) (#(35 88 #(temp##175) (#(67 88 #(form) ())))))))
(812 #f 777 342 (#(4 41 #(node) (#(14 41 #(form) ())))))
(813 define-schemifier 777 355 (#(4 17 #(name proc) ())))
(814 #f 777 370 (#(4 16 #(node) ())))
(815 #f 777 388 (#(4 25 #(node) ())))
(816 #f 777 418 (#(4 65 #(node) (#(14 65 #(form) ())))))
(817 #f 816 22 (#(4 37 #(spec) ())))
(818 variable-type 777 429 (#(4 14 #(type) ())))
(819 variable-type? 777 437 (#(4 23 #(type) ())))
(820 compatible-types? 777 453 (#(4 88 #(have-type want-type) ())))
(822 make-population 821 4 ())
(823 add-to-population! 821 12 (#(4 89 #(x pop) ())))
(824 weak-memq 821 20 (#(4 46 #(x weaks) ())))
(825 population-reduce 821 28 (#(4 29 #(cons nil pop) (#(8 29 #(loop##177) ())))))
(826 loop##176 825 9 (#(4 75 #(l prev m) (#(40 70 #(w) ())))))
(827 population->list 821 36 (#(4 17 #(pop) ())))
(828 walk-population 821 44 (#(4 16 #(proc pop) ())))
(829 #f 828 5 (#(4 11 #(thing junk) ())))
(831 interface-name 830 44 (#(4 12 #(r##178) ())))
(832 interface-clients 830 52 (#(4 12 #(r##179) ())))
(833 walk-method 830 60 (#(4 12 #(r##180) ())))
(834 ref-method 830 68 (#(4 12 #(r##181) ())))
(835 #f 830 97 (#(4 19 #(int) ())))
(836 interface-ref 830 108 (#(4 16 #(int name) ())))
(837 for-each-declaration 830 116 (#(4 16 #(proc int) ())))
(838 note-reference-to-interface! 830 124 (#(4 31 #(int thing) (#(14 31 #(pop) ())))))
(839 make-interface 830 132 (#(4 35 #(ref walk name) ())))
(840 make-simple-interface 830 140 (#(4 43 #(name items) (#(18 43 #(table) ())))))
(841 #f 840 23 (#(4 93 #(item) (#(28 80 #(name type) (#(41 54 #(temp##182) ())))))))
(842 #f 841 58 (#(4 18 #(name) ())))
(843 really-make-simple-interface 830 148 (#(4 17 #(table name) ())))
(844 #f 843 5 (#(4 14 #(name) ())))
(845 #f 843 8 (#(4 14 #(proc) ())))
(846 make-compound-interface 830 156 (#(7 45 #(name ints) (#(27 45 #(int) ())))))
(847 #f 846 12 (#(4 20 #(name) (#(8 20 #(loop) ())))))
(848 loop 847 9 (#(4 55 #(ints) (#(37 55 #(temp##183) ())))))
(849 #f 846 15 (#(4 14 #(proc) ())))
(850 #f 849 5 (#(4 16 #(int) ())))
(851 #f 846 32 (#(4 14 #(i) ())))
(853 structure-name 852 44 (#(4 12 #(r##184) ())))
(854 structure-clients 852 52 (#(4 12 #(r##185) ())))
(855 structure-package 852 60 (#(4 12 #(r##186) ())))
(856 structure-interface-really 852 68 (#(4 12 #(r##187) ())))
(857 set-structure-interface! 852 76 (#(4 15 #(r##188 new##189) ())))
(858 structure-interface-thunk 852 84 (#(4 12 #(r##190) ())))
(859 #f 852 113 (#(4 32 #(s) ())))
(860 structure-interface 852 124 (#(4 42 #(s) (#(14 42 #(temp##191) ())))))
(861 initialize-structure! 852 132 (#(4 67 #(s) (#(20 67 #(sig) ())))))
(862 make-structure 852 140 (#(4 121 #(package sig-thunk name) (#(98 121 #(struct) ())))))
(863 #f 862 75 ())
(864 structure-unstable? 852 148 (#(4 17 #(struct) ())))
(865 for-each-export 852 156 (#(4 30 #(proc struct) (#(18 30 #(sig) ())))))
(866 #f 865 19 (#(4 101 #(name want-type) (#(24 101 #(binding) (#(61 87 #(type) ())))))))
(867 package-cached 852 204 (#(4 12 #(r##192) ())))
(868 package-clients 852 212 (#(4 12 #(r##193) ())))
(869 package-plist 852 220 (#(4 12 #(r##194) ())))
(870 set-package-plist! 852 228 (#(4 15 #(r##195 new##196) ())))
(871 package-accesses-thunk 852 236 (#(4 12 #(r##197) ())))
(872 package-opens-thunk 852 244 (#(4 12 #(r##198) ())))
(873 set-package-opens-thunk! 852 252 (#(4 15 #(r##199 new##200) ())))
(874 package-loaded? 852 260 (#(4 12 #(r##201) ())))
(875 set-package-loaded?! 852 268 (#(4 15 #(r##202 new##203) ())))
(876 package-clauses 852 276 (#(4 12 #(r##204) ())))
(877 package-file-name 852 284 (#(4 12 #(r##205) ())))
(878 package-get-location 852 292 (#(4 12 #(r##206) ())))
(879 set-package-get-location! 852 300 (#(4 15 #(r##207 new##208) ())))
(881 package-integrate? 880 4 (#(4 12 #(r##209) ())))
(882 set-package-integrate?! 880 12 (#(4 15 #(r##210 new##211) ())))
(883 package-unstable? 880 20 (#(4 12 #(r##212) ())))
(884 package-definitions 880 28 (#(4 12 #(r##213) ())))
(885 package-opens-really 880 36 (#(4 12 #(r##214) ())))
(886 set-package-opens! 880 44 (#(4 15 #(r##215 new##216) ())))
(887 package-uid 880 52 (#(4 12 #(r##217) ())))
(888 #f 880 81 (#(4 64 #(p) (#(26 64 #(name) ())))))
(889 make-package 880 92 (#(4 153 #(opens-thunk accesses-thunk evaluator for-syntax-promise dir clauses name) (#(100 153 #(p) ())))))
(890 new-package-uid 880 100 (#(7 18 #(uid) ())))
(891 package-name 880 130 (#(4 19 #(package) ())))
(892 set-package-name! 880 138 (#(4 22 #(package name) ())))
(893 package-opens 880 146 (#(4 42 #(p) (#(14 42 #(temp##218) ())))))
(894 package-accesses 880 154 (#(4 13 #(p) ())))
(895 make-simple-package 880 162 (#(7 116 #(opens evaluator efs-promise name-option) (#(103 116 #(p) ())))))
(896 #f 895 60 ())
(897 #f 895 63 ())
(898 package-definition 880 170 (#(4 95 #(p name) (#(26 95 #(probe) (#(45 87 #(place) ())))))))
(899 package-define! 880 178 (#(7 122 #(p name type-or-static place-option) (#(28 122 #(place) ())))))
(900 really-package-define! 880 186 (#(4 131 #(p name type place static) (#(26 131 #(probe) (#(90 131 #(place) ()) #(69 87 #(temp##219) ())))))))
(901 package-lookup 880 194 (#(7 42 #(p name integrate?-option) ())))
(902 really-package-lookup 880 202 (#(4 90 #(p name integrate?) (#(21 90 #(probe) (#(69 90 #(loop) ())))))))
(903 loop 902 70 (#(4 62 #(opens) (#(42 62 #(probe) ())))))
(904 structure-lookup 880 210 (#(4 88 #(struct name integrate?) (#(32 88 #(type) (#(62 85 #(probe) ())))))))
(905 lookup-generated-name 880 218 (#(4 24 #(ignore-env name) ())))
(906 generic-lookup 880 226 (#(4 97 #(env name) ())))
(907 package->environment 880 234 (#(4 7 #(p) ())))
(908 #f 907 5 (#(4 14 #(name) ())))
(909 package-lookup-type 880 242 (#(4 38 #(p name) (#(21 38 #(probe) ())))))
(910 initialize-package! 880 250 (#(4 66 #(p) (#(24 44 #(opens) ())))))
(911 #f 910 35 (#(4 36 #(struct) ())))
(912 #f 910 46 (#(4 28 #(name+struct) ())))
(913 define-funny-names! 880 258 (#(4 87 #(p evaluator for-syntax-promise) ())))
(914 #f 913 56 (#(4 20 #(form) ())))
(915 generic-eval 880 266 (#(4 23 #(form env) ())))
(916 package-define-funny! 880 274 (#(4 43 #(p name static) ())))
(917 generic-get-funny 880 316 (#(4 21 #(name) (#(18 21 #(f) ())))))
(918 #f 917 19 (#(4 39 #(p) ())))
(919 set-package-evaluator! 880 341 (#(4 17 #(p evaluator) ())))
(920 package-for-syntax 880 400 (#(4 17 #(p) ())))
(921 for-each-definition 880 408 (#(4 19 #(proc p) ())))
(922 get-new-location 880 416 (#(4 19 #(p name) ())))
(923 make-new-location 880 424 (#(4 62 #(p name) (#(9 62 #(uid) ())))))
(924 flush-location-names 880 471 ())
(925 package-get 880 479 (#(4 39 #(p ind) (#(26 39 #(temp##220) ())))))
(926 package-put! 880 487 (#(4 73 #(p ind val) (#(26 73 #(temp##221) (#(36 45 #(z) ())))))))
(927 package-note-caching 880 495 (#(4 86 #(p name place) (#(53 74 #(loop) ())))))
(928 loop 927 54 (#(4 109 #(opens) ())))
(929 with-fresh-packages-state 880 503 (#(4 22 #(uid thunk) (#(9 22 #(swap) ())))))
(930 swap 929 5 (#(7 17 #(temp) ())))
(932 environment-ref 931 4 (#(4 76 #(package name) (#(21 76 #(binding) ())))))
(933 environment-set! 931 12 (#(4 139 #(package name value) (#(21 139 #(binding) ())))))
(934 environment-define! 931 20 (#(4 28 #(package name value) ())))
(935 *structure-ref 931 28 (#(4 78 #(struct name) (#(23 78 #(binding) ())))))
(936 contents-carefully 931 36 (#(4 147 #(binding env name) (#(79 119 #(loc) ())))))
(937 interaction-environment 931 60 ())
(938 set-interaction-environment! 931 68 (#(4 41 #(p) ())))
(939 with-interaction-environment 931 76 (#(4 57 #(p thunk) ())))
(940 scheme-report-environment 931 84 (#(4 32 #(n) ())))
(941 set-scheme-report-environment! 931 107 (#(4 13 #(repnum env) ())))
(942 make-package-for-syntax 931 115 (#(4 17 #(eval structs) (#(8 17 #(recur) ())))))
(943 recur 942 9 ())
(944 #f 943 13 ())
(946 define-usual-macro 945 18 (#(4 23 #(name proc aux-names) ())))
(947 #f 946 11 (#(4 20 #(exp rename compare) ())))
(948 usual-transform 945 26 (#(4 14 #(name) ())))
(949 #f 945 38 (#(7 93 #(rename compare conjuncts) ())))
(950 #f 945 56 (#(7 52 #(rename compare clauses) (#(30 52 #(result) ()) #(15 27 #(recur) ())))))
(951 recur 950 16 (#(4 376 #(clauses) (#(34 371 #(clause more-clauses) (#(198 309 #(temp) ())))))))
(952 #f 945 74 (#(7 204 #(rename compare specs end body) (#(57 204 #(%loop %letrec %lambda %cond) ())))))
(953 #f 952 105 (#(4 37 #(y) ())))
(954 #f 945 92 (#(7 233 #(rename compare specs body) (#(130 211 #(tag specs body %letrec %lambda) ())))))
(955 #f 945 110 (#(7 128 #(rename compare specs body) (#(20 38 #(temp##222) ())))))
(956 #f 945 128 (#(7 152 #(rename compare disjuncts) (#(50 152 #(temp) ())))))
(957 #f 945 146 (#(7 132 #(rename compare key clauses) (#(57 132 #(temp %eqv? %memv %quote) ())))))
(958 #f 957 107 (#(4 158 #(clause) ())))
(959 #f 945 160 (#(4 170 #(rename compare x) (#(32 170 #(interesting-to-quasiquote? descend-quasiquote-vector descend-quasiquote-pair descend-quasiquote finalize-quasiquote expand-quasiquote %list->vector %cons %append %unquote-splicing %unquote %quasiquote %quote) ())))))
(960 interesting-to-quasiquote? 959 33 (#(4 26 #(x marker) ())))
(961 descend-quasiquote-vector 959 38 (#(4 26 #(x level return) ())))
(962 #f 961 20 (#(4 61 #(mode arg) (#(9 61 #(temp##223) ())))))
(963 descend-quasiquote-pair 959 43 (#(4 20 #(x level return) ())))
(964 #f 963 14 (#(4 20 #(car-mode car-arg) ())))
(965 #f 964 14 (#(4 162 #(cdr-mode cdr-arg) ())))
(966 descend-quasiquote 959 48 (#(4 215 #(x level return) ())))
(967 finalize-quasiquote 959 53 (#(4 68 #(mode arg) ())))
(968 expand-quasiquote 959 58 (#(4 17 #(x level) ())))
(970 #f 969 8 (#(7 88 #(r c subkeywords rules) ())))
(971 process-rules 969 22 (#(4 389 #(rules subkeywords r c) (#(62 389 #(free-meta-variables meta-variables process-template process-pattern process-segment-match process-match process-rule make-transformer %temp %tail %rename %quote %pair? %map %let* %let %lambda %input %equal? %eq? %else %cons %cond %compare %cdr %car %and %append) ())))))
(972 free-meta-variables 971 63 (#(4 215 #(template dim env free) (#(65 89 #(probe) ())))))
(973 meta-variables 971 68 (#(4 131 #(pattern dim vars) ())))
(974 process-template 971 73 (#(4 404 #(template dim env) (#(145 325 #(vars) (#(191 325 #(x) (#(259 325 #(gen) ()))))) #(35 101 #(probe) ())))))
(975 process-pattern 971 78 (#(4 176 #(pattern path mapit) ())))
(976 #f 975 90 (#(4 67 #(x) ())))
(977 process-segment-match 971 83 (#(4 144 #(input pattern) (#(21 144 #(conjuncts) ())))))
(978 process-match 971 88 (#(4 386 #(input pattern) (#(271 305 #(temp##225) (#(293 305 #(temp##224) ())))))))
(979 process-rule 971 93 (#(4 170 #(rule) (#(64 160 #(pattern template) ())))))
(980 #f 979 99 (#(4 7 #(x) ())))
(981 make-transformer 971 98 (#(4 139 #(rules) ())))
(982 segment-pattern? 969 30 (#(4 53 #(pattern) (#(33 51 #(temp##226) ())))))
(983 segment-template? 969 38 (#(4 41 #(pattern) ())))
(984 find-free-names-in-syntax-rules 969 72 (#(4 39 #(subkeywords rules) (#(10 39 #(free-names meta-variables) (#(24 39 #(loop##229) ())))))))
(985 free-names 984 11 (#(4 167 #(template vars names) (#(39 57 #(temp##227) ())))))
(986 meta-variables 984 16 (#(4 130 #(pattern vars) ())))
(987 loop##228 984 25 (#(4 78 #(rules names) (#(34 73 #(rule) ())))))
(989 namestring 988 4 (#(4 235 #(namelist dir default-type) (#(40 235 #(namelist) (#(82 235 #(subdirs) (#(93 235 #(basename) (#(139 235 #(type) (#(149 160 #(temp##230) ())))))))))))))
(990 #f 989 173 (#(4 23 #(subdir) ())))
(991 namestring-component 988 28 (#(4 74 #(x) ())))
(992 file-name-directory 988 60 (#(4 26 #(filename) ())))
(993 file-name-nondirectory 988 68 (#(4 28 #(filename) ())))
(994 file-nondirectory-position 988 76 (#(4 26 #(filename) (#(8 26 #(loop) ())))))
(995 loop 994 9 (#(4 56 #(i) ())))
(996 string-posq 988 84 (#(4 20 #(thing s) (#(8 20 #(loop) ())))))
(997 loop 996 9 (#(4 54 #(i) ())))
(998 translations 988 100 ())
(999 set-translation! 988 108 (#(4 52 #(from to) (#(21 52 #(probe) ())))))
(1000 translate 988 116 (#(4 27 #(name) (#(11 27 #(len) (#(15 27 #(loop) ())))))))
(1001 loop 1000 16 (#(4 142 #(ts) (#(28 142 #(from) (#(39 142 #(to) (#(46 142 #(k) ())))))))))
(1002 #f #f #f (#(196 199 #(operator/define operator/primitive-procedure) ()) #(95 98 #(begin-node? define-node? define-syntax-node?) ())))
(1003 scan-forms 1002 21 (#(7 97 #(forms p filename env-option) (#(38 97 #(env) ())))))
(1004 #f 1003 91 ())
(1005 scan-file 1002 29 (#(7 81 #(pathname p env-option) (#(38 81 #(env) (#(57 81 #(filename) (#(71 81 #(truename) ())))))))))
(1006 #f 1005 75 (#(4 64 #(port) ())))
(1007 #f 1006 58 (#(16 75 #(o-port) (#(54 75 #(result) ()) #(42 51 #(recur) ())))))
(1008 recur 1007 43 (#(16 58 #(form) ())))
(1009 scan-form-list 1002 37 (#(4 20 #(forms p env) (#(8 20 #(loop) ())))))
(1010 loop 1009 9 (#(4 61 #(forms) (#(39 61 #(scanned-forms) ())))))
(1011 scan-form 1002 96 (#(4 158 #(form p env) (#(21 158 #(node) (#(80 111 #(form) ())))))))
(1012 process-define-syntax 1002 105 (#(4 123 #(form p env) (#(27 123 #(name source) ())))))
(1013 scan-structures 1002 113 (#(4 43 #(structs process-package? package-action) (#(24 43 #(out p-seen s-seen) (#(28 43 #(recur) ())))))))
(1014 recur 1013 29 (#(4 283 #(s) (#(51 281 #(p) (#(227 237 #(stuff) ())))))))
(1015 #f 1014 188 (#(4 15 #(name+struct) ())))
(1016 #f 1014 231 ())
(1017 scan-package 1002 121 (#(7 120 #(p env-option) (#(38 120 #(env) (#(43 120 #(stuff) (#(53 120 #(config-file) (#(76 120 #(dir) ())))))))))))
(1018 #f 1017 81 (#(4 231 #(clause) (#(12 231 #(temp##233) (#(146 231 #(temp##232) ()) #(117 134 #(temp##231) ())))))))
(1019 #f 1018 22 (#(4 61 #(file) (#(25 61 #(file) ())))))
(1020 optimize 1002 129 (#(4 187 #(stuff p) (#(57 184 #(optimizers) (#(102 184 #(names) (#(119 184 #(passes) ())))))))))
(1021 #f 1020 33 (#(4 14 #(clause) ())))
(1022 #f 1020 124 (#(4 7 #(x) ())))
(1023 #f 1020 137 (#(4 15 #(pass stuff) ())))
(1024 check-structure 1002 137 (#(4 57 #(s) (#(9 57 #(undefined) ())))))
(1025 #f 1024 14 (#(4 129 #(name want-type binding) (#(21 117 #(have-type) ())))))
(1026 initialize-usual-transforms! 1002 145 (#(4 14 #(p names) ())))
(1027 #f 1026 5 (#(4 71 #(name) ())))
(1028 define-all-operators 1002 153 (#(4 78 #(p) (#(9 78 #(procs) (#(55 78 #(nodes) ())))))))
(1029 #f 1028 14 (#(4 71 #(name op) (#(14 71 #(type) (#(27 45 #(temp##234) ())))))))
(1030 #f 1028 60 (#(4 43 #(name op) ())))
(1031 make-define-primitive-node 1002 197 (#(4 72 #(name) ())))
(1032 get-optimizer 1002 220 (#(4 14 #(name) ())))
(1033 set-optimizer! 1002 228 (#(4 17 #(name opt) ())))
(1035 note-undefined! 1034 20 (#(4 35 #(p name) (#(18 35 #(note) ())))))
(1036 noting-undefined-variables 1034 28 (#(4 58 #(p thunk) (#(27 58 #(losers) (#(32 58 #(foo) ())))))))
(1037 foo 1036 28 (#(4 99 #(env name) (#(21 99 #(probe) ())))))
(1038 #f 1036 36 (#(4 48 #(p name) ())))
(1039 #f 1036 52 ())
(1040 #f 1039 3 ())
(1041 #f 1039 9 ())
(1042 #f 1041 3 (#(4 166 #(p+names) (#(12 166 #(env) (#(32 166 #(names) ())))))))
(1043 #f 1042 17 (#(4 23 #(name) ())))
(1044 #f 1042 133 (#(4 29 #(name) ())))
(1046 lookup-enumerand 1045 4 (#(4 27 #(components name) (#(11 27 #(len) (#(15 27 #(loop) ())))))))
(1047 loop 1046 16 (#(4 54 #(i) ())))
(1050 node-type 1049 4 (#(4 17 #(node env) ())))
(1051 reconstruct-type 1049 12 (#(4 17 #(node env) ())))
(1052 reconstruct 1049 20 (#(4 75 #(node constrained want-type) ())))
(1053 #f 1049 32 (#(4 17 #(node constrained want-type) ())))
(1054 define-reconstructor 1049 45 (#(4 29 #(name type proc) ())))
(1055 #f 1049 60 (#(4 245 #(node constrained want-type) (#(53 245 #(form var-nodes want-result) (#(64 245 #(formals) (#(86 168 #(alist) (#(112 168 #(cod) ())))))))))))
(1056 #f 1055 74 (#(4 13 #(node) ())))
(1057 #f 1055 199 (#(4 7 #(f) ())))
(1058 careful-codomain 1049 71 (#(4 28 #(proc-type) ())))
(1059 reconstruct-body 1049 79 (#(4 35 #(body constrained want-type) ())))
(1061 #f 1060 11 (#(4 80 #(node constrained want-type) (#(37 80 #(z) (#(62 73 #(type) ())))))))
(1062 reconstruct-name 1060 22 (#(4 87 #(node) (#(21 87 #(probe) (#(38 84 #(t) ())))))))
(1063 reconstruct-call 1060 30 (#(4 160 #(node constrained want-type) (#(14 160 #(form) (#(54 160 #(op-type) (#(62 160 #(args) (#(67 160 #(lose) (#(103 128 #(loop) ())))))))))))))
(1064 lose 1063 63 ())
(1065 #f 1064 3 (#(4 18 #(arg) ())))
(1066 loop 1063 104 (#(4 108 #(args dom) (#(17 41 #(temp##235) ())))))
(1067 #f 1060 45 (#(4 16 #(node constrained want-type) ())))
(1068 #f 1060 63 (#(4 22 #(node constrained want-type) ())))
(1069 #f 1060 81 (#(4 167 #(node constrained want-type) (#(14 167 #(form) (#(64 167 #(con-alist alt-alist) (#(123 167 #(con-type alt-type) ())))))))))
(1070 #f 1069 136 (#(4 31 #(c1 c2 c) ())))
(1071 fork-constraints 1060 92 (#(4 24 #(constrained) ())))
(1072 #f 1071 12 (#(4 19 #(x) ())))
(1073 #f 1060 107 (#(4 28 #(node constrained want-type) (#(8 28 #(loop##237) ())))))
(1074 loop##236 1073 9 (#(4 63 #(forms) ())))
(1075 examine 1060 118 (#(4 27 #(node constrained want-type) ())))
(1076 #f 1060 133 (#(4 39 #(node constrained want-type) ())))
(1077 #f 1060 151 (#(4 144 #(node constrained want-type) (#(14 144 #(form) (#(68 144 #(types) (#(101 136 #(nodes) ())))))))))
(1078 #f 1077 50 (#(4 23 #(spec) ())))
(1079 #f 1060 169 (#(4 32 #(node constrained want-type) ())))
(1080 #f 1060 187 (#(4 63 #(node constrained want-type) (#(17 63 #(args) ())))))
(1081 node->type 1060 198 (#(4 59 #(node) (#(28 52 #(form) ())))))
(1082 #f 1060 213 (#(4 7 #(node constrained want-type) ())))
(1083 #f 1060 231 (#(4 7 #(node constrained want-type) ())))
(1084 #f 1060 300 (#(4 31 #(node constrained want-type) ())))
(1085 #f 1084 9 (#(4 29 #(node) ())))
(1086 #f 1060 366 (#(4 111 #(node constrained want-type) (#(17 111 #(args) (#(57 111 #(thunk-type) ())))))))
(1087 reconstruct-apply 1060 377 (#(4 65 #(node constrained want-type) (#(17 65 #(args) (#(40 65 #(proc-type) ())))))))
(1088 #f 1087 45 (#(4 18 #(arg) ())))
(1090 declare-operator-type 1089 4 (#(4 38 #(ops type) ())))
(1091 #f 1090 19 (#(4 14 #(op) ())))
(1093 last 1092 463 (#(4 32 #(x) ())))
(1094 constant-type 1092 471 (#(4 156 #(x) ())))
(1096 template-code 1095 12 (#(4 12 #(tem) ())))
(1097 template-info 1095 20 (#(4 12 #(tem) ())))
(1098 set-template-code! 1095 28 (#(4 15 #(tem cv) ())))
(1099 set-template-info! 1095 36 (#(4 15 #(tem info) ())))
(1101 segment->template 1100 28 (#(4 176 #(segment name pc-in-parent) (#(17 176 #(cv) (#(40 176 #(astate) (#(54 176 #(parent-data) (#(101 176 #(name) (#(150 176 #(debug-data) ())))))))))))))
(1102 #f 1101 170 (#(21 72 #(maps) ())))
(1103 segment-data->template 1100 36 (#(4 76 #(cv debug-data literals) (#(27 76 #(template) (#(61 76 #(loop##239) ())))))))
(1104 loop##238 1103 62 (#(4 46 #(lits i) ())))
(1105 astate-literals 1100 84 (#(4 12 #(r##240) ())))
(1106 set-astate-literals! 1100 92 (#(4 15 #(r##241 new##242) ())))
(1107 astate-count 1100 100 (#(4 12 #(r##243) ())))
(1108 set-astate-count! 1100 108 (#(4 15 #(r##244 new##245) ())))
(1109 astate-pc 1100 116 (#(4 12 #(r##246) ())))
(1110 set-astate-pc! 1100 124 (#(4 15 #(r##247 new##248) ())))
(1111 astate-code-vector 1100 132 (#(4 12 #(r##249) ())))
(1112 make-astate 1100 140 (#(4 20 #(cv) ())))
(1113 emit-byte! 1100 148 (#(4 44 #(a byte) ())))
(1114 emit-literal! 1100 156 (#(4 143 #(a thing) (#(41 138 #(probe count) ())))))
(1115 emit-segment! 1100 164 (#(4 14 #(astate segment) ())))
(1116 #f 1100 175 (#(4 6 #(astate) ())))
(1117 instruction 1100 186 (#(7 29 #(opcode operands) ())))
(1118 #f 1117 24 (#(4 29 #(astate) ())))
(1119 #f 1118 20 (#(4 14 #(operand) ())))
(1120 sequentially 1100 194 (#(5 18 #(segments) ())))
(1121 sequentially-2 1100 202 (#(4 47 #(seg1 seg2) ())))
(1122 #f 1121 42 (#(4 29 #(astate) ())))
(1123 instruction-with-literal 1100 210 (#(4 13 #(opcode thing) ())))
(1124 #f 1123 8 (#(4 29 #(astate) ())))
(1125 instruction-with-location 1100 218 (#(4 13 #(opcode thunk) ())))
(1126 #f 1125 8 (#(4 35 #(astate) ())))
(1127 instruction-with-template 1100 226 (#(4 13 #(opcode segment name) ())))
(1128 #f 1127 8 (#(4 49 #(astate) ())))
(1129 make-label 1100 234 ())
(1130 instruction-using-label 1100 242 (#(7 42 #(opcode label rest) (#(30 42 #(segment) ())))))
(1131 #f 1130 37 (#(4 80 #(astate) (#(18 80 #(instr) ())))))
(1132 attach-label 1100 250 (#(4 16 #(label segment) ())))
(1133 #f 1132 11 (#(4 58 #(astate) (#(22 58 #(pc cv) ())))))
(1134 #f 1133 27 (#(4 62 #(instr+origin) (#(18 62 #(instr origin) (#(27 62 #(offset) ())))))))
(1135 note-source-code 1100 294 (#(4 30 #(info segment) ())))
(1136 #f 1135 22 (#(4 99 #(astate) (#(33 99 #(dd) ())))))
(1137 note-environment 1100 302 (#(4 30 #(vars segment) ())))
(1138 #f 1137 22 (#(4 101 #(astate) (#(14 101 #(pc-before) (#(31 101 #(env-maps) ())))))))
(1139 emit-with-environment-maps! 1100 310 (#(4 30 #(astate segment) ())))
(1140 #f 1139 24 ())
(1142 new-template-uid 1141 4 (#(7 18 #(uid) ())))
(1143 template-uid 1141 20 ())
(1144 set-template-uid! 1141 28 (#(4 9 #(uid) ())))
(1145 debug-flag-accessor 1141 128 (#(4 24 #(name) (#(21 24 #(access) ())))))
(1146 #f 1145 22 ())
(1147 debug-flag-modifier 1141 136 (#(4 24 #(name) (#(21 24 #(modify) ())))))
(1148 #f 1147 22 (#(4 23 #(new) ())))
(1149 with-fresh-compiler-state 1141 246 (#(4 58 #(template-uid-origin thunk) ())))
(1150 #f 1149 52 ())
(1151 #f 1150 3 ())
(1152 #f 1150 6 (#(4 9 #(s) ())))
(1153 saving-and-restoring 1141 254 (#(4 22 #(fetch store! other thunk) (#(9 22 #(swap) ())))))
(1154 swap 1153 5 (#(13 31 #(temp) ())))
(1156 debug-data-source 1155 44 (#(4 12 #(r##250) ())))
(1157 set-debug-data-source! 1155 52 (#(4 15 #(r##251 new##252) ())))
(1158 debug-data-env-maps 1155 60 (#(4 12 #(r##253) ())))
(1159 set-debug-data-env-maps! 1155 68 (#(4 15 #(r##254 new##255) ())))
(1160 debug-data-pc-in-parent 1155 76 (#(4 12 #(r##256) ())))
(1161 debug-data-parent 1155 84 (#(4 12 #(r##257) ())))
(1162 debug-data-name 1155 92 (#(4 12 #(r##258) ())))
(1163 debug-data-uid 1155 100 (#(4 12 #(r##259) ())))
(1164 new-debug-data 1155 125 (#(4 32 #(name parent pc-in-parent) ())))
(1165 #f 1155 137 (#(4 27 #(dd) ())))
(1166 debug-data->info 1155 148 (#(4 60 #(debug-data) ())))
(1167 get-debug-data 1155 156 (#(4 45 #(info) ())))
(1168 note-debug-data! 1155 164 (#(4 28 #(dd) ())))
(1169 interesting-debug-data? 1155 172 (#(4 116 #(debug-data) (#(28 114 #(temp##262) (#(55 114 #(temp##261) (#(86 114 #(temp##260) ())))))))))
(1170 debug-data-names 1155 180 (#(4 54 #(info) (#(18 54 #(dd) ())))))
(1171 template-debug-data 1155 188 (#(4 20 #(tem) ())))
(1172 template-id 1155 196 (#(4 43 #(tem) (#(18 43 #(info) ())))))
(1173 template-name 1155 204 (#(4 33 #(tem) (#(18 33 #(probe) ())))))
(1174 template-names 1155 212 (#(4 20 #(tem) ())))
(1175 #f #f #f (#(217 220 #(operator/begin) ())))
(1176 compile-top 1175 4 (#(4 35 #(exp cenv depth cont) ())))
(1177 compile 1175 12 (#(4 59 #(exp cenv depth cont) (#(33 59 #(node) ())))))
(1178 #f 1175 24 (#(4 26 #(node cenv depth cont) ())))
(1179 #f 1175 27 (#(4 7 #(frob) ())))
(1180 #f 1179 5 (#(4 22 #(node cenv depth cont) ())))
(1181 #f 1180 5 (#(4 20 #(form cenv) ())))
(1182 define-compilator 1175 40 (#(4 17 #(name proc) ())))
(1183 #f 1175 55 (#(4 54 #(node cenv depth cont) (#(14 54 #(obj) ())))))
(1184 #f 1175 73 (#(4 40 #(node cenv depth cont) (#(14 40 #(exp) (#(27 40 #(obj) ())))))))
(1185 compile-constant 1175 84 (#(4 41 #(obj depth cont) ())))
(1186 #f 1175 99 (#(4 216 #(node cenv depth cont) (#(21 216 #(binding) (#(31 216 #(name) (#(68 173 #(level+over) (#(90 173 #(back) (#(98 173 #(over) (#(103 173 #(temp##263) ())))))))))))))))
(1187 #f 1175 129 (#(4 228 #(node cenv depth cont) (#(14 228 #(exp) (#(37 228 #(lhs-node) (#(47 228 #(name) (#(65 228 #(binding) (#(145 178 #(level+over) ())))))))))))))
(1188 #f 1175 159 (#(4 225 #(node cenv depth cont) (#(36 225 #(exp alt-label join-label) ())))))
(1189 #f 1175 189 (#(4 33 #(node cenv depth cont) (#(14 33 #(exp) ())))))
(1190 compile-begin 1175 218 (#(4 73 #(exp-list cenv depth cont) (#(54 73 #(dummy) (#(58 73 #(loop) ())))))))
(1191 loop 1190 59 (#(4 110 #(exp-list i) ())))
(1192 compile-call 1175 227 (#(4 164 #(node cenv depth cont) (#(62 164 #(proc-node) (#(123 164 #(new-node) ())))))))
(1193 #f 1175 232 (#(184 187 #(operator/lambda operator/set! operator/call operator/unassigned) ())))
(1194 compile-redex 1193 39 (#(4 140 #(proc-node args cenv depth cont) (#(14 140 #(proc-exp) (#(25 140 #(formals) (#(36 140 #(body) ())))))))))
(1195 compile-unknown-call 1193 47 (#(4 131 #(node cenv depth cont) (#(14 131 #(exp) (#(118 131 #(call) ())))))))
(1196 maybe-push-continuation 1193 55 (#(4 90 #(code depth cont) (#(32 90 #(label) ())))))
(1197 push-arguments 1193 63 (#(4 34 #(node cenv depth) (#(8 34 #(recur) ())))))
(1198 recur 1197 9 (#(4 97 #(args depth i) ())))
(1199 push-all-with-names 1193 71 (#(4 96 #(exp-list names cenv depth) ())))
(1200 #f 1193 98 (#(4 65 #(node cenv depth cont) (#(26 65 #(exp name) ())))))
(1201 compile-lambda 1193 109 (#(4 118 #(exp cenv body-name) (#(15 118 #(formals) (#(29 118 #(nargs) ())))))))
(1202 compile-lambda-code 1193 117 (#(4 214 #(formals body cenv name) (#(146 209 #(vars) (#(175 209 #(cenv) ()))) #(53 127 #(nargs) ())))))
(1203 compile-letrec 1193 185 (#(4 205 #(node cenv depth cont) (#(14 205 #(exp) (#(25 205 #(specs) (#(36 205 #(body) ())))))))))
(1204 #f 1203 76 (#(4 29 #(spec) ())))
(1205 #f 1203 179 (#(4 23 #(spec) ())))
(1206 compile-body 1193 224 (#(4 17 #(body cenv depth cont) ())))
(1207 #f 1206 11 (#(4 89 #(defs exps) ())))
(1208 #f 1207 49 (#(4 15 #(node) ())))
(1209 make-cont 1193 249 (#(4 13 #(seg source-info) ())))
(1210 return-cont 1193 290 (#(4 13 #(name) ())))
(1211 return-cont? 1193 298 (#(4 14 #(cont) ())))
(1212 fall-through-cont 1193 306 (#(4 19 #(node i) ())))
(1213 fall-through-cont? 1193 314 (#(4 21 #(cont) ())))
(1214 ignore-values-cont 1193 339 (#(4 19 #(node i) ())))
(1215 ignore-values-cont? 1193 347 (#(4 14 #(cont) ())))
(1216 deliver-value 1193 355 (#(4 32 #(segment cont) ())))
(1217 named-cont 1193 363 (#(4 13 #(name) ())))
(1218 cont-name 1193 371 (#(4 22 #(cont) ())))
(1219 bind-vars 1193 379 (#(4 25 #(names cenv) (#(22 25 #(level) ())))))
(1220 #f 1219 23 (#(4 36 #(name) (#(20 36 #(loop) ())))))
(1221 loop 1220 21 (#(4 67 #(over names) ())))
(1222 initial-cenv 1193 387 (#(4 17 #(cenv) ())))
(1223 environment-level 1193 395 (#(4 11 #(cenv) ())))
(1224 name-node-binding 1193 420 (#(4 37 #(node cenv) (#(21 37 #(temp##264) ())))))
(1225 generate-trap 1193 428 (#(7 68 #(cont stuff) ())))
(1226 careful-sequentially 1193 436 (#(4 256 #(seg1 seg2 depth cont) ())))
(1227 type-check 1193 456 (#(4 354 #(node cenv) (#(19 351 #(form) (#(34 348 #(proc-node) (#(65 345 #(proc-type) (#(282 336 #(message) ()) #(130 243 #(args) (#(156 243 #(args-type) (#(181 243 #(node) ())))))))))))))))
(1228 #f 1227 107 (#(4 15 #(exp) ())))
(1229 #f 1227 139 (#(4 27 #(arg) ())))
(1230 set-type-check?! 1193 464 (#(4 9 #(check?) ())))
(1231 diagnose-call-error 1193 480 (#(4 188 #(node proc-type args-type) (#(77 188 #(message) ())))))
(1232 #f 1193 503 (#(4 34 #(node cenv depth cont) ())))
(1233 #f #f #f (#(395 414 #(cons-instruction) ()) #(103 115 #(loop##272) ())))
(1234 define-compiler-primitive 1233 4 (#(4 65 #(name type compilator closed) (#(35 46 #(temp##265) ())))))
(1236 define-closed-compilator 1233 29 (#(4 17 #(name proc) ())))
(1237 #f 1233 56 (#(4 79 #(node cenv depth cont) (#(20 79 #(name) ())))))
(1238 get-closed-compilator 1233 67 (#(4 17 #(op) ())))
(1239 direct-compilator 1233 75 (#(4 7 #(type opcode) ())))
(1240 #f 1239 5 (#(4 80 #(node cenv depth cont) (#(17 80 #(args) ())))))
(1241 direct-closed-compilator 1233 83 (#(4 7 #(opcode) ())))
(1242 #f 1241 5 (#(12 103 #(arg-specs) ())))
(1243 nargs->domain 1233 91 (#(4 23 #(nargs) (#(8 23 #(loop##267) ())))))
(1244 loop##266 1243 9 (#(4 40 #(nargs l) ())))
(1245 loop##268 1233 104 (#(4 266 #(opcode) (#(13 266 #(temp##271) (#(43 254 #(arg-specs name) (#(60 254 #(temp##270) (#(157 254 #(temp##269) (#(214 254 #(type) ()))) #(100 139 #(type) ())))))))))))
(1246 define-simple-primitive 1233 120 (#(4 104 #(name type segment) (#(18 104 #(winner?) (#(67 104 #(nargs) ())))))))
(1247 simple-compilator 1233 128 (#(4 7 #(segment) ())))
(1248 #f 1247 5 (#(4 71 #(node cenv depth cont) (#(17 71 #(args) ())))))
(1249 simple-closed-compilator 1233 136 (#(4 7 #(nargs segment) ())))
(1250 #f 1249 5 ())
(1251 symbol-append 1233 144 (#(5 33 #(syms) ())))
(1252 define-data-struct-primitives 1233 152 (#(7 213 #(name predicate maker slots) (#(12 213 #(def-prim) (#(29 213 #(type-byte) (#(58 213 #(type) (#(197 213 #(loop##275) ())))))))))))
(1253 def-prim 1252 8 (#(7 35 #(name type op stuff) ())))
(1254 loop##273 1252 198 (#(4 182 #(i slots) (#(13 182 #(temp##274) (#(33 164 #(slot) ())))))))
(1255 #f 1233 161 (#(4 11 #(stuff) ())))
(1256 define-vector-primitives 1233 175 (#(4 359 #(name element-type make length ref set!) (#(21 359 #(type-byte) (#(26 359 #(def-prim) (#(55 359 #(type) ())))))))))
(1257 def-prim 1256 22 (#(4 29 #(name type op) ())))
(1258 #f 1233 184 (#(4 26 #(name) ())))
(1259 #f 1233 199 (#(4 26 #(name) ())))
(1260 #f 1233 214 (#(4 26 #(name) ())))
(1261 #f 1233 279 (#(4 116 #(node cenv depth cont) (#(14 116 #(exp) (#(22 116 #(args) ())))))))
(1263 #f 1233 299 (#(4 180 #(node cenv depth cont) (#(17 180 #(args) (#(34 180 #(producer consumer) ())))))))
(1264 #f 1233 302 (#(15 148 #(label) ())))
(1265 define-n-ary-compiler-primitive 1233 313 (#(4 71 #(name result-type min-nargs compilator closed) ())))
(1266 n-ary-primitive-compilator 1233 321 (#(4 7 #(name min-nargs compilator) ())))
(1267 #f 1266 5 (#(4 100 #(node cenv depth cont) (#(14 100 #(exp) ())))))
(1268 #f 1233 338 (#(4 151 #(node cenv depth cont) (#(14 151 #(exp) (#(22 151 #(proc+args+rest) (#(42 151 #(rest+args) (#(50 151 #(args) (#(85 151 #(args+proc+rest) ())))))))))))))
(1270 #f 1233 361 (#(4 78 #(node cenv depth cont) (#(17 78 #(args) ())))))
(1272 #f 1233 405 (#(4 142 #(node cenv depth cont) (#(14 142 #(exp) (#(22 142 #(args) ())))))))
(1273 #f 1272 98 (#(4 8 #(arg) ())))
(1276 push-all-but-last 1233 442 (#(4 26 #(args cenv depth source-info) (#(8 26 #(recur) ())))))
(1277 recur 1276 9 (#(4 105 #(args depth i) (#(42 105 #(first-code) ())))))
(1278 #f #f #f (#(164 167 #(get-undefined) ()) #(85 88 #(location-contents-offset) ())))
(1279 compile-form 1278 4 (#(4 41 #(form p) ())))
(1280 compile-file 1278 12 (#(4 76 #(filename p) (#(21 76 #(scanned-forms) (#(35 76 #(o-port) (#(58 76 #(template) ())))))))))
(1281 compile-and-run-forms 1278 20 (#(4 38 #(forms p filename run noisy?) ())))
(1282 compile-and-run-file 1278 28 (#(4 35 #(filename p run noisy?) ())))
(1283 compile-and-run-scanned-forms 1278 36 (#(4 53 #(scanned-forms p filename run noisy?) (#(9 53 #(do-it) (#(14 53 #(do-them) ())))))))
(1284 do-it 1283 5 (#(4 29 #(scanned-form) ())))
(1285 do-them 1283 10 (#(33 45 #(loop##277) ())))
(1286 loop##276 1285 34 (#(4 57 #(scanned-forms) ())))
(1287 #f 1283 20 (#(5 29 #(results) ())))
(1288 compile-scanned-forms 1278 44 (#(7 64 #(scanned-forms p filename noisy? env-option) (#(38 64 #(cenv) ())))))
(1289 #f 1288 58 (#(50 62 #(recur) ())))
(1290 recur 1289 51 (#(4 96 #(scanned-forms) ())))
(1291 compile-scanned-form 1278 52 (#(4 78 #(node cenv cont noisy?) (#(41 62 #(segment) ())))))
(1292 compile-definition 1278 86 (#(4 144 #(node cenv cont noisy?) (#(14 144 #(form) (#(25 144 #(name) (#(44 144 #(loc) ())))))))))
(1293 #f 1292 52 ())
(1294 get-location 1278 95 (#(4 121 #(binding cenv name want-type) (#(24 94 #(win have-type) ())))))
(1295 win 1294 12 ())
(1296 #f 1294 74 ())
(1297 #f 1294 119 ())
(1298 location-for-undefined 1278 103 (#(4 104 #(cenv name want-type) (#(55 104 #(p) ())))))
(1299 package-accessor-on-demand 1278 111 (#(4 7 #(id init) ())))
(1300 #f 1299 5 (#(4 62 #(p) (#(21 62 #(temp##278) (#(40 62 #(foo) ())))))))
(1301 location-on-demand 1278 119 (#(4 7 #(accessor) ())))
(1302 #f 1301 5 (#(4 82 #(p name) (#(18 82 #(table) (#(35 82 #(temp##279) (#(60 82 #(new) ())))))))))
(1304 location-for-reference 1278 165 (#(4 29 #(p name) (#(8 29 #(loop) ())))))
(1305 loop 1304 9 (#(4 83 #(opens) ())))
(1307 note-caching 1278 211 (#(4 63 #(cenv name place) ())))
(1308 grumble 1278 219 (#(4 59 #(cenv) ())))
(1309 make-startup-procedure 1278 227 (#(4 120 #(inits resumer) (#(9 120 #(nargs) ())))))
(1310 #f 1309 14 (#(4 65 #(init seg) ())))
(1312 eval 1311 4 (#(4 30 #(form p) ())))
(1313 #f 1312 22 (#(4 14 #(template) ())))
(1314 load 1311 12 (#(7 45 #(filename package-option) (#(35 45 #(p) ())))))
(1315 #f 1314 39 ())
(1316 #f 1315 6 ())
(1317 #f 1316 9 (#(4 14 #(template) ())))
(1318 eval-from-file 1311 20 (#(4 14 #(forms p filename) ())))
(1319 #f 1318 8 ())
(1320 #f 1319 6 ())
(1321 #f 1320 12 (#(4 14 #(template) ())))
(1322 eval-scanned-forms 1311 28 (#(4 32 #(forms p filename) ())))
(1323 #f 1322 14 (#(4 14 #(template) ())))
(1324 invoke-template 1311 36 (#(4 22 #(template p) ())))
(1326 #f #f #f (#(140 143 #(&disclose) ())))
(1327 continuation-cont 1326 4 (#(4 12 #(c) ())))
(1328 continuation-pc 1326 12 (#(4 12 #(c) ())))
(1329 continuation-template 1326 20 (#(4 12 #(c) ())))
(1330 continuation-env 1326 28 (#(4 12 #(c) ())))
(1331 continuation-arg 1326 44 (#(4 16 #(c i) ())))
(1332 continuation-arg-count 1326 52 (#(4 13 #(c) ())))
(1333 continuation-parent 1326 60 (#(4 133 #(a) (#(18 133 #(b) (#(87 108 #(loop) ())))))))
(1334 loop 1333 88 (#(4 51 #(env) (#(22 51 #(temp##280) ())))))
(1335 &disclose 1326 136 (#(4 56 #(next-method obj) ())))
(1336 #f #f #f (#(251 254 #(&disclose) ()) #(193 196 #(&disclose) ()) #(67 70 #(f p) ())))
(1337 usual-exception-handler 1336 4 (#(7 22 #(opcode args) ())))
(1338 define-exception-handler 1336 12 (#(4 15 #(opcode proc) ())))
(1339 signal-exception 1336 20 (#(4 23 #(opcode args) ())))
(1340 #f 1336 45 (#(4 34 #(opcode args) ())))
(1341 f 1336 60 (#(4 7 #(opcode) ())))
(1342 #f 1341 5 (#(7 17 #(next-method args) ())))
(1343 p 1336 63 (#(4 7 #(perform) ())))
(1344 #f 1343 5 (#(4 17 #(opcode args) ())))
(1345 make-opcode-generic! 1336 68 (#(4 52 #(opcode mtable) ())))
(1346 really-signal-condition 1336 77 (#(4 29 #(condition) (#(8 29 #(loop) ())))))
(1347 loop 1346 9 (#(4 17 #(hs) ())))
(1348 #f 1347 8 ())
(1349 with-handler 1336 85 (#(4 45 #(h thunk) ())))
(1350 initialize-exceptions! 1336 109 (#(4 11 #(thunk) ())))
(1351 #f 1350 5 (#(4 44 #(k) ())))
(1352 last-resort-condition-handler 1336 117 (#(4 14 #(halt) (#(11 14 #(interrupt/keyboard losing?) ())))))
(1353 #f 1352 12 (#(4 66 #(condition punt) ())))
(1354 #f 1353 21 (#(4 50 #(c) ())))
(1355 report-utter-lossage 1336 125 (#(4 104 #(condition c) (#(18 104 #(out) ())))))
(1356 #f 1355 76 (#(4 42 #(id+pc) ())))
(1357 continuation-preview 1336 133 (#(4 74 #(c) ())))
(1358 ignore-errors 1336 141 (#(4 11 #(thunk) ())))
(1359 #f 1358 5 (#(4 14 #(k) ())))
(1360 #f 1359 5 (#(4 29 #(c next) ())))
(1361 &disclose 1336 189 (#(4 22 #(next-method obj) ())))
(1362 &disclose 1336 247 (#(4 17 #(next-method obj) ())))
(1364 #f 1363 8 (#(4 55 #(opcode args) (#(24 55 #(probe) ())))))
(1365 define-wna-handler 1363 27 (#(4 21 #(proc handler) ())))
(1366 wna-lose 1363 43 (#(4 26 #(proc args) ())))
(1367 #f 1363 55 (#(4 17 #(args) ())))
(1368 #f 1363 70 (#(4 17 #(args) ())))
(1369 #f 1363 85 (#(4 58 #(args) ())))
(1370 #f 1363 100 (#(4 58 #(args) ())))
(1371 #f 1363 115 (#(4 58 #(args) ())))
(1372 #f 1363 130 (#(4 59 #(args) ())))
(1373 #f 1363 145 (#(4 63 #(args) (#(46 61 #(recur) ())))))
(1374 recur 1373 47 (#(4 46 #(l) ())))
(1375 #f 1363 160 (#(4 36 #(args) ())))
(1376 #f 1363 175 (#(4 36 #(args) ())))
(1377 #f 1363 190 (#(4 36 #(args) ())))
(1378 #f 1363 205 (#(4 70 #(args) ())))
(1379 #f 1363 220 (#(4 17 #(args) ())))
(1380 comparison-wna 1363 231 (#(4 7 #(compare) ())))
(1381 #f 1380 5 (#(4 82 #(args) (#(51 72 #(loop) ())))))
(1382 loop 1381 52 (#(4 60 #(x args) (#(18 60 #(y args) ())))))
(1383 #f #f #f (#(123 126 #(&disclose-condition) ()) #(15 18 #(display newline) ())))
(1384 display-condition 1383 16 (#(4 42 #(c port) ())))
(1385 #f 1384 9 ())
(1386 really-display-condition 1383 25 (#(4 249 #(c port) (#(18 249 #(stuff) (#(90 249 #(stuff) (#(221 237 #(spaces) ()) #(159 194 #(message) ())))))))))
(1387 #f 1386 222 (#(4 50 #(irritant) ())))
(1388 &disclose-condition 1383 119 (#(4 7 #(next-method c) ())))
(1389 limited-write 1383 141 (#(4 23 #(obj port max-depth max-length) (#(8 23 #(recur) ())))))
(1390 recur 1389 9 (#(4 140 #(obj depth) (#(31 107 #(temp##285) (#(48 107 #(temp##284) (#(62 107 #(temp##283) (#(78 107 #(temp##282) (#(93 107 #(temp##281) ())))))))))))))
(1391 #f 1390 134 (#(4 28 #(escape) (#(20 23 #(count) ())))))
(1392 #f 1391 21 (#(4 103 #(sub) (#(42 56 #(temp##286) ())))))
(1394 command-processor 1393 4 (#(4 58 #(arg) (#(45 58 #(in out batch?) (#(49 58 #(loop) ())))))))
(1395 loop 1394 50 ())
(1396 #f 1395 7 (#(4 14 #(go) ())))
(1397 #f 1396 5 (#(4 103 #(c punt) (#(22 37 #(temp##287) ())))))
(1398 #f 1397 63 ())
(1399 #f 1396 8 (#(49 175 #(form) (#(144 151 #(form) ())))))
(1400 #f 1399 69 ())
(1401 #f 1399 145 ())
(1402 #f 1399 152 (#(5 28 #(results) ())))
(1403 #f 1402 10 (#(4 28 #(result) ())))
(1404 mini-load 1393 12 (#(4 85 #(in) (#(10 85 #(c) (#(66 85 #(filename) ())))))))
(1405 read-string 1393 20 (#(4 23 #(port delimiter?) (#(8 23 #(loop) ())))))
(1406 loop 1405 9 (#(4 80 #(l n) (#(10 80 #(c) (#(20 36 #(temp##288) ())))))))
(1407 #f #f #f (#(21 33 #(loop##291) ())))
(1408 loop##289 1407 22 (#(4 42 #(i) (#(13 42 #(temp##290) ())))))
(1409 #f 1408 28 (#(4 17 #(enabled-int) ())))
(1410 initialize-interrupts! 1407 38 ())
(1411 with-interrupts-inhibited 1407 85 (#(4 14 #(thunk) ())))
(1412 with-interrupts-allowed 1407 93 (#(4 14 #(thunk) ())))
(1413 with-interrupts 1407 101 (#(4 22 #(interrupts thunk) (#(10 22 #(ei) ())))))
(1414 #f 1413 11 (#(5 15 #(results) ())))
(1415 enabled-interrupts 1407 109 (#(8 14 #(e) ())))
(1416 interrupt-before-heap-overflow! 1407 117 (#(5 52 #(maybe-required-space) (#(35 52 #(space) ())))))
(1417 #f 1416 42 (#(4 23 #(ei) ())))
(1419 usual-resumer 1418 4 (#(4 7 #(entry-point) ())))
(1420 #f 1419 5 (#(4 26 #(resume-arg in out) ())))
(1421 #f 1420 20 ())
(1422 #f 1421 3 ())
(1424 start 1423 4 (#(4 7 #(structs-to-open) ())))
(1425 #f 1424 5 (#(4 11 #(structs-thunk) ())))
(1426 #f 1425 5 (#(4 59 #(arg) (#(28 51 #(b) ())))))
(1427 #f 1426 53 ())
(1428 make-built-in-structures 1423 12 (#(4 81 #(structs) (#(25 81 #(p) (#(45 81 #(s) ())))))))
(1429 #f 1428 33 ())
(1430 #f 1428 50 (#(4 23 #(name+struct) ())))
(1431 initialize-interaction-environment! 1423 28 (#(4 130 #(built-in-structures) (#(36 130 #(scheme for-syntax) ())))))
(1432 make-initial-package 1423 36 (#(4 87 #(built-in-structures structs-to-open) (#(66 87 #(p) ())))))
(1433 #f 1432 16 (#(4 14 #(name) ())))
(1434 make-env-for-syntax-promise 1423 44 (#(4 11 #(scheme) ())))
(1435 #f 1434 5 ())
(1437 inline-transform 1436 4 (#(4 69 #(form aux-names) (#(54 57 #(formals body) ())))))
(1438 #f 1437 55 (#(4 67 #(e r c) (#(12 67 #(args) ())))))
(1439 #f 1437 61 (#(4 28 #(e r c) ())))
(1440 make-substitution 1436 12 (#(4 27 #(r formals args) (#(24 27 #(subs) ())))))
(1441 #f 1440 25 (#(4 57 #(name) (#(21 57 #(probe) ())))))
(1442 substitute 1436 20 (#(4 338 #(form r) (#(137 311 #(temp##292) (#(263 311 #(keyword) ()))) #(25 69 #(foo) ())))))
(1443 #f 1442 235 (#(4 14 #(form) ())))
(1444 #f 1442 288 (#(4 15 #(form) ())))
(1445 qualified? 1436 28 (#(4 23 #(thing) ())))
(1446 qualified->name 1436 36 (#(4 20 #(q r) (#(8 20 #(recur) ())))))
(1447 recur 1446 9 (#(4 91 #(q) (#(38 84 #(name) ())))))
(1448 get-qualified-env 1436 44 (#(4 157 #(env parent) (#(21 157 #(binding) (#(50 123 #(s) ())))))))
(1449 name->qualified 1436 52 (#(4 87 #(name env) (#(35 63 #(symbol) (#(43 55 #(loop) ())))))))
(1450 loop 1449 44 (#(4 125 #(name) (#(14 125 #(parent) (#(38 122 #(gparent) ())))))))
(1451 qlookup 1436 60 (#(4 41 #(env parent symbol) (#(21 41 #(binding) ())))))
(1452 generic-lookup 1436 68 (#(4 97 #(env name) ())))
(1454 operator 1453 4 (#(4 26 #(name type-exp) ())))
(1455 simple-interface 1453 12 (#(4 46 #(names types) ())))
(1456 #f 1455 11 (#(4 26 #(name type) ())))
(1457 package 1453 20 (#(4 51 #(names locs get-location) (#(27 51 #(p end) (#(35 47 #(loop##295) ())))))))
(1458 loop##293 1457 36 (#(4 118 #(i) (#(13 118 #(temp##294) (#(36 106 #(name) (#(54 106 #(probe) ())))))))))
(1459 transform 1453 28 (#(4 35 #(names+proc env type-exp source name) ())))
(1461 procedure 1460 36 (#(4 20 #(dom cod) ())))
(1464 make-a-package 1463 4 (#(4 69 #(opens-thunk accesses-thunk for-syntax-thunk dir clauses names) ())))
(1465 #f 1464 23 ())
(1466 init-defpackage! 1463 12 (#(4 13 #(evaluator foo) ())))
(1467 loser 1463 20 (#(5 21 #(rest) ())))
(1468 *verify-later!* 1463 52 (#(4 6 #(thunk) ())))
(1469 verify-later! 1463 60 (#(4 11 #(thunk) ())))
(1470 set-verify-later! 1463 68 (#(4 9 #(proc) ())))
(1472 ensure-loaded 1471 4 (#(5 18 #(structs) ())))
(1473 #f 1472 9 (#(4 19 #(p) ())))
(1474 #f 1472 12 (#(4 14 #(stuff p) ())))
(1475 #f 1474 8 ())
(1476 #f 1475 7 (#(4 23 #(filename+scanned-forms) ())))
(1478 #f 1477 1 (#(7 259 #(get-location) (#(16 259 #(the-objects) ())))))
(1479 get-location 1478 3 (#(4 16 #(i) ())))
(1493 #f 1492 196 (#(4 105 #(input##298 rename##299 compare##300) (#(12 105 #(tail##297) (#(51 102 #(?exp) ()) #(21 40 #(temp##296) ())))))))
(1509 #f 1508 405 (#(4 135 #(input##304 rename##305 compare##306) (#(12 135 #(tail##303) (#(68 132 #(?name) (#(79 132 #(?type) ()))) #(21 57 #(temp##302) (#(36 55 #(temp##301) ())))))))))
(1510 #f 1508 446 (#(4 19 #(e r c) ())))
(1512 #f 1511 67 (#(4 135 #(input##310 rename##311 compare##312) (#(12 135 #(tail##309) (#(68 132 #(?enumerand) (#(79 132 #(?type) ()))) #(21 57 #(temp##308) (#(36 55 #(temp##307) ())))))))))
(1513 #f 1511 171 (#(4 40 #(e r c) ())))
(1514 #f 1511 240 (#(4 466 #(form rename compare) (#(87 466 #(name components conc %define %define-syntax %begin %quote) (#(112 466 #(e-name count) ())))))))
(1515 conc 1514 35 (#(5 33 #(things) ())))
(1516 #f 1515 17 (#(4 20 #(thing) ())))
(1518 #f 1517 183 (#(4 785 #(input##327 rename##328 compare##329) (#(12 785 #(tail##326) (#(575 782 #(?id) (#(586 782 #(?type) (#(603 782 #(?constructor) (#(621 782 #(?arg) (#(639 782 #(?pred) (#(657 782 #(?more) ()))))))))))) #(458 564 #(temp##325) (#(473 562 #(temp##324) (#(488 560 #(temp##323) (#(537 556 #(temp##322) ()) #(507 526 #(temp##321) ()))))))) #(130 449 #(?id) (#(141 449 #(?type) (#(158 449 #(?constructor) (#(176 449 #(?arg) (#(203 449 #(?field) (#(230 449 #(?field-stuff) ()))))))))))) #(21 119 #(temp##318) (#(36 117 #(temp##317) (#(51 115 #(temp##316) (#(96 111 #(loop) ()) #(70 89 #(temp##313) ())))))))))))))
(1519 loop 1518 97 (#(4 62 #(l) (#(13 62 #(temp##315) (#(40 45 #(temp##314) ())))))))
(1520 #f 1518 181 (#(4 10 #(temp##319) ())))
(1521 #f 1518 208 (#(4 10 #(temp##320) ())))
(1522 #f 1518 374 (#(4 29 #(?arg) ())))
(1523 #f 1518 415 (#(4 13 #(?field ?field-stuff) ())))
(1524 #f 1517 329 (#(4 276 #(input##338 rename##339 compare##340) (#(12 276 #(tail##337) (#(77 273 #(?constructor) (#(88 273 #(?type) (#(111 273 #(?arg) (#(135 273 #(?arg-type) ()))))))) #(21 66 #(temp##334) (#(36 64 #(temp##333) (#(47 62 #(loop) ())))))))))))
(1525 loop 1524 48 (#(4 93 #(l) (#(13 93 #(temp##332) (#(40 76 #(temp##331) (#(55 74 #(temp##330) ())))))))))
(1526 #f 1524 93 (#(4 10 #(temp##335) ())))
(1527 #f 1524 116 (#(4 13 #(temp##336) ())))
(1528 #f 1517 433 (#(4 70 #(e r c) (#(48 70 #(%define-accessor %begin type field-specs) (#(52 70 #(loop##342) ())))))))
(1529 loop##341 1528 53 (#(4 72 #(i field-specs ds) ())))
(1530 #f 1517 474 (#(4 890 #(input##353 rename##354 compare##355) (#(12 890 #(tail##352) (#(857 887 #(?type) (#(868 887 #(?index) ()))) #(810 846 #(temp##351) (#(825 844 #(temp##350) ()))) #(423 801 #(?type) (#(434 801 #(?index) (#(448 801 #(?accessor) (#(466 801 #(?modifier) ()))))))) #(342 412 #(temp##349) (#(357 410 #(temp##348) (#(372 408 #(temp##347) (#(387 406 #(temp##346) ()))))))) #(85 333 #(?type) (#(96 333 #(?index) (#(110 333 #(?accessor) ()))))) #(21 74 #(temp##345) (#(36 72 #(temp##344) (#(51 70 #(temp##343) ())))))))))))
(1531 #f 1517 505 (#(438 441 #(components) ()) #(359 362 #(components) ())))
(1532 #f 1531 360 (#(4 73 #(e r c) (#(15 73 #(temp##356) (#(54 70 #(which) (#(58 70 #(loop) ())))))))))
(1533 loop 1532 59 (#(4 46 #(i) ())))
(1534 #f 1531 439 (#(4 73 #(e r c) (#(15 73 #(temp##357) (#(54 70 #(which) (#(58 70 #(loop) ())))))))))
(1535 loop 1534 59 (#(4 46 #(i) ())))
(1536 #f 1531 471 (#(205 208 #(components) ()) #(126 129 #(components) ()) #(47 50 #(components) ())))
(1537 #f 1536 48 (#(4 73 #(e r c) (#(15 73 #(temp##358) (#(54 70 #(which) (#(58 70 #(loop) ())))))))))
(1538 loop 1537 59 (#(4 46 #(i) ())))
(1539 #f 1536 127 (#(4 73 #(e r c) (#(15 73 #(temp##359) (#(54 70 #(which) (#(58 70 #(loop) ())))))))))
(1540 loop 1539 59 (#(4 46 #(i) ())))
(1541 #f 1536 206 (#(4 73 #(e r c) (#(15 73 #(temp##360) (#(54 70 #(which) (#(58 70 #(loop) ())))))))))
(1542 loop 1541 59 (#(4 46 #(i) ())))
(1549 #f 1548 11 (#(4 235 #(input##365 rename##366 compare##367) (#(12 235 #(tail##364) (#(104 232 #(?name) (#(115 232 #(?super) (#(129 232 #(?pred) ()))))) #(21 93 #(temp##363) (#(36 91 #(temp##362) (#(68 87 #(temp##361) ())))))))))))
(1550 #f 1548 150 (#(4 152 #(input##371 rename##372 compare##373) (#(12 152 #(tail##370) (#(68 149 #(?mtable) (#(79 149 #(?formals) (#(90 149 #(?body) ()))))) #(21 57 #(temp##369) (#(36 55 #(temp##368) ())))))))))
(1551 #f 1548 191 (#(4 142 #(input##377 rename##378 compare##379) (#(12 142 #(tail##376) (#(68 139 #(?id) (#(79 139 #(?formals) (#(90 139 #(?body) ()))))) #(21 57 #(temp##375) (#(36 55 #(temp##374) ())))))))))
(1552 #f 1548 232 (#(4 1425 #(input##404 rename##405 compare##406) (#(12 1425 #(tail##403) (#(1128 1422 #(?rest) (#(1139 1422 #(?formal) (#(1153 1422 #(?type) (#(1171 1422 #(?next) (#(1192 1422 #(?id) (#(1213 1422 #(?body) ()))))))))))) #(992 1117 #(temp##402) (#(1007 1115 #(temp##401) (#(1039 1111 #(temp##400) (#(1071 1107 #(temp##399) (#(1086 1105 #(temp##398) ()))))))))) #(818 983 #(?spec) (#(829 983 #(?specs) (#(840 983 #(?formal) (#(855 983 #(?type) (#(873 983 #(?next) (#(891 983 #(?rest) ()))))))))))) #(688 804 #(temp##397) (#(723 800 #(temp##396) (#(755 796 #(temp##395) (#(787 792 #(temp##394) ()))))) #(707 712 #(temp##393) ()))) #(557 679 #(?next) (#(571 679 #(?specs) (#(582 679 #(?formal) (#(597 679 #(?type) (#(615 679 #(?ignore) (#(633 679 #(?rest) ()))))))))))) #(385 540 #(temp##392) (#(459 536 #(temp##391) (#(491 532 #(temp##390) (#(523 528 #(temp##389) ()))))) #(404 448 #(temp##388) (#(439 444 #(temp##387) ()))))) #(202 376 #(?formal1) (#(219 376 #(?type1) (#(230 376 #(?specs) (#(242 376 #(?formal) (#(257 376 #(?type) (#(275 376 #(?next) (#(293 376 #(?rest) ()))))))))))))) #(21 185 #(temp##386) (#(104 181 #(temp##385) (#(136 177 #(temp##384) (#(168 173 #(temp##383) ()))))) #(40 93 #(temp##382) (#(55 91 #(temp##381) (#(70 89 #(temp##380) ())))))))))))))
(1553 #f 1548 357 (#(4 81 #(e r c) (#(33 81 #(next) ()) #(19 30 #(temp##407) ())))))
(1555 #f 1554 39 (#(4 616 #(input##415 rename##416 compare##417) (#(12 616 #(tail##414) (#(327 613 #(?name) (#(338 613 #(?mtable-name) (#(355 613 #(?spec) (#(373 613 #(?specs) ()))))))) #(241 316 #(temp##413) (#(256 314 #(temp##412) (#(271 312 #(temp##411) (#(290 295 #(temp##410) ()))))))) #(68 232 #(?name) (#(79 232 #(?mtable-name) ()))) #(21 57 #(temp##409) (#(36 55 #(temp##408) ())))))))))
(1563 #f 1562 358 (#(4 58 #(input##419 rename##420 compare##421) (#(12 58 #(tail##418) (#(31 55 #(?item) ())))))))
(1564 #f 1562 399 (#(4 46 #(e r c) (#(24 46 #(name items) (#(28 46 #(loop) ())))))))
(1565 loop 1564 29 (#(4 249 #(items plain others) (#(139 249 #(item) ())))))
(1567 #f 1566 74 (#(4 151 #(input##425 rename##426 compare##427) (#(12 151 #(tail##424) (#(76 148 #(?name) (#(87 148 #(?args) (#(95 148 #(?body) ()))))) #(21 62 #(temp##423) (#(40 45 #(temp##422) ())))))))))
(1568 #f 1566 115 (#(4 491 #(input##436 rename##437 compare##438) (#(12 491 #(tail##435) (#(368 488 #(?name) (#(379 488 #(?exp) ()))) #(321 357 #(temp##434) (#(336 355 #(temp##433) ()))) #(224 312 #(?name) (#(235 312 #(?exp) ()))) #(158 213 #(temp##432) (#(190 209 #(temp##431) ()))) #(107 149 #(?name) (#(118 149 #(?exp) ()))) #(21 93 #(temp##430) (#(70 89 #(temp##429) ()) #(40 59 #(temp##428) ())))))))))
(1569 #f 1568 257 (#(4 57 #(?name) ())))
(1570 #f 1566 226 (#(4 350 #(input##442 rename##443 compare##444) (#(12 350 #(tail##441) (#(87 347 #(?name) (#(98 347 #(?exp) ()))) #(21 76 #(temp##440) (#(53 72 #(temp##439) ())))))))))
(1571 #f 1570 120 (#(4 29 #(?name) ())))
(1572 #f 1570 187 (#(4 165 #(?name) ())))
(1573 #f 1566 509 (#(100 108 #(parse-package-clauses) ())))
(1574 #f 1573 11 (#(4 276 #(input##451 rename##452 compare##453) (#(12 276 #(tail##450) (#(231 273 #(?name) (#(242 273 #(?exp) ()))) #(184 220 #(temp##449) (#(199 218 #(temp##448) ()))) #(85 175 #(?name) (#(96 175 #(?int) (#(110 175 #(?clause1) (#(125 175 #(?clause) ()))))))) #(21 74 #(temp##447) (#(36 72 #(temp##446) (#(51 70 #(temp##445) ())))))))))))
(1575 #f 1573 52 (#(4 322 #(input##465 rename##466 compare##467) (#(12 322 #(tail##464) (#(100 319 #(?name) (#(120 319 #(?int) (#(140 319 #(?keyword) (#(161 319 #(?stuff) ()))))))) #(21 77 #(temp##459) (#(58 73 #(loop) ()) #(36 51 #(loop) ())))))))))
(1576 loop 1575 37 (#(4 93 #(l) (#(13 93 #(temp##456) (#(40 76 #(temp##455) (#(55 74 #(temp##454) ())))))))))
(1577 loop 1575 59 (#(4 76 #(l) (#(13 76 #(temp##458) (#(40 59 #(temp##457) ())))))))
(1578 #f 1575 85 (#(4 10 #(temp##460) ())))
(1579 #f 1575 105 (#(4 13 #(temp##461) ())))
(1580 #f 1575 125 (#(4 10 #(temp##462) ())))
(1581 #f 1575 145 (#(4 10 #(temp##463) ())))
(1582 #f 1575 226 (#(4 13 #(?keyword ?stuff) ())))
(1583 #f 1575 278 (#(4 129 #(?int ?name) ())))
(1584 parse-package-clauses 1573 101 (#(4 70 #(clauses rename compare) (#(42 70 #(%open %access %for-syntax) (#(46 70 #(loop) ())))))))
(1585 loop 1584 47 (#(4 351 #(clauses opens accesses for-syntaxes others) (#(143 351 #(keyword) ())))))
(1586 #f 1573 106 (#(4 45 #(form rename compare) (#(24 45 #(names clauses) ())))))
(1587 #f 1586 25 (#(4 288 #(opens accesses for-syntaxes others) (#(90 288 #(%make %lambda %cons %list %quote %a-package %file-name) ())))))
(1588 #f 1587 134 (#(4 37 #(a) ())))
(1589 #f 1573 281 (#(4 469 #(input##477 rename##478 compare##479) (#(12 469 #(tail##476) (#(452 466 #(?name) (#(463 466 #(?int) ()))) #(405 441 #(temp##475) (#(420 439 #(temp##474) ()))) #(323 396 #(?name) (#(337 396 #(?int) ()))) #(207 312 #(temp##473) (#(222 310 #(temp##472) (#(241 293 #(temp##471) ()))))) #(137 198 #(?name) (#(151 198 #(?item) ()))) #(21 126 #(temp##470) (#(36 124 #(temp##469) (#(55 107 #(temp##468) ())))))))))))
(1590 #f 1589 380 (#(4 35 #(?int) ())))
(1591 #f 1573 406 (#(4 219 #(input##483 rename##484 compare##485) (#(12 219 #(tail##482) (#(68 216 #(?name) (#(79 216 #(?int) ()))) #(21 57 #(temp##481) (#(36 55 #(temp##480) ())))))))))
(1598 #f 1597 431 (#(4 154 #(input##489 rename##490 compare##491) (#(12 154 #(tail##488) (#(87 151 #(?type) (#(98 151 #(?cod) ()))) #(21 76 #(temp##487) (#(53 72 #(temp##486) ())))))))))
(1600 #f 1599 39 (#(4 675 #(input##503 rename##504 compare##505) (#(12 675 #(tail##502) (#(617 672 #(?t1) (#(625 672 #(?ts) ()))) #(601 606 #(temp##501) ()) #(496 592 #(?t1) (#(507 592 #(?ts) ()))) #(429 482 #(temp##500) (#(473 478 #(temp##499) ()))) #(396 420 #(?t) ()) #(262 379 #(temp##498) (#(306 375 #(temp##497) (#(352 371 #(temp##496) ()))))) #(229 253 #(?t) ()) #(148 215 #(temp##495) (#(192 211 #(temp##494) ()))) #(136 139 #(?t) ()) #(106 125 #(temp##493) ()) #(37 87 #(temp##492) ())))))))
(1617 #f 1616 503 (#(991 1002 #(structs) ())))
-
