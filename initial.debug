; Package uid -> name
(0 the-interfaces)
(1 meta-module-system)
(2 low-structures)
(3 run-time-structures)
(4 compiler-structures)
(5 initial-structures)
(6 usual-structures)
(7 vanilla-features-structures)
(8 cheat)
(9 alternate-structures)
(10 compiler-structures)
(11 linker-structures)
(12 scheme-level-0)
(13 scheme-level-1)
(14 records)
(15 bummed-define-record-types)
(16 methods)
(17 number-i/o)
(18 fluids)
(19 wind)
(20 ports)
(21 enumerated)
(22 architecture)
(23 conditions)
(24 templates)
(25 continuations)
(26 more-types)
(27 exceptions)
(28 interrupts)
(29 writing)
(30 reading)
(31 scheme-level-2)
(32 scheme-level-2-internal)
(33 weak)
(34 display-conditions)
(35 tables)
(36 filenames)
(37 meta-types)
(38 interfaces)
(39 syntactic)
(40 usual-macros)
(41 reconstruction)
(42 packages)
(43 scan)
(44 segments)
(45 compiler)
(46 defpackage)
(47 types)
(48 module-system)
(49 inline)
(50 environments)
(51 evaluation)
(52 scheme)
(53 mini-command)
(54 initial-system)
(55 ensures-loaded)
(56 for-reification)
-
; Location uid -> (name . package-uid)
(0 (current-cont . 12))
(1 (closure-template . 12))
(2 (continuation-ref . 12))
(3 (output-port? . 12))
(4 (closure? . 12))
(5 (complex? . 12))
(6 (arithmetic-shift . 12))
(7 (signal-condition . 12))
(8 (integer? . 12))
(9 (make-closure . 12))
(10 (template-ref . 12))
(11 (make-rectangular . 12))
(12 (string=? . 12))
(13 (extended-number? . 12))
(14 (reverse-list->string . 12))
(15 (denominator . 12))
(16 (call-with-values . 12))
(17 (weak-pointer-ref . 12))
(18 (find-all-symbols . 12))
(19 (code-vector? . 12))
(20 (pop . 12))
(21 (exp . 12))
(22 (sin . 12))
(23 (make-extended-number . 12))
(24 (cos . 12))
(25 (collect . 12))
(26 (external-lookup . 12))
(27 (tan . 12))
(28 (log . 12))
(29 (continuation-length . 12))
(30 (make-code-vector . 12))
(31 (cdr . 12))
(32 (bitwise-xor . 12))
(33 (car . 12))
(34 (string? . 12))
(35 (symbol? . 12))
(36 (set-cdr! . 12))
(37 (bitwise-not . 12))
(38 (vector? . 12))
(39 (closure-env . 12))
(40 (set-car! . 12))
(41 (bitwise-ior . 12))
(42 (number? . 12))
(43 (template-length . 12))
(44 (string-hash . 12))
(45 (pop-env . 12))
(46 (primitive-catch . 12))
(47 (make-string . 12))
(48 (input-port? . 12))
(49 (record? . 12))
(50 (make-vector . 12))
(51 (extended-number-set! . 12))
(52 (write-image . 12))
(53 (eq? . 12))
(54 (bitwise-and . 12))
(55 (location-id . 12))
(56 (code-vector-set! . 12))
(57 (set-location-id! . 12))
(58 (make-record . 12))
(59 (intern . 12))
(60 (values . 12))
(61 (string-set! . 12))
(62 (unassigned . 12))
(63 (vector-set! . 12))
(64 (extended-number-ref . 12))
(65 (unspecific . 12))
(66 (code-vector-ref . 12))
(67 (schedule-interrupt . 12))
(68 (find-all-xs . 12))
(69 (char-ready? . 12))
(70 (set-interrupt-handlers! . 12))
(71 (eof-object? . 12))
(72 (record-set! . 12))
(73 (ascii->char . 12))
(74 (char->ascii . 12))
(75 (set-enabled-interrupts! . 12))
(76 (external-value . 12))
(77 (make-immutable! . 12))
(78 (close-port . 12))
(79 (string-ref . 12))
(80 (immutable? . 12))
(81 (vector-ref . 12))
(82 (exact? . 12))
(83 (write-char . 12))
(84 (symbol->string . 12))
(85 (make-polar . 12))
(86 (record-ref . 12))
(87 (numerator . 12))
(88 (extended-number-length . 12))
(89 (error . 12))
(90 (exact->inexact . 12))
(91 (inexact->exact . 12))
(92 (apply . 12))
(93 (memory-status . 12))
(94 (code-vector-length . 12))
(95 (floor . 12))
(96 (with-continuation . 12))
(97 (magnitude . 12))
(98 (nargs . 12))
(99 (char=? . 12))
(100 (char<? . 12))
(101 (continuation? . 12))
(102 (remainder . 12))
(103 (vm-return . 12))
(104 (false . 12))
(105 (angle . 12))
(106 (open-port . 12))
(107 (string-length . 12))
(108 (external? . 12))
(109 (make-continuation . 12))
(110 (vector-length . 12))
(111 (template? . 12))
(112 (rational? . 12))
(113 (location? . 12))
(114 (external-name . 12))
(115 (set-exception-handler! . 12))
(116 (pair? . 12))
(117 (make-external . 12))
(118 (record-length . 12))
(119 (external-call . 12))
(120 (set-dynamic-state! . 12))
(121 (get-cont-from-heap . 12))
(122 (real-part . 12))
(123 (real? . 12))
(124 (make-template . 12))
(125 (imag-part . 12))
(126 (make-location . 12))
(127 (= . 12))
(128 (< . 12))
(129 (char? . 12))
(130 (quotient . 12))
(131 (/ . 12))
(132 (weak-pointer? . 12))
(133 (- . 12))
(134 (continuation-set! . 12))
(135 (peek-char . 12))
(136 (+ . 12))
(137 (* . 12))
(138 (contents . 12))
(139 (sqrt . 12))
(140 (read-char . 12))
(141 (set-contents! . 12))
(142 (push . 12))
(143 (make-weak-pointer . 12))
(144 (get-dynamic-state . 12))
(145 (trap . 12))
(146 (cons . 12))
(147 (template-set! . 12))
(148 (time . 12))
(149 (location-defined? . 12))
(150 (asin . 12))
(151 (write-string . 12))
(152 (vm-extension . 12))
(153 (force-output . 12))
(154 (acos . 12))
(155 (set-location-defined?! . 12))
(156 (atan . 12))
(157 (loophole . 12))
(158 (define-syntax . 12))
(159 (begin . 12))
(160 (letrec-syntax . 12))
(161 (%file-name% . 12))
(162 (structure-ref . 12))
(163 (quote . 12))
(164 (lambda . 12))
(165 (define . 12))
(166 (if . 12))
(167 (let-syntax . 12))
(168 (letrec . 12))
(169 (primitive-procedure . 12))
(170 (set! . 12))
(171 (with-aliases . 12))
(172 (call . 12))
(173 (and . 12))
(174 (cond . 12))
(175 (do . 12))
(176 (let . 12))
(177 (let* . 12))
(178 (or . 12))
(179 (char->integer . 12))
(180 (integer->char . 12))
(181 (ascii-limit . 12))
(182 (ascii-whitespaces . 12))
(183 (procedure? . 12))
(184 (invoke-closure . 12))
(185 (primitive-cwcc . 12))
(186 (make-undefined-location . 12))
(187 (vector-unassigned? . 12))
(188 (string-copy . 12))
(189 (string->symbol . 12))
(190 (*the-symbol-table* . 12))
(191 (flush-the-symbol-table! . 12))
(192 (restore-the-symbol-table! . 12))
(193 (maybe-open-input-file . 12))
(194 (maybe-open-output-file . 12))
(195 (open-input-file . 12))
(196 (open-output-file . 12))
(197 (close-input-port . 12))
(198 (close-output-port . 12))
(199 (make-condition . 12))
(200 (signal . 12))
(201 (warn . 12))
(202 (syntax-error . 12))
(203 (call-error . 12))
(204 (case . 13))
(205 (quasiquote . 13))
(206 (syntax-rules . 13))
(207 (not . 13))
(208 (boolean? . 13))
(209 (eqv? . 13))
(210 (equal? . 13))
(211 (> . 13))
(212 (<= . 13))
(213 (>= . 13))
(214 (max . 13))
(215 (min . 13))
(216 (abs . 13))
(217 (zero? . 13))
(218 (positive? . 13))
(219 (negative? . 13))
(220 (even? . 13))
(221 (odd? . 13))
(222 (caar . 13))
(223 (cadr . 13))
(224 (cdar . 13))
(225 (cddr . 13))
(226 (caaar . 13))
(227 (caadr . 13))
(228 (cadar . 13))
(229 (caddr . 13))
(230 (cdaar . 13))
(231 (cdadr . 13))
(232 (cddar . 13))
(233 (cdddr . 13))
(234 (caaaar . 13))
(235 (caaadr . 13))
(236 (caadar . 13))
(237 (caaddr . 13))
(238 (cadaar . 13))
(239 (cadadr . 13))
(240 (caddar . 13))
(241 (cadddr . 13))
(242 (cdaaar . 13))
(243 (cdaadr . 13))
(244 (cdadar . 13))
(245 (cdaddr . 13))
(246 (cddaar . 13))
(247 (cddadr . 13))
(248 (cdddar . 13))
(249 (cddddr . 13))
(250 (null? . 13))
(251 (list . 13))
(252 (length . 13))
(253 (append . 13))
(254 (reverse . 13))
(255 (append-reverse . 13))
(256 (list-tail . 13))
(257 (list-ref . 13))
(258 (mem . 13))
(259 (memq . 13))
(260 (memv . 13))
(261 (member . 13))
(262 (ass . 13))
(263 (assv . 13))
(264 (assoc . 13))
(265 (assq . 13))
(266 (list? . 13))
(267 (char>? . 13))
(268 (char>=? . 13))
(269 (char<=? . 13))
(270 (char-whitespace? . 13))
(271 (char-lower-case? . 13))
(272 (char-upper-case? . 13))
(273 (char-numeric? . 13))
(274 (char-alphabetic? . 13))
(275 (char-case-delta . 13))
(276 (char-upcase . 13))
(277 (char-downcase . 13))
(278 (char-ci-compare . 13))
(279 (char-ci=? . 13))
(280 (char-ci<? . 13))
(281 (char-ci<=? . 13))
(282 (char-ci>? . 13))
(283 (char-ci>=? . 13))
(284 (string . 13))
(285 (substring . 13))
(286 (string-append . 13))
(287 (string->list . 13))
(288 (list->string . 13))
(289 (string-fill! . 13))
(290 (make-string=? . 13))
(291 (string-ci=? . 13))
(292 (make-string<? . 13))
(293 (string<? . 13))
(294 (string-ci<? . 13))
(295 (string>? . 13))
(296 (string<=? . 13))
(297 (string>=? . 13))
(298 (string-ci>? . 13))
(299 (string-ci<=? . 13))
(300 (string-ci>=? . 13))
(301 (vector . 13))
(302 (vector->list . 13))
(303 (list->vector . 13))
(304 (vector-fill! . 13))
(305 (map . 13))
(306 (map1 . 13))
(307 (map2+ . 13))
(308 (for-each . 13))
(309 (delay . 13))
(310 (make-promise . 13))
(311 (force . 13))
(312 (unspecific . 13))
(313 (reduce . 13))
(314 (filter . 13))
(315 (pos . 13))
(316 (posq . 13))
(317 (posv . 13))
(318 (position . 13))
(319 (any . 13))
(320 (every . 13))
(321 (sublist . 13))
(322 (last . 13))
(323 (insert . 13))
(324 (inexact? . 13))
(325 (modulo . 13))
(326 (ceiling . 13))
(327 (truncate . 13))
(328 (round . 13))
(329 (gcd . 13))
(330 (euclid . 13))
(331 (lcm . 13))
(332 (expt . 13))
(333 (raise-to-integer-power . 13))
(334 (rationalize . 13))
(335 (simplest-rational . 13))
(336 (record-type . 14))
(337 (*record-type-uid* . 14))
(338 (*record-type* . 14))
(339 (make-record-type . 14))
(340 (record-type? . 14))
(341 (record-type-uid . 14))
(342 (record-type-name . 14))
(343 (record-type-field-names . 14))
(344 (record-type-discloser . 14))
(345 (record-field-index . 14))
(346 (record-constructor . 14))
(347 (record-accessor . 14))
(348 (record-modifier . 14))
(349 (record-predicate . 14))
(350 (define-record-discloser . 14))
(351 (disclose-record . 14))
(352 (default-record-discloser . 14))
(353 (:record-type . 14))
(354 (define-record-type . 15))
(355 (define-constructor . 15))
(356 (define-accessors . 15))
(357 (define-accessor . 15))
(358 (:simple-type . 16))
(359 (really-make-simple-type . 16))
(360 (simple-type-id . 16))
(361 (simple-type-priority . 16))
(362 (simple-type-predicate . 16))
(363 (simple-type-superiors . 16))
(364 (simple-type? . 16))
(365 (make-simple-type . 16))
(366 (compute-priority . 16))
(367 (*increment* . 16))
(368 (%type-priority . 16))
(369 (%type-predicate . 16))
(370 (%same-type? . 16))
(371 (define-simple-type . 16))
(372 (:syntax . 16))
(373 (:values . 16))
(374 (value? . 16))
(375 (:value . 16))
(376 (:zero . 16))
(377 (:number . 16))
(378 (:complex . 16))
(379 (:real . 16))
(380 (:rational . 16))
(381 (:integer . 16))
(382 (:exact-integer . 16))
(383 (:boolean . 16))
(384 (:symbol . 16))
(385 (:char . 16))
(386 (:null . 16))
(387 (:pair . 16))
(388 (:vector . 16))
(389 (:string . 16))
(390 (:procedure . 16))
(391 (:input-port . 16))
(392 (:output-port . 16))
(393 (:eof-object . 16))
(394 (:record . 16))
(395 (record-type-priority . 16))
(396 (:method-info . 16))
(397 (really-make-method-info . 16))
(398 (method-info-proc . 16))
(399 (method-info-n-ary? . 16))
(400 (method-info-types . 16))
(401 (method-info? . 16))
(402 (make-method-info . 16))
(403 (empty-method-list . 16))
(404 (insert-method . 16))
(405 (same-applicability? . 16))
(406 (every2 . 16))
(407 (more-specific? . 16))
(408 (more-specific-type? . 16))
(409 (:method-table . 16))
(410 (really-make-method-table . 16))
(411 (method-table-id . 16))
(412 (method-table-set-perform! . 16))
(413 (method-table-get-perform . 16))
(414 (make-generic . 16))
(415 (method-table-prototype . 16))
(416 (method-table-methods . 16))
(417 (set-method-table-methods! . 16))
(418 (method-table? . 16))
(419 (make-method-table . 16))
(420 (make-cell-for-generic . 16))
(421 (add-to-method-table! . 16))
(422 (set-final-method! . 16))
(423 (apply-generic . 16))
(424 (define-generic . 16))
(425 (methods->perform . 16))
(426 (last-action . 16))
(427 (one-action . 16))
(428 (argument-sequence-predicate . 16))
(429 (check-for-next . 16))
(430 (check-next . 16))
(431 (method-info . 16))
(432 (method-internal . 16))
(433 (with-next-method . 16))
(434 (define-method . 16))
(435 (&add-method! . 16))
(436 (add-method! . 16))
(437 (&type-predicate . 16))
(438 (type-predicate . 16))
(439 (&type-priority . 16))
(440 (type-priority . 16))
(441 (&type-superiors . 16))
(442 (type-superiors . 16))
(443 (&same-type? . 16))
(444 (same-type? . 16))
(445 (:singleton . 16))
(446 (singleton . 16))
(447 (singleton-value . 16))
(448 (compare-to . 16))
(449 (&disclose . 16))
(450 (disclose . 16))
(451 (proc->discloser . 16))
(452 (&number->string . 17))
(453 (number->string . 17))
(454 (integer->string . 17))
(455 (string->number . 17))
(456 (&really-string->number . 17))
(457 (really-string->number . 17))
(458 (:integer-string . 17))
(459 (set-exactness . 17))
(460 (string->integer . 17))
(461 (:thread . 18))
(462 (make-thread . 18))
(463 (thread-dynamic-env . 18))
(464 (current-thread . 18))
(465 (set-current-thread! . 18))
(466 (get-dynamic-env . 18))
(467 (set-dynamic-env! . 18))
(468 (initialize-dynamic-state! . 18))
(469 (with-dynamic-env . 18))
(470 (empty-dynamic-env . 18))
(471 (:fluid . 18))
(472 (make-fluid . 18))
(473 (fluid-top-level-value . 18))
(474 (set-fluid-top-level-value! . 18))
(475 (fluid . 18))
(476 (set-fluid! . 18))
(477 (let-fluid . 18))
(478 (let-fluids . 18))
(479 (fluid-lookup . 18))
(480 (dynamic-wind . 19))
(481 (call-with-current-continuation . 19))
(482 (continuation->procedure . 19))
(483 (:point . 19))
(484 (make-point . 19))
(485 (point-parent . 19))
(486 (point-dynamic-env . 19))
(487 (point-out . 19))
(488 (point-in . 19))
(489 (point-depth . 19))
(490 (root-point . 19))
(491 ($dynamic-point . 19))
(492 (get-dynamic-point . 19))
(493 (env-dynamic-point . 19))
(494 (let-dynamic-point . 19))
(495 (travel-to-point! . 19))
(496 ($current-input-port . 20))
(497 ($current-output-port . 20))
(498 ($error-output-port . 20))
(499 (current-input-port . 20))
(500 (current-output-port . 20))
(501 (error-output-port . 20))
(502 (with-initial-ports . 20))
(503 (call-with-mumble-file . 20))
(504 (call-with-input-file . 20))
(505 (call-with-output-file . 20))
(506 (with-input-from-file . 20))
(507 (with-output-to-file . 20))
(508 (newline . 20))
(509 (output-port-option . 20))
(510 (input-port-option . 20))
(511 (write . 29))
(512 (recurring-write . 29))
(513 (write-boolean . 29))
(514 (write-number . 29))
(515 (write-char-literal . 29))
(516 (character-name . 29))
(517 (write-string-literal . 29))
(518 (write-list . 29))
(519 (quotation? . 29))
(520 (write-vector . 29))
(521 (write-other . 29))
(522 (display-type-name . 29))
(523 (display . 29))
(524 (*condition-types* . 23))
(525 (condition-supertypes . 23))
(526 (define-condition-type . 23))
(527 (condition-predicate . 23))
(528 (condition? . 23))
(529 (condition-type . 23))
(530 (condition-stuff . 23))
(531 (error? . 23))
(532 (call-error? . 23))
(533 (read-error? . 23))
(534 (exception? . 23))
(535 (exception-opcode . 23))
(536 (exception-arguments . 23))
(537 (make-exception . 23))
(538 (warning? . 23))
(539 (syntax-error? . 23))
(540 (interrupt? . 23))
(541 (read . 30))
(542 (sub-read-carefully . 30))
(543 (reader-token-marker . 30))
(544 (make-reader-token . 30))
(545 (reader-token? . 30))
(546 (close-paren . 30))
(547 (dot . 30))
(548 (sub-read . 30))
(549 (read-dispatch-vector . 30))
(550 (read-terminating?-vector . 30))
(551 (set-standard-syntax! . 30))
(552 (set-standard-read-macro! . 30))
(553 (sub-read-list . 30))
(554 (gobble-line . 30))
(555 (*sharp-macros* . 30))
(556 (define-sharp-macro . 30))
(557 (sub-read-token . 30))
(558 (parse-token . 30))
(559 (strange-symbol-names . 30))
(560 (preferred-case . 30))
(561 (reading-error . 30))
(562 (:table . 35))
(563 (really-make-table . 35))
(564 (table-set!-procedure . 35))
(565 (set-table-set!-procedure! . 35))
(566 (table-ref-procedure . 35))
(567 (set-table-ref-procedure! . 35))
(568 (table-data . 35))
(569 (set-table-data! . 35))
(570 (table-size . 35))
(571 (set-table-size! . 35))
(572 (table? . 35))
(573 (table-ref . 35))
(574 (table-set! . 35))
(575 (linear-table-size-limit . 35))
(576 (table-size-limit . 35))
(577 (next-table-size . 35))
(578 (make-table-maker . 35))
(579 (null-entry . 35))
(580 (new-entry . 35))
(581 (make-assoc . 35))
(582 (eq?-assoc . 35))
(583 (make-linear-table-ref . 35))
(584 (make-linear-table-set! . 35))
(585 (make->hash-table . 35))
(586 (make-hash-table-ref . 35))
(587 (make-hash-table-set! . 35))
(588 (expand-hash-table! . 35))
(589 (table-enter-alist! . 35))
(590 (table-expand-table! . 35))
(591 (table-walk . 35))
(592 (really-table-walk . 35))
(593 (alist-walk . 35))
(594 (make-table-immutable! . 35))
(595 (table->entry-list . 35))
(596 (default-table-hash-function . 35))
(597 (symbol-hash . 35))
(598 (make-table . 35))
(599 (make-string-table . 35))
(600 (make-symbol-table . 35))
(601 (make-integer-table . 35))
(602 (:meta-type . 37))
(603 (really-make-type . 37))
(604 (type-info . 37))
(605 (type-more . 37))
(606 (type-mask . 37))
(607 (meta-type? . 37))
(608 (make-type . 37))
(609 (name->type-table . 37))
(610 (mask->name-table . 37))
(611 (name->type . 37))
(612 (set-type-name! . 37))
(613 (*mask* . 37))
(614 (new-type-bit . 37))
(615 (mask->type . 37))
(616 (bottom-type . 37))
(617 (error-type . 37))
(618 (bottom-type? . 37))
(619 (new-atomic-type . 37))
(620 (named-atomic-type . 37))
(621 (syntax-type . 37))
(622 (other-static-type . 37))
(623 (empty-rail-type . 37))
(624 (rail-type . 37))
(625 (make-optional-type . 37))
(626 (make-rest-type . 37))
(627 (head-type . 37))
(628 (head-type-really . 37))
(629 (tail-type . 37))
(630 (empty-rail-type? . 37))
(631 (rest-type? . 37))
(632 (optional-type? . 37))
(633 (mask/no-values . 37))
(634 (mask/two-or-more . 37))
(635 (mask/&rest . 37))
(636 (value-type . 37))
(637 (mask/value . 37))
(638 (value-type? . 37))
(639 (any-values-type . 37))
(640 (any-arguments-type . 37))
(641 (mask/one-or-more . 37))
(642 (same-type? . 37))
(643 (subtype? . 37))
(644 (meet-type . 37))
(645 (other-type-info . 37))
(646 (p . 37))
(647 (meet-rail . 37))
(648 (meet-procedure . 37))
(649 (meet? . 37))
(650 (meet-procedure? . 37))
(651 (join-type . 37))
(652 (join-rail . 37))
(653 (join-procedure . 37))
(654 (number-hierarchy . 37))
(655 (integer-type . 37))
(656 (rational-type . 37))
(657 (real-type . 37))
(658 (complex-type . 37))
(659 (number-type . 37))
(660 (exact-type . 37))
(661 (inexact-type . 37))
(662 (exact-integer-type . 37))
(663 (boolean-type . 37))
(664 (pair-type . 37))
(665 (null-type . 37))
(666 (record-type . 37))
(667 (any-procedure-type . 37))
(668 (other-value-type . 37))
(669 (mask/other . 37))
(670 (make-other-type . 37))
(671 (char-type . 37))
(672 (unspecific-type . 37))
(673 (string-type . 37))
(674 (symbol-type . 37))
(675 (vector-type . 37))
(676 (escape-type . 37))
(677 (structure-type . 37))
(678 (mask/procedure . 37))
(679 (procedure-type . 37))
(680 (make-procedure-type . 37))
(681 (procedure-type-domain . 37))
(682 (procedure-type-codomain . 37))
(683 (restrictive? . 37))
(684 (sexp->type . 37))
(685 (sexp->values-type . 37))
(686 (type->sexp . 37))
(687 (atomic-type->sexp . 37))
(688 (rail-type->sexp . 37))
(689 (disjoin-type . 37))
(690 (disjoin-rest . 37))
(691 (mask/number . 37))
(692 (make-some-values-type . 37))
(693 (proc . 37))
(694 (some-values . 37))
(695 (procedure-type? . 37))
(696 (fixed-arity-procedure-type? . 37))
(697 (procedure-type-arity . 37))
(698 (procedure-type-argument-types . 37))
(699 (usual-operator-type . 39))
(700 (:operator . 39))
(701 (make-operator . 39))
(702 (operator-name . 39))
(703 (operator-uid . 39))
(704 (operator-nargs . 39))
(705 (operator-type . 39))
(706 (set-operator-type! . 39))
(707 (operator? . 39))
(708 (get-operator . 39))
(709 (*operator-uid* . 39))
(710 (operators-table . 39))
(711 (number-of-operators . 39))
(712 (the-operators . 39))
(713 (make-operator-table . 39))
(714 (operator-table-ref . 39))
(715 (operator-lookup . 39))
(716 (operator-define! . 39))
(717 (:node . 39))
(718 (really-make-node . 39))
(719 (node-plist . 39))
(720 (set-node-plist! . 39))
(721 (node-form . 39))
(722 (node-operator-id . 39))
(723 (node? . 39))
(724 (make-node . 39))
(725 (node-ref . 39))
(726 (node-set! . 39))
(727 (node-operator . 39))
(728 (node-predicate . 39))
(729 (make-similar-node . 39))
(730 (:generated . 39))
(731 (make-generated . 39))
(732 (generated-parent-name . 39))
(733 (generated-env . 39))
(734 (generated-token . 39))
(735 (generated-symbol . 39))
(736 (generated? . 39))
(737 (generate-name . 39))
(738 (generated-uid . 39))
(739 (*generated-uid* . 39))
(740 (name->symbol . 39))
(741 (name-hash . 39))
(742 (desyntaxify . 39))
(743 (:transform . 39))
(744 (really-make-transform . 39))
(745 (transform-id . 39))
(746 (transform-source . 39))
(747 (transform-aux-names . 39))
(748 (transform-type . 39))
(749 (transform-env . 39))
(750 (transform-procedure . 39))
(751 (transform? . 39))
(752 (make-transform . 39))
(753 (maybe-transform . 39))
(754 (bind-aliases . 39))
(755 (make-name-generator . 39))
(756 (same-denotation? . 39))
(757 (binding? . 39))
(758 (binding-type . 39))
(759 (binding-place . 39))
(760 (binding-static . 39))
(761 (set-binding-place! . 39))
(762 (make-binding . 39))
(763 (clobber-binding! . 39))
(764 (impose-type . 39))
(765 (forget-integration . 39))
(766 (classify . 39))
(767 (call-node? . 39))
(768 (name-node? . 39))
(769 (classify-literal . 39))
(770 (classify-call . 39))
(771 (classify-name . 39))
(772 (operator/name . 39))
(773 (classify-macro-application . 39))
(774 (classify-transform-application . 39))
(775 (maybe-transform-call . 39))
(776 (classify-operator-form . 39))
(777 (classifiers . 39))
(778 (define-classifier . 39))
(779 (unspecific-node . 39))
(780 (lookup . 39))
(781 (bind1 . 39))
(782 (bind . 39))
(783 (bindrec . 39))
(784 (literal? . 39))
(785 (number-of-required-args . 39))
(786 (n-ary? . 39))
(787 (normalize-formals . 39))
(788 (syntax? . 39))
(789 (name? . 39))
(790 (unbound? . 39))
(791 ($source-file-name . 39))
(792 (define-usual-suspects . 39))
(793 (process-syntax . 39))
(794 (get-funny . 39))
(795 (funny-name/reflective-tower . 39))
(796 (reflective-tower . 39))
(797 (scan-body . 39))
(798 (scan-body-forms . 39))
(799 (body-lossage . 39))
(800 (begin-node? . 39))
(801 (define-node? . 39))
(802 (variable-type . 39))
(803 (variable-type? . 39))
(804 (variable-value-type . 39))
(805 (compatible-types? . 39))
(806 (usual-variable-type . 39))
(807 (undeclared-type . 39))
(808 (schemify . 39))
(809 (schemify1 . 39))
(810 (schemifiers . 39))
(811 (define-schemifier . 39))
(812 (name->qualified . 39))
(813 (schemify-sexp . 39))
(814 (make-qualified . 39))
(815 (qualified? . 39))
(816 (qualified-parent-name . 39))
(817 (qualified-symbol . 39))
(818 (make-population . 33))
(819 (add-to-population! . 33))
(820 (weak-memq . 33))
(821 (population-reduce . 33))
(822 (population->list . 33))
(823 (walk-population . 33))
(824 (:interface . 38))
(825 (really-make-interface . 38))
(826 (interface-name . 38))
(827 (interface-clients . 38))
(828 (walk-method . 38))
(829 (ref-method . 38))
(830 (interface? . 38))
(831 (interface-ref . 38))
(832 (for-each-declaration . 38))
(833 (note-reference-to-interface! . 38))
(834 (make-interface . 38))
(835 (make-simple-interface . 38))
(836 (really-make-simple-interface . 38))
(837 (make-compound-interface . 38))
(838 (:structure . 42))
(839 (really-make-structure . 42))
(840 (structure-name . 42))
(841 (structure-clients . 42))
(842 (structure-package . 42))
(843 (structure-interface-really . 42))
(844 (set-structure-interface! . 42))
(845 (structure-interface-thunk . 42))
(846 (structure? . 42))
(847 (structure-interface . 42))
(848 (initialize-structure! . 42))
(849 (make-structure . 42))
(850 (structure-unstable? . 42))
(851 (for-each-export . 42))
(852 (:package . 42))
(853 (really-make-package . 42))
(854 (package-cached . 42))
(855 (package-clients . 42))
(856 (package-plist . 42))
(857 (set-package-plist! . 42))
(858 (package-accesses-thunk . 42))
(859 (package-opens-thunk . 42))
(860 (set-package-opens-thunk! . 42))
(861 (package->environment . 42))
(862 (set-package->environment! . 42))
(863 (package-loaded? . 42))
(864 (set-package-loaded?! . 42))
(865 (package-clauses . 42))
(866 (package-file-name . 42))
(867 (package-get-location . 42))
(868 (set-package-get-location! . 42))
(869 (package-integrate? . 42))
(870 (set-package-integrate?! . 42))
(871 (package-unstable? . 42))
(872 (package-definitions . 42))
(873 (package-opens-really . 42))
(874 (set-package-opens! . 42))
(875 (package-uid . 42))
(876 (package? . 42))
(877 (make-package . 42))
(878 (really-package->environment . 42))
(879 (new-package-uid . 42))
(880 (*package-uid* . 42))
(881 (package-name-table . 42))
(882 (package-name . 42))
(883 (set-package-name! . 42))
(884 (package-opens . 42))
(885 (initialize-package-if-necessary! . 42))
(886 (package-accesses . 42))
(887 (make-simple-package . 42))
(888 (package-definition . 42))
(889 (package-define! . 42))
(890 (really-package-define! . 42))
(891 (package-lookup . 42))
(892 (really-package-lookup . 42))
(893 (structure-lookup . 42))
(894 (generic-lookup . 42))
(895 (initialize-package! . 42))
(896 (define-funny-names! . 42))
(897 (package-define-funny! . 42))
(898 (funny-name/the-package . 42))
(899 (extract-package-from-environment . 42))
(900 (for-each-definition . 42))
(901 (get-new-location . 42))
(902 (make-new-location . 42))
(903 ($get-location . 42))
(904 (*location-uid* . 42))
(905 (location-info-table . 42))
(906 (flush-location-names . 42))
(907 (package-get . 42))
(908 (package-put! . 42))
(909 (package-note-caching . 42))
(910 (maybe-fix-place . 42))
(911 (follow-forwarding-pointers . 42))
(912 (environment-ref . 50))
(913 (environment-set! . 50))
(914 (environment-define! . 50))
(915 (*structure-ref . 50))
(916 (carefully . 50))
(917 ($interaction-environment . 50))
(918 (interaction-environment . 50))
(919 (set-interaction-environment! . 50))
(920 (with-interaction-environment . 50))
(921 (scheme-report-environment . 50))
(922 (*scheme-report-environment* . 50))
(923 (*scheme-report-number* . 50))
(924 (set-scheme-report-environment! . 50))
(925 (make-reflective-tower . 50))
(926 (set-reflective-tower-maker! . 50))
(927 (the-usual-transforms . 40))
(928 (define-usual-macro . 40))
(929 (usual-transform . 40))
(930 (long-enough? . 40))
(931 (process-rules . 40))
(932 (segment-pattern? . 40))
(933 (segment-template? . 40))
(934 (indicators-for-zero-or-more . 40))
(935 (find-free-names-in-syntax-rules . 40))
(936 (namestring . 36))
(937 (directory-component-separator . 36))
(938 (type-component-separator . 36))
(939 (namestring-component . 36))
(940 (file-name-preferred-case . 36))
(941 (*scheme-file-type* . 36))
(942 (*load-file-type* . 36))
(943 (file-name-directory . 36))
(944 (file-name-nondirectory . 36))
(945 (file-nondirectory-position . 36))
(946 (string-posq . 36))
(947 (*translations* . 36))
(948 (translations . 36))
(949 (set-translation! . 36))
(950 (translate . 36))
(951 ($note-file-package . 43))
(952 (scan-forms . 43))
(953 (scan-file . 43))
(954 (scan-form-list . 43))
(955 (scan-form . 43))
(956 (process-define-syntax . 43))
(957 (scan-structures . 43))
(958 (scan-package . 43))
(959 (optimize . 43))
(960 (check-structure . 43))
(961 (initialize-usual-transforms! . 43))
(962 (define-all-operators . 43))
(963 (make-define-primitive-node . 43))
(964 (optimizers-table . 43))
(965 (get-optimizer . 43))
(966 (set-optimizer! . 43))
(967 ($note-undefined . 43))
(968 (note-undefined! . 43))
(969 (noting-undefined-variables . 43))
(970 (define-enumeration . 21))
(971 (components . 21))
(972 (enum . 21))
(973 (enumerand->name . 21))
(974 (name->enumerand . 21))
(975 (lookup-enumerand . 21))
(976 (bits-used-per-byte . 22))
(977 (maximum-stack-args . 22))
(978 (define-instruction-set . 22))
(979 (op . 22))
(980 (op-enumeration . 22))
(981 (op-count . 22))
(982 (opcode-arg-specs . 22))
(983 (interrupt . 22))
(984 (interrupt-enumeration . 22))
(985 (interrupt-count . 22))
(986 (time-option . 22))
(987 (time-option-enumeration . 22))
(988 (time-option-count . 22))
(989 (memory-status-option . 22))
(990 (memory-status-option-enumeration . 22))
(991 (memory-status-option-count . 22))
(992 (stob . 22))
(993 (stob-enumeration . 22))
(994 (stob-count . 22))
(995 (least-b-vector-type . 22))
(996 (stob-data . 22))
(997 (node-type . 41))
(998 (reconstruct-type . 41))
(999 (reconstruct . 41))
(1000 (reconstructors . 41))
(1001 (define-reconstructor . 41))
(1002 (careful-codomain . 41))
(1003 (reconstruct-body . 41))
(1004 (operator/name . 41))
(1005 (reconstruct-name . 41))
(1006 (reconstruct-call . 41))
(1007 (fork-constraints . 41))
(1008 (examine . 41))
(1009 (node->type . 41))
(1010 (call-node? . 41))
(1011 (name-node? . 41))
(1012 (begin-node? . 41))
(1013 (reconstruct-apply . 41))
(1014 (declare-operator-type . 41))
(1015 (last . 41))
(1016 (constant-type . 41))
(1017 (template-overhead . 24))
(1018 (template-code . 24))
(1019 (template-info . 24))
(1020 (set-template-code! . 24))
(1021 (set-template-info! . 24))
(1022 (make-segment . 44))
(1023 (segment-size . 44))
(1024 (segment-emitter . 44))
(1025 (segment->template . 44))
(1026 (segment-data->template . 44))
(1027 (:assembly-state . 44))
(1028 (make-assembly-state . 44))
(1029 (astate-literals . 44))
(1030 (set-astate-literals! . 44))
(1031 (astate-count . 44))
(1032 (set-astate-count! . 44))
(1033 (astate-pc . 44))
(1034 (set-astate-pc! . 44))
(1035 (astate-code-vector . 44))
(1036 (make-astate . 44))
(1037 (emit-byte! . 44))
(1038 (emit-literal! . 44))
(1039 (emit-segment! . 44))
(1040 (empty-segment . 44))
(1041 (instruction . 44))
(1042 (sequentially . 44))
(1043 (sequentially-2 . 44))
(1044 (instruction-with-literal . 44))
(1045 (instruction-with-location . 44))
(1046 (instruction-with-template . 44))
(1047 (make-label . 44))
(1048 (instruction-using-label . 44))
(1049 (attach-label . 44))
(1050 (byte-limit . 44))
(1051 ($debug-data . 44))
(1052 (note-source-code . 44))
(1053 (note-environment . 44))
(1054 (emit-with-environment-maps! . 44))
(1055 ($environment-maps . 44))
(1056 (environment-maps-table . 44))
(1057 (new-template-uid . 44))
(1058 (*template-uid* . 44))
(1059 (template-uid . 44))
(1060 (set-template-uid! . 44))
(1061 (debug-flag-names . 44))
(1062 (type/debug-flags . 44))
(1063 (make-debug-flags . 44))
(1064 ($debug-flags . 44))
(1065 (debug-flag-accessor . 44))
(1066 (debug-flag-modifier . 44))
(1067 (keep-source-code? . 44))
(1068 (keep-environment-maps? . 44))
(1069 (keep-procedure-names? . 44))
(1070 (keep-file-names? . 44))
(1071 (tabulate-debug-data? . 44))
(1072 (debug-data-table . 44))
(1073 (with-fresh-compiler-state . 44))
(1074 (saving-and-restoring . 44))
(1075 (:debug-data . 44))
(1076 (make-debug-data . 44))
(1077 (debug-data-source . 44))
(1078 (set-debug-data-source! . 44))
(1079 (debug-data-env-maps . 44))
(1080 (set-debug-data-env-maps! . 44))
(1081 (debug-data-pc-in-parent . 44))
(1082 (debug-data-parent . 44))
(1083 (debug-data-name . 44))
(1084 (debug-data-uid . 44))
(1085 (debug-data? . 44))
(1086 (new-debug-data . 44))
(1087 (debug-data->info . 44))
(1088 (get-debug-data . 44))
(1089 (note-debug-data! . 44))
(1090 (interesting-debug-data? . 44))
(1091 (debug-data-names . 44))
(1092 (template-debug-data . 44))
(1093 (template-id . 44))
(1094 (template-name . 44))
(1095 (template-names . 44))
(1096 (compile-top . 45))
(1097 (compile . 45))
(1098 (compilators . 45))
(1099 (define-compilator . 45))
(1100 (compile-constant . 45))
(1101 (compile-begin . 45))
(1102 (compile-call . 45))
(1103 (lambda-node? . 45))
(1104 (compile-redex . 45))
(1105 (compile-unknown-call . 45))
(1106 (maybe-push-continuation . 45))
(1107 (push-arguments . 45))
(1108 (push-all-with-names . 45))
(1109 (compile-lambda . 45))
(1110 (compile-lambda-code . 45))
(1111 (compile-letrec . 45))
(1112 (compile-body . 45))
(1113 (operator/letrec . 45))
(1114 (make-cont . 45))
(1115 (cont-segment . 45))
(1116 (cont-source-info . 45))
(1117 (return-cont-segment . 45))
(1118 (return-cont . 45))
(1119 (return-cont? . 45))
(1120 (fall-through-cont . 45))
(1121 (fall-through-cont? . 45))
(1122 (ignore-values-segment . 45))
(1123 (ignore-values-cont . 45))
(1124 (ignore-values-cont? . 45))
(1125 (deliver-value . 45))
(1126 (named-cont . 45))
(1127 (cont-name . 45))
(1128 (bind-vars . 45))
(1129 (initial-cenv . 45))
(1130 (environment-level . 45))
(1131 (funny-name/lexical-level . 45))
(1132 (name-node-binding . 45))
(1133 (generate-trap . 45))
(1134 (careful-sequentially . 45))
(1135 (large-segment-size . 45))
(1136 (shrink-segment . 45))
(1137 (type-check . 45))
(1138 (set-type-check?! . 45))
(1139 (*type-check?* . 45))
(1140 (diagnose-call-error . 45))
(1141 (define-compiler-primitive . 45))
(1142 (closed-compilators . 45))
(1143 (define-closed-compilator . 45))
(1144 (get-closed-compilator . 45))
(1145 (direct-compilator . 45))
(1146 (direct-closed-compilator . 45))
(1147 (nargs->domain . 45))
(1148 (define-simple-primitive . 45))
(1149 (simple-compilator . 45))
(1150 (simple-closed-compilator . 45))
(1151 (symbol-append . 45))
(1152 (define-stob-predicate . 45))
(1153 (define-data-struct-primitives . 45))
(1154 (define-vector-primitives . 45))
(1155 (define-n-ary-compiler-primitive . 45))
(1156 (n-ary-primitive-compilator . 45))
(1157 (push-all-but-last . 45))
(1158 (compile-form . 45))
(1159 (compile-file . 45))
(1160 (compile-and-run-forms . 45))
(1161 (compile-and-run-file . 45))
(1162 (compile-and-run-scanned-forms . 45))
(1163 (compile-scanned-forms . 45))
(1164 (compile-scanned-form . 45))
(1165 (define-node? . 45))
(1166 (compile-definition . 45))
(1167 (get-location . 45))
(1168 (get-location-for-undefined . 45))
(1169 (get-location-for-unassignable . 45))
(1170 (package-accessor-on-demand . 45))
(1171 (location-on-demand . 45))
(1172 (package-undefineds . 45))
(1173 (location-for-reference . 45))
(1174 (package-undefined-but-assigneds . 45))
(1175 (location-for-assignment . 45))
(1176 (note-caching . 45))
(1177 (grumble . 45))
(1178 (make-startup-procedure . 45))
(1179 (an-ignore-values-cont . 45))
(1180 (eval . 51))
(1181 (load . 51))
(1182 (eval-from-file . 51))
(1183 (eval-scanned-forms . 51))
(1184 (invoke-template . 51))
(1185 (:closure . 26))
(1186 (:code-vector . 26))
(1187 (:location . 26))
(1188 (:template . 26))
(1189 (continuation-cont . 25))
(1190 (continuation-pc . 25))
(1191 (continuation-template . 25))
(1192 (continuation-env . 25))
(1193 (continuation-overhead . 25))
(1194 (continuation-arg . 25))
(1195 (continuation-arg-count . 25))
(1196 (continuation-parent . 25))
(1197 (:continuation . 25))
(1198 (usual-exception-handler . 27))
(1199 (define-exception-handler . 27))
(1200 (signal-exception . 27))
(1201 (exception-handlers . 27))
(1202 (make-opcode-generic! . 27))
(1203 (really-signal-condition . 27))
(1204 (with-handler . 27))
(1205 ($condition-handlers . 27))
(1206 (initialize-exceptions! . 27))
(1207 (last-resort-condition-handler . 27))
(1208 (report-utter-lossage . 27))
(1209 (continuation-preview . 27))
(1210 (ignore-errors . 27))
(1211 (*wna-handlers* . 27))
(1212 (define-wna-handler . 27))
(1213 (op/check-nargs= . 27))
(1214 (wna-lose . 27))
(1215 (comparison-wna . 27))
(1216 (display-condition . 34))
(1217 (really-display-condition . 34))
(1218 (*depth* . 34))
(1219 (*length* . 34))
(1220 (&disclose-condition . 34))
(1221 (disclose-condition . 34))
(1222 (limited-write . 34))
(1223 (command-processor . 53))
(1224 (mini-load . 53))
(1225 (read-string . 53))
(1226 (interrupt-handlers . 28))
(1227 (initialize-interrupts! . 28))
(1228 (time-option/ticks-per-second . 28))
(1229 (one-second . 28))
(1230 (no-interrupts . 28))
(1231 (all-interrupts . 28))
(1232 (with-interrupts-inhibited . 28))
(1233 (with-interrupts-allowed . 28))
(1234 (with-interrupts . 28))
(1235 (enabled-interrupts . 28))
(1236 (interrupt-before-heap-overflow! . 28))
(1237 (interrupt/memory-shortage . 28))
(1238 (memory-status-option/set-minimum-recovered-space! . 28))
(1239 (memory-status-option/heap-size . 28))
(1240 (usual-resumer . 32))
(1241 (start . 54))
(1242 (make-built-in-structures . 54))
(1243 (initialize-interaction-environment! . 54))
(1244 (make-initial-package . 54))
(1245 (make-tower . 54))
(1246 (inline-transform . 49))
(1247 (make-substitution . 49))
(1248 (substitute . 49))
(1249 (operator/name . 49))
(1250 (qualified->name . 49))
(1251 (get-qualified-env . 49))
(1252 (operator . 56))
(1253 (simple-interface . 56))
(1254 (package . 56))
(1255 (transform . 56))
(1256 (:syntax . 47))
(1257 (:values . 47))
(1258 (:arguments . 47))
(1259 (:value . 47))
(1260 (procedure . 47))
(1261 (:boolean . 47))
(1262 (:char . 47))
(1263 (:null . 47))
(1264 (:unspecific . 47))
(1265 (:number . 47))
(1266 (:complex . 47))
(1267 (:real . 47))
(1268 (:rational . 47))
(1269 (:integer . 47))
(1270 (:exact-integer . 47))
(1271 (:pair . 47))
(1272 (:string . 47))
(1273 (:symbol . 47))
(1274 (:vector . 47))
(1275 (:procedure . 47))
(1276 (:input-port . 47))
(1277 (:output-port . 47))
(1278 (:error . 47))
(1279 (:escape . 47))
(1280 (:structure . 47))
(1281 (:type . 47))
(1282 (def . 46))
(1283 (define-values . 46))
(1284 (define-interface . 46))
(1285 (export . 46))
(1286 (compound-interface . 46))
(1287 (an-interface . 46))
(1288 (really-export . 46))
(1289 (define-structure . 46))
(1290 (define-structures . 46))
(1291 (a-package . 46))
(1292 (define-reflective-tower-maker . 46))
(1293 (export-reflective-tower-maker . 46))
(1294 (define-module . 46))
(1295 (make-a-package . 46))
(1296 (loser . 46))
(1297 (interface-of . 46))
(1298 (*verify-later!* . 46))
(1299 (verify-later! . 46))
(1300 (set-verify-later! . 46))
(1301 (ensure-loaded . 55))
-
; Template uid -> name, parent, pc in parent, env maps
(1 current-cont 0 4 ())
(2 closure-template 0 12 ())
(3 continuation-ref 0 20 ())
(4 output-port? 0 28 ())
(5 closure? 0 36 ())
(6 complex? 0 44 ())
(7 arithmetic-shift 0 52 ())
(8 signal-condition 0 60 ())
(9 integer? 0 68 ())
(10 make-closure 0 76 ())
(11 template-ref 0 84 ())
(12 make-rectangular 0 92 ())
(13 string=? 0 100 ())
(14 extended-number? 0 108 ())
(15 reverse-list->string 0 116 ())
(16 denominator 0 124 ())
(17 call-with-values 0 132 ())
(18 weak-pointer-ref 0 140 ())
(19 find-all-symbols 0 148 ())
(20 code-vector? 0 156 ())
(21 pop 0 164 ())
(22 exp 0 172 ())
(23 sin 0 180 ())
(24 make-extended-number 0 188 ())
(25 cos 0 196 ())
(26 collect 0 204 ())
(27 external-lookup 0 212 ())
(28 tan 0 220 ())
(29 log 0 228 ())
(30 continuation-length 0 236 ())
(31 make-code-vector 0 244 ())
(33 cdr 32 4 ())
(34 bitwise-xor 32 12 ())
(35 car 32 20 ())
(36 string? 32 28 ())
(37 symbol? 32 36 ())
(38 set-cdr! 32 44 ())
(39 bitwise-not 32 52 ())
(40 vector? 32 60 ())
(41 closure-env 32 68 ())
(42 set-car! 32 76 ())
(43 bitwise-ior 32 84 ())
(44 number? 32 92 ())
(45 template-length 32 100 ())
(46 string-hash 32 108 ())
(47 pop-env 32 116 ())
(48 primitive-catch 32 124 ())
(49 make-string 32 132 ())
(50 input-port? 32 140 ())
(51 record? 32 148 ())
(52 make-vector 32 156 ())
(53 extended-number-set! 32 164 ())
(54 write-image 32 172 ())
(55 eq? 32 180 ())
(56 bitwise-and 32 188 ())
(57 location-id 32 196 ())
(58 code-vector-set! 32 204 ())
(59 set-location-id! 32 212 ())
(60 make-record 32 220 ())
(61 intern 32 228 ())
(62 values 32 236 ())
(63 string-set! 32 244 ())
(64 unassigned 32 252 ())
(65 vector-set! 32 260 ())
(66 extended-number-ref 32 268 ())
(67 unspecific 32 276 ())
(68 code-vector-ref 32 284 ())
(69 schedule-interrupt 32 292 ())
(70 find-all-xs 32 300 ())
(71 char-ready? 32 308 ())
(72 set-interrupt-handlers! 32 316 ())
(73 eof-object? 32 324 ())
(74 record-set! 32 332 ())
(75 ascii->char 32 340 ())
(76 char->ascii 32 348 ())
(77 set-enabled-interrupts! 32 356 ())
(78 external-value 32 364 ())
(79 make-immutable! 32 372 ())
(80 close-port 32 380 ())
(81 string-ref 32 388 ())
(82 immutable? 32 396 ())
(83 vector-ref 32 404 ())
(84 exact? 32 412 ())
(85 write-char 32 420 ())
(86 symbol->string 32 428 ())
(87 make-polar 32 436 ())
(88 record-ref 32 444 ())
(89 numerator 32 452 ())
(90 extended-number-length 32 460 ())
(91 error 32 468 ())
(92 exact->inexact 32 476 ())
(93 inexact->exact 32 484 ())
(94 apply 32 492 ())
(95 memory-status 32 500 ())
(97 code-vector-length 96 4 ())
(98 floor 96 12 ())
(99 with-continuation 96 20 ())
(100 magnitude 96 28 ())
(101 nargs 96 36 ())
(102 char=? 96 44 ())
(103 char<? 96 52 ())
(104 continuation? 96 60 ())
(105 remainder 96 68 ())
(106 vm-return 96 76 ())
(107 false 96 84 ())
(108 angle 96 92 ())
(109 open-port 96 100 ())
(110 string-length 96 108 ())
(111 external? 96 116 ())
(112 make-continuation 96 124 ())
(113 vector-length 96 132 ())
(114 template? 96 140 ())
(115 rational? 96 148 ())
(116 location? 96 156 ())
(117 external-name 96 164 ())
(118 set-exception-handler! 96 172 ())
(119 pair? 96 180 ())
(120 make-external 96 188 ())
(121 record-length 96 196 ())
(122 external-call 96 204 ())
(123 set-dynamic-state! 96 212 ())
(124 get-cont-from-heap 96 220 ())
(125 real-part 96 228 ())
(126 real? 96 236 ())
(127 make-template 96 244 ())
(128 imag-part 96 252 ())
(129 make-location 96 260 ())
(130 = 96 268 ())
(131 < 96 276 ())
(132 char? 96 284 ())
(133 quotient 96 292 ())
(134 / 96 300 ())
(135 weak-pointer? 96 308 ())
(136 - 96 316 ())
(137 continuation-set! 96 324 ())
(138 peek-char 96 332 ())
(139 + 96 340 ())
(140 * 96 348 ())
(141 contents 96 356 ())
(142 sqrt 96 364 ())
(143 read-char 96 372 ())
(144 set-contents! 96 380 ())
(145 push 96 388 ())
(146 make-weak-pointer 96 396 ())
(147 get-dynamic-state 96 404 ())
(148 trap 96 412 ())
(149 cons 96 420 ())
(150 template-set! 96 428 ())
(151 time 96 436 ())
(152 location-defined? 96 444 ())
(153 asin 96 452 ())
(154 write-string 96 460 ())
(155 vm-extension 96 468 ())
(156 force-output 96 476 ())
(157 acos 96 484 ())
(158 set-location-defined?! 96 492 ())
(159 atan 96 500 ())
(161 char->integer 160 4 ())
(162 integer->char 160 12 ())
(163 invoke-closure 160 44 ())
(164 primitive-cwcc 160 52 ())
(165 #f 164 7 ())
(166 make-undefined-location 160 60 ())
(167 vector-unassigned? 160 68 ())
(168 string-copy 160 76 ())
(169 loop 168 24 ())
(170 string->symbol 160 84 ())
(171 flush-the-symbol-table! 160 99 ())
(172 restore-the-symbol-table! 160 107 ())
(173 maybe-open-input-file 160 127 ())
(174 maybe-open-output-file 160 135 ())
(175 open-input-file 160 143 ())
(176 open-output-file 160 151 ())
(178 signal 177 12 ())
(179 warn 177 20 ())
(180 syntax-error 177 28 ())
(181 call-error 177 36 ())
(183 not 182 4 ())
(184 boolean? 182 12 ())
(185 eqv? 182 20 ())
(186 equal? 182 28 ())
(187 loop 186 141 ())
(188 > 182 36 ())
(189 <= 182 44 ())
(190 >= 182 52 ())
(191 max 182 60 ())
(192 #f 191 8 ())
(193 min 182 68 ())
(194 #f 193 8 ())
(195 abs 182 76 ())
(196 zero? 182 84 ())
(197 positive? 182 92 ())
(198 negative? 182 100 ())
(199 even? 182 108 ())
(200 odd? 182 116 ())
(201 caar 182 124 ())
(202 cadr 182 132 ())
(203 cdar 182 140 ())
(204 cddr 182 148 ())
(205 caaar 182 156 ())
(206 caadr 182 164 ())
(207 cadar 182 172 ())
(208 caddr 182 180 ())
(209 cdaar 182 188 ())
(210 cdadr 182 196 ())
(211 cddar 182 204 ())
(212 cdddr 182 212 ())
(213 caaaar 182 220 ())
(214 caaadr 182 228 ())
(215 caadar 182 236 ())
(216 caaddr 182 244 ())
(217 cadaar 182 252 ())
(218 cadadr 182 260 ())
(219 caddar 182 268 ())
(220 cadddr 182 276 ())
(221 cdaaar 182 284 ())
(222 cdaadr 182 292 ())
(223 cdadar 182 300 ())
(224 cdaddr 182 308 ())
(225 cddaar 182 316 ())
(226 cddadr 182 324 ())
(227 cdddar 182 332 ())
(228 cddddr 182 340 ())
(229 null? 182 348 ())
(230 list 182 356 ())
(231 length 182 364 ())
(232 #f 231 5 ())
(233 append 182 372 ())
(234 recur 233 22 ())
(235 reverse 182 380 ())
(236 append-reverse 182 388 ())
(237 list-tail 182 396 ())
(238 list-ref 182 404 ())
(239 mem 182 412 ())
(240 #f 239 5 ())
(241 loop 240 9 ())
(243 ass 242 21 ())
(244 #f 243 5 ())
(245 loop 244 9 ())
(246 assq 242 63 ())
(247 list? 242 71 ())
(248 recur 247 9 ())
(249 char>? 242 79 ())
(250 char>=? 242 87 ())
(251 char<=? 242 95 ())
(252 char-whitespace? 242 103 ())
(253 char-lower-case? 242 111 ())
(254 char-upper-case? 242 119 ())
(255 char-numeric? 242 127 ())
(256 char-alphabetic? 242 135 ())
(257 char-upcase 242 157 ())
(258 char-downcase 242 165 ())
(259 char-ci-compare 242 173 ())
(260 #f 259 5 ())
(261 string 242 266 ())
(262 substring 242 274 ())
(263 loop##0 262 22 ())
(264 string-append 242 282 ())
(265 #f 264 10 ())
(266 loop 264 39 ())
(267 loop##1 266 35 ())
(268 string->list 242 290 ())
(269 loop##2 268 15 ())
(270 list->string 242 298 ())
(271 loop##3 270 27 ())
(272 string-fill! 242 306 ())
(273 loop##4 272 15 ())
(274 make-string=? 242 314 ())
(275 #f 274 5 ())
(276 loop 275 25 ())
(277 make-string<? 242 339 ())
(278 #f 277 5 ())
(279 loop 278 36 ())
(280 string>? 242 387 ())
(281 string<=? 242 395 ())
(282 string>=? 242 403 ())
(283 string-ci>? 242 411 ())
(284 string-ci<=? 242 419 ())
(285 string-ci>=? 242 427 ())
(286 vector 242 435 ())
(287 vector->list 242 443 ())
(288 loop##5 287 9 ())
(289 list->vector 242 451 ())
(290 loop##6 289 27 ())
(291 vector-fill! 242 459 ())
(292 loop##7 291 16 ())
(293 map 242 467 ())
(294 map1 242 475 ())
(295 map2+ 242 483 ())
(296 for-each 242 491 ())
(297 loop 296 12 ())
(298 make-promise 242 499 ())
(299 #f 298 11 ())
(300 force 242 507 ())
(302 unspecific 301 4 ())
(303 reduce 301 12 ())
(304 filter 301 20 ())
(305 #f 304 5 ())
(306 pos 301 28 ())
(307 #f 306 5 ())
(308 loop 307 9 ())
(309 any 301 87 ())
(310 every 301 95 ())
(311 sublist 301 103 ())
(312 recur 311 42 ())
(313 last 301 111 ())
(314 insert 301 119 ())
(316 inexact? 315 4 ())
(317 modulo 315 12 ())
(318 ceiling 315 20 ())
(319 truncate 315 28 ())
(320 round 315 36 ())
(321 gcd 315 44 ())
(322 #f 321 6 ())
(323 euclid 315 52 ())
(324 lcm 315 60 ())
(325 #f 324 6 ())
(326 expt 315 68 ())
(327 raise-to-integer-power 315 76 ())
(328 loop 327 21 ())
(330 rationalize 329 4 ())
(331 simplest-rational 329 12 ())
(332 simplest-rational-internal 331 9 ())
(334 record-type 333 4 ())
(335 make-record-type 333 27 ())
(336 record-type? 333 35 ())
(337 record-type-uid 333 43 ())
(338 record-type-name 333 51 ())
(339 record-type-field-names 333 59 ())
(340 record-type-discloser 333 67 ())
(341 record-field-index 333 75 ())
(342 loop 341 9 ())
(343 record-constructor 333 83 ())
(344 #f 343 9 ())
(345 #f 343 43 ())
(346 loop 345 30 ())
(347 record-accessor 333 91 ())
(348 #f 347 55 ())
(349 record-modifier 333 99 ())
(350 #f 349 55 ())
(351 record-predicate 333 107 ())
(352 #f 351 5 ())
(353 define-record-discloser 333 115 ())
(354 disclose-record 333 123 ())
(355 default-record-discloser 333 131 ())
(359 simple-type-id 358 44 ())
(360 simple-type-priority 358 52 ())
(361 simple-type-predicate 358 60 ())
(362 simple-type-superiors 358 68 ())
(364 make-simple-type 358 108 ())
(365 compute-priority 358 116 ())
(366 %type-priority 358 132 ())
(367 %type-predicate 358 140 ())
(368 %same-type? 358 148 ())
(369 value? 358 212 ())
(374 record-type-priority 373 40 ())
(375 method-info-proc 373 89 ())
(376 method-info-n-ary? 373 97 ())
(377 method-info-types 373 105 ())
(378 make-method-info 373 130 ())
(380 empty-method-list 373 153 ())
(381 insert-method 373 161 ())
(382 recur 381 9 ())
(383 same-applicability? 373 169 ())
(384 every2 373 177 ())
(385 more-specific? 373 185 ())
(386 loop 385 106 ())
(387 more-specific-type? 373 193 ())
(388 method-table-id 373 241 ())
(389 method-table-set-perform! 373 249 ())
(390 method-table-get-perform 373 257 ())
(391 make-generic 373 265 ())
(392 method-table-prototype 373 273 ())
(393 method-table-methods 373 281 ())
(394 set-method-table-methods! 373 289 ())
(396 make-method-table 373 329 ())
(397 #f 396 48 ())
(398 #f 396 70 ())
(399 make-cell-for-generic 373 337 ())
(400 #f 399 7 ())
(401 #f 399 10 ())
(402 #f 399 13 ())
(403 add-to-method-table! 373 345 ())
(404 set-final-method! 373 353 ())
(405 apply-generic 373 361 ())
(406 methods->perform 373 369 ())
(407 recur 406 9 ())
(408 last-action 373 377 ())
(409 #f 408 5 ())
(410 one-action 373 385 ())
(411 #f 410 5 ())
(412 #f 411 19 ())
(413 argument-sequence-predicate 373 393 ())
(414 recur 413 9 ())
(415 check-for-next 373 401 ())
(416 #f 415 5 ())
(417 check-next 373 409 ())
(418 #f 417 5 ())
(419 add-method! 373 463 ())
(421 add-method! 420 57 ())
(422 type-predicate 420 130 ())
(423 &type-predicate 420 207 ())
(424 &type-predicate 420 269 ())
(425 type-priority 420 334 ())
(426 &type-priority 420 411 ())
(427 &type-priority 420 473 ())
(429 type-superiors 428 47 ())
(430 &type-superiors 428 124 ())
(431 &type-superiors 428 186 ())
(432 same-type? 428 254 ())
(433 &same-type? 428 334 ())
(434 &same-type? 428 399 ())
(436 singleton-value 435 4 ())
(438 compare-to 435 27 ())
(439 #f 438 5 ())
(440 &type-predicate 435 75 ())
(441 &type-priority 435 137 ())
(442 &same-type? 435 202 ())
(443 disclose 435 267 ())
(444 &disclose 435 344 ())
(445 &disclose 435 406 ())
(446 &add-method! 435 480 ())
(447 proc->discloser 435 502 ())
(448 #f 447 5 ())
(449 #f 448 5 ())
(452 &number->string 451 44 ())
(453 &number->string 451 109 ())
(454 &number->string 451 174 ())
(455 integer->digit 451 226 ())
(456 integer->string 451 231 ())
(457 recur 456 36 ())
(458 string->number 451 245 ())
(459 loop 458 159 ())
(460 radix-is 459 69 ())
(461 exactness-is 459 72 ())
(462 loop 459 233 ())
(463 &really-string->number 451 329 ())
(465 loop 464 16 ())
(466 &really-string->number 451 429 ())
(467 set-exactness 451 451 ())
(468 digit->integer 451 491 ())
(469 do-it 451 496 ())
(470 loop 469 35 ())
(471 string->integer 451 501 ())
(473 thread-dynamic-env 472 44 ())
(474 current-thread 472 52 ())
(475 set-current-thread! 472 60 ())
(476 get-dynamic-env 472 68 ())
(477 set-dynamic-env! 472 76 ())
(478 initialize-dynamic-state! 472 84 ())
(479 with-dynamic-env 472 92 ())
(480 #f 479 27 ())
(481 empty-dynamic-env 472 100 ())
(482 fluid-top-level-value 472 148 ())
(483 set-fluid-top-level-value! 472 156 ())
(484 fluid 472 164 ())
(485 set-fluid! 472 172 ())
(486 let-fluid 472 180 ())
(487 let-fluids 472 188 ())
(488 loop 487 10 ())
(489 fluid-lookup 472 196 ())
(491 dynamic-wind 490 4 ())
(492 #f 491 85 ())
(493 call-with-current-continuation 490 12 ())
(494 #f 493 5 ())
(495 continuation->procedure 490 20 ())
(496 #f 495 5 ())
(497 #f 496 54 ())
(498 point-parent 490 68 ())
(499 point-dynamic-env 490 76 ())
(500 point-out 490 84 ())
(501 point-in 490 92 ())
(502 point-depth 490 100 ())
(505 get-dynamic-point 490 153 ())
(506 env-dynamic-point 490 161 ())
(507 let-dynamic-point 490 169 ())
(508 travel-to-point! 490 177 ())
(510 current-input-port 509 52 ())
(511 current-output-port 509 60 ())
(512 error-output-port 509 68 ())
(513 with-initial-ports 509 76 ())
(514 call-with-mumble-file 509 84 ())
(515 #f 514 5 ())
(516 #f 515 9 ())
(517 #f 515 12 ())
(518 #f 515 15 ())
(519 with-input-from-file 509 132 ())
(520 #f 519 8 ())
(521 with-output-to-file 509 140 ())
(522 #f 521 8 ())
(523 newline 509 148 ())
(524 output-port-option 509 156 ())
(525 input-port-option 509 164 ())
(527 write 526 4 ())
(528 recur 527 26 ())
(529 recurring-write 526 12 ())
(530 write-boolean 526 20 ())
(531 write-number 526 28 ())
(532 write-char-literal 526 36 ())
(533 character-name 526 44 ())
(534 write-string-literal 526 52 ())
(535 loop##8 534 21 ())
(536 write-list 526 60 ())
(537 loop 536 67 ())
(538 quotation? 526 68 ())
(539 write-vector 526 76 ())
(540 loop 539 52 ())
(541 write-other 526 84 ())
(542 #f 541 57 ())
(543 display-type-name 526 92 ())
(544 loop##9 543 80 ())
(545 display 526 100 ())
(546 recur 545 26 ())
(548 condition-supertypes 547 12 ())
(549 define-condition-type 547 20 ())
(550 #f 549 19 ())
(551 condition-predicate 547 28 ())
(552 #f 551 5 ())
(553 condition? 547 36 ())
(554 make-exception 547 204 ())
(556 read 555 4 ())
(557 loop 556 24 ())
(558 sub-read-carefully 555 12 ())
(559 make-reader-token 555 37 ())
(560 reader-token? 555 45 ())
(561 sub-read 555 81 ())
(563 set-standard-syntax! 555 115 ())
(564 sub-read-whitespace 555 124 ())
(566 sub-read-constituent 555 144 ())
(568 set-standard-read-macro! 555 184 ())
(569 sub-read-list 555 192 ())
(575 loop 574 11 ())
(577 gobble-line 555 326 ())
(578 loop 577 9 ())
(579 define-sharp-macro 555 342 ())
(585 number-sharp-macro 555 432 ())
(587 sub-read-token 555 451 ())
(588 loop 587 9 ())
(589 parse-token 555 459 ())
(590 reading-error 555 504 ())
(592 table-set!-procedure 591 44 ())
(593 set-table-set!-procedure! 591 52 ())
(594 table-ref-procedure 591 60 ())
(595 set-table-ref-procedure! 591 68 ())
(596 table-data 591 76 ())
(597 set-table-data! 591 84 ())
(598 table-size 591 92 ())
(599 set-table-size! 591 100 ())
(600 table-ref 591 125 ())
(601 table-set! 591 133 ())
(602 next-table-size 591 157 ())
(603 make-table-maker 591 165 ())
(604 #f 603 67 ())
(605 new-entry 591 180 ())
(606 make-assoc 591 188 ())
(607 #f 606 17 ())
(608 loop 607 9 ())
(609 eq?-assoc 591 196 ())
(610 loop 609 9 ())
(611 make-linear-table-ref 591 204 ())
(612 #f 611 5 ())
(613 make-linear-table-set! 591 212 ())
(614 #f 613 5 ())
(615 make->hash-table 591 220 ())
(616 #f 615 37 ())
(617 make-hash-table-ref 591 228 ())
(618 #f 617 5 ())
(619 make-hash-table-set! 591 236 ())
(620 #f 619 5 ())
(621 expand-hash-table! 591 244 ())
(622 loop##10 621 43 ())
(623 table-enter-alist! 591 252 ())
(624 loop##11 623 19 ())
(625 table-expand-table! 591 260 ())
(626 table-walk 591 268 ())
(627 #f 626 5 ())
(628 really-table-walk 591 276 ())
(629 loop##12 628 62 ())
(630 alist-walk 591 284 ())
(631 loop##13 630 9 ())
(632 make-table-immutable! 591 292 ())
(633 table->entry-list 591 300 ())
(634 #f 633 14 ())
(635 default-table-hash-function 591 308 ())
(636 symbol-hash 591 316 ())
(637 make-table 591 345 ())
(640 type-info 639 44 ())
(641 type-more 639 52 ())
(642 type-mask 639 60 ())
(644 make-type 639 100 ())
(645 name->type 639 136 ())
(646 set-type-name! 639 144 ())
(647 new-type-bit 639 160 ())
(648 mask->type 639 168 ())
(649 bottom-type? 639 205 ())
(651 new-atomic-type 650 19 ())
(652 named-atomic-type 650 27 ())
(653 rail-type 650 80 ())
(654 make-optional-type 650 88 ())
(655 make-rest-type 650 96 ())
(656 head-type 650 104 ())
(657 head-type-really 650 112 ())
(658 tail-type 650 120 ())
(659 empty-rail-type? 650 128 ())
(660 rest-type? 650 136 ())
(661 optional-type? 650 144 ())
(662 value-type? 650 268 ())
(663 same-type? 650 328 ())
(664 subtype? 650 336 ())
(665 meet-type 650 344 ())
(666 other-type-info 650 352 ())
(667 p 650 360 ())
(668 meet-rail 650 368 ())
(669 meet-procedure 650 376 ())
(670 meet? 650 384 ())
(671 meet-procedure? 650 392 ())
(672 join-type 650 400 ())
(673 join-rail 650 408 ())
(674 join-procedure 650 416 ())
(675 loop 650 437 ())
(677 make-other-type 676 222 ())
(678 procedure-type 676 362 ())
(679 make-procedure-type 676 370 ())
(680 procedure-type-domain 676 378 ())
(681 procedure-type-codomain 676 386 ())
(682 restrictive? 676 394 ())
(683 sexp->type 676 402 ())
(684 #f 683 234 ())
(685 #f 683 282 ())
(686 sexp->values-type 676 410 ())
(687 type->sexp 676 418 ())
(688 #f 687 122 ())
(689 atomic-type->sexp 676 426 ())
(690 rail-type->sexp 676 434 ())
(691 recur 690 9 ())
(692 disjoin-type 676 442 ())
(693 loop##14 692 228 ())
(694 disjoin-rest 676 450 ())
(695 make-some-values-type 676 471 ())
(696 procedure-type? 676 479 ())
(697 fixed-arity-procedure-type? 676 487 ())
(698 loop 697 23 ())
(699 procedure-type-arity 676 495 ())
(700 loop##15 699 9 ())
(701 procedure-type-argument-types 676 503 ())
(702 recur 701 9 ())
(704 operator-name 703 69 ())
(705 operator-uid 703 77 ())
(706 operator-nargs 703 85 ())
(707 operator-type 703 93 ())
(708 set-operator-type! 703 101 ())
(710 get-operator 703 141 ())
(711 make-operator-table 703 191 ())
(712 operator-lookup 703 207 ())
(713 operator-define! 703 215 ())
(714 node-plist 703 263 ())
(715 set-node-plist! 703 271 ())
(716 node-form 703 279 ())
(717 node-operator-id 703 287 ())
(719 make-node 703 327 ())
(720 node-ref 703 335 ())
(721 node-set! 703 343 ())
(722 loop 721 78 ())
(723 node-operator 703 351 ())
(724 node-predicate 703 359 ())
(725 #f 724 30 ())
(726 make-similar-node 703 367 ())
(727 generated-parent-name 703 415 ())
(728 generated-env 703 423 ())
(729 generated-token 703 431 ())
(731 generated-symbol 730 4 ())
(733 generate-name 730 44 ())
(734 generated-uid 730 52 ())
(735 name->symbol 730 68 ())
(736 name-hash 730 76 ())
(737 desyntaxify 730 84 ())
(738 loop 737 237 ())
(739 transform-id 730 132 ())
(740 transform-source 730 140 ())
(741 transform-aux-names 730 148 ())
(742 transform-type 730 156 ())
(743 transform-env 730 164 ())
(744 transform-procedure 730 172 ())
(745 make-transform 730 197 ())
(747 maybe-transform 730 220 ())
(748 compare 747 67 ())
(749 bind-aliases 730 228 ())
(750 #f 749 22 ())
(751 make-name-generator 730 236 ())
(752 #f 751 10 ())
(753 same-denotation? 730 244 ())
(754 binding-type 730 260 ())
(755 binding-place 730 268 ())
(756 binding-static 730 276 ())
(757 set-binding-place! 730 284 ())
(758 make-binding 730 292 ())
(759 clobber-binding! 730 300 ())
(760 impose-type 730 308 ())
(761 forget-integration 730 316 ())
(762 classify 730 324 ())
(763 classify-literal 730 393 ())
(764 classify-call 730 423 ())
(765 classify-name 730 432 ())
(766 classify-macro-application 730 460 ())
(767 #f 766 14 ())
(768 classify-transform-application 730 489 ())
(769 #f 768 5 ())
(770 maybe-transform-call 730 498 ())
(771 #f 770 108 ())
(773 classify-operator-form 772 4 ())
(775 define-classifier 772 29 ())
(779 unspecific-node 772 176 ())
(781 lose 780 26 ())
(783 lookup 772 237 ())
(784 bind1 772 245 ())
(785 #f 784 5 ())
(786 bind 772 253 ())
(787 bindrec 772 261 ())
(788 #f 787 16 ())
(789 literal? 772 269 ())
(790 number-of-required-args 772 277 ())
(791 loop##16 790 9 ())
(792 n-ary? 772 285 ())
(793 normalize-formals 772 293 ())
(794 syntax? 772 301 ())
(795 name? 772 309 ())
(796 define-usual-suspects 772 341 ())
(797 #f 796 31 ())
(798 #f 797 61 ())
(799 #f 796 70 ())
(800 #f 799 57 ())
(801 #f 800 5 ())
(802 #f 796 93 ())
(803 process-syntax 772 349 ())
(804 get-funny 772 357 ())
(805 reflective-tower 772 382 ())
(806 scan-body 772 390 ())
(807 #f 806 58 ())
(808 scan-body-forms 772 398 ())
(809 #f 808 171 ())
(810 body-lossage 772 406 ())
(811 variable-type 772 454 ())
(812 variable-type? 772 462 ())
(813 compatible-types? 772 478 ())
(815 schemify 814 4 ())
(816 schemify1 814 12 ())
(819 define-schemifier 814 37 ())
(822 name->qualified 814 81 ())
(823 recur 822 83 ())
(827 schemify-sexp 814 107 ())
(828 loop 827 136 ())
(829 make-qualified 814 115 ())
(830 qualified? 814 123 ())
(831 qualified-parent-name 814 131 ())
(832 qualified-symbol 814 139 ())
(834 make-population 833 4 ())
(835 add-to-population! 833 12 ())
(836 weak-memq 833 20 ())
(837 population-reduce 833 28 ())
(838 loop##17 837 9 ())
(839 population->list 833 36 ())
(840 walk-population 833 44 ())
(841 #f 840 5 ())
(843 interface-name 842 44 ())
(844 interface-clients 842 52 ())
(845 walk-method 842 60 ())
(846 ref-method 842 68 ())
(848 interface-ref 842 108 ())
(849 for-each-declaration 842 116 ())
(850 note-reference-to-interface! 842 124 ())
(851 make-interface 842 132 ())
(852 make-simple-interface 842 140 ())
(853 #f 852 23 ())
(854 #f 853 58 ())
(855 really-make-simple-interface 842 148 ())
(856 #f 855 5 ())
(857 #f 855 8 ())
(858 make-compound-interface 842 156 ())
(859 #f 858 12 ())
(860 loop 859 9 ())
(861 #f 858 15 ())
(862 #f 861 5 ())
(863 #f 858 32 ())
(865 structure-name 864 44 ())
(866 structure-clients 864 52 ())
(867 structure-package 864 60 ())
(868 structure-interface-really 864 68 ())
(869 set-structure-interface! 864 76 ())
(870 structure-interface-thunk 864 84 ())
(872 structure-interface 864 124 ())
(873 initialize-structure! 864 132 ())
(874 make-structure 864 140 ())
(875 #f 874 75 ())
(876 structure-unstable? 864 148 ())
(877 for-each-export 864 156 ())
(878 #f 877 19 ())
(879 package-cached 864 204 ())
(881 package-clients 880 4 ())
(882 package-plist 880 12 ())
(883 set-package-plist! 880 20 ())
(884 package-accesses-thunk 880 28 ())
(885 package-opens-thunk 880 36 ())
(886 set-package-opens-thunk! 880 44 ())
(887 package->environment 880 52 ())
(888 set-package->environment! 880 60 ())
(889 package-loaded? 880 68 ())
(890 set-package-loaded?! 880 76 ())
(891 package-clauses 880 84 ())
(892 package-file-name 880 92 ())
(893 package-get-location 880 100 ())
(894 set-package-get-location! 880 108 ())
(895 package-integrate? 880 116 ())
(896 set-package-integrate?! 880 124 ())
(897 package-unstable? 880 132 ())
(898 package-definitions 880 140 ())
(899 package-opens-really 880 148 ())
(900 set-package-opens! 880 156 ())
(901 package-uid 880 164 ())
(903 make-package 880 204 ())
(904 really-package->environment 880 212 ())
(905 #f 904 5 ())
(906 new-package-uid 880 220 ())
(907 package-name 880 250 ())
(908 set-package-name! 880 258 ())
(909 package-opens 880 266 ())
(910 initialize-package-if-necessary! 880 274 ())
(911 package-accesses 880 282 ())
(912 make-simple-package 880 290 ())
(913 #f 912 60 ())
(914 #f 912 63 ())
(915 package-definition 880 298 ())
(916 package-define! 880 306 ())
(917 really-package-define! 880 314 ())
(918 package-lookup 880 322 ())
(919 really-package-lookup 880 330 ())
(920 loop 919 80 ())
(921 structure-lookup 880 338 ())
(922 generic-lookup 880 346 ())
(923 initialize-package! 880 354 ())
(924 #f 923 35 ())
(925 #f 923 46 ())
(926 define-funny-names! 880 362 ())
(927 package-define-funny! 880 370 ())
(928 extract-package-from-environment 880 395 ())
(929 for-each-definition 880 403 ())
(930 #f 929 5 ())
(931 get-new-location 880 411 ())
(932 make-new-location 880 419 ())
(933 flush-location-names 880 466 ())
(934 package-get 880 474 ())
(935 package-put! 880 482 ())
(936 package-note-caching 880 490 ())
(937 loop 936 54 ())
(938 maybe-fix-place 880 498 ())
(939 follow-forwarding-pointers 880 506 ())
(941 environment-ref 940 4 ())
(942 environment-set! 940 12 ())
(943 #f 942 98 ())
(944 environment-define! 940 20 ())
(945 *structure-ref 940 28 ())
(946 carefully 940 36 ())
(947 interaction-environment 940 60 ())
(948 set-interaction-environment! 940 68 ())
(949 with-interaction-environment 940 76 ())
(950 scheme-report-environment 940 84 ())
(951 set-scheme-report-environment! 940 107 ())
(952 make-reflective-tower 940 115 ())
(953 recur 952 9 ())
(954 #f 953 5 ())
(955 set-reflective-tower-maker! 940 141 ())
(957 define-usual-macro 956 18 ())
(958 #f 957 11 ())
(959 usual-transform 956 26 ())
(960 long-enough? 956 34 ())
(963 recur 962 16 ())
(972 interesting-to-quasiquote? 971 33 ())
(973 descend-quasiquote-vector 971 38 ())
(974 #f 973 20 ())
(975 descend-quasiquote-pair 971 43 ())
(976 #f 975 14 ())
(977 #f 976 14 ())
(978 descend-quasiquote 971 48 ())
(979 finalize-quasiquote 971 53 ())
(980 expand-quasiquote 971 58 ())
(983 process-rules 981 25 ())
(984 free-meta-variables 983 63 ())
(985 meta-variables 983 68 ())
(986 process-template 983 73 ())
(987 process-pattern 983 78 ())
(988 #f 987 90 ())
(989 process-segment-match 983 83 ())
(990 process-match 983 88 ())
(991 process-rule 983 93 ())
(992 #f 991 99 ())
(993 make-transformer 983 98 ())
(994 segment-pattern? 981 33 ())
(995 segment-template? 981 41 ())
(996 find-free-names-in-syntax-rules 981 75 ())
(997 free-names 996 11 ())
(998 meta-variables 996 16 ())
(999 loop##18 996 25 ())
(1001 namestring 1000 4 ())
(1002 #f 1001 173 ())
(1003 namestring-component 1000 28 ())
(1004 file-name-directory 1000 60 ())
(1005 file-name-nondirectory 1000 68 ())
(1006 file-nondirectory-position 1000 76 ())
(1007 loop 1006 9 ())
(1008 string-posq 1000 84 ())
(1009 loop 1008 9 ())
(1010 translations 1000 100 ())
(1011 set-translation! 1000 108 ())
(1012 translate 1000 116 ())
(1013 loop 1012 15 ())
(1015 scan-forms 1014 21 ())
(1016 #f 1015 87 ())
(1017 scan-file 1014 29 ())
(1018 #f 1017 71 ())
(1019 #f 1018 58 ())
(1020 recur 1019 43 ())
(1021 scan-form-list 1014 37 ())
(1022 loop 1021 9 ())
(1023 scan-form 1014 96 ())
(1024 process-define-syntax 1014 105 ())
(1025 scan-structures 1014 113 ())
(1026 recur 1025 29 ())
(1027 #f 1026 188 ())
(1028 #f 1026 231 ())
(1029 scan-package 1014 121 ())
(1030 #f 1029 77 ())
(1031 #f 1030 22 ())
(1032 optimize 1014 129 ())
(1033 #f 1032 33 ())
(1034 #f 1032 124 ())
(1035 #f 1032 137 ())
(1036 check-structure 1014 137 ())
(1037 #f 1036 14 ())
(1038 initialize-usual-transforms! 1014 145 ())
(1039 #f 1038 5 ())
(1040 define-all-operators 1014 153 ())
(1041 #f 1040 14 ())
(1042 #f 1040 60 ())
(1043 make-define-primitive-node 1014 197 ())
(1044 get-optimizer 1014 220 ())
(1045 set-optimizer! 1014 228 ())
(1047 note-undefined! 1046 20 ())
(1048 noting-undefined-variables 1046 28 ())
(1049 foo 1048 28 ())
(1050 #f 1048 36 ())
(1051 #f 1048 52 ())
(1052 #f 1051 3 ())
(1053 #f 1051 9 ())
(1054 #f 1053 3 ())
(1055 #f 1054 17 ())
(1056 #f 1054 143 ())
(1058 lookup-enumerand 1057 4 ())
(1059 loop 1058 16 ())
(1062 node-type 1061 4 ())
(1063 reconstruct-type 1061 12 ())
(1064 reconstruct 1061 20 ())
(1066 define-reconstructor 1061 45 ())
(1070 careful-codomain 1061 71 ())
(1071 reconstruct-body 1061 79 ())
(1074 reconstruct-name 1072 22 ())
(1075 reconstruct-call 1072 30 ())
(1076 lose 1075 63 ())
(1077 #f 1076 3 ())
(1078 loop 1075 104 ())
(1083 fork-constraints 1072 92 ())
(1084 #f 1083 12 ())
(1086 loop##19 1085 9 ())
(1087 examine 1072 118 ())
(1093 node->type 1072 198 ())
(1099 reconstruct-apply 1072 377 ())
(1100 #f 1099 45 ())
(1101 declare-operator-type 1072 496 ())
(1102 #f 1101 19 ())
(1105 last 1104 463 ())
(1106 constant-type 1104 471 ())
(1108 template-code 1107 12 ())
(1109 template-info 1107 20 ())
(1110 set-template-code! 1107 28 ())
(1111 set-template-info! 1107 36 ())
(1113 segment->template 1112 28 ())
(1114 #f 1113 169 ())
(1115 segment-data->template 1112 36 ())
(1116 loop##20 1115 52 ())
(1117 astate-literals 1112 84 ())
(1118 set-astate-literals! 1112 92 ())
(1119 astate-count 1112 100 ())
(1120 set-astate-count! 1112 108 ())
(1121 astate-pc 1112 116 ())
(1122 set-astate-pc! 1112 124 ())
(1123 astate-code-vector 1112 132 ())
(1124 make-astate 1112 140 ())
(1125 emit-byte! 1112 148 ())
(1126 emit-literal! 1112 156 ())
(1127 emit-segment! 1112 164 ())
(1129 instruction 1112 186 ())
(1130 #f 1129 24 ())
(1131 #f 1130 20 ())
(1132 sequentially 1112 194 ())
(1133 sequentially-2 1112 202 ())
(1134 #f 1133 42 ())
(1135 instruction-with-literal 1112 210 ())
(1136 #f 1135 8 ())
(1137 instruction-with-location 1112 218 ())
(1138 #f 1137 8 ())
(1139 instruction-with-template 1112 226 ())
(1140 #f 1139 8 ())
(1141 make-label 1112 234 ())
(1142 instruction-using-label 1112 242 ())
(1143 #f 1142 37 ())
(1144 attach-label 1112 250 ())
(1145 #f 1144 11 ())
(1146 #f 1145 27 ())
(1147 note-source-code 1112 294 ())
(1148 #f 1147 22 ())
(1149 note-environment 1112 302 ())
(1150 #f 1149 22 ())
(1151 emit-with-environment-maps! 1112 310 ())
(1152 #f 1151 24 ())
(1154 new-template-uid 1153 4 ())
(1155 template-uid 1153 20 ())
(1156 set-template-uid! 1153 28 ())
(1157 debug-flag-accessor 1153 127 ())
(1158 #f 1157 22 ())
(1159 debug-flag-modifier 1153 135 ())
(1160 #f 1159 22 ())
(1161 with-fresh-compiler-state 1153 245 ())
(1162 #f 1161 51 ())
(1163 #f 1162 3 ())
(1164 #f 1162 6 ())
(1165 saving-and-restoring 1153 253 ())
(1166 swap 1165 5 ())
(1168 debug-data-source 1167 44 ())
(1169 set-debug-data-source! 1167 52 ())
(1170 debug-data-env-maps 1167 60 ())
(1171 set-debug-data-env-maps! 1167 68 ())
(1172 debug-data-pc-in-parent 1167 76 ())
(1173 debug-data-parent 1167 84 ())
(1174 debug-data-name 1167 92 ())
(1175 debug-data-uid 1167 100 ())
(1176 new-debug-data 1167 125 ())
(1178 debug-data->info 1167 148 ())
(1179 get-debug-data 1167 156 ())
(1180 note-debug-data! 1167 164 ())
(1181 interesting-debug-data? 1167 172 ())
(1182 debug-data-names 1167 180 ())
(1183 template-debug-data 1167 188 ())
(1184 template-id 1167 196 ())
(1185 template-name 1167 204 ())
(1186 template-names 1167 212 ())
(1188 compile-top 1187 4 ())
(1189 compile 1187 12 ())
(1194 define-compilator 1187 40 ())
(1197 compile-constant 1187 83 ())
(1202 compile-begin 1187 180 ())
(1203 loop 1202 59 ())
(1205 compile-call 1204 4 ())
(1206 compile-redex 1204 46 ())
(1207 compile-unknown-call 1204 54 ())
(1208 maybe-push-continuation 1204 62 ())
(1209 push-arguments 1204 70 ())
(1210 recur 1209 9 ())
(1211 push-all-with-names 1204 78 ())
(1213 compile-lambda 1204 104 ())
(1214 compile-lambda-code 1204 112 ())
(1215 compile-letrec 1204 180 ())
(1216 #f 1215 76 ())
(1217 #f 1215 179 ())
(1218 compile-body 1204 207 ())
(1219 #f 1218 11 ())
(1220 #f 1219 49 ())
(1221 make-cont 1204 232 ())
(1222 return-cont 1204 273 ())
(1223 return-cont? 1204 281 ())
(1224 fall-through-cont 1204 289 ())
(1225 fall-through-cont? 1204 297 ())
(1226 ignore-values-cont 1204 322 ())
(1227 ignore-values-cont? 1204 330 ())
(1228 deliver-value 1204 338 ())
(1229 named-cont 1204 346 ())
(1230 cont-name 1204 354 ())
(1231 bind-vars 1204 362 ())
(1232 #f 1231 23 ())
(1233 loop 1232 21 ())
(1234 initial-cenv 1204 370 ())
(1235 environment-level 1204 378 ())
(1236 name-node-binding 1204 403 ())
(1237 generate-trap 1204 411 ())
(1238 careful-sequentially 1204 419 ())
(1239 shrink-segment 1204 439 ())
(1240 type-check 1204 447 ())
(1241 #f 1240 107 ())
(1242 #f 1240 139 ())
(1243 set-type-check?! 1204 455 ())
(1244 diagnose-call-error 1204 471 ())
(1245 #f 1244 151 ())
(1248 define-compiler-primitive 1247 4 ())
(1250 define-closed-compilator 1247 29 ())
(1252 get-closed-compilator 1247 55 ())
(1253 direct-compilator 1247 63 ())
(1254 #f 1253 5 ())
(1255 direct-closed-compilator 1247 71 ())
(1256 #f 1255 5 ())
(1257 nargs->domain 1247 79 ())
(1258 loop##21 1257 9 ())
(1259 loop##22 1247 92 ())
(1260 define-simple-primitive 1247 108 ())
(1261 simple-compilator 1247 116 ())
(1262 #f 1261 5 ())
(1263 simple-closed-compilator 1247 124 ())
(1264 #f 1263 5 ())
(1265 symbol-append 1247 132 ())
(1266 define-stob-predicate 1247 140 ())
(1267 define-data-struct-primitives 1247 178 ())
(1268 def-prim 1267 8 ())
(1269 loop##23 1267 175 ())
(1271 define-vector-primitives 1247 201 ())
(1272 def-prim 1271 22 ())
(1278 define-n-ary-compiler-primitive 1247 309 ())
(1279 n-ary-primitive-compilator 1247 317 ())
(1280 #f 1279 5 ())
(1289 push-all-but-last 1247 438 ())
(1290 recur 1289 9 ())
(1292 compile-form 1291 4 ())
(1293 compile-file 1291 12 ())
(1294 compile-and-run-forms 1291 20 ())
(1295 compile-and-run-file 1291 28 ())
(1296 compile-and-run-scanned-forms 1291 36 ())
(1297 do-it 1296 5 ())
(1298 do-them 1296 10 ())
(1299 loop##24 1298 34 ())
(1300 #f 1296 20 ())
(1301 compile-scanned-forms 1291 44 ())
(1302 #f 1301 54 ())
(1303 recur 1302 51 ())
(1304 compile-scanned-form 1291 52 ())
(1305 compile-definition 1291 86 ())
(1306 #f 1305 52 ())
(1307 get-location 1291 95 ())
(1308 win 1307 12 ())
(1309 get-location-for-undefined 1291 103 ())
(1310 #f 1309 82 ())
(1311 #f 1309 85 ())
(1312 get-location-for-unassignable 1291 111 ())
(1313 #f 1312 82 ())
(1314 #f 1312 85 ())
(1315 package-accessor-on-demand 1291 119 ())
(1316 #f 1315 5 ())
(1317 location-on-demand 1291 127 ())
(1318 #f 1317 5 ())
(1320 location-for-reference 1291 173 ())
(1321 loop 1320 9 ())
(1323 note-caching 1291 219 ())
(1324 grumble 1291 227 ())
(1325 make-startup-procedure 1291 235 ())
(1326 #f 1325 14 ())
(1328 eval 1327 4 ())
(1329 #f 1328 22 ())
(1330 load 1327 12 ())
(1331 #f 1330 39 ())
(1332 #f 1331 6 ())
(1333 #f 1332 9 ())
(1334 eval-from-file 1327 20 ())
(1335 #f 1334 8 ())
(1336 #f 1335 6 ())
(1337 #f 1336 12 ())
(1338 eval-scanned-forms 1327 28 ())
(1339 #f 1338 14 ())
(1340 invoke-template 1327 36 ())
(1343 continuation-cont 1342 4 ())
(1344 continuation-pc 1342 12 ())
(1345 continuation-template 1342 20 ())
(1346 continuation-env 1342 28 ())
(1347 continuation-arg 1342 44 ())
(1348 continuation-arg-count 1342 52 ())
(1349 continuation-parent 1342 60 ())
(1350 loop 1349 68 ())
(1351 &disclose 1342 136 ())
(1353 usual-exception-handler 1352 4 ())
(1354 define-exception-handler 1352 12 ())
(1355 signal-exception 1352 20 ())
(1357 except 1352 60 ())
(1358 #f 1357 5 ())
(1359 handler 1352 63 ())
(1360 #f 1359 5 ())
(1361 make-opcode-generic! 1352 68 ())
(1362 really-signal-condition 1352 77 ())
(1363 loop 1362 9 ())
(1364 #f 1363 8 ())
(1365 with-handler 1352 85 ())
(1366 initialize-exceptions! 1352 109 ())
(1367 #f 1366 5 ())
(1368 last-resort-condition-handler 1352 117 ())
(1369 #f 1368 12 ())
(1370 #f 1369 21 ())
(1371 report-utter-lossage 1352 125 ())
(1372 #f 1371 76 ())
(1373 continuation-preview 1352 133 ())
(1374 ignore-errors 1352 141 ())
(1375 #f 1374 5 ())
(1376 #f 1375 5 ())
(1377 &disclose 1352 189 ())
(1378 &disclose 1352 247 ())
(1381 define-wna-handler 1379 27 ())
(1382 wna-lose 1379 43 ())
(1390 recur 1389 47 ())
(1396 comparison-wna 1379 231 ())
(1397 #f 1396 5 ())
(1398 loop 1397 52 ())
(1400 display-condition 1399 16 ())
(1401 #f 1400 9 ())
(1402 really-display-condition 1399 25 ())
(1403 #f 1402 220 ())
(1404 &disclose-condition 1399 119 ())
(1405 limited-write 1399 141 ())
(1406 recur 1405 9 ())
(1407 #f 1406 134 ())
(1408 #f 1407 21 ())
(1410 command-processor 1409 4 ())
(1411 loop 1410 50 ())
(1412 #f 1411 7 ())
(1413 #f 1412 5 ())
(1414 #f 1413 63 ())
(1415 #f 1412 8 ())
(1416 #f 1415 69 ())
(1417 #f 1415 145 ())
(1418 #f 1415 152 ())
(1419 #f 1418 10 ())
(1420 mini-load 1409 12 ())
(1421 read-string 1409 20 ())
(1422 loop 1421 9 ())
(1424 loop##25 1423 22 ())
(1425 #f 1424 28 ())
(1426 initialize-interrupts! 1423 38 ())
(1427 with-interrupts-inhibited 1423 85 ())
(1428 with-interrupts-allowed 1423 93 ())
(1429 with-interrupts 1423 101 ())
(1430 #f 1429 11 ())
(1431 enabled-interrupts 1423 109 ())
(1432 interrupt-before-heap-overflow! 1423 117 ())
(1433 #f 1432 42 ())
(1435 usual-resumer 1434 4 ())
(1436 #f 1435 5 ())
(1437 #f 1436 20 ())
(1438 #f 1437 3 ())
(1440 start 1439 4 ())
(1441 #f 1440 5 ())
(1442 #f 1441 5 ())
(1443 #f 1442 53 ())
(1444 make-built-in-structures 1439 12 ())
(1445 #f 1444 33 ())
(1446 #f 1444 50 ())
(1447 initialize-interaction-environment! 1439 20 ())
(1448 make-initial-package 1439 28 ())
(1449 #f 1448 16 ())
(1450 make-tower 1439 36 ())
(1452 inline-transform 1451 4 ())
(1453 #f 1452 55 ())
(1454 #f 1452 61 ())
(1455 make-substitution 1451 12 ())
(1456 #f 1455 25 ())
(1457 substitute 1451 20 ())
(1458 #f 1457 186 ())
(1459 #f 1457 270 ())
(1460 qualified->name 1451 45 ())
(1461 recur 1460 9 ())
(1462 get-qualified-env 1451 53 ())
(1464 operator 1463 4 ())
(1465 simple-interface 1463 12 ())
(1466 #f 1465 11 ())
(1467 package 1463 20 ())
(1468 loop##26 1467 60 ())
(1469 transform 1463 28 ())
(1471 procedure 1470 36 ())
(1474 make-a-package 1473 4 ())
(1475 loser 1473 12 ())
(1476 *verify-later!* 1473 28 ())
(1477 verify-later! 1473 36 ())
(1478 set-verify-later! 1473 44 ())
(1480 ensure-loaded 1479 4 ())
(1481 #f 1480 9 ())
(1482 #f 1480 12 ())
(1483 #f 1482 8 ())
(1484 #f 1483 7 ())
(1487 get-location 1486 3 ())
(1524 conc 1523 35 ())
(1525 #f 1524 17 ())
(1528 loop 1527 97 ())
(1534 loop 1533 48 ())
(1538 loop##27 1537 53 ())
(1542 loop 1541 75 ())
(1544 loop 1543 75 ())
(1546 loop 1545 75 ())
(1549 loop 1548 75 ())
(1551 loop 1550 75 ())
(1574 parse-package-clauses 1573 19 ())
(1575 loop 1574 47 ())
(1581 loop 1580 29 ())
(1595 loop 1594 37 ())
(1596 loop 1594 59 ())
-
