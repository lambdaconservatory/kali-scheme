; Package uid -> name
(0 low-structures)
(1 debug-low-structures)
(2 alt-features-structures)
(3 cheat-features-structures)
(4 the-interfaces)
(5 meta-module-system)
(6 run-time-structures)
(7 compiler-structures)
(8 initial-structures)
(9 debug-structures)
(10 usual-structures)
(11 alt-low-structures)
(12 compiler-structures)
(13 linker-structures)
(14 scheme-level-0)
(15 scheme-level-1)
(16 records)
(17 bummed-define-record-types)
(18 methods)
(19 number-i/o)
(20 fluids)
(21 wind)
(22 ports)
(23 enumerated)
(24 architecture)
(25 conditions)
(26 templates)
(27 continuations)
(28 more-types)
(29 exceptions)
(30 interrupts)
(31 writing)
(32 reading)
(33 scheme-level-2)
(34 scheme-level-2-internal)
(35 weak)
(36 display-conditions)
(37 tables)
(38 filenames)
(39 meta-types)
(40 interfaces)
(41 syntactic)
(42 usual-macros)
(43 reconstruction)
(44 packages)
(45 scan)
(46 segments)
(47 compiler)
(48 defpackage)
(49 types)
(50 module-system)
(51 inline)
(52 environments)
(53 evaluation)
(54 ensures-loaded)
(55 for-reification)
(56 scheme)
(57 mini-command)
(58 initial-system)
-
; Location uid -> (name . package-uid)
(0 (current-cont . 14))
(1 (closure-template . 14))
(2 (continuation-ref . 14))
(3 (output-port? . 14))
(4 (closure? . 14))
(5 (complex? . 14))
(6 (arithmetic-shift . 14))
(7 (signal-condition . 14))
(8 (integer? . 14))
(9 (make-closure . 14))
(10 (template-ref . 14))
(11 (make-rectangular . 14))
(12 (string=? . 14))
(13 (extended-number? . 14))
(14 (reverse-list->string . 14))
(15 (denominator . 14))
(16 (call-with-values . 14))
(17 (weak-pointer-ref . 14))
(18 (find-all-symbols . 14))
(19 (code-vector? . 14))
(20 (pop . 14))
(21 (exp . 14))
(22 (sin . 14))
(23 (make-extended-number . 14))
(24 (cos . 14))
(25 (collect . 14))
(26 (external-lookup . 14))
(27 (tan . 14))
(28 (log . 14))
(29 (continuation-length . 14))
(30 (make-code-vector . 14))
(31 (cdr . 14))
(32 (bitwise-xor . 14))
(33 (car . 14))
(34 (string? . 14))
(35 (symbol? . 14))
(36 (set-cdr! . 14))
(37 (bitwise-not . 14))
(38 (vector? . 14))
(39 (closure-env . 14))
(40 (set-car! . 14))
(41 (bitwise-ior . 14))
(42 (number? . 14))
(43 (template-length . 14))
(44 (string-hash . 14))
(45 (pop-env . 14))
(46 (primitive-catch . 14))
(47 (make-string . 14))
(48 (input-port? . 14))
(49 (record? . 14))
(50 (make-vector . 14))
(51 (extended-number-set! . 14))
(52 (write-image . 14))
(53 (eq? . 14))
(54 (bitwise-and . 14))
(55 (location-id . 14))
(56 (code-vector-set! . 14))
(57 (set-location-id! . 14))
(58 (make-record . 14))
(59 (intern . 14))
(60 (values . 14))
(61 (string-set! . 14))
(62 (unassigned . 14))
(63 (vector-set! . 14))
(64 (extended-number-ref . 14))
(65 (unspecific . 14))
(66 (code-vector-ref . 14))
(67 (schedule-interrupt . 14))
(68 (find-all-xs . 14))
(69 (char-ready? . 14))
(70 (set-interrupt-handlers! . 14))
(71 (eof-object? . 14))
(72 (record-set! . 14))
(73 (ascii->char . 14))
(74 (char->ascii . 14))
(75 (set-enabled-interrupts! . 14))
(76 (external-value . 14))
(77 (make-immutable! . 14))
(78 (close-port . 14))
(79 (string-ref . 14))
(80 (immutable? . 14))
(81 (vector-ref . 14))
(82 (exact? . 14))
(83 (write-char . 14))
(84 (symbol->string . 14))
(85 (make-polar . 14))
(86 (record-ref . 14))
(87 (numerator . 14))
(88 (extended-number-length . 14))
(89 (error . 14))
(90 (exact->inexact . 14))
(91 (inexact->exact . 14))
(92 (apply . 14))
(93 (memory-status . 14))
(94 (code-vector-length . 14))
(95 (floor . 14))
(96 (with-continuation . 14))
(97 (magnitude . 14))
(98 (nargs . 14))
(99 (char=? . 14))
(100 (char<? . 14))
(101 (continuation? . 14))
(102 (remainder . 14))
(103 (vm-return . 14))
(104 (false . 14))
(105 (angle . 14))
(106 (open-port . 14))
(107 (string-length . 14))
(108 (external? . 14))
(109 (make-continuation . 14))
(110 (vector-length . 14))
(111 (template? . 14))
(112 (rational? . 14))
(113 (location? . 14))
(114 (external-name . 14))
(115 (set-exception-handler! . 14))
(116 (pair? . 14))
(117 (make-external . 14))
(118 (record-length . 14))
(119 (external-call . 14))
(120 (set-dynamic-state! . 14))
(121 (get-cont-from-heap . 14))
(122 (real-part . 14))
(123 (real? . 14))
(124 (make-template . 14))
(125 (imag-part . 14))
(126 (make-location . 14))
(127 (= . 14))
(128 (< . 14))
(129 (char? . 14))
(130 (quotient . 14))
(131 (/ . 14))
(132 (weak-pointer? . 14))
(133 (- . 14))
(134 (continuation-set! . 14))
(135 (peek-char . 14))
(136 (+ . 14))
(137 (* . 14))
(138 (contents . 14))
(139 (sqrt . 14))
(140 (read-char . 14))
(141 (set-contents! . 14))
(142 (push . 14))
(143 (make-weak-pointer . 14))
(144 (get-dynamic-state . 14))
(145 (trap . 14))
(146 (cons . 14))
(147 (template-set! . 14))
(148 (time . 14))
(149 (location-defined? . 14))
(150 (asin . 14))
(151 (write-string . 14))
(152 (vm-extension . 14))
(153 (force-output . 14))
(154 (acos . 14))
(155 (set-location-defined?! . 14))
(156 (atan . 14))
(157 (loophole . 14))
(158 (define-syntax . 14))
(159 (begin . 14))
(160 (letrec-syntax . 14))
(161 (%file-name% . 14))
(162 (structure-ref . 14))
(163 (quote . 14))
(164 (lambda . 14))
(165 (define . 14))
(166 (if . 14))
(167 (let-syntax . 14))
(168 (letrec . 14))
(169 (primitive-procedure . 14))
(170 (set! . 14))
(171 (with-aliases . 14))
(172 (call . 14))
(173 (and . 14))
(174 (cond . 14))
(175 (do . 14))
(176 (let . 14))
(177 (let* . 14))
(178 (or . 14))
(179 (char->integer . 14))
(180 (integer->char . 14))
(181 (ascii-limit . 14))
(182 (ascii-whitespaces . 14))
(183 (procedure? . 14))
(184 (invoke-closure . 14))
(185 (primitive-cwcc . 14))
(186 (make-undefined-location . 14))
(187 (vector-unassigned? . 14))
(188 (string-copy . 14))
(189 (string->symbol . 14))
(190 (*the-symbol-table* . 14))
(191 (flush-the-symbol-table! . 14))
(192 (restore-the-symbol-table! . 14))
(193 (maybe-open-input-file . 14))
(194 (maybe-open-output-file . 14))
(195 (open-input-file . 14))
(196 (open-output-file . 14))
(197 (close-input-port . 14))
(198 (close-output-port . 14))
(199 (make-condition . 14))
(200 (signal . 14))
(201 (warn . 14))
(202 (syntax-error . 14))
(203 (call-error . 14))
(204 (case . 15))
(205 (quasiquote . 15))
(206 (syntax-rules . 15))
(207 (not . 15))
(208 (boolean? . 15))
(209 (eqv? . 15))
(210 (equal? . 15))
(211 (> . 15))
(212 (<= . 15))
(213 (>= . 15))
(214 (max . 15))
(215 (min . 15))
(216 (abs . 15))
(217 (zero? . 15))
(218 (positive? . 15))
(219 (negative? . 15))
(220 (even? . 15))
(221 (odd? . 15))
(222 (caar . 15))
(223 (cadr . 15))
(224 (cdar . 15))
(225 (cddr . 15))
(226 (caaar . 15))
(227 (caadr . 15))
(228 (cadar . 15))
(229 (caddr . 15))
(230 (cdaar . 15))
(231 (cdadr . 15))
(232 (cddar . 15))
(233 (cdddr . 15))
(234 (caaaar . 15))
(235 (caaadr . 15))
(236 (caadar . 15))
(237 (caaddr . 15))
(238 (cadaar . 15))
(239 (cadadr . 15))
(240 (caddar . 15))
(241 (cadddr . 15))
(242 (cdaaar . 15))
(243 (cdaadr . 15))
(244 (cdadar . 15))
(245 (cdaddr . 15))
(246 (cddaar . 15))
(247 (cddadr . 15))
(248 (cdddar . 15))
(249 (cddddr . 15))
(250 (null? . 15))
(251 (list . 15))
(252 (length . 15))
(253 (append . 15))
(254 (reverse . 15))
(255 (append-reverse . 15))
(256 (list-tail . 15))
(257 (list-ref . 15))
(258 (mem . 15))
(259 (memq . 15))
(260 (memv . 15))
(261 (member . 15))
(262 (ass . 15))
(263 (assv . 15))
(264 (assoc . 15))
(265 (assq . 15))
(266 (list? . 15))
(267 (char>? . 15))
(268 (char>=? . 15))
(269 (char<=? . 15))
(270 (char-whitespace? . 15))
(271 (char-lower-case? . 15))
(272 (char-upper-case? . 15))
(273 (char-numeric? . 15))
(274 (char-alphabetic? . 15))
(275 (char-case-delta . 15))
(276 (char-upcase . 15))
(277 (char-downcase . 15))
(278 (char-ci-compare . 15))
(279 (char-ci=? . 15))
(280 (char-ci<? . 15))
(281 (char-ci<=? . 15))
(282 (char-ci>? . 15))
(283 (char-ci>=? . 15))
(284 (string . 15))
(285 (substring . 15))
(286 (string-append . 15))
(287 (string->list . 15))
(288 (list->string . 15))
(289 (string-fill! . 15))
(290 (make-string=? . 15))
(291 (string-ci=? . 15))
(292 (make-string<? . 15))
(293 (string<? . 15))
(294 (string-ci<? . 15))
(295 (string>? . 15))
(296 (string<=? . 15))
(297 (string>=? . 15))
(298 (string-ci>? . 15))
(299 (string-ci<=? . 15))
(300 (string-ci>=? . 15))
(301 (vector . 15))
(302 (vector->list . 15))
(303 (list->vector . 15))
(304 (vector-fill! . 15))
(305 (map . 15))
(306 (map1 . 15))
(307 (map2+ . 15))
(308 (for-each . 15))
(309 (delay . 15))
(310 (make-promise . 15))
(311 (force . 15))
(312 (unspecific . 15))
(313 (reduce . 15))
(314 (filter . 15))
(315 (pos . 15))
(316 (posq . 15))
(317 (posv . 15))
(318 (position . 15))
(319 (any . 15))
(320 (every . 15))
(321 (sublist . 15))
(322 (last . 15))
(323 (insert . 15))
(324 (inexact? . 15))
(325 (modulo . 15))
(326 (ceiling . 15))
(327 (truncate . 15))
(328 (round . 15))
(329 (gcd . 15))
(330 (euclid . 15))
(331 (lcm . 15))
(332 (expt . 15))
(333 (raise-to-integer-power . 15))
(334 (rationalize . 15))
(335 (simplest-rational . 15))
(336 (record-type . 16))
(337 (*record-type-uid* . 16))
(338 (*record-type* . 16))
(339 (make-record-type . 16))
(340 (record-type? . 16))
(341 (record-type-uid . 16))
(342 (record-type-name . 16))
(343 (record-type-field-names . 16))
(344 (record-type-discloser . 16))
(345 (record-field-index . 16))
(346 (record-constructor . 16))
(347 (record-accessor . 16))
(348 (record-modifier . 16))
(349 (record-predicate . 16))
(350 (define-record-discloser . 16))
(351 (disclose-record . 16))
(352 (default-record-discloser . 16))
(353 (:record-type . 16))
(354 (define-record-type . 17))
(355 (define-constructor . 17))
(356 (define-accessors . 17))
(357 (define-accessor . 17))
(358 (:simple-type . 18))
(359 (really-make-simple-type . 18))
(360 (simple-type-id . 18))
(361 (simple-type-priority . 18))
(362 (simple-type-predicate . 18))
(363 (simple-type-superiors . 18))
(364 (simple-type? . 18))
(365 (make-simple-type . 18))
(366 (compute-priority . 18))
(367 (*increment* . 18))
(368 (%type-priority . 18))
(369 (%type-predicate . 18))
(370 (%same-type? . 18))
(371 (define-simple-type . 18))
(372 (:syntax . 18))
(373 (:values . 18))
(374 (value? . 18))
(375 (:value . 18))
(376 (:zero . 18))
(377 (:number . 18))
(378 (:complex . 18))
(379 (:real . 18))
(380 (:rational . 18))
(381 (:integer . 18))
(382 (:exact-integer . 18))
(383 (:boolean . 18))
(384 (:symbol . 18))
(385 (:char . 18))
(386 (:null . 18))
(387 (:pair . 18))
(388 (:vector . 18))
(389 (:string . 18))
(390 (:procedure . 18))
(391 (:input-port . 18))
(392 (:output-port . 18))
(393 (:eof-object . 18))
(394 (:record . 18))
(395 (record-type-priority . 18))
(396 (:method-info . 18))
(397 (really-make-method-info . 18))
(398 (method-info-proc . 18))
(399 (method-info-n-ary? . 18))
(400 (method-info-types . 18))
(401 (method-info? . 18))
(402 (make-method-info . 18))
(403 (empty-method-list . 18))
(404 (insert-method . 18))
(405 (same-applicability? . 18))
(406 (every2 . 18))
(407 (more-specific? . 18))
(408 (more-specific-type? . 18))
(409 (:method-table . 18))
(410 (really-make-method-table . 18))
(411 (method-table-id . 18))
(412 (method-table-set-perform! . 18))
(413 (method-table-get-perform . 18))
(414 (make-generic . 18))
(415 (method-table-prototype . 18))
(416 (method-table-methods . 18))
(417 (set-method-table-methods! . 18))
(418 (method-table? . 18))
(419 (make-method-table . 18))
(420 (make-cell-for-generic . 18))
(421 (add-to-method-table! . 18))
(422 (set-final-method! . 18))
(423 (apply-generic . 18))
(424 (define-generic . 18))
(425 (methods->perform . 18))
(426 (last-action . 18))
(427 (one-action . 18))
(428 (argument-sequence-predicate . 18))
(429 (check-for-next . 18))
(430 (check-next . 18))
(431 (method-info . 18))
(432 (method-internal . 18))
(433 (with-next-method . 18))
(434 (define-method . 18))
(435 (&add-method! . 18))
(436 (add-method! . 18))
(437 (&type-predicate . 18))
(438 (type-predicate . 18))
(439 (&type-priority . 18))
(440 (type-priority . 18))
(441 (&type-superiors . 18))
(442 (type-superiors . 18))
(443 (&same-type? . 18))
(444 (same-type? . 18))
(445 (:singleton . 18))
(446 (singleton . 18))
(447 (singleton-value . 18))
(448 (compare-to . 18))
(449 (&disclose . 18))
(450 (disclose . 18))
(451 (proc->discloser . 18))
(452 (&number->string . 19))
(453 (number->string . 19))
(454 (integer->string . 19))
(455 (string->number . 19))
(456 (&really-string->number . 19))
(457 (really-string->number . 19))
(458 (:integer-string . 19))
(459 (set-exactness . 19))
(460 (string->integer . 19))
(461 (:thread . 20))
(462 (make-thread . 20))
(463 (thread-dynamic-env . 20))
(464 (current-thread . 20))
(465 (set-current-thread! . 20))
(466 (get-dynamic-env . 20))
(467 (set-dynamic-env! . 20))
(468 (initialize-dynamic-state! . 20))
(469 (with-dynamic-env . 20))
(470 (empty-dynamic-env . 20))
(471 (:fluid . 20))
(472 (make-fluid . 20))
(473 (fluid-top-level-value . 20))
(474 (set-fluid-top-level-value! . 20))
(475 (fluid . 20))
(476 (set-fluid! . 20))
(477 (let-fluid . 20))
(478 (let-fluids . 20))
(479 (fluid-lookup . 20))
(480 (dynamic-wind . 21))
(481 (call-with-current-continuation . 21))
(482 (continuation->procedure . 21))
(483 (:point . 21))
(484 (make-point . 21))
(485 (point-parent . 21))
(486 (point-dynamic-env . 21))
(487 (point-out . 21))
(488 (point-in . 21))
(489 (point-depth . 21))
(490 (root-point . 21))
(491 ($dynamic-point . 21))
(492 (get-dynamic-point . 21))
(493 (env-dynamic-point . 21))
(494 (let-dynamic-point . 21))
(495 (travel-to-point! . 21))
(496 ($current-input-port . 22))
(497 ($current-output-port . 22))
(498 ($error-output-port . 22))
(499 (current-input-port . 22))
(500 (current-output-port . 22))
(501 (error-output-port . 22))
(502 (with-initial-ports . 22))
(503 (call-with-mumble-file . 22))
(504 (call-with-input-file . 22))
(505 (call-with-output-file . 22))
(506 (with-input-from-file . 22))
(507 (with-output-to-file . 22))
(508 (newline . 22))
(509 (output-port-option . 22))
(510 (input-port-option . 22))
(511 (write . 31))
(512 (recurring-write . 31))
(513 (write-boolean . 31))
(514 (write-number . 31))
(515 (write-char-literal . 31))
(516 (character-name . 31))
(517 (write-string-literal . 31))
(518 (write-list . 31))
(519 (quotation? . 31))
(520 (write-vector . 31))
(521 (write-other . 31))
(522 (display-type-name . 31))
(523 (display . 31))
(524 (*condition-types* . 25))
(525 (condition-supertypes . 25))
(526 (define-condition-type . 25))
(527 (condition-predicate . 25))
(528 (condition? . 25))
(529 (condition-type . 25))
(530 (condition-stuff . 25))
(531 (error? . 25))
(532 (call-error? . 25))
(533 (read-error? . 25))
(534 (exception? . 25))
(535 (exception-opcode . 25))
(536 (exception-arguments . 25))
(537 (make-exception . 25))
(538 (warning? . 25))
(539 (syntax-error? . 25))
(540 (interrupt? . 25))
(541 (read . 32))
(542 (sub-read-carefully . 32))
(543 (reader-token-marker . 32))
(544 (make-reader-token . 32))
(545 (reader-token? . 32))
(546 (close-paren . 32))
(547 (dot . 32))
(548 (sub-read . 32))
(549 (read-dispatch-vector . 32))
(550 (read-terminating?-vector . 32))
(551 (set-standard-syntax! . 32))
(552 (set-standard-read-macro! . 32))
(553 (sub-read-list . 32))
(554 (gobble-line . 32))
(555 (*sharp-macros* . 32))
(556 (define-sharp-macro . 32))
(557 (sub-read-token . 32))
(558 (parse-token . 32))
(559 (strange-symbol-names . 32))
(560 (preferred-case . 32))
(561 (reading-error . 32))
(562 (:table . 37))
(563 (really-make-table . 37))
(564 (table-set!-procedure . 37))
(565 (set-table-set!-procedure! . 37))
(566 (table-ref-procedure . 37))
(567 (set-table-ref-procedure! . 37))
(568 (table-data . 37))
(569 (set-table-data! . 37))
(570 (table-size . 37))
(571 (set-table-size! . 37))
(572 (table? . 37))
(573 (table-ref . 37))
(574 (table-set! . 37))
(575 (linear-table-size-limit . 37))
(576 (table-size-limit . 37))
(577 (next-table-size . 37))
(578 (make-table-maker . 37))
(579 (null-entry . 37))
(580 (new-entry . 37))
(581 (make-assoc . 37))
(582 (eq?-assoc . 37))
(583 (make-linear-table-ref . 37))
(584 (make-linear-table-set! . 37))
(585 (make->hash-table . 37))
(586 (make-hash-table-ref . 37))
(587 (make-hash-table-set! . 37))
(588 (expand-hash-table! . 37))
(589 (table-enter-alist! . 37))
(590 (table-expand-table! . 37))
(591 (table-walk . 37))
(592 (really-table-walk . 37))
(593 (alist-walk . 37))
(594 (make-table-immutable! . 37))
(595 (table->entry-list . 37))
(596 (default-table-hash-function . 37))
(597 (symbol-hash . 37))
(598 (make-table . 37))
(599 (make-string-table . 37))
(600 (make-symbol-table . 37))
(601 (make-integer-table . 37))
(602 (:meta-type . 39))
(603 (really-make-type . 39))
(604 (type-info . 39))
(605 (type-more . 39))
(606 (type-mask . 39))
(607 (meta-type? . 39))
(608 (make-type . 39))
(609 (name->type-table . 39))
(610 (mask->name-table . 39))
(611 (name->type . 39))
(612 (set-type-name! . 39))
(613 (*mask* . 39))
(614 (new-type-bit . 39))
(615 (mask->type . 39))
(616 (bottom-type . 39))
(617 (error-type . 39))
(618 (bottom-type? . 39))
(619 (new-atomic-type . 39))
(620 (named-atomic-type . 39))
(621 (syntax-type . 39))
(622 (other-static-type . 39))
(623 (empty-rail-type . 39))
(624 (rail-type . 39))
(625 (make-optional-type . 39))
(626 (make-rest-type . 39))
(627 (head-type . 39))
(628 (head-type-really . 39))
(629 (tail-type . 39))
(630 (empty-rail-type? . 39))
(631 (rest-type? . 39))
(632 (optional-type? . 39))
(633 (mask/no-values . 39))
(634 (mask/two-or-more . 39))
(635 (mask/&rest . 39))
(636 (value-type . 39))
(637 (mask/value . 39))
(638 (value-type? . 39))
(639 (any-values-type . 39))
(640 (any-arguments-type . 39))
(641 (mask/one-or-more . 39))
(642 (same-type? . 39))
(643 (subtype? . 39))
(644 (meet-type . 39))
(645 (other-type-info . 39))
(646 (p . 39))
(647 (meet-rail . 39))
(648 (meet-procedure . 39))
(649 (meet? . 39))
(650 (meet-procedure? . 39))
(651 (join-type . 39))
(652 (join-rail . 39))
(653 (join-procedure . 39))
(654 (number-hierarchy . 39))
(655 (integer-type . 39))
(656 (rational-type . 39))
(657 (real-type . 39))
(658 (complex-type . 39))
(659 (number-type . 39))
(660 (exact-type . 39))
(661 (inexact-type . 39))
(662 (exact-integer-type . 39))
(663 (boolean-type . 39))
(664 (pair-type . 39))
(665 (null-type . 39))
(666 (record-type . 39))
(667 (any-procedure-type . 39))
(668 (other-value-type . 39))
(669 (mask/other . 39))
(670 (make-other-type . 39))
(671 (char-type . 39))
(672 (unspecific-type . 39))
(673 (string-type . 39))
(674 (symbol-type . 39))
(675 (vector-type . 39))
(676 (escape-type . 39))
(677 (structure-type . 39))
(678 (mask/procedure . 39))
(679 (procedure-type . 39))
(680 (make-procedure-type . 39))
(681 (procedure-type-domain . 39))
(682 (procedure-type-codomain . 39))
(683 (restrictive? . 39))
(684 (sexp->type . 39))
(685 (sexp->values-type . 39))
(686 (type->sexp . 39))
(687 (atomic-type->sexp . 39))
(688 (rail-type->sexp . 39))
(689 (disjoin-type . 39))
(690 (disjoin-rest . 39))
(691 (mask/number . 39))
(692 (make-some-values-type . 39))
(693 (proc . 39))
(694 (some-values . 39))
(695 (procedure-type? . 39))
(696 (fixed-arity-procedure-type? . 39))
(697 (procedure-type-arity . 39))
(698 (procedure-type-argument-types . 39))
(699 (usual-operator-type . 41))
(700 (:operator . 41))
(701 (make-operator . 41))
(702 (operator-name . 41))
(703 (operator-uid . 41))
(704 (operator-nargs . 41))
(705 (operator-type . 41))
(706 (set-operator-type! . 41))
(707 (operator? . 41))
(708 (get-operator . 41))
(709 (*operator-uid* . 41))
(710 (operators-table . 41))
(711 (number-of-operators . 41))
(712 (the-operators . 41))
(713 (make-operator-table . 41))
(714 (operator-table-ref . 41))
(715 (operator-lookup . 41))
(716 (operator-define! . 41))
(717 (:node . 41))
(718 (really-make-node . 41))
(719 (node-plist . 41))
(720 (set-node-plist! . 41))
(721 (node-form . 41))
(722 (node-operator-id . 41))
(723 (node? . 41))
(724 (make-node . 41))
(725 (node-ref . 41))
(726 (node-set! . 41))
(727 (node-operator . 41))
(728 (node-predicate . 41))
(729 (make-similar-node . 41))
(730 (:generated . 41))
(731 (make-generated . 41))
(732 (generated-parent-name . 41))
(733 (generated-env . 41))
(734 (generated-token . 41))
(735 (generated-symbol . 41))
(736 (generated? . 41))
(737 (generate-name . 41))
(738 (generated-uid . 41))
(739 (*generated-uid* . 41))
(740 (name->symbol . 41))
(741 (name-hash . 41))
(742 (desyntaxify . 41))
(743 (:transform . 41))
(744 (really-make-transform . 41))
(745 (transform-id . 41))
(746 (transform-source . 41))
(747 (transform-aux-names . 41))
(748 (transform-type . 41))
(749 (transform-env . 41))
(750 (transform-procedure . 41))
(751 (transform? . 41))
(752 (make-transform . 41))
(753 (maybe-transform . 41))
(754 (bind-aliases . 41))
(755 (make-name-generator . 41))
(756 (same-denotation? . 41))
(757 (binding? . 41))
(758 (binding-type . 41))
(759 (binding-place . 41))
(760 (binding-static . 41))
(761 (set-binding-place! . 41))
(762 (make-binding . 41))
(763 (clobber-binding! . 41))
(764 (impose-type . 41))
(765 (forget-integration . 41))
(766 (classify . 41))
(767 (call-node? . 41))
(768 (name-node? . 41))
(769 (classify-literal . 41))
(770 (classify-call . 41))
(771 (classify-name . 41))
(772 (operator/name . 41))
(773 (classify-macro-application . 41))
(774 (classify-transform-application . 41))
(775 (maybe-transform-call . 41))
(776 (classify-operator-form . 41))
(777 (classifiers . 41))
(778 (define-classifier . 41))
(779 (unspecific-node . 41))
(780 (define-node? . 41))
(781 (define-syntax-node? . 41))
(782 (funny-name/source-file-name . 41))
(783 (bind-source-file-name . 41))
(784 (lookup . 41))
(785 (bind1 . 41))
(786 (bind . 41))
(787 (bindrec . 41))
(788 (literal? . 41))
(789 (number-of-required-args . 41))
(790 (n-ary? . 41))
(791 (normalize-formals . 41))
(792 (syntax? . 41))
(793 (name? . 41))
(794 (unbound? . 41))
(795 (define-usual-suspects . 41))
(796 (process-syntax . 41))
(797 (get-funny . 41))
(798 (funny-name/reflective-tower . 41))
(799 (reflective-tower . 41))
(800 (scan-body . 41))
(801 (scan-body-forms . 41))
(802 (body-lossage . 41))
(803 (begin-node? . 41))
(804 (variable-type . 41))
(805 (variable-type? . 41))
(806 (variable-value-type . 41))
(807 (compatible-types? . 41))
(808 (usual-variable-type . 41))
(809 (undeclared-type . 41))
(810 (funny-name/reader . 41))
(811 (environment-reader . 41))
(812 (schemify . 41))
(813 (schemify1 . 41))
(814 (schemifiers . 41))
(815 (define-schemifier . 41))
(816 (name->qualified . 41))
(817 (schemify-sexp . 41))
(818 (make-qualified . 41))
(819 (qualified? . 41))
(820 (qualified-parent-name . 41))
(821 (qualified-symbol . 41))
(822 (make-population . 35))
(823 (add-to-population! . 35))
(824 (weak-memq . 35))
(825 (population-reduce . 35))
(826 (population->list . 35))
(827 (walk-population . 35))
(828 (:interface . 40))
(829 (really-make-interface . 40))
(830 (interface-name . 40))
(831 (set-interface-name! . 40))
(832 (interface-clients . 40))
(833 (walk-method . 40))
(834 (ref-method . 40))
(835 (interface? . 40))
(836 (interface-ref . 40))
(837 (for-each-declaration . 40))
(838 (note-reference-to-interface! . 40))
(839 (make-interface . 40))
(840 (make-simple-interface . 40))
(841 (really-make-simple-interface . 40))
(842 (make-compound-interface . 40))
(843 (note-interface-name! . 40))
(844 (:structure . 44))
(845 (really-make-structure . 44))
(846 (structure-name . 44))
(847 (set-structure-name! . 44))
(848 (structure-clients . 44))
(849 (structure-package . 44))
(850 (structure-interface-really . 44))
(851 (set-structure-interface! . 44))
(852 (structure-interface-thunk . 44))
(853 (structure? . 44))
(854 (structure-interface . 44))
(855 (initialize-structure! . 44))
(856 (make-structure . 44))
(857 (structure-unstable? . 44))
(858 (for-each-export . 44))
(859 (note-structure-name! . 44))
(860 (:package . 44))
(861 (really-make-package . 44))
(862 (package-cached . 44))
(863 (package-clients . 44))
(864 (package-plist . 44))
(865 (set-package-plist! . 44))
(866 (package-accesses-thunk . 44))
(867 (package-opens-thunk . 44))
(868 (set-package-opens-thunk! . 44))
(869 (package->environment . 44))
(870 (set-package->environment! . 44))
(871 (package-loaded? . 44))
(872 (set-package-loaded?! . 44))
(873 (package-clauses . 44))
(874 (package-file-name . 44))
(875 (package-get-location . 44))
(876 (set-package-get-location! . 44))
(877 (package-integrate? . 44))
(878 (set-package-integrate?! . 44))
(879 (package-unstable? . 44))
(880 (package-definitions . 44))
(881 (package-opens-really . 44))
(882 (set-package-opens! . 44))
(883 (package-uid . 44))
(884 (package? . 44))
(885 (make-package . 44))
(886 (really-package->environment . 44))
(887 (new-package-uid . 44))
(888 (*package-uid* . 44))
(889 (package-name-table . 44))
(890 (package-name . 44))
(891 (note-package-name! . 44))
(892 (package-opens . 44))
(893 (initialize-package-if-necessary! . 44))
(894 (package-accesses . 44))
(895 (make-simple-package . 44))
(896 (package-definition . 44))
(897 (package-define! . 44))
(898 (really-package-define! . 44))
(899 (package-lookup . 44))
(900 (really-package-lookup . 44))
(901 (structure-lookup . 44))
(902 (generic-lookup . 44))
(903 (initialize-package! . 44))
(904 (define-funny-names! . 44))
(905 (package-define-funny! . 44))
(906 (funny-name/the-package . 44))
(907 (extract-package-from-environment . 44))
(908 (for-each-definition . 44))
(909 (get-new-location . 44))
(910 (make-new-location . 44))
(911 ($get-location . 44))
(912 (*location-uid* . 44))
(913 (location-info-table . 44))
(914 (flush-location-names . 44))
(915 (package-get . 44))
(916 (package-put! . 44))
(917 (package-note-caching . 44))
(918 (maybe-fix-place . 44))
(919 (follow-forwarding-pointers . 44))
(920 (environment-ref . 52))
(921 (environment-set! . 52))
(922 (environment-define! . 52))
(923 (*structure-ref . 52))
(924 (carefully . 52))
(925 ($interaction-environment . 52))
(926 (interaction-environment . 52))
(927 (set-interaction-environment! . 52))
(928 (with-interaction-environment . 52))
(929 (scheme-report-environment . 52))
(930 (*scheme-report-environment* . 52))
(931 (*scheme-report-number* . 52))
(932 (set-scheme-report-environment! . 52))
(933 (make-reflective-tower . 52))
(934 (set-reflective-tower-maker! . 52))
(935 (the-usual-transforms . 42))
(936 (define-usual-macro . 42))
(937 (usual-transform . 42))
(938 (long-enough? . 42))
(939 (process-rules . 42))
(940 (segment-pattern? . 42))
(941 (segment-template? . 42))
(942 (indicators-for-zero-or-more . 42))
(943 (find-free-names-in-syntax-rules . 42))
(944 (namestring . 38))
(945 (directory-component-separator . 38))
(946 (type-component-separator . 38))
(947 (namestring-component . 38))
(948 (file-name-preferred-case . 38))
(949 (*scheme-file-type* . 38))
(950 (*load-file-type* . 38))
(951 (file-name-directory . 38))
(952 (file-name-nondirectory . 38))
(953 (file-nondirectory-position . 38))
(954 (string-posq . 38))
(955 (*translations* . 38))
(956 (translations . 38))
(957 (set-translation! . 38))
(958 (translate . 38))
(959 ($note-file-package . 45))
(960 (scan-forms . 45))
(961 (scan-file . 45))
(962 (scan-form-list . 45))
(963 (scan-form . 45))
(964 (process-define-syntax . 45))
(965 (scan-structures . 45))
(966 (scan-package . 45))
(967 (optimize . 45))
(968 (check-structure . 45))
(969 (initialize-usual-transforms! . 45))
(970 (define-all-operators . 45))
(971 (make-define-primitive-node . 45))
(972 (optimizers-table . 45))
(973 (get-optimizer . 45))
(974 (set-optimizer! . 45))
(975 ($note-undefined . 45))
(976 (note-undefined! . 45))
(977 (noting-undefined-variables . 45))
(978 (define-enumeration . 23))
(979 (components . 23))
(980 (enum . 23))
(981 (enumerand->name . 23))
(982 (name->enumerand . 23))
(983 (lookup-enumerand . 23))
(984 (bits-used-per-byte . 24))
(985 (maximum-stack-args . 24))
(986 (define-instruction-set . 24))
(987 (op . 24))
(988 (op-enumeration . 24))
(989 (op-count . 24))
(990 (opcode-arg-specs . 24))
(991 (interrupt . 24))
(992 (interrupt-enumeration . 24))
(993 (interrupt-count . 24))
(994 (time-option . 24))
(995 (time-option-enumeration . 24))
(996 (time-option-count . 24))
(997 (memory-status-option . 24))
(998 (memory-status-option-enumeration . 24))
(999 (memory-status-option-count . 24))
(1000 (stob . 24))
(1001 (stob-enumeration . 24))
(1002 (stob-count . 24))
(1003 (least-b-vector-type . 24))
(1004 (stob-data . 24))
(1005 (node-type . 43))
(1006 (reconstruct-type . 43))
(1007 (reconstruct . 43))
(1008 (reconstructors . 43))
(1009 (define-reconstructor . 43))
(1010 (careful-codomain . 43))
(1011 (reconstruct-body . 43))
(1012 (operator/name . 43))
(1013 (reconstruct-name . 43))
(1014 (reconstruct-call . 43))
(1015 (fork-constraints . 43))
(1016 (examine . 43))
(1017 (node->type . 43))
(1018 (call-node? . 43))
(1019 (name-node? . 43))
(1020 (begin-node? . 43))
(1021 (reconstruct-apply . 43))
(1022 (declare-operator-type . 43))
(1023 (constant-type . 43))
(1024 (template-overhead . 26))
(1025 (template-code . 26))
(1026 (template-info . 26))
(1027 (set-template-code! . 26))
(1028 (set-template-info! . 26))
(1029 (make-segment . 46))
(1030 (segment-size . 46))
(1031 (segment-emitter . 46))
(1032 (segment->template . 46))
(1033 (segment-data->template . 46))
(1034 (:assembly-state . 46))
(1035 (make-assembly-state . 46))
(1036 (astate-literals . 46))
(1037 (set-astate-literals! . 46))
(1038 (astate-count . 46))
(1039 (set-astate-count! . 46))
(1040 (astate-pc . 46))
(1041 (set-astate-pc! . 46))
(1042 (astate-code-vector . 46))
(1043 (make-astate . 46))
(1044 (emit-byte! . 46))
(1045 (emit-literal! . 46))
(1046 (emit-segment! . 46))
(1047 (empty-segment . 46))
(1048 (instruction . 46))
(1049 (sequentially . 46))
(1050 (sequentially-2 . 46))
(1051 (instruction-with-literal . 46))
(1052 (instruction-with-location . 46))
(1053 (instruction-with-template . 46))
(1054 (make-label . 46))
(1055 (instruction-using-label . 46))
(1056 (attach-label . 46))
(1057 (byte-limit . 46))
(1058 ($debug-data . 46))
(1059 (note-source-code . 46))
(1060 (note-environment . 46))
(1061 (emit-with-environment-maps! . 46))
(1062 ($environment-maps . 46))
(1063 (environment-maps-table . 46))
(1064 (new-template-uid . 46))
(1065 (*template-uid* . 46))
(1066 (template-uid . 46))
(1067 (set-template-uid! . 46))
(1068 (debug-flag-names . 46))
(1069 (type/debug-flags . 46))
(1070 (make-debug-flags . 46))
(1071 ($debug-flags . 46))
(1072 (debug-flag-accessor . 46))
(1073 (debug-flag-modifier . 46))
(1074 (keep-source-code? . 46))
(1075 (keep-environment-maps? . 46))
(1076 (keep-procedure-names? . 46))
(1077 (keep-file-names? . 46))
(1078 (tabulate-debug-data? . 46))
(1079 (debug-data-table . 46))
(1080 (with-fresh-compiler-state . 46))
(1081 (saving-and-restoring . 46))
(1082 (:debug-data . 46))
(1083 (make-debug-data . 46))
(1084 (debug-data-source . 46))
(1085 (set-debug-data-source! . 46))
(1086 (debug-data-env-maps . 46))
(1087 (set-debug-data-env-maps! . 46))
(1088 (debug-data-pc-in-parent . 46))
(1089 (debug-data-parent . 46))
(1090 (debug-data-name . 46))
(1091 (debug-data-uid . 46))
(1092 (debug-data? . 46))
(1093 (new-debug-data . 46))
(1094 (debug-data->info . 46))
(1095 (get-debug-data . 46))
(1096 (note-debug-data! . 46))
(1097 (interesting-debug-data? . 46))
(1098 (debug-data-names . 46))
(1099 (template-debug-data . 46))
(1100 (template-id . 46))
(1101 (template-name . 46))
(1102 (template-names . 46))
(1103 (compile-top . 47))
(1104 (compile . 47))
(1105 (compilators . 47))
(1106 (define-compilator . 47))
(1107 (compile-constant . 47))
(1108 (compile-begin . 47))
(1109 (compile-call . 47))
(1110 (lambda-node? . 47))
(1111 (compile-redex . 47))
(1112 (compile-unknown-call . 47))
(1113 (maybe-push-continuation . 47))
(1114 (push-arguments . 47))
(1115 (push-all-with-names . 47))
(1116 (compile-lambda . 47))
(1117 (compile-lambda-code . 47))
(1118 (compile-letrec . 47))
(1119 (compile-body . 47))
(1120 (operator/letrec . 47))
(1121 (make-cont . 47))
(1122 (cont-segment . 47))
(1123 (cont-source-info . 47))
(1124 (return-cont-segment . 47))
(1125 (return-cont . 47))
(1126 (return-cont? . 47))
(1127 (fall-through-cont . 47))
(1128 (fall-through-cont? . 47))
(1129 (ignore-values-segment . 47))
(1130 (ignore-values-cont . 47))
(1131 (ignore-values-cont? . 47))
(1132 (deliver-value . 47))
(1133 (named-cont . 47))
(1134 (cont-name . 47))
(1135 (bind-vars . 47))
(1136 (initial-cenv . 47))
(1137 (environment-level . 47))
(1138 (funny-name/lexical-level . 47))
(1139 (name-node-binding . 47))
(1140 (generate-trap . 47))
(1141 (careful-sequentially . 47))
(1142 (large-segment-size . 47))
(1143 (shrink-segment . 47))
(1144 (type-check . 47))
(1145 (set-type-check?! . 47))
(1146 (*type-check?* . 47))
(1147 (diagnose-call-error . 47))
(1148 (define-compiler-primitive . 47))
(1149 (closed-compilators . 47))
(1150 (define-closed-compilator . 47))
(1151 (get-closed-compilator . 47))
(1152 (direct-compilator . 47))
(1153 (direct-closed-compilator . 47))
(1154 (nargs->domain . 47))
(1155 (define-simple-primitive . 47))
(1156 (simple-compilator . 47))
(1157 (simple-closed-compilator . 47))
(1158 (symbol-append . 47))
(1159 (define-stob-predicate . 47))
(1160 (define-data-struct-primitives . 47))
(1161 (define-vector-primitives . 47))
(1162 (define-n-ary-compiler-primitive . 47))
(1163 (n-ary-primitive-compilator . 47))
(1164 (push-all-but-last . 47))
(1165 (compile-form . 47))
(1166 (compile-file . 47))
(1167 (compile-and-run-forms . 47))
(1168 (compile-and-run-file . 47))
(1169 (compile-and-run-scanned-forms . 47))
(1170 (compile-scanned-forms . 47))
(1171 (compile-scanned-form . 47))
(1172 (compile-definition . 47))
(1173 (get-location . 47))
(1174 (get-location-for-undefined . 47))
(1175 (get-location-for-unassignable . 47))
(1176 (package-accessor-on-demand . 47))
(1177 (location-on-demand . 47))
(1178 (package-undefineds . 47))
(1179 (location-for-reference . 47))
(1180 (package-undefined-but-assigneds . 47))
(1181 (location-for-assignment . 47))
(1182 (note-caching . 47))
(1183 (grumble . 47))
(1184 (make-startup-procedure . 47))
(1185 (an-ignore-values-cont . 47))
(1186 (eval . 53))
(1187 (load-into . 53))
(1188 (eval-from-file . 53))
(1189 (eval-scanned-forms . 53))
(1190 (invoke-template . 53))
(1191 (load . 53))
(1192 (:closure . 28))
(1193 (:code-vector . 28))
(1194 (:location . 28))
(1195 (:template . 28))
(1196 (continuation-cont . 27))
(1197 (continuation-pc . 27))
(1198 (continuation-template . 27))
(1199 (continuation-env . 27))
(1200 (continuation-overhead . 27))
(1201 (continuation-arg . 27))
(1202 (continuation-arg-count . 27))
(1203 (continuation-parent . 27))
(1204 (:continuation . 27))
(1205 (usual-exception-handler . 29))
(1206 (define-exception-handler . 29))
(1207 (signal-exception . 29))
(1208 (exception-handlers . 29))
(1209 (make-opcode-generic! . 29))
(1210 (really-signal-condition . 29))
(1211 (with-handler . 29))
(1212 ($condition-handlers . 29))
(1213 (initialize-exceptions! . 29))
(1214 (last-resort-condition-handler . 29))
(1215 (report-utter-lossage . 29))
(1216 (continuation-preview . 29))
(1217 (ignore-errors . 29))
(1218 (*wna-handlers* . 29))
(1219 (define-wna-handler . 29))
(1220 (op/check-nargs= . 29))
(1221 (wna-lose . 29))
(1222 (comparison-wna . 29))
(1223 (display-condition . 36))
(1224 (really-display-condition . 36))
(1225 (*depth* . 36))
(1226 (*length* . 36))
(1227 (&disclose-condition . 36))
(1228 (disclose-condition . 36))
(1229 (limited-write . 36))
(1230 (command-processor . 57))
(1231 (mini-load . 57))
(1232 (read-string . 57))
(1233 (interrupt-handlers . 30))
(1234 (initialize-interrupts! . 30))
(1235 (time-option/ticks-per-second . 30))
(1236 (one-second . 30))
(1237 (no-interrupts . 30))
(1238 (all-interrupts . 30))
(1239 (with-interrupts-inhibited . 30))
(1240 (with-interrupts-allowed . 30))
(1241 (with-interrupts . 30))
(1242 (enabled-interrupts . 30))
(1243 (interrupt-before-heap-overflow! . 30))
(1244 (interrupt/memory-shortage . 30))
(1245 (memory-status-option/set-minimum-recovered-space! . 30))
(1246 (memory-status-option/heap-size . 30))
(1247 (usual-resumer . 34))
(1248 (start . 58))
(1249 (make-built-in-structures . 58))
(1250 (initialize-interaction-environment! . 58))
(1251 (make-initial-package . 58))
(1252 (make-tower . 58))
(1253 (inline-transform . 51))
(1254 (make-substitution . 51))
(1255 (substitute . 51))
(1256 (operator/name . 51))
(1257 (qualified->name . 51))
(1258 (get-qualified-env . 51))
(1259 (operator . 55))
(1260 (simple-interface . 55))
(1261 (package . 55))
(1262 (transform . 55))
(1263 (:syntax . 49))
(1264 (:values . 49))
(1265 (:arguments . 49))
(1266 (:value . 49))
(1267 (procedure . 49))
(1268 (:boolean . 49))
(1269 (:char . 49))
(1270 (:null . 49))
(1271 (:unspecific . 49))
(1272 (:number . 49))
(1273 (:complex . 49))
(1274 (:real . 49))
(1275 (:rational . 49))
(1276 (:integer . 49))
(1277 (:exact-integer . 49))
(1278 (:pair . 49))
(1279 (:string . 49))
(1280 (:symbol . 49))
(1281 (:vector . 49))
(1282 (:procedure . 49))
(1283 (:input-port . 49))
(1284 (:output-port . 49))
(1285 (:error . 49))
(1286 (:escape . 49))
(1287 (:structure . 49))
(1288 (:type . 49))
(1289 (def . 48))
(1290 (really-def . 48))
(1291 (define-multiple . 48))
(1292 (define-interface . 48))
(1293 (export . 48))
(1294 (compound-interface . 48))
(1295 (define-structure . 48))
(1296 (define-structures . 48))
(1297 (structure . 48))
(1298 (structures . 48))
(1299 (a-package . 48))
(1300 (receive . 48))
(1301 (define-reflective-tower-maker . 48))
(1302 (export-reflective-tower-maker . 48))
(1303 (define-module . 48))
(1304 (make-a-package . 48))
(1305 (loser . 48))
(1306 (interface-of . 48))
(1307 (*verify-later!* . 48))
(1308 (verify-later! . 48))
(1309 (set-verify-later! . 48))
(1310 (note-name! . 48))
(1311 (ensure-loaded . 54))
-
; Template uid -> name, parent, pc in parent, env maps
(1 current-cont 0 4 ())
(2 closure-template 0 12 ())
(3 continuation-ref 0 20 ())
(4 output-port? 0 28 ())
(5 closure? 0 36 ())
(6 complex? 0 44 ())
(7 arithmetic-shift 0 52 ())
(8 signal-condition 0 60 ())
(9 integer? 0 68 ())
(10 make-closure 0 76 ())
(11 template-ref 0 84 ())
(12 make-rectangular 0 92 ())
(13 string=? 0 100 ())
(14 extended-number? 0 108 ())
(15 reverse-list->string 0 116 ())
(16 denominator 0 124 ())
(17 call-with-values 0 132 ())
(18 weak-pointer-ref 0 140 ())
(19 find-all-symbols 0 148 ())
(20 code-vector? 0 156 ())
(21 pop 0 164 ())
(22 exp 0 172 ())
(23 sin 0 180 ())
(24 make-extended-number 0 188 ())
(25 cos 0 196 ())
(26 collect 0 204 ())
(27 external-lookup 0 212 ())
(28 tan 0 220 ())
(29 log 0 228 ())
(30 continuation-length 0 236 ())
(31 make-code-vector 0 244 ())
(33 cdr 32 4 ())
(34 bitwise-xor 32 12 ())
(35 car 32 20 ())
(36 string? 32 28 ())
(37 symbol? 32 36 ())
(38 set-cdr! 32 44 ())
(39 bitwise-not 32 52 ())
(40 vector? 32 60 ())
(41 closure-env 32 68 ())
(42 set-car! 32 76 ())
(43 bitwise-ior 32 84 ())
(44 number? 32 92 ())
(45 template-length 32 100 ())
(46 string-hash 32 108 ())
(47 pop-env 32 116 ())
(48 primitive-catch 32 124 ())
(49 make-string 32 132 ())
(50 input-port? 32 140 ())
(51 record? 32 148 ())
(52 make-vector 32 156 ())
(53 extended-number-set! 32 164 ())
(54 write-image 32 172 ())
(55 eq? 32 180 ())
(56 bitwise-and 32 188 ())
(57 location-id 32 196 ())
(58 code-vector-set! 32 204 ())
(59 set-location-id! 32 212 ())
(60 make-record 32 220 ())
(61 intern 32 228 ())
(62 values 32 236 ())
(63 string-set! 32 244 ())
(64 unassigned 32 252 ())
(65 vector-set! 32 260 ())
(66 extended-number-ref 32 268 ())
(67 unspecific 32 276 ())
(68 code-vector-ref 32 284 ())
(69 schedule-interrupt 32 292 ())
(70 find-all-xs 32 300 ())
(71 char-ready? 32 308 ())
(72 set-interrupt-handlers! 32 316 ())
(73 eof-object? 32 324 ())
(74 record-set! 32 332 ())
(75 ascii->char 32 340 ())
(76 char->ascii 32 348 ())
(77 set-enabled-interrupts! 32 356 ())
(78 external-value 32 364 ())
(79 make-immutable! 32 372 ())
(80 close-port 32 380 ())
(81 string-ref 32 388 ())
(82 immutable? 32 396 ())
(83 vector-ref 32 404 ())
(84 exact? 32 412 ())
(85 write-char 32 420 ())
(86 symbol->string 32 428 ())
(87 make-polar 32 436 ())
(88 record-ref 32 444 ())
(89 numerator 32 452 ())
(90 extended-number-length 32 460 ())
(91 error 32 468 ())
(92 exact->inexact 32 476 ())
(93 inexact->exact 32 484 ())
(94 apply 32 492 ())
(95 memory-status 32 500 ())
(97 code-vector-length 96 4 ())
(98 floor 96 12 ())
(99 with-continuation 96 20 ())
(100 magnitude 96 28 ())
(101 nargs 96 36 ())
(102 char=? 96 44 ())
(103 char<? 96 52 ())
(104 continuation? 96 60 ())
(105 remainder 96 68 ())
(106 vm-return 96 76 ())
(107 false 96 84 ())
(108 angle 96 92 ())
(109 open-port 96 100 ())
(110 string-length 96 108 ())
(111 external? 96 116 ())
(112 make-continuation 96 124 ())
(113 vector-length 96 132 ())
(114 template? 96 140 ())
(115 rational? 96 148 ())
(116 location? 96 156 ())
(117 external-name 96 164 ())
(118 set-exception-handler! 96 172 ())
(119 pair? 96 180 ())
(120 make-external 96 188 ())
(121 record-length 96 196 ())
(122 external-call 96 204 ())
(123 set-dynamic-state! 96 212 ())
(124 get-cont-from-heap 96 220 ())
(125 real-part 96 228 ())
(126 real? 96 236 ())
(127 make-template 96 244 ())
(128 imag-part 96 252 ())
(129 make-location 96 260 ())
(130 = 96 268 ())
(131 < 96 276 ())
(132 char? 96 284 ())
(133 quotient 96 292 ())
(134 / 96 300 ())
(135 weak-pointer? 96 308 ())
(136 - 96 316 ())
(137 continuation-set! 96 324 ())
(138 peek-char 96 332 ())
(139 + 96 340 ())
(140 * 96 348 ())
(141 contents 96 356 ())
(142 sqrt 96 364 ())
(143 read-char 96 372 ())
(144 set-contents! 96 380 ())
(145 push 96 388 ())
(146 make-weak-pointer 96 396 ())
(147 get-dynamic-state 96 404 ())
(148 trap 96 412 ())
(149 cons 96 420 ())
(150 template-set! 96 428 ())
(151 time 96 436 ())
(152 location-defined? 96 444 ())
(153 asin 96 452 ())
(154 write-string 96 460 ())
(155 vm-extension 96 468 ())
(156 force-output 96 476 ())
(157 acos 96 484 ())
(158 set-location-defined?! 96 492 ())
(159 atan 96 500 ())
(161 char->integer 160 4 ())
(162 integer->char 160 12 ())
(163 invoke-closure 160 44 ())
(164 primitive-cwcc 160 52 ())
(165 #f 164 7 ())
(166 make-undefined-location 160 60 ())
(167 vector-unassigned? 160 68 ())
(168 string-copy 160 76 ())
(169 loop 168 24 ())
(170 string->symbol 160 84 ())
(171 flush-the-symbol-table! 160 99 ())
(172 restore-the-symbol-table! 160 107 ())
(173 maybe-open-input-file 160 127 ())
(174 maybe-open-output-file 160 135 ())
(175 open-input-file 160 143 ())
(176 open-output-file 160 151 ())
(178 signal 177 12 ())
(179 warn 177 20 ())
(180 syntax-error 177 28 ())
(181 call-error 177 36 ())
(183 not 182 4 ())
(184 boolean? 182 12 ())
(185 eqv? 182 20 ())
(186 equal? 182 28 ())
(187 loop 186 141 ())
(188 > 182 36 ())
(189 <= 182 44 ())
(190 >= 182 52 ())
(191 max 182 60 ())
(192 #f 191 8 ())
(193 min 182 68 ())
(194 #f 193 8 ())
(195 abs 182 76 ())
(196 zero? 182 84 ())
(197 positive? 182 92 ())
(198 negative? 182 100 ())
(199 even? 182 108 ())
(200 odd? 182 116 ())
(201 caar 182 124 ())
(202 cadr 182 132 ())
(203 cdar 182 140 ())
(204 cddr 182 148 ())
(205 caaar 182 156 ())
(206 caadr 182 164 ())
(207 cadar 182 172 ())
(208 caddr 182 180 ())
(209 cdaar 182 188 ())
(210 cdadr 182 196 ())
(211 cddar 182 204 ())
(212 cdddr 182 212 ())
(213 caaaar 182 220 ())
(214 caaadr 182 228 ())
(215 caadar 182 236 ())
(216 caaddr 182 244 ())
(217 cadaar 182 252 ())
(218 cadadr 182 260 ())
(219 caddar 182 268 ())
(220 cadddr 182 276 ())
(221 cdaaar 182 284 ())
(222 cdaadr 182 292 ())
(223 cdadar 182 300 ())
(224 cdaddr 182 308 ())
(225 cddaar 182 316 ())
(226 cddadr 182 324 ())
(227 cdddar 182 332 ())
(228 cddddr 182 340 ())
(229 null? 182 348 ())
(230 list 182 356 ())
(231 length 182 364 ())
(232 #f 231 5 ())
(233 append 182 372 ())
(234 recur 233 22 ())
(235 reverse 182 380 ())
(236 append-reverse 182 388 ())
(237 list-tail 182 396 ())
(238 list-ref 182 404 ())
(239 mem 182 412 ())
(240 #f 239 5 ())
(241 loop 240 9 ())
(243 ass 242 4 ())
(244 #f 243 5 ())
(245 loop 244 9 ())
(246 assq 242 46 ())
(247 list? 242 54 ())
(248 recur 247 9 ())
(249 char>? 242 62 ())
(250 char>=? 242 70 ())
(251 char<=? 242 78 ())
(252 char-whitespace? 242 86 ())
(253 char-lower-case? 242 94 ())
(254 char-upper-case? 242 102 ())
(255 char-numeric? 242 110 ())
(256 char-alphabetic? 242 118 ())
(257 char-upcase 242 140 ())
(258 char-downcase 242 148 ())
(259 char-ci-compare 242 156 ())
(260 #f 259 5 ())
(261 string 242 249 ())
(262 substring 242 257 ())
(263 loop##0 262 22 ())
(264 string-append 242 265 ())
(265 #f 264 10 ())
(266 loop 264 39 ())
(267 loop##1 266 35 ())
(268 string->list 242 273 ())
(269 loop##2 268 15 ())
(270 list->string 242 281 ())
(271 loop##3 270 27 ())
(272 string-fill! 242 289 ())
(273 loop##4 272 15 ())
(274 make-string=? 242 297 ())
(275 #f 274 5 ())
(276 loop 275 25 ())
(277 make-string<? 242 322 ())
(278 #f 277 5 ())
(279 loop 278 36 ())
(280 string>? 242 370 ())
(281 string<=? 242 378 ())
(282 string>=? 242 386 ())
(283 string-ci>? 242 394 ())
(284 string-ci<=? 242 402 ())
(285 string-ci>=? 242 410 ())
(286 vector 242 418 ())
(287 vector->list 242 426 ())
(288 loop##5 287 9 ())
(289 list->vector 242 434 ())
(290 loop##6 289 27 ())
(291 vector-fill! 242 442 ())
(292 loop##7 291 16 ())
(293 map 242 450 ())
(294 map1 242 458 ())
(295 map2+ 242 466 ())
(296 for-each 242 474 ())
(297 loop 296 12 ())
(298 make-promise 242 483 ())
(299 #f 298 11 ())
(300 force 242 491 ())
(302 unspecific 301 4 ())
(303 reduce 301 12 ())
(304 filter 301 20 ())
(305 #f 304 5 ())
(306 pos 301 28 ())
(307 #f 306 5 ())
(308 loop 307 9 ())
(309 any 301 87 ())
(310 every 301 95 ())
(311 sublist 301 103 ())
(312 recur 311 42 ())
(313 last 301 111 ())
(314 insert 301 119 ())
(316 inexact? 315 4 ())
(317 modulo 315 12 ())
(318 ceiling 315 20 ())
(319 truncate 315 28 ())
(320 round 315 36 ())
(321 gcd 315 44 ())
(322 #f 321 6 ())
(323 euclid 315 52 ())
(324 lcm 315 60 ())
(325 #f 324 6 ())
(326 expt 315 68 ())
(327 raise-to-integer-power 315 76 ())
(328 loop 327 21 ())
(330 rationalize 329 4 ())
(331 simplest-rational 329 12 ())
(332 simplest-rational-internal 331 9 ())
(334 record-type 333 4 ())
(335 make-record-type 333 27 ())
(336 record-type? 333 35 ())
(337 record-type-uid 333 43 ())
(338 record-type-name 333 51 ())
(339 record-type-field-names 333 59 ())
(340 record-type-discloser 333 67 ())
(341 record-field-index 333 75 ())
(342 loop 341 9 ())
(343 record-constructor 333 83 ())
(344 #f 343 9 ())
(345 #f 343 43 ())
(346 loop 345 30 ())
(347 record-accessor 333 91 ())
(348 #f 347 55 ())
(349 record-modifier 333 99 ())
(350 #f 349 55 ())
(351 record-predicate 333 107 ())
(352 #f 351 5 ())
(353 define-record-discloser 333 115 ())
(354 disclose-record 333 123 ())
(355 default-record-discloser 333 131 ())
(359 simple-type-id 358 44 ())
(360 simple-type-priority 358 52 ())
(361 simple-type-predicate 358 60 ())
(362 simple-type-superiors 358 68 ())
(364 make-simple-type 358 108 ())
(365 compute-priority 358 116 ())
(366 %type-priority 358 132 ())
(367 %type-predicate 358 140 ())
(368 %same-type? 358 148 ())
(369 value? 358 213 ())
(374 record-type-priority 373 40 ())
(375 method-info-proc 373 89 ())
(376 method-info-n-ary? 373 97 ())
(377 method-info-types 373 105 ())
(378 make-method-info 373 130 ())
(380 empty-method-list 373 153 ())
(381 insert-method 373 161 ())
(382 recur 381 9 ())
(383 same-applicability? 373 169 ())
(384 every2 373 177 ())
(385 more-specific? 373 185 ())
(386 loop 385 106 ())
(387 more-specific-type? 373 193 ())
(388 method-table-id 373 241 ())
(389 method-table-set-perform! 373 249 ())
(390 method-table-get-perform 373 257 ())
(391 make-generic 373 265 ())
(392 method-table-prototype 373 273 ())
(393 method-table-methods 373 281 ())
(394 set-method-table-methods! 373 289 ())
(396 make-method-table 373 329 ())
(397 #f 396 48 ())
(398 #f 396 70 ())
(399 make-cell-for-generic 373 337 ())
(400 #f 399 7 ())
(401 #f 399 10 ())
(402 #f 399 13 ())
(403 add-to-method-table! 373 345 ())
(404 set-final-method! 373 353 ())
(405 apply-generic 373 361 ())
(406 methods->perform 373 370 ())
(407 recur 406 9 ())
(408 last-action 373 378 ())
(409 #f 408 5 ())
(410 one-action 373 386 ())
(411 #f 410 5 ())
(412 #f 411 19 ())
(413 argument-sequence-predicate 373 394 ())
(414 recur 413 9 ())
(415 check-for-next 373 402 ())
(416 #f 415 5 ())
(417 check-next 373 410 ())
(418 #f 417 5 ())
(419 add-method! 373 468 ())
(421 add-method! 420 57 ())
(422 type-predicate 420 130 ())
(423 &type-predicate 420 207 ())
(424 &type-predicate 420 269 ())
(425 type-priority 420 334 ())
(426 &type-priority 420 411 ())
(427 &type-priority 420 473 ())
(429 type-superiors 428 47 ())
(430 &type-superiors 428 124 ())
(431 &type-superiors 428 186 ())
(432 same-type? 428 254 ())
(433 &same-type? 428 334 ())
(434 &same-type? 428 399 ())
(436 singleton-value 435 4 ())
(438 compare-to 435 27 ())
(439 #f 438 5 ())
(440 &type-predicate 435 75 ())
(441 &type-priority 435 137 ())
(442 &same-type? 435 202 ())
(443 disclose 435 267 ())
(444 &disclose 435 344 ())
(445 &disclose 435 406 ())
(446 &add-method! 435 480 ())
(447 proc->discloser 435 502 ())
(448 #f 447 5 ())
(449 #f 448 5 ())
(452 &number->string 451 44 ())
(453 &number->string 451 109 ())
(454 &number->string 451 174 ())
(455 integer->digit 451 226 ())
(456 integer->string 451 231 ())
(457 recur 456 36 ())
(458 string->number 451 245 ())
(459 loop 458 159 ())
(460 radix-is 459 69 ())
(461 exactness-is 459 72 ())
(462 loop 459 233 ())
(463 &really-string->number 451 329 ())
(465 loop 464 16 ())
(466 &really-string->number 451 429 ())
(467 set-exactness 451 451 ())
(468 digit->integer 451 491 ())
(469 do-it 451 496 ())
(470 loop 469 35 ())
(471 string->integer 451 501 ())
(473 thread-dynamic-env 472 44 ())
(474 current-thread 472 52 ())
(475 set-current-thread! 472 60 ())
(476 get-dynamic-env 472 68 ())
(477 set-dynamic-env! 472 76 ())
(478 initialize-dynamic-state! 472 84 ())
(479 with-dynamic-env 472 92 ())
(480 #f 479 27 ())
(481 empty-dynamic-env 472 100 ())
(482 fluid-top-level-value 472 148 ())
(483 set-fluid-top-level-value! 472 156 ())
(484 fluid 472 164 ())
(485 set-fluid! 472 172 ())
(486 let-fluid 472 180 ())
(487 let-fluids 472 188 ())
(488 loop 487 10 ())
(489 fluid-lookup 472 196 ())
(491 dynamic-wind 490 4 ())
(492 #f 491 85 ())
(493 call-with-current-continuation 490 12 ())
(494 #f 493 5 ())
(495 continuation->procedure 490 20 ())
(496 #f 495 5 ())
(497 #f 496 54 ())
(498 point-parent 490 68 ())
(499 point-dynamic-env 490 76 ())
(500 point-out 490 84 ())
(501 point-in 490 92 ())
(502 point-depth 490 100 ())
(505 get-dynamic-point 490 153 ())
(506 env-dynamic-point 490 161 ())
(507 let-dynamic-point 490 169 ())
(508 travel-to-point! 490 177 ())
(510 current-input-port 509 52 ())
(511 current-output-port 509 60 ())
(512 error-output-port 509 68 ())
(513 with-initial-ports 509 76 ())
(514 call-with-mumble-file 509 84 ())
(515 #f 514 5 ())
(516 #f 515 9 ())
(517 #f 515 12 ())
(518 #f 515 15 ())
(519 with-input-from-file 509 132 ())
(520 #f 519 8 ())
(521 with-output-to-file 509 140 ())
(522 #f 521 8 ())
(523 newline 509 148 ())
(524 output-port-option 509 156 ())
(525 input-port-option 509 164 ())
(527 write 526 4 ())
(528 recur 527 26 ())
(529 recurring-write 526 12 ())
(530 write-boolean 526 20 ())
(531 write-number 526 28 ())
(532 write-char-literal 526 36 ())
(533 character-name 526 44 ())
(534 write-string-literal 526 52 ())
(535 loop##8 534 21 ())
(536 write-list 526 60 ())
(537 loop 536 67 ())
(538 quotation? 526 68 ())
(539 write-vector 526 76 ())
(540 loop 539 52 ())
(541 write-other 526 84 ())
(542 #f 541 57 ())
(543 display-type-name 526 92 ())
(544 loop##9 543 80 ())
(545 display 526 100 ())
(546 recur 545 26 ())
(548 condition-supertypes 547 12 ())
(549 define-condition-type 547 20 ())
(550 #f 549 19 ())
(551 condition-predicate 547 28 ())
(552 #f 551 5 ())
(553 condition? 547 36 ())
(554 make-exception 547 204 ())
(556 read 555 4 ())
(557 loop 556 24 ())
(558 sub-read-carefully 555 12 ())
(559 make-reader-token 555 37 ())
(560 reader-token? 555 45 ())
(561 sub-read 555 81 ())
(563 set-standard-syntax! 555 115 ())
(564 sub-read-whitespace 555 124 ())
(566 sub-read-constituent 555 144 ())
(568 set-standard-read-macro! 555 184 ())
(569 sub-read-list 555 192 ())
(575 loop 574 11 ())
(577 gobble-line 555 326 ())
(578 loop 577 9 ())
(579 define-sharp-macro 555 342 ())
(585 number-sharp-macro 555 432 ())
(587 sub-read-token 555 451 ())
(588 loop 587 9 ())
(589 parse-token 555 459 ())
(590 reading-error 555 504 ())
(592 table-set!-procedure 591 44 ())
(593 set-table-set!-procedure! 591 52 ())
(594 table-ref-procedure 591 60 ())
(595 set-table-ref-procedure! 591 68 ())
(596 table-data 591 76 ())
(597 set-table-data! 591 84 ())
(598 table-size 591 92 ())
(599 set-table-size! 591 100 ())
(600 table-ref 591 125 ())
(601 table-set! 591 133 ())
(602 next-table-size 591 157 ())
(603 make-table-maker 591 165 ())
(604 #f 603 67 ())
(605 new-entry 591 180 ())
(606 make-assoc 591 188 ())
(607 #f 606 17 ())
(608 loop 607 9 ())
(609 eq?-assoc 591 196 ())
(610 loop 609 9 ())
(611 make-linear-table-ref 591 204 ())
(612 #f 611 5 ())
(613 make-linear-table-set! 591 212 ())
(614 #f 613 5 ())
(615 make->hash-table 591 220 ())
(616 #f 615 37 ())
(617 make-hash-table-ref 591 228 ())
(618 #f 617 5 ())
(619 make-hash-table-set! 591 236 ())
(620 #f 619 5 ())
(621 expand-hash-table! 591 244 ())
(622 loop##10 621 43 ())
(623 table-enter-alist! 591 252 ())
(624 loop##11 623 19 ())
(625 table-expand-table! 591 260 ())
(626 table-walk 591 268 ())
(627 #f 626 5 ())
(628 really-table-walk 591 276 ())
(629 loop##12 628 62 ())
(630 alist-walk 591 284 ())
(631 loop##13 630 9 ())
(632 make-table-immutable! 591 292 ())
(633 table->entry-list 591 300 ())
(634 #f 633 14 ())
(635 default-table-hash-function 591 308 ())
(636 symbol-hash 591 316 ())
(637 make-table 591 345 ())
(640 type-info 639 44 ())
(641 type-more 639 52 ())
(642 type-mask 639 60 ())
(644 make-type 639 100 ())
(645 name->type 639 136 ())
(646 set-type-name! 639 144 ())
(647 new-type-bit 639 160 ())
(648 mask->type 639 168 ())
(649 bottom-type? 639 205 ())
(651 new-atomic-type 650 19 ())
(652 named-atomic-type 650 27 ())
(653 rail-type 650 80 ())
(654 make-optional-type 650 88 ())
(655 make-rest-type 650 96 ())
(656 head-type 650 104 ())
(657 head-type-really 650 112 ())
(658 tail-type 650 120 ())
(659 empty-rail-type? 650 128 ())
(660 rest-type? 650 136 ())
(661 optional-type? 650 144 ())
(662 value-type? 650 268 ())
(663 same-type? 650 328 ())
(664 subtype? 650 336 ())
(665 meet-type 650 344 ())
(666 other-type-info 650 352 ())
(667 p 650 360 ())
(668 meet-rail 650 368 ())
(669 meet-procedure 650 376 ())
(670 meet? 650 384 ())
(671 meet-procedure? 650 392 ())
(672 join-type 650 400 ())
(673 join-rail 650 408 ())
(674 join-procedure 650 416 ())
(675 loop 650 437 ())
(677 make-other-type 676 222 ())
(678 procedure-type 676 362 ())
(679 make-procedure-type 676 370 ())
(680 procedure-type-domain 676 378 ())
(681 procedure-type-codomain 676 386 ())
(682 restrictive? 676 394 ())
(683 sexp->type 676 402 ())
(684 #f 683 234 ())
(685 #f 683 282 ())
(686 sexp->values-type 676 410 ())
(687 type->sexp 676 418 ())
(688 #f 687 122 ())
(689 atomic-type->sexp 676 426 ())
(690 rail-type->sexp 676 434 ())
(691 recur 690 9 ())
(692 disjoin-type 676 442 ())
(693 loop##14 692 228 ())
(694 disjoin-rest 676 450 ())
(695 make-some-values-type 676 471 ())
(696 procedure-type? 676 481 ())
(697 fixed-arity-procedure-type? 676 489 ())
(698 loop 697 23 ())
(699 procedure-type-arity 676 497 ())
(700 loop##15 699 9 ())
(701 procedure-type-argument-types 676 505 ())
(702 recur 701 9 ())
(705 operator-name 704 4 ())
(706 operator-uid 704 12 ())
(707 operator-nargs 704 20 ())
(708 operator-type 704 28 ())
(709 set-operator-type! 704 36 ())
(711 get-operator 704 76 ())
(712 make-operator-table 704 126 ())
(713 operator-lookup 704 142 ())
(714 operator-define! 704 150 ())
(715 node-plist 704 198 ())
(716 set-node-plist! 704 206 ())
(717 node-form 704 214 ())
(718 node-operator-id 704 222 ())
(720 make-node 704 262 ())
(721 node-ref 704 270 ())
(722 node-set! 704 278 ())
(723 loop 722 78 ())
(724 node-operator 704 286 ())
(725 node-predicate 704 294 ())
(726 #f 725 30 ())
(727 make-similar-node 704 302 ())
(728 generated-parent-name 704 350 ())
(729 generated-env 704 358 ())
(730 generated-token 704 366 ())
(731 generated-symbol 704 374 ())
(733 generate-name 704 414 ())
(734 generated-uid 704 422 ())
(735 name->symbol 704 438 ())
(736 name-hash 704 446 ())
(737 desyntaxify 704 454 ())
(738 loop 737 237 ())
(740 transform-id 739 4 ())
(741 transform-source 739 12 ())
(742 transform-aux-names 739 20 ())
(743 transform-type 739 28 ())
(744 transform-env 739 36 ())
(745 transform-procedure 739 44 ())
(746 make-transform 739 69 ())
(748 maybe-transform 739 92 ())
(749 compare 748 67 ())
(750 bind-aliases 739 100 ())
(751 #f 750 22 ())
(752 make-name-generator 739 108 ())
(753 #f 752 10 ())
(754 same-denotation? 739 116 ())
(755 binding-type 739 132 ())
(756 binding-place 739 140 ())
(757 binding-static 739 148 ())
(758 set-binding-place! 739 156 ())
(759 make-binding 739 164 ())
(760 clobber-binding! 739 172 ())
(761 impose-type 739 180 ())
(762 forget-integration 739 188 ())
(763 classify 739 196 ())
(764 classify-literal 739 265 ())
(765 classify-call 739 295 ())
(766 classify-name 739 304 ())
(767 classify-macro-application 739 332 ())
(768 #f 767 14 ())
(769 classify-transform-application 739 361 ())
(770 #f 769 5 ())
(771 maybe-transform-call 739 370 ())
(772 #f 771 108 ())
(773 classify-operator-form 739 378 ())
(775 define-classifier 739 403 ())
(778 unspecific-node 739 492 ())
(782 lose 781 26 ())
(784 bind-source-file-name 779 198 ())
(785 lookup 779 206 ())
(786 bind1 779 214 ())
(787 #f 786 5 ())
(788 bind 779 222 ())
(789 bindrec 779 230 ())
(790 #f 789 16 ())
(791 literal? 779 238 ())
(792 number-of-required-args 779 246 ())
(793 loop##16 792 9 ())
(794 n-ary? 779 254 ())
(795 normalize-formals 779 262 ())
(796 syntax? 779 270 ())
(797 name? 779 278 ())
(798 define-usual-suspects 779 294 ())
(799 #f 798 22 ())
(800 #f 799 61 ())
(801 #f 798 52 ())
(802 #f 801 57 ())
(803 #f 802 5 ())
(804 #f 798 78 ())
(805 process-syntax 779 302 ())
(806 get-funny 779 310 ())
(807 reflective-tower 779 335 ())
(808 scan-body 779 343 ())
(809 #f 808 58 ())
(810 scan-body-forms 779 351 ())
(811 #f 810 171 ())
(812 body-lossage 779 359 ())
(813 variable-type 779 387 ())
(814 variable-type? 779 395 ())
(815 compatible-types? 779 411 ())
(816 environment-reader 779 464 ())
(818 schemify 817 4 ())
(819 schemify1 817 12 ())
(822 define-schemifier 817 37 ())
(825 name->qualified 817 87 ())
(826 recur 825 83 ())
(830 schemify-sexp 817 116 ())
(831 loop 830 136 ())
(832 make-qualified 817 124 ())
(833 qualified? 817 132 ())
(834 qualified-parent-name 817 140 ())
(835 qualified-symbol 817 148 ())
(837 make-population 836 4 ())
(838 add-to-population! 836 12 ())
(839 weak-memq 836 20 ())
(840 population-reduce 836 28 ())
(841 loop##17 840 9 ())
(842 population->list 836 36 ())
(843 walk-population 836 44 ())
(844 #f 843 5 ())
(846 interface-name 845 44 ())
(847 set-interface-name! 845 52 ())
(848 interface-clients 845 60 ())
(849 walk-method 845 68 ())
(850 ref-method 845 76 ())
(852 interface-ref 845 116 ())
(853 for-each-declaration 845 124 ())
(854 note-reference-to-interface! 845 132 ())
(855 make-interface 845 140 ())
(856 make-simple-interface 845 148 ())
(857 #f 856 23 ())
(858 #f 857 58 ())
(859 really-make-simple-interface 845 156 ())
(860 #f 859 5 ())
(861 #f 859 8 ())
(862 make-compound-interface 845 164 ())
(863 #f 862 12 ())
(864 loop 863 9 ())
(865 #f 862 15 ())
(866 #f 865 5 ())
(867 #f 862 32 ())
(868 note-interface-name! 845 172 ())
(870 structure-name 869 44 ())
(871 set-structure-name! 869 52 ())
(872 structure-clients 869 60 ())
(873 structure-package 869 68 ())
(874 structure-interface-really 869 76 ())
(875 set-structure-interface! 869 84 ())
(876 structure-interface-thunk 869 92 ())
(878 structure-interface 869 132 ())
(879 initialize-structure! 869 140 ())
(880 make-structure 869 148 ())
(881 #f 880 75 ())
(882 structure-unstable? 869 156 ())
(883 for-each-export 869 164 ())
(884 #f 883 19 ())
(885 note-structure-name! 869 172 ())
(886 package-cached 869 220 ())
(888 package-clients 887 4 ())
(889 package-plist 887 12 ())
(890 set-package-plist! 887 20 ())
(891 package-accesses-thunk 887 28 ())
(892 package-opens-thunk 887 36 ())
(893 set-package-opens-thunk! 887 44 ())
(894 package->environment 887 52 ())
(895 set-package->environment! 887 60 ())
(896 package-loaded? 887 68 ())
(897 set-package-loaded?! 887 76 ())
(898 package-clauses 887 84 ())
(899 package-file-name 887 92 ())
(900 package-get-location 887 100 ())
(901 set-package-get-location! 887 108 ())
(902 package-integrate? 887 116 ())
(903 set-package-integrate?! 887 124 ())
(904 package-unstable? 887 132 ())
(905 package-definitions 887 140 ())
(906 package-opens-really 887 148 ())
(907 set-package-opens! 887 156 ())
(908 package-uid 887 164 ())
(910 make-package 887 204 ())
(911 really-package->environment 887 212 ())
(912 #f 911 5 ())
(913 new-package-uid 887 220 ())
(914 package-name 887 250 ())
(915 note-package-name! 887 258 ())
(916 package-opens 887 266 ())
(917 initialize-package-if-necessary! 887 274 ())
(918 package-accesses 887 282 ())
(919 make-simple-package 887 290 ())
(920 #f 919 60 ())
(921 #f 919 63 ())
(922 package-definition 887 298 ())
(923 package-define! 887 306 ())
(924 really-package-define! 887 314 ())
(925 package-lookup 887 322 ())
(926 really-package-lookup 887 330 ())
(927 loop 926 80 ())
(928 structure-lookup 887 338 ())
(929 generic-lookup 887 346 ())
(930 initialize-package! 887 354 ())
(931 #f 930 35 ())
(932 #f 930 46 ())
(933 define-funny-names! 887 362 ())
(934 package-define-funny! 887 370 ())
(935 extract-package-from-environment 887 395 ())
(936 for-each-definition 887 403 ())
(937 #f 936 5 ())
(938 get-new-location 887 411 ())
(939 make-new-location 887 419 ())
(940 flush-location-names 887 466 ())
(941 package-get 887 474 ())
(942 package-put! 887 482 ())
(943 package-note-caching 887 490 ())
(944 loop 943 54 ())
(945 maybe-fix-place 887 498 ())
(946 follow-forwarding-pointers 887 506 ())
(948 environment-ref 947 4 ())
(949 environment-set! 947 12 ())
(950 #f 949 98 ())
(951 environment-define! 947 20 ())
(952 *structure-ref 947 28 ())
(953 carefully 947 36 ())
(954 interaction-environment 947 60 ())
(955 set-interaction-environment! 947 68 ())
(956 with-interaction-environment 947 76 ())
(957 scheme-report-environment 947 84 ())
(958 set-scheme-report-environment! 947 107 ())
(959 make-reflective-tower 947 115 ())
(960 recur 959 9 ())
(961 #f 960 5 ())
(962 set-reflective-tower-maker! 947 141 ())
(964 define-usual-macro 963 18 ())
(965 #f 964 11 ())
(966 usual-transform 963 26 ())
(967 long-enough? 963 34 ())
(970 recur 969 16 ())
(979 interesting-to-quasiquote? 978 33 ())
(980 descend-quasiquote-vector 978 38 ())
(981 #f 980 20 ())
(982 descend-quasiquote-pair 978 43 ())
(983 #f 982 14 ())
(984 #f 983 14 ())
(985 descend-quasiquote 978 48 ())
(986 finalize-quasiquote 978 53 ())
(987 expand-quasiquote 978 58 ())
(990 process-rules 988 25 ())
(991 free-meta-variables 990 63 ())
(992 meta-variables 990 68 ())
(993 process-template 990 73 ())
(994 process-pattern 990 78 ())
(995 #f 994 90 ())
(996 process-segment-match 990 83 ())
(997 process-match 990 88 ())
(998 process-rule 990 93 ())
(999 #f 998 99 ())
(1000 make-transformer 990 98 ())
(1001 segment-pattern? 988 33 ())
(1002 segment-template? 988 41 ())
(1003 find-free-names-in-syntax-rules 988 75 ())
(1004 free-names 1003 11 ())
(1005 meta-variables 1003 16 ())
(1006 loop##18 1003 25 ())
(1008 namestring 1007 4 ())
(1009 #f 1008 173 ())
(1010 namestring-component 1007 28 ())
(1011 file-name-directory 1007 60 ())
(1012 file-name-nondirectory 1007 68 ())
(1013 file-nondirectory-position 1007 76 ())
(1014 loop 1013 9 ())
(1015 string-posq 1007 84 ())
(1016 loop 1015 9 ())
(1017 translations 1007 100 ())
(1018 set-translation! 1007 108 ())
(1019 translate 1007 116 ())
(1020 loop 1019 15 ())
(1022 scan-forms 1021 21 ())
(1023 scan-file 1021 29 ())
(1024 #f 1023 71 ())
(1025 recur 1024 108 ())
(1026 scan-form-list 1021 37 ())
(1027 loop 1026 9 ())
(1028 scan-form 1021 66 ())
(1029 process-define-syntax 1021 75 ())
(1030 scan-structures 1021 83 ())
(1031 recur 1030 29 ())
(1032 #f 1031 188 ())
(1033 #f 1031 231 ())
(1034 scan-package 1021 91 ())
(1035 #f 1034 77 ())
(1036 #f 1035 22 ())
(1037 optimize 1021 99 ())
(1038 #f 1037 33 ())
(1039 #f 1037 124 ())
(1040 #f 1037 137 ())
(1041 check-structure 1021 107 ())
(1042 #f 1041 14 ())
(1043 initialize-usual-transforms! 1021 115 ())
(1044 #f 1043 5 ())
(1045 define-all-operators 1021 123 ())
(1046 #f 1045 14 ())
(1047 #f 1045 60 ())
(1048 make-define-primitive-node 1021 167 ())
(1049 get-optimizer 1021 190 ())
(1050 set-optimizer! 1021 198 ())
(1052 note-undefined! 1051 20 ())
(1053 noting-undefined-variables 1051 28 ())
(1054 foo 1053 10 ())
(1055 #f 1053 18 ())
(1056 #f 1053 34 ())
(1057 #f 1056 3 ())
(1058 #f 1056 9 ())
(1059 #f 1058 3 ())
(1060 #f 1059 17 ())
(1061 #f 1059 143 ())
(1063 lookup-enumerand 1062 9 ())
(1064 loop 1063 16 ())
(1067 node-type 1066 4 ())
(1068 reconstruct-type 1066 12 ())
(1069 reconstruct 1066 20 ())
(1071 define-reconstructor 1066 45 ())
(1075 careful-codomain 1066 71 ())
(1076 reconstruct-body 1066 79 ())
(1079 reconstruct-name 1077 22 ())
(1080 reconstruct-call 1077 30 ())
(1081 lose 1080 63 ())
(1082 #f 1081 3 ())
(1083 loop 1080 104 ())
(1088 fork-constraints 1077 92 ())
(1089 #f 1088 12 ())
(1091 loop##19 1090 9 ())
(1092 examine 1077 118 ())
(1098 node->type 1077 198 ())
(1104 reconstruct-apply 1077 376 ())
(1105 #f 1104 45 ())
(1106 declare-operator-type 1077 494 ())
(1107 #f 1106 19 ())
(1110 constant-type 1109 463 ())
(1112 template-code 1111 12 ())
(1113 template-info 1111 20 ())
(1114 set-template-code! 1111 28 ())
(1115 set-template-info! 1111 36 ())
(1117 segment->template 1116 28 ())
(1118 #f 1117 169 ())
(1119 segment-data->template 1116 36 ())
(1120 loop##20 1119 52 ())
(1121 astate-literals 1116 84 ())
(1122 set-astate-literals! 1116 92 ())
(1123 astate-count 1116 100 ())
(1124 set-astate-count! 1116 108 ())
(1125 astate-pc 1116 116 ())
(1126 set-astate-pc! 1116 124 ())
(1127 astate-code-vector 1116 132 ())
(1128 make-astate 1116 140 ())
(1129 emit-byte! 1116 148 ())
(1130 emit-literal! 1116 156 ())
(1131 emit-segment! 1116 164 ())
(1133 instruction 1116 186 ())
(1134 #f 1133 24 ())
(1135 #f 1134 20 ())
(1136 sequentially 1116 194 ())
(1137 sequentially-2 1116 202 ())
(1138 #f 1137 42 ())
(1139 instruction-with-literal 1116 210 ())
(1140 #f 1139 8 ())
(1141 instruction-with-location 1116 218 ())
(1142 #f 1141 8 ())
(1143 instruction-with-template 1116 226 ())
(1144 #f 1143 8 ())
(1145 make-label 1116 234 ())
(1146 instruction-using-label 1116 242 ())
(1147 #f 1146 37 ())
(1148 attach-label 1116 250 ())
(1149 #f 1148 11 ())
(1150 #f 1149 27 ())
(1151 note-source-code 1116 294 ())
(1152 #f 1151 22 ())
(1153 note-environment 1116 302 ())
(1154 #f 1153 22 ())
(1155 emit-with-environment-maps! 1116 310 ())
(1156 #f 1155 24 ())
(1158 new-template-uid 1157 4 ())
(1159 template-uid 1157 20 ())
(1160 set-template-uid! 1157 28 ())
(1161 debug-flag-accessor 1157 127 ())
(1162 #f 1161 22 ())
(1163 debug-flag-modifier 1157 135 ())
(1164 #f 1163 22 ())
(1165 with-fresh-compiler-state 1157 245 ())
(1166 #f 1165 51 ())
(1167 #f 1166 3 ())
(1168 #f 1166 6 ())
(1169 saving-and-restoring 1157 253 ())
(1170 swap 1169 5 ())
(1172 debug-data-source 1171 44 ())
(1173 set-debug-data-source! 1171 52 ())
(1174 debug-data-env-maps 1171 60 ())
(1175 set-debug-data-env-maps! 1171 68 ())
(1176 debug-data-pc-in-parent 1171 76 ())
(1177 debug-data-parent 1171 84 ())
(1178 debug-data-name 1171 92 ())
(1179 debug-data-uid 1171 100 ())
(1180 new-debug-data 1171 125 ())
(1182 debug-data->info 1171 148 ())
(1183 get-debug-data 1171 156 ())
(1184 note-debug-data! 1171 164 ())
(1185 interesting-debug-data? 1171 172 ())
(1186 debug-data-names 1171 180 ())
(1187 template-debug-data 1171 188 ())
(1188 template-id 1171 196 ())
(1189 template-name 1171 204 ())
(1190 template-names 1171 212 ())
(1192 compile-top 1191 4 ())
(1193 compile 1191 12 ())
(1198 define-compilator 1191 40 ())
(1201 compile-constant 1191 89 ())
(1206 compile-begin 1191 198 ())
(1207 loop 1206 59 ())
(1209 compile-call 1208 4 ())
(1210 compile-redex 1208 49 ())
(1211 compile-unknown-call 1208 57 ())
(1212 maybe-push-continuation 1208 65 ())
(1213 push-arguments 1208 73 ())
(1214 recur 1213 9 ())
(1215 push-all-with-names 1208 81 ())
(1217 compile-lambda 1208 110 ())
(1218 compile-lambda-code 1208 118 ())
(1219 compile-letrec 1208 186 ())
(1220 #f 1219 76 ())
(1221 #f 1219 179 ())
(1222 compile-body 1208 216 ())
(1223 #f 1222 11 ())
(1224 #f 1223 49 ())
(1225 make-cont 1208 241 ())
(1226 return-cont 1208 282 ())
(1227 return-cont? 1208 290 ())
(1228 fall-through-cont 1208 298 ())
(1229 fall-through-cont? 1208 306 ())
(1230 ignore-values-cont 1208 331 ())
(1231 ignore-values-cont? 1208 339 ())
(1232 deliver-value 1208 347 ())
(1233 named-cont 1208 355 ())
(1234 cont-name 1208 363 ())
(1235 bind-vars 1208 371 ())
(1236 #f 1235 23 ())
(1237 loop 1236 21 ())
(1238 initial-cenv 1208 379 ())
(1239 environment-level 1208 387 ())
(1240 name-node-binding 1208 412 ())
(1241 generate-trap 1208 420 ())
(1242 careful-sequentially 1208 428 ())
(1243 shrink-segment 1208 448 ())
(1244 type-check 1208 456 ())
(1245 #f 1244 107 ())
(1246 #f 1244 139 ())
(1247 set-type-check?! 1208 464 ())
(1248 diagnose-call-error 1208 480 ())
(1249 #f 1248 151 ())
(1252 define-compiler-primitive 1251 4 ())
(1254 define-closed-compilator 1251 29 ())
(1256 get-closed-compilator 1251 58 ())
(1257 direct-compilator 1251 66 ())
(1258 #f 1257 5 ())
(1259 direct-closed-compilator 1251 74 ())
(1260 #f 1259 5 ())
(1261 nargs->domain 1251 82 ())
(1262 loop##21 1261 9 ())
(1263 loop##22 1251 95 ())
(1264 define-simple-primitive 1251 111 ())
(1265 simple-compilator 1251 119 ())
(1266 #f 1265 5 ())
(1267 simple-closed-compilator 1251 127 ())
(1268 #f 1267 5 ())
(1269 symbol-append 1251 135 ())
(1270 define-stob-predicate 1251 143 ())
(1271 define-data-struct-primitives 1251 181 ())
(1272 def-prim 1271 8 ())
(1273 loop##23 1271 175 ())
(1275 define-vector-primitives 1251 204 ())
(1276 def-prim 1275 22 ())
(1282 define-n-ary-compiler-primitive 1251 312 ())
(1283 n-ary-primitive-compilator 1251 320 ())
(1284 #f 1283 5 ())
(1293 push-all-but-last 1251 441 ())
(1294 recur 1293 9 ())
(1296 compile-form 1295 4 ())
(1297 compile-file 1295 12 ())
(1298 compile-and-run-forms 1295 20 ())
(1299 compile-and-run-file 1295 28 ())
(1300 compile-and-run-scanned-forms 1295 36 ())
(1301 do-it 1300 5 ())
(1302 do-them 1300 10 ())
(1303 loop##24 1302 34 ())
(1304 #f 1300 20 ())
(1305 compile-scanned-forms 1295 44 ())
(1306 recur 1305 95 ())
(1307 compile-scanned-form 1295 52 ())
(1308 compile-definition 1295 69 ())
(1309 #f 1308 52 ())
(1310 get-location 1295 78 ())
(1311 win 1310 12 ())
(1312 get-location-for-undefined 1295 86 ())
(1313 #f 1312 82 ())
(1314 #f 1312 85 ())
(1315 get-location-for-unassignable 1295 94 ())
(1316 #f 1315 82 ())
(1317 #f 1315 85 ())
(1318 package-accessor-on-demand 1295 102 ())
(1319 #f 1318 5 ())
(1320 location-on-demand 1295 110 ())
(1321 #f 1320 5 ())
(1323 location-for-reference 1295 156 ())
(1324 loop 1323 9 ())
(1326 note-caching 1295 202 ())
(1327 grumble 1295 210 ())
(1328 make-startup-procedure 1295 218 ())
(1329 #f 1328 14 ())
(1331 eval 1330 4 ())
(1332 #f 1331 22 ())
(1333 load-into 1330 12 ())
(1334 #f 1333 11 ())
(1335 eval-from-file 1330 20 ())
(1336 #f 1335 14 ())
(1337 eval-scanned-forms 1330 28 ())
(1338 #f 1337 14 ())
(1339 invoke-template 1330 36 ())
(1340 load 1330 44 ())
(1341 #f 1340 39 ())
(1344 continuation-cont 1343 4 ())
(1345 continuation-pc 1343 12 ())
(1346 continuation-template 1343 20 ())
(1347 continuation-env 1343 28 ())
(1348 continuation-arg 1343 44 ())
(1349 continuation-arg-count 1343 52 ())
(1350 continuation-parent 1343 60 ())
(1351 loop 1350 68 ())
(1352 &disclose 1343 136 ())
(1354 usual-exception-handler 1353 4 ())
(1355 define-exception-handler 1353 12 ())
(1356 signal-exception 1353 20 ())
(1358 except 1353 60 ())
(1359 #f 1358 5 ())
(1360 handler 1353 63 ())
(1361 #f 1360 5 ())
(1362 make-opcode-generic! 1353 68 ())
(1363 really-signal-condition 1353 77 ())
(1364 loop 1363 9 ())
(1365 #f 1364 8 ())
(1366 with-handler 1353 85 ())
(1367 initialize-exceptions! 1353 109 ())
(1368 #f 1367 5 ())
(1369 last-resort-condition-handler 1353 117 ())
(1370 #f 1369 12 ())
(1371 #f 1370 21 ())
(1372 report-utter-lossage 1353 125 ())
(1373 #f 1372 76 ())
(1374 continuation-preview 1353 133 ())
(1375 ignore-errors 1353 141 ())
(1376 #f 1375 5 ())
(1377 #f 1376 5 ())
(1378 &disclose 1353 189 ())
(1379 &disclose 1353 247 ())
(1382 define-wna-handler 1380 27 ())
(1383 wna-lose 1380 43 ())
(1391 recur 1390 47 ())
(1397 comparison-wna 1380 231 ())
(1398 #f 1397 5 ())
(1399 loop 1398 52 ())
(1401 display-condition 1400 16 ())
(1402 #f 1401 9 ())
(1403 really-display-condition 1400 25 ())
(1404 #f 1403 220 ())
(1405 &disclose-condition 1400 119 ())
(1406 limited-write 1400 141 ())
(1407 recur 1406 9 ())
(1408 #f 1407 134 ())
(1409 #f 1408 21 ())
(1411 command-processor 1410 4 ())
(1412 loop 1411 50 ())
(1413 #f 1412 7 ())
(1414 #f 1413 5 ())
(1415 #f 1414 63 ())
(1416 #f 1413 8 ())
(1417 #f 1416 69 ())
(1418 #f 1416 164 ())
(1419 #f 1416 200 ())
(1420 #f 1419 10 ())
(1421 mini-load 1410 12 ())
(1422 read-string 1410 20 ())
(1423 loop 1422 9 ())
(1425 loop##25 1424 22 ())
(1426 #f 1425 28 ())
(1427 initialize-interrupts! 1424 38 ())
(1428 with-interrupts-inhibited 1424 85 ())
(1429 with-interrupts-allowed 1424 93 ())
(1430 with-interrupts 1424 101 ())
(1431 #f 1430 11 ())
(1432 enabled-interrupts 1424 109 ())
(1433 interrupt-before-heap-overflow! 1424 117 ())
(1434 #f 1433 42 ())
(1436 usual-resumer 1435 4 ())
(1437 #f 1436 5 ())
(1438 #f 1437 20 ())
(1439 #f 1438 3 ())
(1441 start 1440 4 ())
(1442 #f 1441 5 ())
(1443 #f 1442 5 ())
(1444 #f 1443 58 ())
(1445 make-built-in-structures 1440 12 ())
(1446 #f 1445 33 ())
(1447 #f 1445 50 ())
(1448 initialize-interaction-environment! 1440 20 ())
(1449 make-initial-package 1440 28 ())
(1450 #f 1449 16 ())
(1451 make-tower 1440 36 ())
(1453 inline-transform 1452 4 ())
(1454 #f 1453 55 ())
(1455 #f 1453 61 ())
(1456 make-substitution 1452 12 ())
(1457 #f 1456 25 ())
(1458 substitute 1452 20 ())
(1459 #f 1458 186 ())
(1460 #f 1458 270 ())
(1461 qualified->name 1452 45 ())
(1462 recur 1461 9 ())
(1463 get-qualified-env 1452 53 ())
(1465 operator 1464 4 ())
(1466 simple-interface 1464 12 ())
(1467 #f 1466 11 ())
(1468 package 1464 20 ())
(1469 loop##26 1468 60 ())
(1470 transform 1464 28 ())
(1472 procedure 1471 36 ())
(1475 make-a-package 1474 4 ())
(1476 loser 1474 12 ())
(1477 *verify-later!* 1474 28 ())
(1478 verify-later! 1474 36 ())
(1479 set-verify-later! 1474 44 ())
(1480 note-name! 1474 52 ())
(1482 ensure-loaded 1481 4 ())
(1483 #f 1482 9 ())
(1484 #f 1482 12 ())
(1485 #f 1484 8 ())
(1486 #f 1485 6 ())
(1487 #f 1486 7 ())
(1490 get-location 1489 3 ())
(1539 conc 1538 35 ())
(1540 #f 1539 17 ())
(1543 loop 1542 97 ())
(1549 loop 1548 48 ())
(1553 loop##27 1552 53 ())
(1557 loop 1556 75 ())
(1559 loop 1558 75 ())
(1562 loop 1561 75 ())
(1564 loop 1563 75 ())
(1566 loop 1565 75 ())
(1595 parse-package-clauses 1591 220 ())
(1596 loop 1595 47 ())
(1603 loop 1602 17 ())
(1607 loop 1606 37 ())
-
