; Package uid -> name
(200 module-system)
(201 run-time-structures)
(202 compiler-structures)
(203 initial-structures)
(204 usual-structures)
(205 vanilla-features-structures)
(206 cheat)
(207 alternate-structures)
(208 compiler-structures)
(209 linker-structures)
(210 scheme-level-0)
(211 scheme-level-1)
(212 generics)
(213 number-i/o)
(214 record)
(215 bummed-define-record-types)
(216 fluids)
(217 wind)
(218 port)
(219 enumerated)
(220 architecture)
(221 condition)
(222 template)
(223 continuation)
(224 exception)
(225 interrupts)
(226 writing)
(227 reading)
(228 scheme-level-2)
(229 scheme-level-2-internal)
(230 weak)
(231 display-conditions)
(232 table)
(233 filenames)
(234 meta-types)
(235 signatures)
(236 syntactic)
(237 usual-macros)
(238 reconstruction)
(239 packages)
(240 scan)
(241 segments)
(242 compiler)
(243 defpackage)
(244 types)
(245 inline)
(246 environments)
(247 evaluation)
(248 scheme)
(249 mini-command)
(250 initial-system)
(251 ensures-loaded)
(252 for-reification)
(258 (for-syntax defpackage))
-
; Location uid -> (name . package-uid)
(0 (current-cont . 210))
(1 (closure-template . 210))
(2 (continuation-ref . 210))
(3 (output-port? . 210))
(4 (closure? . 210))
(5 (complex? . 210))
(6 (arithmetic-shift . 210))
(7 (signal-condition . 210))
(8 (integer? . 210))
(9 (make-closure . 210))
(10 (template-ref . 210))
(11 (make-rectangular . 210))
(12 (string=? . 210))
(13 (extended-number? . 210))
(14 (reverse-list->string . 210))
(15 (denominator . 210))
(16 (call-with-values . 210))
(17 (weak-pointer-ref . 210))
(18 (find-all-symbols . 210))
(19 (code-vector? . 210))
(20 (pop . 210))
(21 (exp . 210))
(22 (sin . 210))
(23 (make-extended-number . 210))
(24 (cos . 210))
(25 (collect . 210))
(26 (external-lookup . 210))
(27 (tan . 210))
(28 (log . 210))
(29 (continuation-length . 210))
(30 (make-code-vector . 210))
(31 (cdr . 210))
(32 (bitwise-xor . 210))
(33 (car . 210))
(34 (string? . 210))
(35 (symbol? . 210))
(36 (set-cdr! . 210))
(37 (bitwise-not . 210))
(38 (vector? . 210))
(39 (closure-env . 210))
(40 (set-car! . 210))
(41 (bitwise-ior . 210))
(42 (number? . 210))
(43 (template-length . 210))
(44 (string-hash . 210))
(45 (pop-env . 210))
(46 (primitive-catch . 210))
(47 (make-string . 210))
(48 (input-port? . 210))
(49 (record? . 210))
(50 (make-vector . 210))
(51 (extended-number-set! . 210))
(52 (write-image . 210))
(53 (eq? . 210))
(54 (bitwise-and . 210))
(55 (location-id . 210))
(56 (code-vector-set! . 210))
(57 (make-record . 210))
(58 (intern . 210))
(59 (values . 210))
(60 (unassigned . 210))
(61 (string-set! . 210))
(62 (vector-set! . 210))
(63 (extended-number-ref . 210))
(64 (unspecific . 210))
(65 (schedule-interrupt . 210))
(66 (code-vector-ref . 210))
(67 (find-all-xs . 210))
(68 (char-ready? . 210))
(69 (set-interrupt-handlers! . 210))
(70 (eof-object? . 210))
(71 (record-set! . 210))
(72 (ascii->char . 210))
(73 (char->ascii . 210))
(74 (set-enabled-interrupts! . 210))
(75 (external-value . 210))
(76 (make-immutable! . 210))
(77 (close-port . 210))
(78 (string-ref . 210))
(79 (immutable? . 210))
(80 (vector-ref . 210))
(81 (exact? . 210))
(82 (write-char . 210))
(83 (symbol->string . 210))
(84 (make-polar . 210))
(85 (record-ref . 210))
(86 (numerator . 210))
(87 (extended-number-length . 210))
(88 (error . 210))
(89 (exact->inexact . 210))
(90 (inexact->exact . 210))
(91 (apply . 210))
(92 (memory-status . 210))
(93 (code-vector-length . 210))
(94 (floor . 210))
(95 (with-continuation . 210))
(96 (magnitude . 210))
(97 (nargs . 210))
(98 (char=? . 210))
(99 (char<? . 210))
(100 (continuation? . 210))
(101 (remainder . 210))
(102 (vm-return . 210))
(103 (false . 210))
(104 (angle . 210))
(105 (open-port . 210))
(106 (string-length . 210))
(107 (external? . 210))
(108 (make-continuation . 210))
(109 (vector-length . 210))
(110 (template? . 210))
(111 (rational? . 210))
(112 (location? . 210))
(113 (external-name . 210))
(114 (set-exception-handler! . 210))
(115 (pair? . 210))
(116 (make-external . 210))
(117 (record-length . 210))
(118 (external-call . 210))
(119 (set-dynamic-state! . 210))
(120 (get-cont-from-heap . 210))
(121 (real-part . 210))
(122 (real? . 210))
(123 (make-template . 210))
(124 (imag-part . 210))
(125 (make-location . 210))
(126 (= . 210))
(127 (< . 210))
(128 (char? . 210))
(129 (quotient . 210))
(130 (/ . 210))
(131 (weak-pointer? . 210))
(132 (- . 210))
(133 (continuation-set! . 210))
(134 (peek-char . 210))
(135 (+ . 210))
(136 (* . 210))
(137 (contents . 210))
(138 (sqrt . 210))
(139 (read-char . 210))
(140 (set-contents! . 210))
(141 (push . 210))
(142 (make-weak-pointer . 210))
(143 (get-dynamic-state . 210))
(144 (trap . 210))
(145 (cons . 210))
(146 (template-set! . 210))
(147 (time . 210))
(148 (location-defined? . 210))
(149 (asin . 210))
(150 (write-string . 210))
(151 (vm-extension . 210))
(152 (force-output . 210))
(153 (acos . 210))
(154 (set-location-defined?! . 210))
(155 (atan . 210))
(156 (loophole . 210))
(157 (define-syntax . 210))
(158 (begin . 210))
(159 (%file-name% . 210))
(160 (structure-ref . 210))
(161 (quote . 210))
(162 (lambda . 210))
(163 (define . 210))
(164 (if . 210))
(165 (let-syntax . 210))
(166 (letrec . 210))
(167 (primitive-procedure . 210))
(168 (set! . 210))
(169 (with-aliases . 210))
(170 (call . 210))
(171 (and . 210))
(172 (cond . 210))
(173 (do . 210))
(174 (let . 210))
(175 (let* . 210))
(176 (or . 210))
(177 (char->integer . 210))
(178 (integer->char . 210))
(179 (ascii-limit . 210))
(180 (ascii-whitespaces . 210))
(181 (procedure? . 210))
(182 (invoke-closure . 210))
(183 (primitive-cwcc . 210))
(184 (make-undefined-location . 210))
(185 (location-assigned? . 210))
(186 (vector-unassigned? . 210))
(187 (string-copy . 210))
(188 (string->symbol . 210))
(189 (really-string->symbol . 210))
(190 (*the-symbol-table* . 210))
(191 (flush-the-symbol-table! . 210))
(192 (restore-the-symbol-table! . 210))
(193 (maybe-open-input-file . 210))
(194 (maybe-open-output-file . 210))
(195 (open-input-file . 210))
(196 (open-output-file . 210))
(197 (close-input-port . 210))
(198 (close-output-port . 210))
(199 (make-condition . 210))
(200 (signal . 210))
(201 (warn . 210))
(202 (syntax-error . 210))
(203 (call-error . 210))
(204 (case . 211))
(205 (delay . 211))
(206 (quasiquote . 211))
(207 (syntax-rules . 211))
(208 (not . 211))
(209 (boolean? . 211))
(210 (eqv? . 211))
(211 (equal? . 211))
(212 (> . 211))
(213 (<= . 211))
(214 (>= . 211))
(215 (max . 211))
(216 (min . 211))
(217 (abs . 211))
(218 (zero? . 211))
(219 (positive? . 211))
(220 (negative? . 211))
(221 (even? . 211))
(222 (odd? . 211))
(223 (caar . 211))
(224 (cadr . 211))
(225 (cdar . 211))
(226 (cddr . 211))
(227 (caaar . 211))
(228 (caadr . 211))
(229 (cadar . 211))
(230 (caddr . 211))
(231 (cdaar . 211))
(232 (cdadr . 211))
(233 (cddar . 211))
(234 (cdddr . 211))
(235 (caaaar . 211))
(236 (caaadr . 211))
(237 (caadar . 211))
(238 (caaddr . 211))
(239 (cadaar . 211))
(240 (cadadr . 211))
(241 (caddar . 211))
(242 (cadddr . 211))
(243 (cdaaar . 211))
(244 (cdaadr . 211))
(245 (cdadar . 211))
(246 (cdaddr . 211))
(247 (cddaar . 211))
(248 (cddadr . 211))
(249 (cdddar . 211))
(250 (cddddr . 211))
(251 (null? . 211))
(252 (list . 211))
(253 (length . 211))
(254 (append . 211))
(255 (reverse . 211))
(256 (append-reverse . 211))
(257 (list-tail . 211))
(258 (list-ref . 211))
(259 (mem . 211))
(260 (memq . 211))
(261 (memv . 211))
(262 (member . 211))
(263 (ass . 211))
(264 (assv . 211))
(265 (assoc . 211))
(266 (assq . 211))
(267 (list? . 211))
(268 (char>? . 211))
(269 (char>=? . 211))
(270 (char<=? . 211))
(271 (char-whitespace? . 211))
(272 (char-lower-case? . 211))
(273 (char-upper-case? . 211))
(274 (char-numeric? . 211))
(275 (char-alphabetic? . 211))
(276 (char-case-delta . 211))
(277 (char-upcase . 211))
(278 (char-downcase . 211))
(279 (char-ci-compare . 211))
(280 (char-ci=? . 211))
(281 (char-ci<? . 211))
(282 (char-ci<=? . 211))
(283 (char-ci>? . 211))
(284 (char-ci>=? . 211))
(285 (string . 211))
(286 (substring . 211))
(287 (string-append . 211))
(288 (string->list . 211))
(289 (list->string . 211))
(290 (string-fill! . 211))
(291 (make-string=? . 211))
(292 (string-ci=? . 211))
(293 (make-string<? . 211))
(294 (string<? . 211))
(295 (string-ci<? . 211))
(296 (string>? . 211))
(297 (string<=? . 211))
(298 (string>=? . 211))
(299 (string-ci>? . 211))
(300 (string-ci<=? . 211))
(301 (string-ci>=? . 211))
(302 (vector . 211))
(303 (vector->list . 211))
(304 (list->vector . 211))
(305 (vector-fill! . 211))
(306 (map . 211))
(307 (map1 . 211))
(308 (map2+ . 211))
(309 (for-each . 211))
(310 (make-promise . 211))
(311 (force . 211))
(312 (unspecific . 211))
(313 (reduce . 211))
(314 (filter . 211))
(315 (pos . 211))
(316 (posq . 211))
(317 (posv . 211))
(318 (position . 211))
(319 (any . 211))
(320 (every . 211))
(321 (sublist . 211))
(322 (last . 211))
(323 (inexact? . 211))
(324 (modulo . 211))
(325 (ceiling . 211))
(326 (truncate . 211))
(327 (round . 211))
(328 (gcd . 211))
(329 (euclid . 211))
(330 (lcm . 211))
(331 (expt . 211))
(332 (raise-to-integer-power . 211))
(333 (rationalize . 211))
(334 (simplest-rational . 211))
(335 (make-family . 212))
(336 (family-identity . 212))
(337 (family-precedence . 212))
(338 (family-of-last-resort . 212))
(339 (default-family . 212))
(340 (same-family? . 212))
(341 (make-method-table . 212))
(342 (method-table-methods . 212))
(343 (method-table-families . 212))
(344 (define-method . 212))
(345 (define-default-method . 212))
(346 (define-last-method . 212))
(347 (make-generic . 212))
(348 (perform-dispatch . 212))
(349 (*fail* . 212))
(350 (fail . 212))
(351 (disclose-methods . 212))
(352 (disclose . 212))
(353 (make-generic-exception-handler . 212))
(354 (number->string-table . 213))
(355 (string->number-table . 213))
(356 (really-number->string . 213))
(357 (really-string->number . 213))
(358 (number->string . 213))
(359 (integer->string . 213))
(360 (string->number . 213))
(361 (string->integer . 213))
(362 (record-type . 214))
(363 (*record-type-uid* . 214))
(364 (record-type-marker . 214))
(365 (make-record-type . 214))
(366 (record-type? . 214))
(367 (record-type-uid . 214))
(368 (record-type-identification . 214))
(369 (record-type-field-names . 214))
(370 (record-type-discloser . 214))
(371 (record-field-index . 214))
(372 (record-constructor . 214))
(373 (record-accessor . 214))
(374 (record-modifier . 214))
(375 (record-predicate . 214))
(376 (define-record-discloser . 214))
(377 (disclose-record . 214))
(378 (default-record-discloser . 214))
(379 (define-record-type . 215))
(380 (define-constructor . 215))
(381 (define-accessors . 215))
(382 (define-accessor . 215))
(383 (thread-type . 216))
(384 (make-thread . 216))
(385 (thread-dynamic-env . 216))
(386 (current-thread . 216))
(387 (set-current-thread! . 216))
(388 (get-dynamic-env . 216))
(389 (set-dynamic-env! . 216))
(390 (initialize-dynamic-state! . 216))
(391 (with-dynamic-env . 216))
(392 (empty-dynamic-env . 216))
(393 (fluid-type . 216))
(394 (make-fluid . 216))
(395 (fluid-top-level-value . 216))
(396 (set-fluid-top-level-value! . 216))
(397 (fluid . 216))
(398 (set-fluid! . 216))
(399 (let-fluid . 216))
(400 (let-fluids . 216))
(401 (fluid-lookup . 216))
(402 (dynamic-wind . 217))
(403 (call-with-current-continuation . 217))
(404 (continuation->procedure . 217))
(405 (point-type . 217))
(406 (make-point . 217))
(407 (point-parent . 217))
(408 (point-dynamic-env . 217))
(409 (point-out . 217))
(410 (point-in . 217))
(411 (point-depth . 217))
(412 (root-point . 217))
(413 ($dynamic-point . 217))
(414 (get-dynamic-point . 217))
(415 (env-dynamic-point . 217))
(416 (let-dynamic-point . 217))
(417 (travel-to-point! . 217))
(418 ($current-input-port . 218))
(419 ($current-output-port . 218))
(420 ($error-output-port . 218))
(421 (current-input-port . 218))
(422 (current-output-port . 218))
(423 (error-output-port . 218))
(424 (with-initial-ports . 218))
(425 (call-with-mumble-file . 218))
(426 (call-with-input-file . 218))
(427 (call-with-output-file . 218))
(428 (with-input-from-file . 218))
(429 (with-output-to-file . 218))
(430 (newline . 218))
(431 (output-port-option . 218))
(432 (input-port-option . 218))
(433 (write . 226))
(434 (recurring-write . 226))
(435 (write-boolean . 226))
(436 (write-number . 226))
(437 (write-char-literal . 226))
(438 (character-name . 226))
(439 (write-string-literal . 226))
(440 (write-list . 226))
(441 (quotation? . 226))
(442 (write-vector . 226))
(443 (write-other . 226))
(444 (display-type-name . 226))
(445 (display . 226))
(446 (*condition-types* . 221))
(447 (condition-supertypes . 221))
(448 (define-condition-type . 221))
(449 (condition-predicate . 221))
(450 (condition? . 221))
(451 (condition-type . 221))
(452 (condition-stuff . 221))
(453 (error? . 221))
(454 (call-error? . 221))
(455 (read-error? . 221))
(456 (exception? . 221))
(457 (exception-opcode . 221))
(458 (exception-arguments . 221))
(459 (make-exception . 221))
(460 (warning? . 221))
(461 (syntax-error? . 221))
(462 (interrupt? . 221))
(463 (read . 227))
(464 (sub-read-carefully . 227))
(465 (reader-token-marker . 227))
(466 (make-reader-token . 227))
(467 (reader-token? . 227))
(468 (close-paren . 227))
(469 (dot . 227))
(470 (sub-read . 227))
(471 (read-dispatch-vector . 227))
(472 (read-terminating?-vector . 227))
(473 (set-standard-syntax! . 227))
(474 (set-standard-read-macro! . 227))
(475 (sub-read-list . 227))
(476 (gobble-line . 227))
(477 (*sharp-macros* . 227))
(478 (define-sharp-macro . 227))
(479 (sub-read-token . 227))
(480 (parse-token . 227))
(481 (strange-symbol-names . 227))
(482 (preferred-case . 227))
(483 (reading-error . 227))
(484 (syntax-type . 234))
(485 (any-values-type . 234))
(486 (make-some-values-type . 234))
(487 (some-values-type? . 234))
(488 (some-values-type-components . 234))
(489 (value-type . 234))
(490 (check-value-type . 234))
(491 (undeclared-type . 234))
(492 (procedure-type . 234))
(493 (procedure-type? . 234))
(494 (fixed-arity-procedure-type? . 234))
(495 (procedure-type-codomain . 234))
(496 (procedure-type-domain . 234))
(497 (nargs->domain-list . 234))
(498 (procedure-type-argument-types . 234))
(499 (procedure-type-arity . 234))
(500 (variable-type . 234))
(501 (variable-type? . 234))
(502 (variable-value-type . 234))
(503 (compatible-types? . 234))
(504 (compatible-type-lists? . 234))
(505 (usual-variable-type . 234))
(506 (boolean-type . 234))
(507 (char-type . 234))
(508 (number-type . 234))
(509 (pair-type . 234))
(510 (unspecific-type . 234))
(511 (some-values-type . 234))
(512 (any-procedure-type . 234))
(513 (proc . 234))
(514 (table-type . 232))
(515 (really-make-table . 232))
(516 (table-set-procedure . 232))
(517 (set-table-set-procedure! . 232))
(518 (table-ref-procedure . 232))
(519 (set-table-ref-procedure! . 232))
(520 (table-data . 232))
(521 (set-table-data! . 232))
(522 (table-size . 232))
(523 (set-table-size! . 232))
(524 (table-hash-function . 232))
(525 (table? . 232))
(526 (make-table . 232))
(527 (table-ref . 232))
(528 (table-set! . 232))
(529 (linear-table-size-limit . 232))
(530 (table-size-limit . 232))
(531 (next-table-size . 232))
(532 (null-entry . 232))
(533 (new-entry . 232))
(534 (get-entry . 232))
(535 (set-entry! . 232))
(536 (for-each-entry . 232))
(537 (linear-table-ref . 232))
(538 (linear-table-set! . 232))
(539 (linear-table-inc! . 232))
(540 (table-expand-table! . 232))
(541 (table-enter-entries! . 232))
(542 (hash-table-ref . 232))
(543 (hash-table-set! . 232))
(544 (hash-table-inc! . 232))
(545 (table-walk . 232))
(546 (default-table-hash-function . 232))
(547 (usual-operator-type . 236))
(548 (type/operator . 236))
(549 (make-operator . 236))
(550 (operator-uid-maybe . 236))
(551 (set-operator-uid-maybe! . 236))
(552 (operator-transform . 236))
(553 (set-operator-transform! . 236))
(554 (operator-name . 236))
(555 (operator-type . 236))
(556 (operator? . 236))
(557 (get-operator . 236))
(558 (operator-uid . 236))
(559 (*operator-uid* . 236))
(560 (operators-table . 236))
(561 (number-of-operators . 236))
(562 (the-operators . 236))
(563 (make-operator-table . 236))
(564 (operator-table-ref . 236))
(565 (operator-lookup . 236))
(566 (operator-define! . 236))
(567 (type/node . 236))
(568 (really-make-node . 236))
(569 (node-plist . 236))
(570 (set-node-plist! . 236))
(571 (node-form . 236))
(572 (node-operator-id . 236))
(573 (node? . 236))
(574 (make-node . 236))
(575 (node-ref . 236))
(576 (node-set! . 236))
(577 (node-operator . 236))
(578 (node-predicate . 236))
(579 (make-similar-node . 236))
(580 (type/generated . 236))
(581 (make-generated . 236))
(582 (generated-parent-name . 236))
(583 (generated-env . 236))
(584 (generated-token . 236))
(585 (generated-symbol . 236))
(586 (generated? . 236))
(587 (generate-name . 236))
(588 (name->symbol . 236))
(589 (*generated-uid* . 236))
(590 (name-hash . 236))
(591 (desyntaxify . 236))
(592 (make-immutable . 236))
(593 (type/transform . 236))
(594 (really-make-transform . 236))
(595 (transform-id . 236))
(596 (transform-source . 236))
(597 (transform-aux-names . 236))
(598 (transform-type . 236))
(599 (transform-env . 236))
(600 (transform-procedure . 236))
(601 (transform? . 236))
(602 (make-transform . 236))
(603 (maybe-transform . 236))
(604 (bind-aliases . 236))
(605 (make-name-generator . 236))
(606 (same-denotation? . 236))
(607 (binding? . 236))
(608 (binding-type . 236))
(609 (binding-place . 236))
(610 (binding-static . 236))
(611 (really-make-binding . 236))
(612 (make-binding . 236))
(613 (clobber-binding! . 236))
(614 (binding-transform . 236))
(615 (impose-type . 236))
(616 (forget-integration . 236))
(617 (classify . 236))
(618 (call-node? . 236))
(619 (name-node? . 236))
(620 (classify-literal . 236))
(621 (classify-call . 236))
(622 (classify-name . 236))
(623 (operator/name . 236))
(624 (classify-macro-application . 236))
(625 (classify-transform-application . 236))
(626 (maybe-transform-call . 236))
(627 (classify-operator-form . 236))
(628 (classifiers . 236))
(629 (define-classifier . 236))
(630 (unspecific-node . 236))
(631 (lookup . 236))
(632 (bind1 . 236))
(633 (bind . 236))
(634 (literal? . 236))
(635 (number-of-required-args . 236))
(636 (n-ary? . 236))
(637 (normalize-formals . 236))
(638 (syntax? . 236))
(639 (name? . 236))
(640 (unbound? . 236))
(641 ($source-file-name . 236))
(642 (define-usual-suspects . 236))
(643 (process-syntax . 236))
(644 (bind-evaluator-for-syntax . 236))
(645 (evaluator-for-syntax . 236))
(646 (*evaluator-for-syntax-key* . 236))
(647 (scan-body . 236))
(648 (scan-body-forms . 236))
(649 (body-lossage . 236))
(650 (begin-node? . 236))
(651 (define-node? . 236))
(652 (schemify . 236))
(653 (schemifiers . 236))
(654 (define-schemifier . 236))
(655 (ok-number-of-args? . 236))
(656 (make-population . 230))
(657 (add-to-population! . 230))
(658 (population-reduce . 230))
(659 (population->list . 230))
(660 (walk-population . 230))
(661 (type/signature . 235))
(662 (really-make-signature . 235))
(663 (signature-name . 235))
(664 (signature-clients . 235))
(665 (walk-method . 235))
(666 (ref-method . 235))
(667 (signature? . 235))
(668 (signature-ref . 235))
(669 (for-each-declaration . 235))
(670 (note-reference-to-signature! . 235))
(671 (make-signature . 235))
(672 (make-simple-signature . 235))
(673 (really-make-simple-signature . 235))
(674 (make-compound-signature . 235))
(675 (type/structure . 239))
(676 (really-make-structure . 239))
(677 (structure-name . 239))
(678 (structure-clients . 239))
(679 (structure-package . 239))
(680 (structure-signature-really . 239))
(681 (set-structure-signature! . 239))
(682 (structure-signature-thunk . 239))
(683 (structure? . 239))
(684 (structure-signature . 239))
(685 (initialize-structure! . 239))
(686 (make-structure . 239))
(687 (structure-unstable? . 239))
(688 (for-each-export . 239))
(689 (type/package . 239))
(690 (really-make-package . 239))
(691 (package-loaded? . 239))
(692 (set-package-loaded?! . 239))
(693 (package-cached . 239))
(694 (package-seen . 239))
(695 (package-clients . 239))
(696 (package-plist . 239))
(697 (set-package-plist! . 239))
(698 (package-clauses . 239))
(699 (package-file-name . 239))
(700 (package-integrate? . 239))
(701 (set-package-integrate?! . 239))
(702 (package-for-syntax-promise . 239))
(703 (package-evaluator . 239))
(704 (package-get-location . 239))
(705 (set-package-get-location! . 239))
(706 (package-definitions . 239))
(707 (package-accesses-thunk . 239))
(708 (package-opens-thunk . 239))
(709 (set-package-opens-thunk! . 239))
(710 (package-opens-really . 239))
(711 (set-package-opens! . 239))
(712 (package-uid . 239))
(713 (package? . 239))
(714 (make-package . 239))
(715 (package-for-syntax . 239))
(716 (new-package-uid . 239))
(717 (*package-uid* . 239))
(718 (package-name-table . 239))
(719 (package-name . 239))
(720 (set-package-name! . 239))
(721 (make-simple-package . 239))
(722 (package-opens . 239))
(723 (package-accesses . 239))
(724 (package-unstable? . 239))
(725 (package-definition . 239))
(726 (package-define! . 239))
(727 (really-package-define! . 239))
(728 (package-lookup . 239))
(729 (really-package-lookup . 239))
(730 (structure-lookup . 239))
(731 (lookup-generated-name . 239))
(732 (generic-lookup . 239))
(733 (package->environment . 239))
(734 (package-lookup-type . 239))
(735 (initialize-package! . 239))
(736 (initialize-reified-package! . 239))
(737 (for-each-definition . 239))
(738 (get-new-location . 239))
(739 (make-new-location . 239))
(740 ($get-location . 239))
(741 (*location-uid* . 239))
(742 (location-info-table . 239))
(743 (flush-location-names . 239))
(744 (package-get . 239))
(745 (package-put! . 239))
(746 (package-note-caching . 239))
(747 (environment-ref . 246))
(748 (environment-set! . 246))
(749 (environment-define! . 246))
(750 (*structure-ref . 246))
(751 (contents-carefully . 246))
(752 ($interaction-environment . 246))
(753 (interaction-environment . 246))
(754 (set-interaction-environment! . 246))
(755 (with-interaction-environment . 246))
(756 (scheme-report-environment . 246))
(757 (*scheme-report-environment* . 246))
(758 (*scheme-report-number* . 246))
(759 (set-scheme-report-environment! . 246))
(760 (make-package-for-syntax . 246))
(761 (the-usual-transforms . 237))
(762 (define-usual-macro . 237))
(763 (usual-transform . 237))
(764 (process-rules . 237))
(765 (segment-pattern? . 237))
(766 (segment-template? . 237))
(767 (indicators-for-zero-or-more . 237))
(768 (find-free-names-in-syntax-rules . 237))
(769 (namestring . 233))
(770 (directory-component-separator . 233))
(771 (type-component-separator . 233))
(772 (namestring-component . 233))
(773 (file-name-preferred-case . 233))
(774 (*scheme-file-type* . 233))
(775 (*load-file-type* . 233))
(776 (file-name-directory . 233))
(777 (file-name-nondirectory . 233))
(778 (file-nondirectory-position . 233))
(779 (string-posq . 233))
(780 (*translations* . 233))
(781 (translations . 233))
(782 (set-translation! . 233))
(783 (translate . 233))
(784 ($note-file-package . 240))
(785 (scan-forms . 240))
(786 (scan-file . 240))
(787 (scan-form-list . 240))
(788 (scan-form . 240))
(789 (process-define-syntax . 240))
(790 (eval-for-syntax . 240))
(791 (scan-structures . 240))
(792 (scan-package . 240))
(793 (optimize . 240))
(794 (check-structure . 240))
(795 (initialize-usual-transforms! . 240))
(796 (define-all-operators . 240))
(797 (make-define-primitive-node . 240))
(798 (optimizers-table . 240))
(799 (get-optimizer . 240))
(800 (set-optimizer! . 240))
(801 ($note-undefined . 240))
(802 (note-undefined! . 240))
(803 (noting-undefined-variables . 240))
(804 (enumerand->name . 219))
(805 (name->enumerand . 219))
(806 (definitely-name->enumerand . 219))
(807 (define-enumeration . 219))
(808 (enum . 219))
(809 (bits-used-per-byte . 220))
(810 (maximum-stack-args . 220))
(811 (define-instruction-set . 220))
(812 (op/intern . 220))
(813 (op/reverse-list->string . 220))
(814 (op/string-hash . 220))
(815 (op/string=? . 220))
(816 (op/vm-return . 220))
(817 (op/vm-extension . 220))
(818 (op/time . 220))
(819 (op/external-call . 220))
(820 (op/external-lookup . 220))
(821 (op/schedule-interrupt . 220))
(822 (op/return-from-interrupt . 220))
(823 (op/set-enabled-interrupts! . 220))
(824 (op/set-interrupt-handlers! . 220))
(825 (op/set-exception-handler! . 220))
(826 (op/set-dynamic-state! . 220))
(827 (op/get-dynamic-state . 220))
(828 (op/find-all-xs . 220))
(829 (op/find-all-symbols . 220))
(830 (op/memory-status . 220))
(831 (op/collect . 220))
(832 (op/write-image . 220))
(833 (op/false . 220))
(834 (op/trap . 220))
(835 (op/unspecific . 220))
(836 (op/unassigned . 220))
(837 (op/force-output . 220))
(838 (op/write-string . 220))
(839 (op/write-char . 220))
(840 (op/char-ready? . 220))
(841 (op/peek-char . 220))
(842 (op/read-char . 220))
(843 (op/output-port? . 220))
(844 (op/input-port? . 220))
(845 (op/close-port . 220))
(846 (op/open-port . 220))
(847 (op/make-immutable! . 220))
(848 (op/immutable? . 220))
(849 (op/set-location-defined?! . 220))
(850 (op/location-defined? . 220))
(851 (op/stored-object-indexed-char-set! . 220))
(852 (op/stored-object-indexed-byte-set! . 220))
(853 (op/stored-object-indexed-set! . 220))
(854 (op/stored-object-indexed-char-ref . 220))
(855 (op/stored-object-indexed-byte-ref . 220))
(856 (op/stored-object-indexed-ref . 220))
(857 (op/stored-object-set! . 220))
(858 (op/stored-object-ref . 220))
(859 (op/stored-object-byte-length . 220))
(860 (op/stored-object-length . 220))
(861 (op/stored-object-has-type? . 220))
(862 (op/make-char-vector-object . 220))
(863 (op/make-byte-vector-object . 220))
(864 (op/make-vector-object . 220))
(865 (op/make-stored-object . 220))
(866 (op/eof-object? . 220))
(867 (op/ascii->char . 220))
(868 (op/char->ascii . 220))
(869 (op/char<? . 220))
(870 (op/char=? . 220))
(871 (op/char? . 220))
(872 (op/arithmetic-shift . 220))
(873 (op/bitwise-xor . 220))
(874 (op/bitwise-ior . 220))
(875 (op/bitwise-and . 220))
(876 (op/bitwise-not . 220))
(877 (op/make-rectangular . 220))
(878 (op/make-polar . 220))
(879 (op/magnitude . 220))
(880 (op/angle . 220))
(881 (op/sqrt . 220))
(882 (op/atan . 220))
(883 (op/acos . 220))
(884 (op/asin . 220))
(885 (op/tan . 220))
(886 (op/cos . 220))
(887 (op/sin . 220))
(888 (op/log . 220))
(889 (op/exp . 220))
(890 (op/imag-part . 220))
(891 (op/real-part . 220))
(892 (op/denominator . 220))
(893 (op/numerator . 220))
(894 (op/floor . 220))
(895 (op/remainder . 220))
(896 (op/quotient . 220))
(897 (op/< . 220))
(898 (op/= . 220))
(899 (op// . 220))
(900 (op/- . 220))
(901 (op/* . 220))
(902 (op/+ . 220))
(903 (op/inexact->exact . 220))
(904 (op/exact->inexact . 220))
(905 (op/exact? . 220))
(906 (op/complex? . 220))
(907 (op/real? . 220))
(908 (op/rational? . 220))
(909 (op/integer? . 220))
(910 (op/number? . 220))
(911 (op/eq? . 220))
(912 (op/computed-goto . 220))
(913 (op/jump . 220))
(914 (op/jump-if-false . 220))
(915 (op/call-template . 220))
(916 (op/goto-template . 220))
(917 (op/ignore-values . 220))
(918 (op/return-values . 220))
(919 (op/values . 220))
(920 (op/return . 220))
(921 (op/call-with-values . 220))
(922 (op/with-continuation . 220))
(923 (op/apply . 220))
(924 (op/move-args-and-call . 220))
(925 (op/call . 220))
(926 (op/get-cont-from-heap . 220))
(927 (op/current-cont . 220))
(928 (op/make-cont . 220))
(929 (op/stack-set! . 220))
(930 (op/stack-ref . 220))
(931 (op/pop . 220))
(932 (op/push . 220))
(933 (op/closure . 220))
(934 (op/set-global! . 220))
(935 (op/global . 220))
(936 (op/set-local! . 220))
(937 (op/local2 . 220))
(938 (op/local1 . 220))
(939 (op/local0 . 220))
(940 (op/local . 220))
(941 (op/literal . 220))
(942 (op/make-rest-list . 220))
(943 (op/pop-env . 220))
(944 (op/make-heap-env . 220))
(945 (op/make-env . 220))
(946 (op/nargs . 220))
(947 (op/check-nargs>= . 220))
(948 (op/check-nargs= . 220))
(949 (op-count . 220))
(950 (op . 220))
(951 (opcode-arg-specs . 220))
(952 (interrupt/memory-shortage . 220))
(953 (interrupt/keyboard . 220))
(954 (interrupt/alarm . 220))
(955 (interrupt-count . 220))
(956 (interrupt . 220))
(957 (time-option/real-time . 220))
(958 (time-option/run-time . 220))
(959 (time-option/ticks-per-second . 220))
(960 (time-option-count . 220))
(961 (time-option . 220))
(962 (memory-status-option/gc-count . 220))
(963 (memory-status-option/set-minimum-recovered-space! . 220))
(964 (memory-status-option/stack-size . 220))
(965 (memory-status-option/heap-size . 220))
(966 (memory-status-option/available . 220))
(967 (memory-status-option-count . 220))
(968 (memory-status-option . 220))
(969 (stob/bignum . 220))
(970 (stob/double . 220))
(971 (stob/code-vector . 220))
(972 (stob/string . 220))
(973 (stob/unused-d-header2 . 220))
(974 (stob/unused-d-header1 . 220))
(975 (stob/external . 220))
(976 (stob/weak-pointer . 220))
(977 (stob/template . 220))
(978 (stob/extended-number . 220))
(979 (stob/continuation . 220))
(980 (stob/record . 220))
(981 (stob/ratio . 220))
(982 (stob/port . 220))
(983 (stob/location . 220))
(984 (stob/closure . 220))
(985 (stob/vector . 220))
(986 (stob/symbol . 220))
(987 (stob/pair . 220))
(988 (stob-count . 220))
(989 (stob . 220))
(990 (stob-data . 220))
(991 (node-type . 238))
(992 (reconstruct . 238))
(993 (reconstructors . 238))
(994 (define-reconstructor . 238))
(995 (operator/name . 238))
(996 (reconstruct-call . 238))
(997 (node->type . 238))
(998 (constrain-call! . 238))
(999 (constrain! . 238))
(1000 (call-node? . 238))
(1001 (name-node? . 238))
(1002 (begin-node? . 238))
(1003 (reconstruct-apply . 238))
(1004 (zero-type . 238))
(1005 (escape-type . 238))
(1006 (declare-operator-type . 238))
(1007 (last . 238))
(1008 (constant-type . 238))
(1009 (template-overhead . 222))
(1010 (template-code . 222))
(1011 (template-info . 222))
(1012 (set-template-code! . 222))
(1013 (set-template-info! . 222))
(1014 (make-segment . 241))
(1015 (segment-size . 241))
(1016 (segment-emitter . 241))
(1017 (segment->template . 241))
(1018 (segment-data->template . 241))
(1019 (type/assembly-state . 241))
(1020 (make-assembly-state . 241))
(1021 (astate-literals . 241))
(1022 (set-astate-literals! . 241))
(1023 (astate-count . 241))
(1024 (set-astate-count! . 241))
(1025 (astate-pc . 241))
(1026 (set-astate-pc! . 241))
(1027 (astate-code-vector . 241))
(1028 (make-astate . 241))
(1029 (emit-byte! . 241))
(1030 (emit-literal! . 241))
(1031 (emit-segment! . 241))
(1032 (empty-segment . 241))
(1033 (instruction . 241))
(1034 (sequentially . 241))
(1035 (sequentially-2 . 241))
(1036 (instruction-with-literal . 241))
(1037 (instruction-with-location . 241))
(1038 (instruction-with-template . 241))
(1039 (make-label . 241))
(1040 (instruction-using-label . 241))
(1041 (attach-label . 241))
(1042 (byte-limit . 241))
(1043 ($debug-data . 241))
(1044 (note-source-code . 241))
(1045 (note-environment . 241))
(1046 (emit-with-environment-maps! . 241))
(1047 ($environment-maps . 241))
(1048 (environment-maps-table . 241))
(1049 (new-template-uid . 241))
(1050 (*template-uid* . 241))
(1051 (template-uid . 241))
(1052 (set-template-uid! . 241))
(1053 (debug-flag-names . 241))
(1054 (type/debug-flags . 241))
(1055 (make-debug-flags . 241))
(1056 ($debug-flags . 241))
(1057 (debug-flag-accessor . 241))
(1058 (debug-flag-modifier . 241))
(1059 (keep-source-code? . 241))
(1060 (keep-environment-maps? . 241))
(1061 (keep-procedure-names? . 241))
(1062 (keep-file-names? . 241))
(1063 (tabulate-debug-data? . 241))
(1064 (debug-data-table . 241))
(1065 (with-fresh-compiler-state . 241))
(1066 (saving-and-restoring . 241))
(1067 (debug-data-type . 241))
(1068 (make-debug-data . 241))
(1069 (debug-data-source . 241))
(1070 (set-debug-data-source! . 241))
(1071 (debug-data-env-maps . 241))
(1072 (set-debug-data-env-maps! . 241))
(1073 (debug-data-pc-in-parent . 241))
(1074 (debug-data-parent . 241))
(1075 (debug-data-name . 241))
(1076 (debug-data-uid . 241))
(1077 (debug-data? . 241))
(1078 (new-debug-data . 241))
(1079 (debug-data->info . 241))
(1080 (get-debug-data . 241))
(1081 (note-debug-data! . 241))
(1082 (interesting-debug-data? . 241))
(1083 (debug-data-names . 241))
(1084 (template-debug-data . 241))
(1085 (template-id . 241))
(1086 (template-name . 241))
(1087 (template-names . 241))
(1088 (compile-top . 242))
(1089 (compile . 242))
(1090 (*type-check?* . 242))
(1091 (compilators . 242))
(1092 (define-compilator . 242))
(1093 (compile-constant . 242))
(1094 (compile-begin . 242))
(1095 (compile-call . 242))
(1096 (lambda-node? . 242))
(1097 (compile-redex . 242))
(1098 (compile-unknown-call . 242))
(1099 (maybe-push-continuation . 242))
(1100 (push-arguments . 242))
(1101 (push-all-with-names . 242))
(1102 (compile-lambda . 242))
(1103 (compile-lambda-code . 242))
(1104 (compile-letrec . 242))
(1105 (compile-body . 242))
(1106 (operator/letrec . 242))
(1107 (make-cont . 242))
(1108 (cont-segment . 242))
(1109 (cont-source-info . 242))
(1110 (return-cont-segment . 242))
(1111 (return-cont . 242))
(1112 (return-cont? . 242))
(1113 (fall-through-cont . 242))
(1114 (fall-through-cont? . 242))
(1115 (ignore-values-segment . 242))
(1116 (ignore-values-cont . 242))
(1117 (ignore-values-cont? . 242))
(1118 (deliver-value . 242))
(1119 (named-cont . 242))
(1120 (cont-name . 242))
(1121 (bind-vars . 242))
(1122 (initial-cenv . 242))
(1123 (environment-level . 242))
(1124 (*level-key* . 242))
(1125 (name-node-binding . 242))
(1126 (generate-trap . 242))
(1127 (careful-sequentially . 242))
(1128 (large-segment-size . 242))
(1129 (op/call . 242))
(1130 (op/check-nargs= . 242))
(1131 (op/check-nargs>= . 242))
(1132 (op/closure . 242))
(1133 (op/false . 242))
(1134 (op/global . 242))
(1135 (op/ignore-values . 242))
(1136 (op/jump . 242))
(1137 (op/jump-if-false . 242))
(1138 (op/literal . 242))
(1139 (op/local . 242))
(1140 (op/local0 . 242))
(1141 (op/local1 . 242))
(1142 (op/local2 . 242))
(1143 (op/make-cont . 242))
(1144 (op/make-env . 242))
(1145 (op/make-rest-list . 242))
(1146 (op/push . 242))
(1147 (op/return . 242))
(1148 (op/set-global! . 242))
(1149 (op/set-local! . 242))
(1150 (op/trap . 242))
(1151 (op/unspecific . 242))
(1152 (type-check . 242))
(1153 (report-type-error . 242))
(1154 (define-compiler-primitive . 242))
(1155 (closed-compilators . 242))
(1156 (define-closed-compilator . 242))
(1157 (get-closed-compilator . 242))
(1158 (direct-compilator . 242))
(1159 (direct-closed-compilator . 242))
(1160 (nargs->domain . 242))
(1161 (checked-compilator . 242))
(1162 (define-simple-primitive . 242))
(1163 (simple-compilator . 242))
(1164 (simple-closed-compilator . 242))
(1165 (define-data-struct-primitives . 242))
(1166 (op/stored-object-has-type? . 242))
(1167 (op/make-stored-object . 242))
(1168 (op/stored-object-ref . 242))
(1169 (op/stored-object-set! . 242))
(1170 (op/make-byte-vector-object . 242))
(1171 (op/make-char-vector-object . 242))
(1172 (op/make-vector-object . 242))
(1173 (define-vector-primitives . 242))
(1174 (op/stored-object-byte-length . 242))
(1175 (op/stored-object-indexed-byte-ref . 242))
(1176 (op/stored-object-indexed-byte-set! . 242))
(1177 (op/stored-object-indexed-char-ref . 242))
(1178 (op/stored-object-indexed-char-set! . 242))
(1179 (op/stored-object-indexed-ref . 242))
(1180 (op/stored-object-indexed-set! . 242))
(1181 (op/stored-object-length . 242))
(1182 (define-n-ary-compiler-primitive . 242))
(1183 (n-ary-primitive-compilator . 242))
(1184 (push-all-but-last . 242))
(1185 (op/apply . 242))
(1186 (op/call-with-values . 242))
(1187 (op/current-cont . 242))
(1188 (op/external-call . 242))
(1189 (op/pop . 242))
(1190 (op/return-values . 242))
(1191 (op/stack-ref . 242))
(1192 (op/values . 242))
(1193 (compile-form . 242))
(1194 (compile-file . 242))
(1195 (compile-and-run-forms . 242))
(1196 (compile-and-run-file . 242))
(1197 (compile-and-run-scanned-forms . 242))
(1198 (compile-scanned-forms . 242))
(1199 (compile-scanned-form . 242))
(1200 (compile-definition . 242))
(1201 (prepare-cenv . 242))
(1202 (cenv-package . 242))
(1203 (*the-package* . 242))
(1204 (define-node? . 242))
(1205 (get-location . 242))
(1206 (location-for-undefined . 242))
(1207 (package-accessor-on-demand . 242))
(1208 (location-on-demand . 242))
(1209 (package-undefineds . 242))
(1210 (location-for-reference . 242))
(1211 (package-undefined-but-assigneds . 242))
(1212 (location-for-assignment . 242))
(1213 (note-caching . 242))
(1214 (grumble . 242))
(1215 (make-startup-procedure . 242))
(1216 (an-ignore-values-cont . 242))
(1217 (eval . 247))
(1218 (load . 247))
(1219 (eval-from-file . 247))
(1220 (eval-scanned-forms . 247))
(1221 (invoke-template . 247))
(1222 (continuation-cont . 223))
(1223 (continuation-pc . 223))
(1224 (continuation-template . 223))
(1225 (continuation-env . 223))
(1226 (continuation-overhead . 223))
(1227 (continuation-arg . 223))
(1228 (continuation-arg-count . 223))
(1229 (continuation-parent . 223))
(1230 (usual-exception-handler . 224))
(1231 (define-exception-handler . 224))
(1232 (signal-exception . 224))
(1233 (exception-handlers . 224))
(1234 (make-opcode-generic! . 224))
(1235 (really-signal-condition . 224))
(1236 (with-handler . 224))
(1237 ($condition-handlers . 224))
(1238 (initialize-exceptions! . 224))
(1239 (last-resort-condition-handler . 224))
(1240 (report-utter-lossage . 224))
(1241 (ignore-errors . 224))
(1242 (continuation-preview . 224))
(1243 (*wna-handlers* . 224))
(1244 (define-wna-handler . 224))
(1245 (op/check-nargs= . 224))
(1246 (wna-lose . 224))
(1247 (comparison-wna . 224))
(1248 (display-condition . 231))
(1249 (really-display-condition . 231))
(1250 (*depth* . 231))
(1251 (*length* . 231))
(1252 (disclose-condition-methods . 231))
(1253 (disclose-condition . 231))
(1254 (limited-write . 231))
(1255 (command-processor . 249))
(1256 (mini-load . 249))
(1257 (read-string . 249))
(1258 (interrupt-handlers . 225))
(1259 (initialize-interrupts! . 225))
(1260 (time-option/ticks-per-second . 225))
(1261 (one-second . 225))
(1262 (no-interrupts . 225))
(1263 (all-interrupts . 225))
(1264 (with-interrupts-inhibited . 225))
(1265 (with-interrupts-allowed . 225))
(1266 (with-interrupts . 225))
(1267 (enabled-interrupts . 225))
(1268 (interrupt-before-heap-overflow! . 225))
(1269 (interrupt/memory-shortage . 225))
(1270 (memory-status-option/set-minimum-recovered-space! . 225))
(1271 (memory-status-option/heap-size . 225))
(1272 (usual-resumer . 229))
(1273 (start . 250))
(1274 (make-built-in-structures . 250))
(1275 (scheme-for-syntax . 250))
(1276 (initialize-interaction-environment! . 250))
(1277 (make-initial-package . 250))
(1278 (make-env-for-syntax-promise . 250))
(1279 (inline-transform . 245))
(1280 (make-substitution . 245))
(1281 (substitute . 245))
(1282 (qualified? . 245))
(1283 (qualified->name . 245))
(1284 (get-qualified-env . 245))
(1285 (name->qualified . 245))
(1286 (qlookup . 245))
(1287 (generic-lookup . 245))
(1288 (syntax . 244))
(1289 (any-values . 244))
(1290 (some-values . 244))
(1291 (value . 244))
(1292 (variable . 244))
(1293 (procedure . 244))
(1294 (boolean . 244))
(1295 (pair . 244))
(1296 (number . 244))
(1297 (unspecific . 244))
(1298 (char . 244))
(1299 (structure . 244))
(1300 (type . 244))
(1301 (define-modular . 243))
(1302 (define-values . 243))
(1303 (define-signature . 243))
(1304 (a-signature . 243))
(1305 (really-export . 243))
(1306 (define-structure . 243))
(1307 (define-package . 243))
(1308 (a-package . 243))
(1309 (define-module . 243))
(1310 (make-a-package . 243))
(1311 (init-defpackage! . 243))
(1312 (loser . 243))
(1313 (*evaluator* . 243))
(1314 (*make-package-for-syntax-promise* . 243))
(1315 (signature-of . 243))
(1316 (*verify-later!* . 243))
(1317 (verify-later! . 243))
(1318 (set-verify-later! . 243))
(1319 (ensure-loaded . 251))
-
; Template uid -> name, parent, pc in parent, env maps
(1 current-cont 0 4 ())
(2 closure-template 0 12 ())
(3 continuation-ref 0 20 ())
(4 output-port? 0 28 ())
(5 closure? 0 36 ())
(6 complex? 0 44 ())
(7 arithmetic-shift 0 52 ())
(8 signal-condition 0 60 ())
(9 integer? 0 68 ())
(10 make-closure 0 76 ())
(11 template-ref 0 84 ())
(12 make-rectangular 0 92 ())
(13 string=? 0 100 ())
(14 extended-number? 0 108 ())
(15 reverse-list->string 0 116 ())
(16 denominator 0 124 ())
(17 call-with-values 0 132 ())
(18 weak-pointer-ref 0 140 ())
(19 find-all-symbols 0 148 ())
(20 code-vector? 0 156 ())
(21 pop 0 164 ())
(22 exp 0 172 ())
(23 sin 0 180 ())
(24 make-extended-number 0 188 ())
(25 cos 0 196 ())
(26 collect 0 204 ())
(27 external-lookup 0 212 ())
(28 tan 0 220 ())
(29 log 0 228 ())
(30 continuation-length 0 236 ())
(32 make-code-vector 31 4 ())
(33 cdr 31 12 ())
(34 bitwise-xor 31 20 ())
(35 car 31 28 ())
(36 string? 31 36 ())
(37 symbol? 31 44 ())
(38 set-cdr! 31 52 ())
(39 bitwise-not 31 60 ())
(40 vector? 31 68 ())
(41 closure-env 31 76 ())
(42 set-car! 31 84 ())
(43 bitwise-ior 31 92 ())
(44 number? 31 100 ())
(45 template-length 31 108 ())
(46 string-hash 31 116 ())
(47 pop-env 31 124 ())
(48 primitive-catch 31 132 ())
(49 make-string 31 140 ())
(50 input-port? 31 148 ())
(51 record? 31 156 ())
(52 make-vector 31 164 ())
(53 extended-number-set! 31 172 ())
(54 write-image 31 180 ())
(55 eq? 31 188 ())
(56 bitwise-and 31 196 ())
(57 location-id 31 204 ())
(58 code-vector-set! 31 212 ())
(59 make-record 31 220 ())
(60 intern 31 228 ())
(61 values 31 236 ())
(62 unassigned 31 244 ())
(63 string-set! 31 252 ())
(64 vector-set! 31 260 ())
(65 extended-number-ref 31 268 ())
(66 unspecific 31 276 ())
(67 schedule-interrupt 31 284 ())
(68 code-vector-ref 31 292 ())
(69 find-all-xs 31 300 ())
(70 char-ready? 31 308 ())
(71 set-interrupt-handlers! 31 316 ())
(72 eof-object? 31 324 ())
(73 record-set! 31 332 ())
(74 ascii->char 31 340 ())
(75 char->ascii 31 348 ())
(76 set-enabled-interrupts! 31 356 ())
(77 external-value 31 364 ())
(78 make-immutable! 31 372 ())
(79 close-port 31 380 ())
(80 string-ref 31 388 ())
(81 immutable? 31 396 ())
(82 vector-ref 31 404 ())
(83 exact? 31 412 ())
(84 write-char 31 420 ())
(85 symbol->string 31 428 ())
(86 make-polar 31 436 ())
(87 record-ref 31 444 ())
(88 numerator 31 452 ())
(89 extended-number-length 31 460 ())
(90 error 31 468 ())
(91 exact->inexact 31 476 ())
(92 inexact->exact 31 484 ())
(93 apply 31 492 ())
(94 memory-status 31 500 ())
(96 code-vector-length 95 4 ())
(97 floor 95 12 ())
(98 with-continuation 95 20 ())
(99 magnitude 95 28 ())
(100 nargs 95 36 ())
(101 char=? 95 44 ())
(102 char<? 95 52 ())
(103 continuation? 95 60 ())
(104 remainder 95 68 ())
(105 vm-return 95 76 ())
(106 false 95 84 ())
(107 angle 95 92 ())
(108 open-port 95 100 ())
(109 string-length 95 108 ())
(110 external? 95 116 ())
(111 make-continuation 95 124 ())
(112 vector-length 95 132 ())
(113 template? 95 140 ())
(114 rational? 95 148 ())
(115 location? 95 156 ())
(116 external-name 95 164 ())
(117 set-exception-handler! 95 172 ())
(118 pair? 95 180 ())
(119 make-external 95 188 ())
(120 record-length 95 196 ())
(121 external-call 95 204 ())
(122 set-dynamic-state! 95 212 ())
(123 get-cont-from-heap 95 220 ())
(124 real-part 95 228 ())
(125 real? 95 236 ())
(126 make-template 95 244 ())
(127 imag-part 95 252 ())
(128 make-location 95 260 ())
(129 = 95 268 ())
(130 < 95 276 ())
(131 char? 95 284 ())
(132 quotient 95 292 ())
(133 / 95 300 ())
(134 weak-pointer? 95 308 ())
(135 - 95 316 ())
(136 continuation-set! 95 324 ())
(137 peek-char 95 332 ())
(138 + 95 340 ())
(139 * 95 348 ())
(140 contents 95 356 ())
(141 sqrt 95 364 ())
(142 read-char 95 372 ())
(143 set-contents! 95 380 ())
(144 push 95 388 ())
(145 make-weak-pointer 95 396 ())
(146 get-dynamic-state 95 404 ())
(147 trap 95 412 ())
(148 cons 95 420 ())
(149 template-set! 95 428 ())
(150 time 95 436 ())
(151 location-defined? 95 444 ())
(152 asin 95 452 ())
(153 write-string 95 460 ())
(154 vm-extension 95 468 ())
(155 force-output 95 476 ())
(156 acos 95 484 ())
(157 set-location-defined?! 95 492 ())
(158 atan 95 500 ())
(160 invoke-closure 159 44 (#(7 14 #(closure args) ())))
(161 primitive-cwcc 159 52 (#(4 10 #(p) ())))
(162 #f 161 7 (#(4 11 #(cont) ())))
(163 make-undefined-location 159 60 (#(4 22 #(id) (#(14 22 #(loc) ())))))
(164 location-assigned? 159 68 (#(4 20 #(loc) ())))
(165 vector-unassigned? 159 76 (#(4 15 #(v i) ())))
(166 string-copy 159 84 (#(4 37 #(s) (#(11 37 #(z) (#(21 37 #(copy) (#(25 37 #(loop) ())))))))))
(167 loop 166 26 (#(4 44 #(i) ())))
(168 string->symbol 159 92 (#(4 31 #(string) ())))
(169 really-string->symbol 159 100 (#(4 46 #(string) (#(40 46 #(sym) ())))))
(170 flush-the-symbol-table! 159 115 ())
(171 restore-the-symbol-table! 159 123 ())
(172 maybe-open-input-file 159 143 (#(4 11 #(string) ())))
(173 maybe-open-output-file 159 151 (#(4 11 #(string) ())))
(174 open-input-file 159 159 (#(4 43 #(string) (#(13 43 #(temp##0) ())))))
(175 open-output-file 159 167 (#(4 43 #(string) (#(13 43 #(temp##1) ())))))
(177 signal 176 12 (#(7 17 #(type stuff) ())))
(178 warn 176 20 (#(7 23 #(message irritants) ())))
(179 syntax-error 176 28 (#(5 17 #(rest) ())))
(180 call-error 176 36 (#(7 29 #(message proc args) ())))
(182 not 181 4 (#(4 14 #(x) ())))
(183 boolean? 181 12 (#(4 27 #(x) (#(13 27 #(temp##2) ())))))
(184 eqv? 181 20 (#(4 57 #(x y) (#(13 57 #(temp##3) ())))))
(185 equal? 181 28 (#(4 158 #(obj1 obj2) (#(125 154 #(z) (#(140 152 #(loop) ())))))))
(186 loop 185 141 (#(4 58 #(i) ())))
(187 > 181 36 (#(4 11 #(x y) ())))
(188 <= 181 44 (#(4 18 #(x y) ())))
(189 >= 181 52 (#(4 18 #(x y) ())))
(190 max 181 60 (#(7 20 #(first rest) ())))
(191 #f 190 8 (#(4 19 #(x y) ())))
(192 min 181 68 (#(7 20 #(first rest) ())))
(193 #f 192 8 (#(4 19 #(x y) ())))
(194 abs 181 76 (#(4 23 #(n) ())))
(195 zero? 181 84 (#(4 11 #(x) ())))
(196 positive? 181 92 (#(4 11 #(x) ())))
(197 negative? 181 100 (#(4 11 #(x) ())))
(198 even? 181 108 (#(4 15 #(n) ())))
(199 odd? 181 116 (#(4 22 #(n) ())))
(200 caar 181 124 (#(4 13 #(x) ())))
(201 cadr 181 132 (#(4 13 #(x) ())))
(202 cdar 181 140 (#(4 13 #(x) ())))
(203 cddr 181 148 (#(4 13 #(x) ())))
(204 caaar 181 156 (#(4 16 #(x) ())))
(205 caadr 181 164 (#(4 16 #(x) ())))
(206 cadar 181 172 (#(4 16 #(x) ())))
(207 caddr 181 180 (#(4 16 #(x) ())))
(208 cdaar 181 188 (#(4 16 #(x) ())))
(209 cdadr 181 196 (#(4 16 #(x) ())))
(210 cddar 181 204 (#(4 16 #(x) ())))
(211 cdddr 181 212 (#(4 16 #(x) ())))
(212 caaaar 181 220 (#(4 19 #(x) ())))
(213 caaadr 181 228 (#(4 19 #(x) ())))
(214 caadar 181 236 (#(4 19 #(x) ())))
(215 caaddr 181 244 (#(4 19 #(x) ())))
(216 cadaar 181 252 (#(4 19 #(x) ())))
(217 cadadr 181 260 (#(4 19 #(x) ())))
(218 caddar 181 268 (#(4 19 #(x) ())))
(219 cadddr 181 276 (#(4 19 #(x) ())))
(220 cdaaar 181 284 (#(4 19 #(x) ())))
(221 cdaadr 181 292 (#(4 19 #(x) ())))
(222 cdadar 181 300 (#(4 19 #(x) ())))
(223 cdaddr 181 308 (#(4 19 #(x) ())))
(224 cddaar 181 316 (#(4 19 #(x) ())))
(225 cddadr 181 324 (#(4 19 #(x) ())))
(226 cdddar 181 332 (#(4 19 #(x) ())))
(227 cddddr 181 340 (#(4 19 #(x) ())))
(228 null? 181 348 (#(4 11 #(x) ())))
(229 list 181 356 (#(5 8 #(l) ())))
(230 length 181 364 (#(4 17 #(l) ())))
(231 #f 230 5 (#(4 11 #(ignore n) ())))
(232 append 181 372 (#(5 33 #(lists) (#(21 33 #(recur) ())))))
(233 recur 232 22 (#(4 50 #(lists) ())))
(234 reverse 181 380 (#(4 14 #(list) ())))
(235 append-reverse 181 388 (#(4 38 #(list seed) ())))
(236 list-tail 181 396 (#(4 33 #(l i) ())))
(237 list-ref 181 404 (#(4 22 #(l k) ())))
(238 mem 181 412 (#(4 7 #(pred) ())))
(239 #f 238 5 (#(4 20 #(obj l) (#(8 20 #(loop) ())))))
(240 loop 239 9 (#(4 49 #(l) ())))
(242 ass 241 21 (#(4 7 #(pred) ())))
(243 #f 242 5 (#(4 20 #(obj l) (#(8 20 #(loop) ())))))
(244 loop 243 9 (#(4 55 #(l) ())))
(245 assq 241 63 (#(4 49 #(x l) ())))
(246 list? 241 71 (#(4 23 #(l) (#(8 23 #(recur) ())))))
(247 recur 246 9 (#(4 105 #(l lag) (#(13 105 #(temp##5) (#(40 103 #(temp##4) ())))))))
(248 char>? 241 79 (#(4 11 #(x y) ())))
(249 char>=? 241 87 (#(4 18 #(x y) ())))
(250 char<=? 241 95 (#(4 18 #(x y) ())))
(251 char-whitespace? 241 103 (#(4 27 #(c) ())))
(252 char-lower-case? 241 111 (#(4 38 #(c) ())))
(253 char-upper-case? 241 119 (#(4 38 #(c) ())))
(254 char-numeric? 241 127 (#(4 38 #(c) ())))
(255 char-alphabetic? 241 135 (#(4 33 #(c) (#(18 33 #(temp##6) ())))))
(256 char-upcase 241 157 (#(4 30 #(c) ())))
(257 char-downcase 241 165 (#(4 30 #(c) ())))
(258 char-ci-compare 241 173 (#(4 7 #(pred) ())))
(259 #f 258 5 (#(4 32 #(c1 c2) ())))
(260 string 241 266 (#(5 12 #(rest) ())))
(261 substring 241 274 (#(4 37 #(s start end) (#(18 37 #(new-string) (#(22 37 #(loop##8) ())))))))
(262 loop##7 261 23 (#(4 51 #(i j) ())))
(263 string-append 241 282 (#(5 55 #(strings) (#(25 55 #(len) (#(35 55 #(new-string) (#(39 55 #(loop) ())))))))))
(264 #f 263 10 (#(4 13 #(s n) ())))
(265 loop 263 40 (#(4 51 #(s i) (#(24 51 #(string) (#(31 51 #(l) (#(35 51 #(loop##10) ())))))))))
(266 loop##9 265 36 (#(4 63 #(j i) ())))
(267 string->list 241 290 (#(4 34 #(v) (#(11 34 #(z) (#(15 34 #(loop##12) ())))))))
(268 loop##11 267 16 (#(4 42 #(i l) ())))
(269 list->string 241 298 (#(4 42 #(l) (#(23 42 #(v) (#(27 42 #(loop##14) ())))))))
(270 loop##13 269 28 (#(4 46 #(i l) ())))
(271 string-fill! 241 306 (#(4 27 #(v x) (#(11 27 #(z) (#(15 27 #(loop##16) ())))))))
(272 loop##15 271 16 (#(4 44 #(i) ())))
(273 make-string=? 241 314 (#(4 7 #(char=?) ())))
(274 #f 273 5 (#(4 40 #(s1 s2) (#(11 40 #(z) (#(26 38 #(loop) ())))))))
(275 loop 274 27 (#(4 59 #(i) ())))
(276 make-string<? 241 339 (#(4 7 #(char<? char=?) ())))
(277 #f 276 5 (#(4 49 #(s1 s2) (#(16 49 #(z1 z2) (#(33 49 #(z) (#(37 49 #(loop) ())))))))))
(278 loop 277 38 (#(4 100 #(i) (#(42 100 #(c1 c2) (#(60 100 #(temp##17) ())))))))
(279 string>? 241 387 (#(4 14 #(s1 s2) ())))
(280 string<=? 241 395 (#(4 26 #(s1 s2) ())))
(281 string>=? 241 403 (#(4 26 #(s1 s2) ())))
(282 string-ci>? 241 411 (#(4 14 #(s1 s2) ())))
(283 string-ci<=? 241 419 (#(4 26 #(s1 s2) ())))
(284 string-ci>=? 241 427 (#(4 26 #(s1 s2) ())))
(285 vector 241 435 (#(5 12 #(l) ())))
(286 vector->list 241 443 (#(4 29 #(v) (#(8 29 #(loop##19) ())))))
(287 loop##18 286 9 (#(4 41 #(i l) ())))
(288 list->vector 241 451 (#(4 41 #(l) (#(22 41 #(v) (#(26 41 #(loop##21) ())))))))
(289 loop##20 288 27 (#(4 46 #(i l) ())))
(290 vector-fill! 241 459 (#(4 27 #(v x) (#(11 27 #(z) (#(15 27 #(loop##23) ())))))))
(291 loop##22 290 16 (#(4 44 #(i) ())))
(292 map 241 467 (#(7 39 #(proc first rest) ())))
(293 map1 241 475 (#(4 52 #(proc l) ())))
(294 map2+ 241 483 (#(4 110 #(proc first rest) (#(17 35 #(temp##24) ())))))
(295 for-each 241 491 (#(7 26 #(proc first rest) (#(11 26 #(loop) ())))))
(296 loop 295 12 (#(4 104 #(first rest) (#(17 35 #(temp##25) ())))))
(297 make-promise 241 499 (#(4 11 #(thunk-then-result) (#(8 11 #(already-run?) ())))))
(298 #f 297 9 ())
(299 force 241 507 (#(4 8 #(promise) ())))
(301 unspecific 300 4 ())
(302 reduce 300 12 (#(4 47 #(cons nil list) ())))
(303 filter 300 20 (#(4 17 #(pred lst) ())))
(304 #f 303 5 (#(4 30 #(x rest) ())))
(305 pos 300 28 (#(4 7 #(pred) ())))
(306 #f 305 5 (#(4 23 #(thing l) (#(8 23 #(loop) ())))))
(307 loop 306 9 (#(4 56 #(i l) ())))
(308 any 300 87 (#(4 53 #(pred l) (#(32 53 #(temp##26) ())))))
(309 every 300 95 (#(4 48 #(pred l) ())))
(310 sublist 300 103 (#(4 56 #(l start end) (#(41 56 #(recur) ())))))
(311 recur 310 42 (#(4 47 #(l end) ())))
(312 last 300 111 (#(4 32 #(x) ())))
(314 inexact? 313 4 (#(4 15 #(n) ())))
(315 modulo 313 12 (#(4 49 #(x y) (#(13 49 #(r) ())))))
(316 ceiling 313 20 (#(4 16 #(x) ())))
(317 truncate 313 28 (#(4 29 #(x) ())))
(318 round 313 36 (#(4 68 #(x) (#(17 68 #(x+1/2) (#(23 68 #(r) ())))))))
(319 gcd 313 44 (#(5 18 #(integers) ())))
(320 #f 319 6 (#(4 79 #(x y) ())))
(321 euclid 313 52 (#(4 59 #(x y) ())))
(322 lcm 313 60 (#(5 18 #(integers) ())))
(323 #f 322 6 (#(4 62 #(x y) (#(21 62 #(g) ())))))
(324 expt 313 68 (#(4 39 #(x n) ())))
(325 raise-to-integer-power 313 76 (#(4 64 #(z p) (#(26 41 #(loop##28) ())))))
(326 loop##27 325 27 (#(4 43 #(a p) ())))
(328 rationalize 327 4 (#(4 36 #(x e) (#(18 36 #(e) ())))))
(329 simplest-rational 327 12 (#(4 140 #(x y) (#(8 140 #(simplest-rational-internal) ())))))
(330 simplest-rational-internal 329 9 (#(4 90 #(x y) (#(14 90 #(fx fy) ())))))
(332 make-family 331 4 (#(4 13 #(id prec) ())))
(333 same-family? 331 68 (#(4 32 #(c1 c2) ())))
(334 make-method-table 331 76 (#(4 31 #(id) ())))
(335 #f 334 9 (#(5 18 #(args) ())))
(336 define-method 331 100 (#(4 58 #(disp family method) (#(21 58 #(displace! prec) (#(25 58 #(loop) ())))))))
(337 displace! 336 5 (#(4 21 #(z x y) ())))
(338 loop 336 26 (#(4 138 #(ms cs) ())))
(339 define-default-method 331 108 (#(4 17 #(disp proc) ())))
(340 define-last-method 331 116 (#(4 17 #(disp proc) ())))
(341 make-generic 331 124 (#(4 21 #(disp) (#(18 21 #(ms) ())))))
(342 #f 341 19 (#(5 15 #(args) ())))
(343 perform-dispatch 331 132 (#(4 68 #(ms args) (#(43 68 #(result) ())))))
(344 fail 331 154 ())
(345 #f 331 200 (#(4 6 #(obj) ())))
(346 make-generic-exception-handler 331 211 (#(4 36 #(table opcode signal-exception) (#(33 36 #(ms) ())))))
(347 #f 346 12 (#(5 15 #(args) ())))
(348 #f 346 34 (#(4 14 #(opcode args) ())))
(349 #f #f #f (#(182 216 #(a-minus-ten zero digit->integer do-it string->integer) ()) #(123 152 #(a-minus-10 zero integer->digit integer->string) ())))
(350 #f 349 42 (#(4 74 #(n radix) (#(48 74 #(s) ())))))
(351 #f 349 57 (#(4 17 #(string radix exact?) ())))
(352 number->string 349 102 (#(7 49 #(n radix-or-format-option) ())))
(353 integer->digit 349 140 (#(4 26 #(n) ())))
(354 integer->string 349 145 (#(4 89 #(n radix) (#(53 89 #(magnitude) ()) #(35 50 #(recur) ())))))
(355 recur 354 36 (#(4 59 #(n l) ())))
(356 string->number 349 159 (#(7 186 #(string options) (#(52 186 #(radix) (#(160 186 #(radix) (#(164 186 #(loop) ()))) #(61 157 #(temp##29) ())))))))
(357 loop 356 165 (#(4 231 #(pos exactness? exact? radix? radix) (#(51 199 #(pos) (#(82 199 #(radix-is exactness-is) (#(102 199 #(temp##30) ())))))))))
(358 radix-is 357 75 (#(4 35 #(radix) ())))
(359 exactness-is 357 78 (#(4 35 #(exact?) ())))
(360 digit->integer 349 199 (#(4 129 #(c radix) (#(93 129 #(n) ()) #(28 42 #(n) ())))))
(361 do-it 349 204 (#(4 45 #(string pos sign radix exact?) (#(30 45 #(loop) ())))))
(362 loop 361 31 (#(4 94 #(n pos) (#(59 94 #(d) ())))))
(363 string->integer 349 209 (#(4 102 #(string radix exact?) ())))
(365 record-type 364 4 (#(4 12 #(r) ())))
(366 make-record-type 364 37 (#(4 74 #(id field-names) (#(21 74 #(r) ())))))
(367 record-type? 364 45 (#(4 25 #(obj) ())))
(368 record-type-uid 364 53 (#(4 12 #(rt) ())))
(369 record-type-identification 364 61 (#(4 12 #(rt) ())))
(370 record-type-field-names 364 69 (#(4 12 #(rt) ())))
(371 record-type-discloser 364 77 (#(4 12 #(rt) ())))
(372 record-field-index 364 85 (#(4 28 #(rt name) (#(8 28 #(loop) ())))))
(373 loop 372 9 (#(4 78 #(names i) ())))
(374 record-constructor 364 93 (#(4 45 #(rt names) (#(42 45 #(indexes size) ())))))
(375 #f 374 9 (#(4 14 #(name) ())))
(376 #f 374 43 (#(5 45 #(args) (#(14 45 #(r) (#(29 45 #(loop) ())))))))
(377 loop 376 30 (#(4 140 #(is as) ())))
(378 record-accessor 364 101 (#(4 57 #(rt name) (#(54 57 #(index error-cruft) ())))))
(379 #f 378 55 (#(4 39 #(r) ())))
(380 record-modifier 364 109 (#(4 57 #(rt name) (#(54 57 #(index error-cruft) ())))))
(381 #f 380 55 (#(4 45 #(r x) ())))
(382 record-predicate 364 117 (#(4 7 #(rt) ())))
(383 #f 382 5 (#(4 25 #(x) ())))
(384 define-record-discloser 364 125 (#(4 45 #(rt proc) ())))
(385 disclose-record 364 133 (#(4 50 #(r) (#(19 50 #(p) ())))))
(386 default-record-discloser 364 141 (#(4 21 #(r) ())))
(387 #f 364 164 (#(4 91 #(obj) ())))
(390 thread-dynamic-env 389 44 (#(4 12 #(r##31) ())))
(391 current-thread 389 52 ())
(392 set-current-thread! 389 60 (#(4 8 #(thread) ())))
(393 get-dynamic-env 389 68 ())
(394 set-dynamic-env! 389 76 (#(4 14 #(env) ())))
(395 initialize-dynamic-state! 389 84 ())
(396 with-dynamic-env 389 92 (#(4 52 #(env thunk) (#(13 52 #(saved-env) (#(42 49 #(x) ())))))))
(397 #f 396 27 (#(5 21 #(results) ())))
(398 empty-dynamic-env 389 100 ())
(399 fluid-top-level-value 389 148 (#(4 12 #(r##32) ())))
(400 set-fluid-top-level-value! 389 156 (#(4 15 #(r##33 new##34) ())))
(401 fluid 389 164 (#(4 44 #(f) (#(25 44 #(probe) ())))))
(402 set-fluid! 389 172 (#(4 50 #(f val) (#(25 50 #(probe) ())))))
(403 let-fluid 389 180 (#(4 30 #(f val thunk) ())))
(404 let-fluids 389 188 (#(5 28 #(args) (#(9 28 #(loop) ())))))
(405 loop 404 10 (#(4 66 #(args env) ())))
(406 fluid-lookup 389 196 (#(4 40 #(env f) (#(21 40 #(probe) ())))))
(408 dynamic-wind 407 4 (#(4 110 #(in body out) (#(94 110 #(results) ()) #(38 70 #(here) ())))))
(409 #f 408 85 ())
(410 call-with-current-continuation 407 12 (#(4 11 #(proc) ())))
(411 #f 410 5 (#(4 32 #(cont) (#(13 32 #(env) ())))))
(412 continuation->procedure 407 20 (#(4 7 #(cont env) ())))
(413 #f 412 5 (#(5 57 #(results) ())))
(414 #f 413 54 ())
(415 point-parent 407 68 (#(4 12 #(r##35) ())))
(416 point-dynamic-env 407 76 (#(4 12 #(r##36) ())))
(417 point-out 407 84 (#(4 12 #(r##37) ())))
(418 point-in 407 92 (#(4 12 #(r##38) ())))
(419 point-depth 407 100 (#(4 12 #(r##39) ())))
(420 #f 407 112 (#(4 19 #(p) ())))
(423 get-dynamic-point 407 168 ())
(424 env-dynamic-point 407 176 (#(4 14 #(env) ())))
(425 let-dynamic-point 407 184 (#(4 30 #(point thunk) ())))
(426 travel-to-point! 407 192 (#(4 121 #(here target) ())))
(428 current-input-port 427 52 ())
(429 current-output-port 427 60 ())
(430 error-output-port 427 68 ())
(431 with-initial-ports 427 76 (#(4 29 #(in out thunk) ())))
(432 call-with-mumble-file 427 84 (#(4 7 #(open close) ())))
(433 #f 432 5 (#(4 21 #(string proc) (#(8 21 #(port) ())))))
(434 #f 433 9 ())
(435 #f 433 12 ())
(436 #f 433 15 ())
(437 with-input-from-file 427 132 (#(4 14 #(string thunk) ())))
(438 #f 437 8 (#(4 30 #(port) ())))
(439 with-output-to-file 427 140 (#(4 14 #(string thunk) ())))
(440 #f 439 8 (#(4 30 #(port) ())))
(441 newline 427 148 (#(5 21 #(port-option) ())))
(442 output-port-option 427 156 (#(4 60 #(port-option) ())))
(443 input-port-option 427 164 (#(4 60 #(port-option) ())))
(445 write 444 4 (#(7 37 #(obj port-option) (#(21 37 #(port) (#(25 37 #(recur) ())))))))
(446 recur 445 26 (#(4 17 #(obj) ())))
(447 recurring-write 444 12 (#(4 156 #(obj port recur) ())))
(448 write-boolean 444 20 (#(4 20 #(mumble port) ())))
(449 write-number 444 28 (#(4 23 #(n port) ())))
(450 write-char-literal 444 36 (#(4 46 #(obj port) (#(18 46 #(probe) ())))))
(451 character-name 444 44 (#(4 30 #(char) ())))
(452 write-string-literal 444 52 (#(4 33 #(obj port) (#(17 33 #(len) (#(21 33 #(loop##42) ())))))))
(453 loop##40 452 22 (#(4 98 #(i) (#(36 86 #(c) (#(49 64 #(temp##41) ())))))))
(454 write-list 444 60 (#(4 92 #(obj port recur) (#(66 84 #(loop) ())))))
(455 loop 454 67 (#(4 91 #(l n) ())))
(456 quotation? 444 68 (#(4 52 #(obj) ())))
(457 write-vector 444 76 (#(4 73 #(obj port recur) (#(21 65 #(z) (#(51 63 #(loop) ())))))))
(458 loop 457 52 (#(4 67 #(i) (#(22 67 #(temp##43) ())))))
(459 write-other 444 84 (#(4 180 #(obj port recur) (#(18 180 #(temp##44) (#(28 77 #(l) ())))))))
(460 #f 459 57 (#(4 19 #(x) ())))
(461 display-type-name 444 92 (#(4 114 #(name port) (#(19 104 #(s) (#(26 104 #(len) (#(82 94 #(loop##47) ())))))))))
(462 loop##45 461 83 (#(4 63 #(i) (#(22 63 #(temp##46) ())))))
(463 display 444 100 (#(7 37 #(obj port-option) (#(21 37 #(port) (#(25 37 #(recur) ())))))))
(464 recur 463 26 (#(4 44 #(obj) ())))
(466 condition-supertypes 465 12 (#(4 14 #(type) ())))
(467 define-condition-type 465 20 (#(4 42 #(type supertypes) ())))
(468 #f 467 19 (#(4 48 #(sup) (#(18 48 #(temp##48) ())))))
(469 condition-predicate 465 28 (#(4 7 #(name) ())))
(470 #f 469 5 (#(4 59 #(c) (#(28 57 #(probe) ())))))
(471 condition? 465 36 (#(4 39 #(x) ())))
(472 make-exception 465 204 (#(4 19 #(opcode args) ())))
(473 #f #f #f (#(438 448 #(number-sharp-macro) ()) #(154 185 #(sub-read-constituent) ()) #(134 144 #(sub-read-whitespace) ())))
(474 read 473 4 (#(5 32 #(port-option) (#(19 32 #(port) (#(23 32 #(loop) ())))))))
(475 loop 474 24 (#(16 80 #(form) ())))
(476 sub-read-carefully 473 12 (#(4 64 #(port) (#(18 64 #(form) ())))))
(477 make-reader-token 473 37 (#(4 13 #(message) ())))
(478 reader-token? 473 45 (#(4 23 #(form) ())))
(479 sub-read 473 87 (#(4 35 #(port) (#(10 35 #(c) ())))))
(480 #f 473 98 (#(4 17 #(c port) ())))
(481 set-standard-syntax! 473 121 (#(4 27 #(char terminating? reader) ())))
(482 sub-read-whitespace 473 130 (#(4 13 #(c port) ())))
(483 #f 473 135 (#(4 15 #(c) ())))
(484 sub-read-constituent 473 150 (#(4 26 #(c port) ())))
(485 #f 473 155 (#(4 16 #(c) ())))
(486 set-standard-read-macro! 473 190 (#(4 17 #(c terminating? proc) ())))
(487 sub-read-list 473 198 (#(4 130 #(c port) (#(18 130 #(form) (#(69 109 #(last-form) (#(83 109 #(another-form) ())))))))))
(488 #f 473 231 (#(4 11 #(c port) ())))
(489 #f 473 249 (#(4 25 #(c port) ())))
(490 #f 473 267 (#(4 25 #(c port) ())))
(491 #f 473 285 (#(4 76 #(c port) (#(12 76 #(next) (#(57 76 #(keyword) ())))))))
(492 #f 473 303 (#(4 25 #(c port) (#(10 25 #(loop) ())))))
(493 loop 492 11 (#(4 162 #(l i) (#(10 162 #(c) (#(43 126 #(c) (#(73 88 #(temp##49) ())))))))))
(494 #f 473 321 (#(4 25 #(c port) ())))
(495 gobble-line 473 332 (#(4 17 #(port) (#(8 17 #(loop) ())))))
(496 loop 495 9 (#(8 32 #(c) ())))
(497 define-sharp-macro 473 348 (#(4 21 #(c proc) ())))
(498 #f 473 362 (#(4 99 #(c port) (#(12 99 #(c) (#(49 99 #(c) (#(66 99 #(probe) ())))))))))
(499 #f 473 377 (#(4 9 #(c port) ())))
(500 #f 473 392 (#(4 10 #(c port) ())))
(501 #f 473 407 (#(4 123 #(c port) (#(13 123 #(c) (#(57 119 #(name) (#(91 119 #(temp##50) ())))))))))
(502 #f 473 422 (#(4 26 #(c port) ())))
(503 number-sharp-macro 473 434 (#(4 56 #(c port) (#(21 56 #(string) (#(35 56 #(temp##51) ())))))))
(504 #f 473 439 (#(4 14 #(c) ())))
(505 sub-read-token 473 453 (#(4 41 #(c port) (#(8 41 #(loop) ())))))
(506 loop 505 9 (#(4 78 #(l n) (#(10 78 #(c) (#(20 37 #(temp##52) ())))))))
(507 parse-token 473 461 (#(4 163 #(string port) (#(99 156 #(temp##56) ()) #(18 82 #(c) (#(32 82 #(temp##55) (#(49 82 #(temp##54) (#(66 82 #(temp##53) ())))))))))))
(508 reading-error 473 507 (#(7 41 #(port message irritants) ())))
(510 make-some-values-type 509 20 (#(4 75 #(types) (#(32 57 #(temp##57) ())))))
(511 some-values-type? 509 28 (#(4 23 #(type) ())))
(512 some-values-type-components 509 36 (#(4 31 #(type) ())))
(513 check-value-type 509 52 (#(4 42 #(type) ())))
(514 procedure-type 509 68 (#(4 262 #(domain codomain) (#(122 180 #(domain-list) ())))))
(515 #f 514 136 (#(4 11 #(type) ())))
(516 procedure-type? 509 76 (#(4 47 #(type) (#(35 47 #(temp##58) ())))))
(517 fixed-arity-procedure-type? 509 84 (#(4 39 #(type) (#(27 39 #(temp##59) ())))))
(518 procedure-type-codomain 509 92 (#(4 26 #(type) ())))
(519 procedure-type-domain 509 100 (#(4 61 #(type) ())))
(520 nargs->domain-list 509 108 (#(4 38 #(n) ())))
(521 procedure-type-argument-types 509 116 (#(4 61 #(type) ())))
(522 procedure-type-arity 509 124 (#(4 27 #(type) ())))
(523 variable-type 509 132 (#(4 26 #(type) ())))
(524 variable-type? 509 140 (#(4 23 #(type) ())))
(525 compatible-types? 509 156 (#(4 336 #(have-type want-type) (#(310 332 #(c1 c2) ())))))
(526 compatible-type-lists? 509 164 (#(4 128 #(l1 l2) (#(68 126 #(c1) (#(116 126 #(c2) ())))))))
(527 some-values-type 509 229 (#(5 12 #(types) ())))
(529 table-set-procedure 528 44 (#(4 12 #(r##60) ())))
(530 set-table-set-procedure! 528 52 (#(4 15 #(r##61 new##62) ())))
(531 table-ref-procedure 528 60 (#(4 12 #(r##63) ())))
(532 set-table-ref-procedure! 528 68 (#(4 15 #(r##64 new##65) ())))
(533 table-data 528 76 (#(4 12 #(r##66) ())))
(534 set-table-data! 528 84 (#(4 15 #(r##67 new##68) ())))
(535 table-size 528 92 (#(4 12 #(r##69) ())))
(536 set-table-size! 528 100 (#(4 15 #(r##70 new##71) ())))
(537 table-hash-function 528 108 (#(4 12 #(r##72) ())))
(538 make-table 528 133 (#(5 46 #(maybe-hash-function) (#(27 46 #(hash) ())))))
(539 table-ref 528 141 (#(4 19 #(table key) ())))
(540 table-set! 528 149 (#(4 22 #(table key val) ())))
(541 next-table-size 528 173 (#(4 63 #(count) (#(17 63 #(new-size) ())))))
(542 new-entry 528 188 (#(4 46 #(key val others) (#(13 46 #(v) ())))))
(543 get-entry 528 196 (#(4 50 #(entries key) ())))
(544 set-entry! 528 204 (#(4 58 #(entries key val) ())))
(545 for-each-entry 528 212 (#(4 67 #(proc entries) (#(21 65 #(data) ())))))
(546 linear-table-ref 528 220 (#(4 19 #(table key) ())))
(547 linear-table-set! 528 228 (#(4 68 #(table key val) (#(14 68 #(entries) ())))))
(548 linear-table-inc! 528 236 (#(4 102 #(table) (#(18 102 #(count) (#(48 102 #(data) ())))))))
(549 table-expand-table! 528 244 (#(4 30 #(table size) ())))
(550 table-enter-entries! 528 252 (#(4 14 #(table entries) ())))
(551 #f 550 5 (#(4 17 #(key val) ())))
(552 hash-table-ref 528 260 (#(4 49 #(table key) (#(14 49 #(data) ())))))
(553 hash-table-set! 528 268 (#(4 108 #(table key val) (#(14 108 #(data) (#(39 108 #(h) (#(49 108 #(entries) ())))))))))
(554 hash-table-inc! 528 276 (#(4 97 #(table) (#(18 97 #(count) (#(28 97 #(data) (#(35 97 #(size) (#(85 97 #(loop##75) ())))))))))))
(555 loop##73 554 86 (#(4 63 #(i) (#(22 63 #(temp##74) ())))))
(556 table-walk 528 284 (#(4 61 #(proc table) (#(14 61 #(data) (#(45 61 #(size) (#(49 61 #(loop##77) ())))))))))
(557 loop##76 556 50 (#(4 58 #(i) ())))
(558 default-table-hash-function 528 292 (#(4 102 #(obj) ())))
(560 operator-uid-maybe 559 64 (#(4 12 #(r##78) ())))
(561 set-operator-uid-maybe! 559 72 (#(4 15 #(r##79 new##80) ())))
(562 operator-transform 559 80 (#(4 12 #(r##81) ())))
(563 set-operator-transform! 559 88 (#(4 15 #(r##82 new##83) ())))
(564 operator-name 559 96 (#(4 12 #(r##84) ())))
(565 operator-type 559 104 (#(4 12 #(r##85) ())))
(566 #f 559 133 (#(4 27 #(s) ())))
(567 get-operator 559 144 (#(7 202 #(name type-option) (#(43 202 #(type probe) (#(187 202 #(op) ()) #(143 172 #(temp##86) ()) #(67 130 #(previous-type) ())))))))
(568 operator-uid 559 152 (#(4 131 #(op) (#(14 131 #(temp##87) (#(27 131 #(uid) ())))))))
(569 make-operator-table 559 202 (#(7 60 #(default mumble-option) (#(17 60 #(v) ())))))
(570 operator-lookup 559 218 (#(4 21 #(table op) ())))
(571 operator-define! 559 226 (#(4 66 #(table name proc) ())))
(572 node-plist 559 274 (#(4 12 #(r##88) ())))
(573 set-node-plist! 559 282 (#(4 15 #(r##89 new##90) ())))
(574 node-form 559 290 (#(4 12 #(r##91) ())))
(575 node-operator-id 559 298 (#(4 12 #(r##92) ())))
(576 make-node 559 323 (#(4 26 #(operator form) ())))
(577 #f 559 335 (#(4 34 #(n) ())))
(578 node-ref 559 346 (#(4 39 #(node key) (#(26 39 #(probe) ())))))
(579 node-set! 559 354 (#(4 96 #(node key value) (#(77 96 #(loop) ()) #(31 73 #(probe) ())))))
(580 loop 579 78 (#(4 75 #(l prev) ())))
(581 node-operator 559 362 (#(4 17 #(node) ())))
(582 node-predicate 559 370 (#(7 36 #(name type-option) (#(33 36 #(id) ())))))
(583 #f 582 34 (#(4 16 #(node) ())))
(584 make-similar-node 559 378 (#(4 49 #(node form) ())))
(585 generated-parent-name 559 426 (#(4 12 #(r##93) ())))
(586 generated-env 559 434 (#(4 12 #(r##94) ())))
(587 generated-token 559 442 (#(4 12 #(r##95) ())))
(588 generated-symbol 559 450 (#(4 12 #(r##96) ())))
(589 #f 559 479 (#(4 19 #(name) ())))
(590 #f 559 487 (#(456 459 #(operator/with-aliases) ()) #(390 393 #(operator/call) ()) #(360 363 #(op) ())))
(591 generate-name 590 4 (#(4 19 #(symbol env parent-name) ())))
(592 name->symbol 590 12 (#(4 66 #(name) (#(19 66 #(uid) ())))))
(593 name-hash 590 28 (#(4 66 #(name) ())))
(594 desyntaxify 590 36 (#(4 317 #(thing) (#(238 257 #(new) (#(242 257 #(loop) ()))) #(171 211 #(x y) ()) #(22 82 #(temp##100) (#(39 82 #(temp##99) (#(53 82 #(temp##98) (#(69 82 #(temp##97) ())))))))))))
(595 loop 594 243 (#(4 101 #(i same?) (#(57 101 #(x) ())))))
(596 make-immutable 590 44 (#(4 10 #(thing) ())))
(597 transform-id 590 92 (#(4 12 #(r##101) ())))
(598 transform-source 590 100 (#(4 12 #(r##102) ())))
(599 transform-aux-names 590 108 (#(4 12 #(r##103) ())))
(600 transform-type 590 116 (#(4 12 #(r##104) ())))
(601 transform-env 590 124 (#(4 12 #(r##105) ())))
(602 transform-procedure 590 132 (#(4 12 #(r##106) ())))
(603 make-transform 590 157 (#(4 60 #(thing env type source id) ())))
(604 #f 590 169 (#(4 19 #(m) ())))
(605 maybe-transform 590 180 (#(4 105 #(t exp env-of-use) (#(13 105 #(token) (#(33 105 #(new-env) (#(66 105 #(rename) (#(71 105 #(compare) ())))))))))))
(606 compare 605 67 (#(4 91 #(name1 name2) (#(21 91 #(temp##107) ())))))
(607 bind-aliases 590 188 (#(4 27 #(token t env-of-use) (#(14 27 #(env-of-definition) ())))))
(608 #f 607 22 (#(4 55 #(name) ())))
(609 make-name-generator 590 196 (#(4 12 #(env token parent-name) (#(9 12 #(alist) ())))))
(610 #f 609 10 (#(4 114 #(symbol) (#(28 86 #(probe) (#(65 86 #(new-name) ())))))))
(611 same-denotation? 590 204 (#(4 64 #(x y) (#(21 64 #(temp##108) ())))))
(612 binding-type 590 220 (#(4 12 #(b) ())))
(613 binding-place 590 228 (#(4 12 #(b) ())))
(614 binding-static 590 236 (#(4 12 #(b) ())))
(615 really-make-binding 590 244 (#(4 37 #(type place static) (#(14 37 #(b) ())))))
(616 make-binding 590 252 (#(7 117 #(type-or-static place static-option) ())))
(617 clobber-binding! 590 260 (#(4 44 #(b type place static) ())))
(618 binding-transform 590 268 (#(4 33 #(b) (#(14 33 #(foo) ())))))
(619 impose-type 590 276 (#(4 100 #(type b integrate?) (#(39 65 #(type) ())))))
(620 forget-integration 590 284 (#(4 43 #(b) ())))
(621 classify 590 292 (#(4 322 #(form env) (#(55 203 #(op-node) (#(86 190 #(probe) (#(121 177 #(s) ())))))))))
(622 classify-literal 590 361 (#(4 14 #(exp) ())))
(623 classify-call 590 391 (#(4 40 #(proc-node exp env) ())))
(624 classify-name 590 400 (#(4 100 #(name env) (#(18 100 #(binding) (#(52 100 #(node) ())))))))
(625 classify-macro-application 590 428 (#(4 20 #(t form env-of-use) ())))
(626 #f 625 14 ())
(627 classify-transform-application 590 457 (#(4 25 #(t form env-of-use lose) ())))
(628 #f 627 5 (#(4 73 #(new-form new-env token) ())))
(629 maybe-transform-call 590 466 (#(4 127 #(proc-node node env) (#(37 124 #(b) (#(54 121 #(s) ())))))))
(630 #f 629 83 ())
(631 classify-operator-form 590 474 (#(4 69 #(op op-node form env) ())))
(632 #f 590 486 (#(4 23 #(op op-node form env) ())))
(633 define-classifier 590 499 (#(4 29 #(name proc) ())))
(634 #f 590 504 (#(191 194 #(operator/quote) ()) #(142 145 #(op) ()) #(91 94 #(operator/lambda operator/unassigned) ())))
(635 #f 634 8 (#(4 41 #(op op-node exp env) ())))
(636 #f 634 23 (#(4 76 #(op op-node exp env) ())))
(637 #f 634 92 (#(4 149 #(op op-node form env) (#(22 144 #(pat) ())))))
(638 unspecific-node 634 143 ())
(639 #f 634 156 (#(4 172 #(op op-node form env) (#(30 172 #(struct-node lose) (#(88 168 #(b) ())))))))
(640 lose 639 26 ())
(641 #f 634 192 (#(4 35 #(op op-node form env) ())))
(642 lookup 634 204 (#(4 11 #(env name) ())))
(643 bind1 634 212 (#(4 7 #(name binding env) ())))
(644 #f 643 5 (#(4 23 #(a-name) ())))
(645 bind 634 220 (#(4 56 #(names bindings env) ())))
(646 literal? 634 228 (#(4 55 #(exp) (#(10 55 #(temp##111) (#(24 55 #(temp##110) (#(39 55 #(temp##109) ())))))))))
(647 number-of-required-args 634 236 (#(4 23 #(formals) (#(8 23 #(loop##113) ())))))
(648 loop##112 647 9 (#(4 40 #(l i) ())))
(649 n-ary? 634 244 (#(4 35 #(formals) ())))
(650 normalize-formals 634 252 (#(4 54 #(formals) ())))
(651 syntax? 634 260 (#(4 58 #(d) ())))
(652 name? 634 268 (#(4 26 #(thing) (#(11 26 #(temp##114) ())))))
(653 define-usual-suspects 634 300 (#(4 53 #(table mumble) ())))
(654 #f 653 19 (#(4 81 #(node env) (#(14 81 #(form) (#(25 81 #(specs) ())))))))
(655 #f 654 61 (#(4 51 #(spec) ())))
(656 #f 653 42 (#(4 81 #(node env) (#(14 81 #(form) ())))))
(657 process-syntax 634 308 (#(4 123 #(form env name p) (#(104 123 #(thing) ()) #(29 84 #(probe) ())))))
(658 #f 657 58 (#(4 7 #(x) ())))
(659 bind-evaluator-for-syntax 634 316 (#(4 7 #(eval-for-syntax env) ())))
(660 #f 659 5 (#(4 23 #(kludge) ())))
(661 evaluator-for-syntax 634 324 (#(4 11 #(env) ())))
(662 scan-body 634 349 (#(4 64 #(forms env cont) (#(17 35 #(temp##115) ())))))
(663 #f 662 58 (#(4 14 #(defs exps env) ())))
(664 scan-body-forms 634 357 (#(4 188 #(forms env defs cont) (#(52 188 #(node forms) (#(89 114 #(name) ())))))))
(665 #f 664 163 (#(4 70 #(new-defs exps env) ())))
(666 body-lossage 634 365 (#(4 23 #(node) ())))
(667 schemify 634 413 (#(4 38 #(node) ())))
(668 #f 634 425 (#(4 41 #(node) (#(14 41 #(form) ())))))
(669 define-schemifier 634 438 (#(4 17 #(name proc) ())))
(670 #f 634 453 (#(4 16 #(node) ())))
(671 #f 634 471 (#(4 25 #(node) ())))
(672 #f 634 489 (#(4 65 #(node) (#(14 65 #(form) ())))))
(673 #f 672 22 (#(4 37 #(spec) ())))
(674 ok-number-of-args? 634 500 (#(4 49 #(form type) ())))
(676 make-population 675 4 ())
(677 add-to-population! 675 12 (#(4 58 #(x pop) ())))
(678 population-reduce 675 20 (#(4 29 #(cons nil pop) (#(8 29 #(loop##117) ())))))
(679 loop##116 678 9 (#(4 75 #(l prev m) (#(40 70 #(w) ())))))
(680 population->list 675 28 (#(4 17 #(pop) ())))
(681 walk-population 675 36 (#(4 16 #(proc pop) ())))
(682 #f 681 5 (#(4 11 #(thing junk) ())))
(684 signature-name 683 44 (#(4 12 #(r##118) ())))
(685 signature-clients 683 52 (#(4 12 #(r##119) ())))
(686 walk-method 683 60 (#(4 12 #(r##120) ())))
(687 ref-method 683 68 (#(4 12 #(r##121) ())))
(688 #f 683 97 (#(4 19 #(sig) ())))
(689 signature-ref 683 108 (#(4 16 #(sig name) ())))
(690 for-each-declaration 683 116 (#(4 16 #(proc sig) ())))
(691 note-reference-to-signature! 683 124 (#(4 31 #(sig thing) (#(14 31 #(pop) ())))))
(692 make-signature 683 132 (#(4 35 #(ref walk name) ())))
(693 make-simple-signature 683 140 (#(4 64 #(name items) (#(18 64 #(table) ())))))
(694 #f 693 23 (#(4 93 #(item) (#(28 80 #(name type) (#(41 54 #(temp##122) ())))))))
(695 #f 694 58 (#(4 18 #(name) ())))
(696 really-make-simple-signature 683 148 (#(4 17 #(table name) ())))
(697 #f 696 5 (#(4 14 #(name) ())))
(698 #f 696 8 (#(4 14 #(proc) ())))
(699 make-compound-signature 683 156 (#(7 45 #(name sigs) (#(27 45 #(sig) ())))))
(700 #f 699 12 (#(4 20 #(name) (#(8 20 #(loop) ())))))
(701 loop 700 9 (#(4 55 #(sigs) (#(37 55 #(temp##123) ())))))
(702 #f 699 15 (#(4 14 #(proc) ())))
(703 #f 702 5 (#(4 16 #(sig) ())))
(704 #f 699 32 (#(4 14 #(s) ())))
(706 structure-name 705 44 (#(4 12 #(r##124) ())))
(707 structure-clients 705 52 (#(4 12 #(r##125) ())))
(708 structure-package 705 60 (#(4 12 #(r##126) ())))
(709 structure-signature-really 705 68 (#(4 12 #(r##127) ())))
(710 set-structure-signature! 705 76 (#(4 15 #(r##128 new##129) ())))
(711 structure-signature-thunk 705 84 (#(4 12 #(r##130) ())))
(712 #f 705 113 (#(4 32 #(s) ())))
(713 structure-signature 705 124 (#(4 42 #(s) (#(14 42 #(temp##131) ())))))
(714 initialize-structure! 705 132 (#(4 67 #(s) (#(20 67 #(sig) ())))))
(715 make-structure 705 140 (#(4 121 #(package sig-thunk name) (#(98 121 #(struct) ())))))
(716 #f 715 75 ())
(717 structure-unstable? 705 148 (#(4 16 #(struct) ())))
(718 for-each-export 705 156 (#(4 30 #(proc struct) (#(18 30 #(sig) ())))))
(719 #f 718 19 (#(4 101 #(name want-type) (#(24 101 #(binding) (#(61 87 #(type) ())))))))
(721 package-loaded? 720 4 (#(4 12 #(r##132) ())))
(722 set-package-loaded?! 720 12 (#(4 15 #(r##133 new##134) ())))
(723 package-cached 720 20 (#(4 12 #(r##135) ())))
(724 package-seen 720 28 (#(4 12 #(r##136) ())))
(725 package-clients 720 36 (#(4 12 #(r##137) ())))
(726 package-plist 720 44 (#(4 12 #(r##138) ())))
(727 set-package-plist! 720 52 (#(4 15 #(r##139 new##140) ())))
(728 package-clauses 720 60 (#(4 12 #(r##141) ())))
(729 package-file-name 720 68 (#(4 12 #(r##142) ())))
(730 package-integrate? 720 76 (#(4 12 #(r##143) ())))
(731 set-package-integrate?! 720 84 (#(4 15 #(r##144 new##145) ())))
(732 package-for-syntax-promise 720 92 (#(4 12 #(r##146) ())))
(733 package-evaluator 720 100 (#(4 12 #(r##147) ())))
(734 package-get-location 720 108 (#(4 12 #(r##148) ())))
(735 set-package-get-location! 720 116 (#(4 15 #(r##149 new##150) ())))
(736 package-definitions 720 124 (#(4 12 #(r##151) ())))
(737 package-accesses-thunk 720 132 (#(4 12 #(r##152) ())))
(738 package-opens-thunk 720 140 (#(4 12 #(r##153) ())))
(739 set-package-opens-thunk! 720 148 (#(4 15 #(r##154 new##155) ())))
(740 package-opens-really 720 156 (#(4 12 #(r##156) ())))
(741 set-package-opens! 720 164 (#(4 15 #(r##157 new##158) ())))
(742 package-uid 720 172 (#(4 12 #(r##159) ())))
(743 #f 720 201 (#(4 64 #(p) (#(26 64 #(name) ())))))
(744 make-package 720 212 (#(4 141 #(opens-thunk accesses-thunk evaluator for-syntax-promise dir clauses name) (#(106 141 #(p) ())))))
(745 package-for-syntax 720 220 (#(4 13 #(p) ())))
(746 new-package-uid 720 228 (#(7 18 #(uid) ())))
(747 package-name 720 258 (#(4 19 #(package) ())))
(748 set-package-name! 720 266 (#(4 22 #(package name) ())))
(749 make-simple-package 720 274 (#(7 116 #(opens evaluator efs-promise name-option) (#(103 116 #(p) ())))))
(750 #f 749 60 ())
(751 #f 749 63 ())
(752 package-opens 720 282 (#(4 42 #(p) (#(14 42 #(temp##160) ())))))
(753 package-accesses 720 290 (#(4 13 #(p) ())))
(754 package-definition 720 306 (#(4 53 #(p name) (#(26 53 #(probe) ())))))
(755 package-define! 720 314 (#(7 122 #(p name type-or-static place-option) (#(28 122 #(place) ())))))
(756 really-package-define! 720 322 (#(4 188 #(p name type place static) (#(26 188 #(probe) (#(107 188 #(place) ()) #(71 104 #(temp##162) (#(84 104 #(temp##161) ())))))))))
(757 package-lookup 720 330 (#(7 42 #(p name integrate?-option) ())))
(758 really-package-lookup 720 338 (#(4 90 #(p name integrate?) (#(21 90 #(probe) (#(69 90 #(loop) ())))))))
(759 loop 758 70 (#(4 62 #(opens) (#(42 62 #(probe) ())))))
(760 structure-lookup 720 346 (#(4 88 #(struct name integrate?) (#(32 88 #(type) (#(62 85 #(probe) ())))))))
(761 lookup-generated-name 720 354 (#(4 24 #(ignore-env name) ())))
(762 generic-lookup 720 362 (#(4 97 #(env name) ())))
(763 package->environment 720 370 (#(4 14 #(p) ())))
(764 #f 763 5 (#(4 35 #(form env) (#(20 35 #(f) ())))))
(765 #f 763 8 (#(4 14 #(name) ())))
(766 package-lookup-type 720 378 (#(4 38 #(p name) (#(21 38 #(probe) ())))))
(767 initialize-package! 720 386 (#(4 66 #(p) (#(24 44 #(opens) ())))))
(768 #f 767 35 (#(4 40 #(struct) ())))
(769 #f 767 46 (#(4 28 #(name+struct) ())))
(770 initialize-reified-package! 720 394 (#(4 27 #(p names locs get-location) (#(11 27 #(end) (#(15 27 #(loop##165) ())))))))
(771 loop##163 770 16 (#(4 118 #(i) (#(13 118 #(temp##164) (#(36 106 #(name) (#(54 106 #(probe) ())))))))))
(772 for-each-definition 720 402 (#(4 19 #(proc p) ())))
(773 #f 772 5 (#(4 43 #(name stuff) ())))
(774 get-new-location 720 410 (#(4 19 #(p name) ())))
(775 make-new-location 720 418 (#(4 62 #(p name) (#(9 62 #(uid) ())))))
(776 flush-location-names 720 465 ())
(777 package-get 720 473 (#(4 39 #(p ind) (#(26 39 #(temp##166) ())))))
(778 package-put! 720 481 (#(4 73 #(p ind val) (#(26 73 #(temp##167) (#(36 45 #(z) ())))))))
(779 package-note-caching 720 489 (#(4 90 #(p name place) (#(57 78 #(loop) ())))))
(780 loop 779 58 (#(4 109 #(opens) ())))
(782 environment-ref 781 4 (#(4 76 #(package name) (#(21 76 #(binding) ())))))
(783 environment-set! 781 12 (#(4 139 #(package name value) (#(21 139 #(binding) ())))))
(784 environment-define! 781 20 (#(4 28 #(package name value) ())))
(785 *structure-ref 781 28 (#(4 78 #(struct name) (#(23 78 #(binding) ())))))
(786 contents-carefully 781 36 (#(4 195 #(binding env name) (#(79 167 #(loc) ())))))
(787 interaction-environment 781 60 ())
(788 set-interaction-environment! 781 68 (#(4 41 #(p) ())))
(789 with-interaction-environment 781 76 (#(4 57 #(p thunk) ())))
(790 scheme-report-environment 781 84 (#(4 32 #(n) ())))
(791 set-scheme-report-environment! 781 107 (#(4 13 #(repnum env) ())))
(792 make-package-for-syntax 781 115 (#(4 17 #(eval structs) (#(8 17 #(recur) ())))))
(793 recur 792 9 ())
(794 #f 793 13 ())
(796 define-usual-macro 795 18 (#(4 23 #(name proc aux-names) ())))
(797 #f 796 11 (#(4 20 #(exp rename compare) ())))
(798 usual-transform 795 26 (#(4 14 #(name) ())))
(799 #f 795 38 (#(7 93 #(rename compare conjuncts) ())))
(800 #f 795 56 (#(7 52 #(rename compare clauses) (#(30 52 #(result) ()) #(15 27 #(recur) ())))))
(801 recur 800 16 (#(4 376 #(clauses) (#(34 371 #(clause more-clauses) (#(198 309 #(temp) ())))))))
(802 #f 795 74 (#(7 204 #(rename compare specs end body) (#(57 204 #(%loop %letrec %lambda %cond) ())))))
(803 #f 802 105 (#(4 37 #(y) ())))
(804 #f 795 92 (#(7 233 #(rename compare specs body) (#(130 211 #(tag specs body %letrec %lambda) ())))))
(805 #f 795 110 (#(7 128 #(rename compare specs body) (#(20 38 #(temp##168) ())))))
(806 #f 795 128 (#(7 152 #(rename compare disjuncts) (#(50 152 #(temp) ())))))
(807 #f 795 146 (#(7 132 #(rename compare key clauses) (#(57 132 #(temp %eqv? %memv %quote) ())))))
(808 #f 807 107 (#(4 158 #(clause) ())))
(809 #f 795 160 (#(4 170 #(rename compare x) (#(32 170 #(interesting-to-quasiquote? descend-quasiquote-vector descend-quasiquote-pair descend-quasiquote finalize-quasiquote expand-quasiquote %list->vector %cons %append %unquote-splicing %unquote %quasiquote %quote) ())))))
(810 interesting-to-quasiquote? 809 33 (#(4 26 #(x marker) ())))
(811 descend-quasiquote-vector 809 38 (#(4 26 #(x level return) ())))
(812 #f 811 20 (#(4 61 #(mode arg) (#(9 61 #(temp##169) ())))))
(813 descend-quasiquote-pair 809 43 (#(4 20 #(x level return) ())))
(814 #f 813 14 (#(4 20 #(car-mode car-arg) ())))
(815 #f 814 14 (#(4 162 #(cdr-mode cdr-arg) ())))
(816 descend-quasiquote 809 48 (#(4 215 #(x level return) ())))
(817 finalize-quasiquote 809 53 (#(4 68 #(mode arg) ())))
(818 expand-quasiquote 809 58 (#(4 17 #(x level) ())))
(820 #f 819 8 (#(7 88 #(r c subkeywords rules) ())))
(821 process-rules 819 22 (#(4 389 #(rules subkeywords r c) (#(62 389 #(free-meta-variables meta-variables process-template process-pattern process-segment-match process-match process-rule make-transformer %temp %tail %rename %quote %pair? %map %let* %let %lambda %input %equal? %eq? %else %cons %cond %compare %cdr %car %and %append) ())))))
(822 free-meta-variables 821 63 (#(4 215 #(template dim env free) (#(65 89 #(probe) ())))))
(823 meta-variables 821 68 (#(4 131 #(pattern dim vars) ())))
(824 process-template 821 73 (#(4 404 #(template dim env) (#(145 325 #(vars) (#(191 325 #(x) (#(259 325 #(gen) ()))))) #(35 101 #(probe) ())))))
(825 process-pattern 821 78 (#(4 176 #(pattern path mapit) ())))
(826 #f 825 90 (#(4 67 #(x) ())))
(827 process-segment-match 821 83 (#(4 144 #(input pattern) (#(21 144 #(conjuncts) ())))))
(828 process-match 821 88 (#(4 386 #(input pattern) (#(271 305 #(temp##171) (#(293 305 #(temp##170) ())))))))
(829 process-rule 821 93 (#(4 170 #(rule) (#(64 160 #(pattern template) ())))))
(830 #f 829 99 (#(4 7 #(x) ())))
(831 make-transformer 821 98 (#(4 139 #(rules) ())))
(832 segment-pattern? 819 30 (#(4 53 #(pattern) (#(33 51 #(temp##172) ())))))
(833 segment-template? 819 38 (#(4 41 #(pattern) ())))
(834 find-free-names-in-syntax-rules 819 72 (#(4 39 #(subkeywords rules) (#(10 39 #(free-names meta-variables) (#(24 39 #(loop##175) ())))))))
(835 free-names 834 11 (#(4 167 #(template vars names) (#(39 57 #(temp##173) ())))))
(836 meta-variables 834 16 (#(4 130 #(pattern vars) ())))
(837 loop##174 834 25 (#(4 78 #(rules names) (#(34 73 #(rule) ())))))
(839 namestring 838 4 (#(4 235 #(namelist dir default-type) (#(40 235 #(namelist) (#(82 235 #(subdirs) (#(93 235 #(basename) (#(139 235 #(type) (#(149 160 #(temp##176) ())))))))))))))
(840 #f 839 173 (#(4 23 #(subdir) ())))
(841 namestring-component 838 28 (#(4 74 #(x) ())))
(842 file-name-directory 838 60 (#(4 26 #(filename) ())))
(843 file-name-nondirectory 838 68 (#(4 28 #(filename) ())))
(844 file-nondirectory-position 838 76 (#(4 26 #(filename) (#(8 26 #(loop) ())))))
(845 loop 844 9 (#(4 56 #(i) ())))
(846 string-posq 838 84 (#(4 20 #(thing s) (#(8 20 #(loop) ())))))
(847 loop 846 9 (#(4 54 #(i) ())))
(848 translations 838 100 ())
(849 set-translation! 838 108 (#(4 52 #(from to) (#(21 52 #(probe) ())))))
(850 translate 838 116 (#(4 27 #(name) (#(11 27 #(len) (#(15 27 #(loop) ())))))))
(851 loop 850 16 (#(4 142 #(ts) (#(28 142 #(from) (#(39 142 #(to) (#(46 142 #(k) ())))))))))
(852 #f #f #f (#(204 207 #(operator/define operator/primitive-procedure) ()) #(95 98 #(begin-node? define-node? define-syntax-node?) ())))
(853 scan-forms 852 21 (#(7 97 #(forms p filename env-option) (#(38 97 #(env) ())))))
(854 #f 853 91 ())
(855 scan-file 852 29 (#(7 81 #(pathname p env-option) (#(38 81 #(env) (#(57 81 #(filename) (#(71 81 #(truename) ())))))))))
(856 #f 855 75 (#(4 64 #(port) ())))
(857 #f 856 58 (#(16 75 #(o-port) (#(54 75 #(result) ()) #(42 51 #(recur) ())))))
(858 recur 857 43 (#(16 58 #(form) ())))
(859 scan-form-list 852 37 (#(4 20 #(forms p env) (#(8 20 #(loop) ())))))
(860 loop 859 9 (#(4 61 #(forms) (#(39 61 #(scanned-forms) ())))))
(861 scan-form 852 96 (#(4 158 #(form p env) (#(21 158 #(node) (#(80 111 #(form) ())))))))
(862 process-define-syntax 852 105 (#(4 123 #(form p env) (#(27 123 #(name source) ())))))
(863 eval-for-syntax 852 113 (#(4 35 #(p form) (#(20 35 #(f) ())))))
(864 scan-structures 852 121 (#(4 43 #(structs process-package? package-action) (#(24 43 #(out p-seen s-seen) (#(28 43 #(recur) ())))))))
(865 recur 864 29 (#(4 283 #(s) (#(51 281 #(p) (#(227 237 #(stuff) ())))))))
(866 #f 865 188 (#(4 15 #(name+struct) ())))
(867 #f 865 231 ())
(868 scan-package 852 129 (#(7 120 #(p env-option) (#(38 120 #(env) (#(43 120 #(stuff) (#(53 120 #(config-file) (#(76 120 #(dir) ())))))))))))
(869 #f 868 81 (#(4 231 #(clause) (#(12 231 #(temp##179) (#(146 231 #(temp##178) ()) #(117 134 #(temp##177) ())))))))
(870 #f 869 22 (#(4 61 #(file) (#(25 61 #(file) ())))))
(871 optimize 852 137 (#(4 187 #(stuff p) (#(57 184 #(optimizers) (#(102 184 #(names) (#(119 184 #(passes) ())))))))))
(872 #f 871 33 (#(4 14 #(clause) ())))
(873 #f 871 124 (#(4 7 #(x) ())))
(874 #f 871 137 (#(4 15 #(pass stuff) ())))
(875 check-structure 852 145 (#(4 57 #(s) (#(9 57 #(undefined) ())))))
(876 #f 875 14 (#(4 102 #(name want-type binding) (#(21 90 #(have-type) ())))))
(877 initialize-usual-transforms! 852 153 (#(4 14 #(p names) ())))
(878 #f 877 5 (#(4 71 #(name) ())))
(879 define-all-operators 852 161 (#(4 78 #(p) (#(9 78 #(procs) (#(55 78 #(nodes) ())))))))
(880 #f 879 14 (#(4 54 #(name op) (#(14 54 #(type) ())))))
(881 #f 879 60 (#(4 43 #(name op) ())))
(882 make-define-primitive-node 852 205 (#(4 56 #(name) ())))
(883 get-optimizer 852 228 (#(4 14 #(name) ())))
(884 set-optimizer! 852 236 (#(4 17 #(name opt) ())))
(886 note-undefined! 885 20 (#(4 32 #(name) (#(18 32 #(note) ())))))
(887 noting-undefined-variables 885 28 (#(4 67 #(p thunk) (#(9 67 #(losers) (#(14 67 #(foo) (#(35 46 #(temp##180) ())))))))))
(888 foo 887 10 (#(4 99 #(q name) (#(21 99 #(probe) ())))))
(889 #f 887 44 (#(4 49 #(name) ())))
(890 #f 887 61 (#(13 31 #(result) ())))
(891 #f 890 18 (#(4 195 #(p+names) (#(12 195 #(q) (#(32 195 #(names) ())))))))
(892 #f 891 17 (#(4 23 #(name) ())))
(893 #f 891 162 (#(4 29 #(name) ())))
(895 enumerand->name 894 4 (#(4 12 #(e e-type) ())))
(896 name->enumerand 894 12 (#(4 20 #(e e-type) (#(8 20 #(loop) ())))))
(897 loop 896 9 (#(4 45 #(i) ())))
(898 definitely-name->enumerand 894 20 (#(4 57 #(e e-type e-type-name) (#(21 57 #(temp##181) ())))))
(904 node-type 903 4 (#(4 17 #(node env) ())))
(905 reconstruct 903 12 (#(4 44 #(node env constrained) ())))
(906 #f 903 24 (#(4 17 #(node env constrained) ())))
(907 define-reconstructor 903 37 (#(4 29 #(name type proc) ())))
(908 #f 903 52 (#(4 153 #(node env constrained) (#(14 153 #(form) (#(25 153 #(formals) (#(39 153 #(vars) (#(56 153 #(var-nodes) (#(102 153 #(cod) ())))))))))))))
(909 #f 908 44 (#(4 14 #(formal) ())))
(910 #f 908 131 (#(4 32 #(node) (#(21 32 #(temp##182) ())))))
(911 #f 903 87 (#(4 64 #(node env constrained) (#(21 64 #(probe) (#(53 64 #(temp##183) ())))))))
(912 reconstruct-call 903 98 (#(4 77 #(node env constrained) (#(53 77 #(op-type) ())))))
(913 #f 903 113 (#(4 16 #(node env constrained) ())))
(914 #f 903 131 (#(4 22 #(node env constrained) ())))
(915 #f 903 149 (#(4 96 #(node env constrained) (#(73 96 #(con-type alt-type) ())))))
(916 #f 903 167 (#(4 31 #(node env constrained) ())))
(917 #f 903 185 (#(4 7 #(node env constrained) ())))
(918 #f 903 203 (#(4 7 #(node env constrained) ())))
(919 #f 903 221 (#(4 32 #(node env constrained) ())))
(920 #f 903 239 (#(4 22 #(node env constrained) ())))
(921 node->type 903 250 (#(4 59 #(node) (#(28 52 #(form) ())))))
(922 #f 903 265 (#(4 7 #(node env constrained) ())))
(923 #f 903 283 (#(4 7 #(node env constrained) ())))
(924 constrain-call! 903 294 (#(4 147 #(node want-type env constrained) (#(21 145 #(exp) (#(104 145 #(op-type) ())))))))
(925 #f 924 44 (#(4 7 #(arg) ())))
(926 #f 924 119 (#(4 22 #(want-type arg) ())))
(927 constrain! 903 302 (#(4 267 #(arg want-type env constrained) (#(27 267 #(temp##186) (#(245 265 #(loop##185) ()) #(68 197 #(binding) (#(116 193 #(have-type) ())))))))))
(928 loop##184 927 246 (#(4 74 #(exps) ())))
(929 #f 903 368 (#(4 31 #(node env constrained) ())))
(930 #f 929 9 (#(4 17 #(node) ())))
(931 #f 903 428 (#(4 62 #(node env constrained) (#(38 62 #(proc-type) ())))))
(933 reconstruct-apply 932 4 (#(4 59 #(node env constrained) (#(35 59 #(proc-type) ())))))
(934 declare-operator-type 932 106 (#(4 38 #(ops type) ())))
(935 #f 934 19 (#(4 14 #(op) ())))
(936 last 932 486 (#(4 32 #(x) ())))
(937 constant-type 932 494 (#(4 94 #(x) ())))
(939 template-code 938 12 (#(4 12 #(tem) ())))
(940 template-info 938 20 (#(4 12 #(tem) ())))
(941 set-template-code! 938 28 (#(4 15 #(tem cv) ())))
(942 set-template-info! 938 36 (#(4 15 #(tem info) ())))
(944 segment->template 943 28 (#(4 176 #(segment name pc-in-parent) (#(17 176 #(cv) (#(40 176 #(astate) (#(54 176 #(parent-data) (#(101 176 #(name) (#(150 176 #(debug-data) ())))))))))))))
(945 #f 944 170 (#(21 72 #(maps) ())))
(946 segment-data->template 943 36 (#(4 76 #(cv debug-data literals) (#(27 76 #(template) (#(61 76 #(loop##188) ())))))))
(947 loop##187 946 62 (#(4 46 #(lits i) ())))
(948 astate-literals 943 84 (#(4 12 #(r##189) ())))
(949 set-astate-literals! 943 92 (#(4 15 #(r##190 new##191) ())))
(950 astate-count 943 100 (#(4 12 #(r##192) ())))
(951 set-astate-count! 943 108 (#(4 15 #(r##193 new##194) ())))
(952 astate-pc 943 116 (#(4 12 #(r##195) ())))
(953 set-astate-pc! 943 124 (#(4 15 #(r##196 new##197) ())))
(954 astate-code-vector 943 132 (#(4 12 #(r##198) ())))
(955 make-astate 943 140 (#(4 20 #(cv) ())))
(956 emit-byte! 943 148 (#(4 44 #(a byte) ())))
(957 emit-literal! 943 156 (#(4 143 #(a thing) (#(41 138 #(probe count) ())))))
(958 emit-segment! 943 164 (#(4 14 #(astate segment) ())))
(959 #f 943 175 (#(4 6 #(astate) ())))
(960 instruction 943 186 (#(7 29 #(opcode operands) ())))
(961 #f 960 24 (#(4 29 #(astate) ())))
(962 #f 961 20 (#(4 14 #(operand) ())))
(963 sequentially 943 194 (#(5 18 #(segments) ())))
(964 sequentially-2 943 202 (#(4 47 #(seg1 seg2) ())))
(965 #f 964 42 (#(4 29 #(astate) ())))
(966 instruction-with-literal 943 210 (#(4 13 #(opcode thing) ())))
(967 #f 966 8 (#(4 29 #(astate) ())))
(968 instruction-with-location 943 218 (#(4 13 #(opcode thunk) ())))
(969 #f 968 8 (#(4 35 #(astate) ())))
(970 instruction-with-template 943 226 (#(4 13 #(opcode segment name) ())))
(971 #f 970 8 (#(4 49 #(astate) ())))
(972 make-label 943 234 ())
(973 instruction-using-label 943 242 (#(7 42 #(opcode label rest) (#(30 42 #(segment) ())))))
(974 #f 973 37 (#(4 80 #(astate) (#(18 80 #(instr) ())))))
(975 attach-label 943 250 (#(4 16 #(label segment) ())))
(976 #f 975 11 (#(4 58 #(astate) (#(22 58 #(pc cv) ())))))
(977 #f 976 27 (#(4 62 #(instr+origin) (#(18 62 #(instr origin) (#(27 62 #(offset) ())))))))
(978 note-source-code 943 294 (#(4 30 #(info segment) ())))
(979 #f 978 22 (#(4 66 #(astate) (#(33 66 #(dd) ())))))
(980 note-environment 943 302 (#(4 30 #(vars segment) ())))
(981 #f 980 22 (#(4 101 #(astate) (#(14 101 #(pc-before) (#(31 101 #(env-maps) ())))))))
(982 emit-with-environment-maps! 943 310 (#(4 30 #(astate segment) ())))
(983 #f 982 24 ())
(985 new-template-uid 984 4 (#(7 18 #(uid) ())))
(986 template-uid 984 20 ())
(987 set-template-uid! 984 28 (#(4 9 #(uid) ())))
(988 debug-flag-accessor 984 128 (#(4 24 #(name) (#(21 24 #(access) ())))))
(989 #f 988 22 ())
(990 debug-flag-modifier 984 136 (#(4 24 #(name) (#(21 24 #(modify) ())))))
(991 #f 990 22 (#(4 23 #(new) ())))
(992 with-fresh-compiler-state 984 246 (#(4 58 #(thunk) ())))
(993 #f 992 52 ())
(994 #f 993 3 ())
(995 #f 993 6 (#(4 9 #(s) ())))
(996 saving-and-restoring 984 254 (#(4 22 #(fetch store! other thunk) (#(9 22 #(swap) ())))))
(997 swap 996 5 (#(13 31 #(temp) ())))
(999 debug-data-source 998 44 (#(4 12 #(r##199) ())))
(1000 set-debug-data-source! 998 52 (#(4 15 #(r##200 new##201) ())))
(1001 debug-data-env-maps 998 60 (#(4 12 #(r##202) ())))
(1002 set-debug-data-env-maps! 998 68 (#(4 15 #(r##203 new##204) ())))
(1003 debug-data-pc-in-parent 998 76 (#(4 12 #(r##205) ())))
(1004 debug-data-parent 998 84 (#(4 12 #(r##206) ())))
(1005 debug-data-name 998 92 (#(4 12 #(r##207) ())))
(1006 debug-data-uid 998 100 (#(4 12 #(r##208) ())))
(1007 new-debug-data 998 125 (#(4 32 #(name parent pc-in-parent) ())))
(1008 #f 998 137 (#(4 27 #(dd) ())))
(1009 debug-data->info 998 148 (#(4 60 #(debug-data) ())))
(1010 get-debug-data 998 156 (#(4 45 #(info) ())))
(1011 note-debug-data! 998 164 (#(4 28 #(dd) ())))
(1012 interesting-debug-data? 998 172 (#(4 116 #(debug-data) (#(28 114 #(temp##211) (#(55 114 #(temp##210) (#(86 114 #(temp##209) ())))))))))
(1013 debug-data-names 998 180 (#(4 54 #(info) (#(18 54 #(dd) ())))))
(1014 template-debug-data 998 188 (#(4 20 #(tem) ())))
(1015 template-id 998 196 (#(4 43 #(tem) (#(18 43 #(info) ())))))
(1016 template-name 998 204 (#(4 33 #(tem) (#(18 33 #(probe) ())))))
(1017 template-names 998 212 (#(4 20 #(tem) ())))
(1019 compile-top 1018 4 (#(4 35 #(exp cenv depth cont) ())))
(1020 compile 1018 12 (#(4 74 #(exp cenv depth cont) (#(21 74 #(node) (#(48 74 #(node) ())))))))
(1021 #f 1018 32 (#(4 26 #(node cenv depth cont) ())))
(1022 #f 1018 35 (#(4 7 #(frob) ())))
(1023 #f 1022 5 (#(4 22 #(node cenv depth cont) ())))
(1024 #f 1023 5 (#(4 20 #(form cenv) ())))
(1025 define-compilator 1018 48 (#(4 17 #(name proc) ())))
(1026 #f 1018 63 (#(4 54 #(node cenv depth cont) (#(14 54 #(obj) ())))))
(1027 #f 1018 81 (#(4 40 #(node cenv depth cont) (#(14 40 #(exp) (#(27 40 #(obj) ())))))))
(1028 compile-constant 1018 92 (#(4 41 #(obj depth cont) ())))
(1029 #f 1018 107 (#(4 216 #(node cenv depth cont) (#(21 216 #(binding) (#(31 216 #(name) (#(68 173 #(level+over) (#(90 173 #(back) (#(98 173 #(over) (#(103 173 #(temp##212) ())))))))))))))))
(1030 #f 1018 125 (#(4 228 #(node cenv depth cont) (#(14 228 #(exp) (#(37 228 #(lhs-node) (#(47 228 #(name) (#(65 228 #(binding) (#(145 178 #(level+over) ())))))))))))))
(1031 #f 1018 143 (#(4 228 #(node cenv depth cont) (#(39 228 #(exp alt-label join-label join-segment) ())))))
(1032 #f 1018 161 (#(4 33 #(node cenv depth cont) (#(14 33 #(exp) ())))))
(1033 #f 1018 169 (#(176 179 #(operator/lambda operator/set! operator/unassigned) ())))
(1034 compile-begin 1033 4 (#(4 53 #(exp-list cenv depth cont) (#(34 53 #(dummy) (#(38 53 #(loop) ())))))))
(1035 loop 1034 39 (#(4 110 #(exp-list i) ())))
(1036 compile-call 1033 12 (#(4 204 #(node cenv depth cont) (#(14 204 #(exp) (#(22 204 #(proc-node) (#(155 204 #(new-node) ()) #(56 106 #(formals) ())))))))))
(1037 compile-redex 1033 55 (#(4 140 #(proc-node args cenv depth cont) (#(14 140 #(proc-exp) (#(25 140 #(formals) (#(36 140 #(body) ())))))))))
(1038 compile-unknown-call 1033 63 (#(4 140 #(node cenv depth cont) (#(14 140 #(exp) (#(127 140 #(call) ())))))))
(1039 maybe-push-continuation 1033 71 (#(4 90 #(code depth cont) (#(32 90 #(label) ())))))
(1040 push-arguments 1033 79 (#(4 48 #(node cenv depth) (#(18 48 #(exp) (#(22 48 #(recur) ())))))))
(1041 recur 1040 23 (#(4 98 #(args depth i) ())))
(1042 push-all-with-names 1033 87 (#(4 96 #(exp-list names cenv depth) ())))
(1043 #f 1033 102 (#(4 75 #(node cenv depth cont) (#(26 75 #(exp name) ())))))
(1044 compile-lambda 1033 113 (#(4 118 #(exp cenv body-name) (#(15 118 #(formals) (#(29 118 #(nargs) ())))))))
(1045 compile-lambda-code 1033 121 (#(4 214 #(formals body cenv name) (#(146 209 #(vars) (#(175 209 #(cenv) ()))) #(53 127 #(nargs) ())))))
(1046 compile-letrec 1033 177 (#(4 168 #(node cenv depth cont) (#(14 168 #(exp) (#(25 168 #(specs) (#(36 168 #(body) ())))))))))
(1047 #f 1046 71 (#(4 21 #(spec) ())))
(1048 #f 1046 142 (#(4 15 #(spec) ())))
(1049 compile-body 1033 204 (#(4 17 #(body cenv depth cont) ())))
(1050 #f 1049 11 (#(4 81 #(defs exps) ())))
(1051 #f 1050 44 (#(4 15 #(node) ())))
(1052 make-cont 1033 229 (#(4 13 #(seg source-info) ())))
(1053 return-cont 1033 285 (#(4 13 #(name) ())))
(1054 return-cont? 1033 293 (#(4 14 #(cont) ())))
(1055 fall-through-cont 1033 301 (#(4 19 #(exp i) ())))
(1056 fall-through-cont? 1033 309 (#(4 21 #(cont) ())))
(1057 ignore-values-cont 1033 349 (#(4 19 #(exp i) ())))
(1058 ignore-values-cont? 1033 357 (#(4 14 #(cont) ())))
(1059 deliver-value 1033 365 (#(4 32 #(segment cont) ())))
(1060 named-cont 1033 373 (#(4 13 #(name) ())))
(1061 cont-name 1033 381 (#(4 22 #(cont) ())))
(1062 bind-vars 1033 389 (#(4 25 #(names cenv) (#(22 25 #(level) ())))))
(1063 #f 1062 23 (#(4 36 #(name) (#(20 36 #(loop) ())))))
(1064 loop 1063 21 (#(4 67 #(over names) ())))
(1065 initial-cenv 1033 397 (#(4 17 #(cenv) ())))
(1066 environment-level 1033 405 (#(4 11 #(cenv) ())))
(1067 name-node-binding 1033 430 (#(4 37 #(node cenv) (#(21 37 #(temp##213) ())))))
(1068 generate-trap 1033 438 (#(7 68 #(cont stuff) ())))
(1069 careful-sequentially 1033 446 (#(4 256 #(seg1 seg2 depth cont) ())))
(1071 type-check 1070 487 (#(4 274 #(node cenv) (#(14 274 #(form) (#(62 271 #(proc-type) (#(82 271 #(args) ())))))))))
(1072 #f 1071 132 (#(4 15 #(arg) ())))
(1073 report-type-error 1070 495 (#(4 45 #(message node proc-type) ())))
(1074 #f 1070 506 (#(4 34 #(node cenv depth cont) ())))
(1075 #f #f #f (#(99 111 #(loop##221) ())))
(1076 define-compiler-primitive 1075 4 (#(4 65 #(name type compilator closed) (#(35 46 #(temp##214) ())))))
(1078 define-closed-compilator 1075 29 (#(4 17 #(name proc) ())))
(1079 #f 1075 44 (#(4 81 #(node cenv depth cont) (#(20 81 #(name) ())))))
(1080 get-closed-compilator 1075 55 (#(4 14 #(op) ())))
(1081 direct-compilator 1075 63 (#(4 7 #(opcode) ())))
(1082 #f 1081 5 (#(4 89 #(node cenv depth cont) (#(17 89 #(args) ())))))
(1083 direct-closed-compilator 1075 71 (#(4 7 #(opcode) ())))
(1084 #f 1083 5 (#(12 103 #(arg-specs) ())))
(1085 nargs->domain 1075 79 (#(4 23 #(nargs) (#(8 23 #(loop##216) ())))))
(1086 loop##215 1085 9 (#(4 40 #(nargs l) ())))
(1087 checked-compilator 1075 87 (#(4 7 #(nargs compilator) ())))
(1088 #f 1087 5 (#(4 67 #(node cenv depth cont) (#(14 67 #(exp) ())))))
(1089 loop##217 1075 100 (#(4 311 #(opcode) (#(13 311 #(temp##220) (#(50 299 #(arg-specs name) (#(67 299 #(temp##219) (#(156 299 #(temp##218) ())))))))))))
(1090 define-simple-primitive 1075 116 (#(4 158 #(name type segment) (#(30 158 #(c winner?) (#(118 158 #(nargs) ()) #(67 115 #(temp##222) ())))))))
(1091 simple-compilator 1075 124 (#(4 7 #(segment) ())))
(1092 #f 1091 5 (#(4 80 #(node cenv depth cont) (#(17 80 #(args) ())))))
(1093 simple-closed-compilator 1075 132 (#(4 7 #(nargs segment) ())))
(1094 #f 1093 5 ())
(1095 define-data-struct-primitives 1075 140 (#(7 176 #(name predicate maker slots) (#(24 176 #(type-byte) (#(29 176 #(def-prim) (#(160 176 #(loop##225) ())))))))))
(1096 def-prim 1095 25 (#(7 35 #(name type op stuff) ())))
(1097 loop##223 1095 161 (#(4 179 #(i slots) (#(13 179 #(temp##224) (#(33 161 #(slot) ())))))))
(1098 #f 1075 310 (#(4 11 #(stuff) ())))
(1099 define-vector-primitives 1075 324 (#(4 353 #(name element-type make length ref set!) (#(21 353 #(type-byte) (#(26 353 #(s-a) (#(31 353 #(def-prim) ())))))))))
(1100 s-a 1099 22 (#(5 33 #(syms) ())))
(1101 def-prim 1099 27 (#(4 29 #(name type op) ())))
(1102 #f 1075 490 (#(257 276 #(cons-instruction) ())))
(1103 #f 1102 28 (#(4 26 #(name) ())))
(1104 #f 1102 43 (#(4 26 #(name) ())))
(1105 #f 1102 58 (#(4 26 #(name) ())))
(1106 #f 1102 126 (#(4 125 #(node cenv depth cont) (#(14 125 #(exp) (#(22 125 #(args) ())))))))
(1108 #f 1102 146 (#(4 192 #(node cenv depth cont) (#(29 192 #(args exp) (#(46 192 #(producer consumer) ())))))))
(1109 #f 1102 149 (#(15 148 #(label) ())))
(1110 define-n-ary-compiler-primitive 1102 160 (#(4 66 #(name result-type min-nargs compilator closed) ())))
(1111 n-ary-primitive-compilator 1102 168 (#(4 7 #(name min-nargs compilator) ())))
(1112 #f 1111 5 (#(4 100 #(node cenv depth cont) (#(14 100 #(exp) ())))))
(1113 #f 1102 185 (#(4 151 #(node cenv depth cont) (#(14 151 #(exp) (#(22 151 #(proc+args+rest) (#(42 151 #(rest+args) (#(50 151 #(args) (#(85 151 #(args+proc+rest) ())))))))))))))
(1115 #f 1102 208 (#(4 78 #(node cenv depth cont) (#(17 78 #(args) ())))))
(1117 #f 1102 267 (#(4 142 #(node cenv depth cont) (#(14 142 #(exp) (#(22 142 #(args) ())))))))
(1118 #f 1117 98 (#(4 8 #(arg) ())))
(1121 push-all-but-last 1102 304 (#(4 26 #(args cenv depth exp) (#(8 26 #(recur) ())))))
(1122 recur 1121 9 (#(4 105 #(args depth i) (#(42 105 #(first-code) ())))))
(1123 #f #f #f (#(215 218 #(get-undefined) ()) #(86 89 #(stob/location location-contents-offset) ())))
(1124 compile-form 1123 4 (#(4 41 #(form p) ())))
(1125 compile-file 1123 12 (#(4 76 #(filename p) (#(21 76 #(scanned-forms) (#(35 76 #(o-port) (#(58 76 #(template) ())))))))))
(1126 compile-and-run-forms 1123 20 (#(4 38 #(forms p filename run noisy?) ())))
(1127 compile-and-run-file 1123 28 (#(4 35 #(filename p run noisy?) ())))
(1128 compile-and-run-scanned-forms 1123 36 (#(4 53 #(scanned-forms p filename run noisy?) (#(9 53 #(do-it) (#(14 53 #(do-them) ())))))))
(1129 do-it 1128 5 (#(4 29 #(scanned-form) ())))
(1130 do-them 1128 10 (#(33 45 #(loop##227) ())))
(1131 loop##226 1130 34 (#(4 57 #(scanned-forms) ())))
(1132 #f 1128 20 (#(5 29 #(results) ())))
(1133 compile-scanned-forms 1123 44 (#(7 79 #(scanned-forms p filename noisy? env-option) (#(53 79 #(cenv) ())))))
(1134 #f 1133 73 (#(50 62 #(recur) ())))
(1135 recur 1134 51 (#(4 96 #(scanned-forms) ())))
(1136 compile-scanned-form 1123 52 (#(4 78 #(node cenv cont noisy?) (#(41 62 #(segment) ())))))
(1137 compile-definition 1123 87 (#(4 145 #(node cenv cont noisy?) (#(14 145 #(form) (#(25 145 #(name) (#(44 145 #(loc) ())))))))))
(1138 #f 1137 52 ())
(1139 prepare-cenv 1123 96 (#(4 17 #(p env) ())))
(1140 cenv-package 1123 104 (#(4 11 #(env) ())))
(1141 get-location 1123 146 (#(4 101 #(binding cenv name want-type) ())))
(1142 #f 1141 34 ())
(1143 #f 1141 66 ())
(1144 #f 1141 84 ())
(1145 #f 1141 99 ())
(1146 location-for-undefined 1123 154 (#(4 104 #(cenv name want-type) (#(55 104 #(p) ())))))
(1147 package-accessor-on-demand 1123 162 (#(4 7 #(id init) ())))
(1148 #f 1147 5 (#(4 62 #(p) (#(21 62 #(temp##228) (#(40 62 #(foo) ())))))))
(1149 location-on-demand 1123 170 (#(4 7 #(accessor) ())))
(1150 #f 1149 5 (#(4 82 #(p name) (#(18 82 #(table) (#(35 82 #(temp##229) (#(60 82 #(new) ())))))))))
(1152 location-for-reference 1123 216 (#(4 29 #(p name) (#(8 29 #(loop) ())))))
(1153 loop 1152 9 (#(4 83 #(opens) ())))
(1155 note-caching 1123 262 (#(4 63 #(cenv name place) ())))
(1156 grumble 1123 270 (#(4 59 #(cenv) ())))
(1157 make-startup-procedure 1123 278 (#(4 120 #(inits resumer) (#(9 120 #(nargs) ())))))
(1158 #f 1157 14 (#(4 65 #(init seg) ())))
(1160 eval 1159 4 (#(4 30 #(form p) ())))
(1161 #f 1160 22 (#(4 14 #(template) ())))
(1162 load 1159 12 (#(7 45 #(filename package-option) (#(35 45 #(p) ())))))
(1163 #f 1162 39 ())
(1164 #f 1163 6 ())
(1165 #f 1164 9 (#(4 14 #(template) ())))
(1166 eval-from-file 1159 20 (#(4 14 #(forms p filename) ())))
(1167 #f 1166 8 ())
(1168 #f 1167 6 ())
(1169 #f 1168 12 (#(4 14 #(template) ())))
(1170 eval-scanned-forms 1159 28 (#(4 32 #(forms p filename) ())))
(1171 #f 1170 14 (#(4 14 #(template) ())))
(1172 invoke-template 1159 36 (#(4 22 #(template p) ())))
(1174 continuation-cont 1173 4 (#(4 12 #(c) ())))
(1175 continuation-pc 1173 12 (#(4 12 #(c) ())))
(1176 continuation-template 1173 20 (#(4 12 #(c) ())))
(1177 continuation-env 1173 28 (#(4 12 #(c) ())))
(1178 continuation-arg 1173 44 (#(4 16 #(c i) ())))
(1179 continuation-arg-count 1173 52 (#(4 13 #(c) ())))
(1180 continuation-parent 1173 60 (#(4 133 #(a) (#(18 133 #(b) (#(87 108 #(loop) ())))))))
(1181 loop 1180 88 (#(4 51 #(env) (#(22 51 #(temp##230) ())))))
(1183 usual-exception-handler 1182 4 (#(7 22 #(opcode args) ())))
(1184 define-exception-handler 1182 12 (#(4 15 #(opcode proc) ())))
(1185 signal-exception 1182 20 (#(4 23 #(opcode args) ())))
(1186 #f 1182 60 (#(4 34 #(opcode args) ())))
(1187 make-opcode-generic! 1182 71 (#(4 29 #(opcode table) ())))
(1188 really-signal-condition 1182 79 (#(4 29 #(condition) (#(8 29 #(loop) ())))))
(1189 loop 1188 9 (#(4 17 #(hs) ())))
(1190 #f 1189 8 ())
(1191 with-handler 1182 87 (#(4 45 #(h thunk) ())))
(1192 initialize-exceptions! 1182 111 (#(4 11 #(thunk) ())))
(1193 #f 1192 5 (#(4 44 #(k) ())))
(1194 last-resort-condition-handler 1182 119 (#(4 29 #(halt) (#(26 29 #(interrupt/keyboard losing?) ())))))
(1195 #f 1194 27 (#(4 66 #(condition punt) ())))
(1196 #f 1195 21 (#(4 50 #(c) ())))
(1197 report-utter-lossage 1182 127 (#(4 104 #(condition c) (#(18 104 #(out) ())))))
(1198 #f 1197 76 (#(4 42 #(id+pc) ())))
(1199 ignore-errors 1182 135 (#(4 11 #(thunk) ())))
(1200 #f 1199 5 (#(4 14 #(k) ())))
(1201 #f 1200 5 (#(4 29 #(c next) ())))
(1202 #f 1182 162 (#(4 112 #(obj) ())))
(1203 continuation-preview 1182 173 (#(4 74 #(c) ())))
(1205 #f 1204 23 (#(4 55 #(opcode args) (#(24 55 #(probe) ())))))
(1206 define-wna-handler 1204 42 (#(4 21 #(proc handler) ())))
(1207 wna-lose 1204 73 (#(4 26 #(proc args) ())))
(1208 #f 1204 85 (#(4 17 #(args) ())))
(1209 #f 1204 100 (#(4 17 #(args) ())))
(1210 #f 1204 115 (#(4 58 #(args) ())))
(1211 #f 1204 130 (#(4 58 #(args) ())))
(1212 #f 1204 145 (#(4 58 #(args) ())))
(1213 #f 1204 160 (#(4 59 #(args) ())))
(1214 #f 1204 175 (#(4 63 #(args) (#(46 61 #(recur) ())))))
(1215 recur 1214 47 (#(4 46 #(l) ())))
(1216 #f 1204 190 (#(4 36 #(args) ())))
(1217 #f 1204 205 (#(4 36 #(args) ())))
(1218 #f 1204 220 (#(4 36 #(args) ())))
(1219 #f 1204 235 (#(4 70 #(args) ())))
(1220 #f 1204 250 (#(4 17 #(args) ())))
(1221 comparison-wna 1204 261 (#(4 7 #(compare) ())))
(1222 #f 1221 5 (#(4 82 #(args) (#(51 72 #(loop) ())))))
(1223 loop 1222 52 (#(4 60 #(x args) (#(18 60 #(y args) ())))))
(1224 #f #f #f (#(15 18 #(display newline) ())))
(1225 display-condition 1224 16 (#(4 42 #(c port) ())))
(1226 #f 1225 9 ())
(1227 really-display-condition 1224 25 (#(4 249 #(c port) (#(18 249 #(stuff) (#(90 249 #(stuff) (#(221 237 #(spaces) ()) #(159 194 #(message) ())))))))))
(1228 #f 1227 222 (#(4 50 #(irritant) ())))
(1229 #f 1224 87 (#(4 7 #(c) ())))
(1230 limited-write 1224 98 (#(4 23 #(obj port max-depth max-length) (#(8 23 #(recur) ())))))
(1231 recur 1230 9 (#(4 140 #(obj depth) (#(31 107 #(temp##235) (#(48 107 #(temp##234) (#(62 107 #(temp##233) (#(78 107 #(temp##232) (#(93 107 #(temp##231) ())))))))))))))
(1232 #f 1231 134 (#(4 28 #(escape) (#(20 23 #(count) ())))))
(1233 #f 1232 21 (#(4 103 #(sub) (#(42 56 #(temp##236) ())))))
(1235 command-processor 1234 4 (#(4 43 #(arg) (#(30 43 #(in out) (#(34 43 #(loop) ())))))))
(1236 loop 1235 35 ())
(1237 #f 1236 7 (#(4 14 #(go) ())))
(1238 #f 1237 5 (#(4 92 #(c punt) (#(22 37 #(temp##237) ())))))
(1239 #f 1237 8 (#(31 157 #(form) (#(126 133 #(form) ())))))
(1240 #f 1239 51 ())
(1241 #f 1239 127 ())
(1242 #f 1239 134 (#(5 28 #(results) ())))
(1243 #f 1242 10 (#(4 28 #(result) ())))
(1244 mini-load 1234 12 (#(4 85 #(in) (#(10 85 #(c) (#(66 85 #(filename) ())))))))
(1245 read-string 1234 20 (#(4 23 #(port delimiter?) (#(8 23 #(loop) ())))))
(1246 loop 1245 9 (#(4 80 #(l n) (#(10 80 #(c) (#(20 36 #(temp##238) ())))))))
(1247 #f #f #f (#(21 33 #(loop##241) ())))
(1248 loop##239 1247 22 (#(4 42 #(i) (#(13 42 #(temp##240) ())))))
(1249 #f 1248 28 (#(4 17 #(enabled-int) ())))
(1250 initialize-interrupts! 1247 38 ())
(1251 with-interrupts-inhibited 1247 100 (#(4 14 #(thunk) ())))
(1252 with-interrupts-allowed 1247 108 (#(4 14 #(thunk) ())))
(1253 with-interrupts 1247 116 (#(4 22 #(interrupts thunk) (#(10 22 #(ei) ())))))
(1254 #f 1253 11 (#(5 15 #(results) ())))
(1255 enabled-interrupts 1247 124 (#(8 14 #(e) ())))
(1256 interrupt-before-heap-overflow! 1247 132 (#(5 52 #(maybe-required-space) (#(35 52 #(space) ())))))
(1257 #f 1256 42 (#(4 23 #(ei) ())))
(1259 usual-resumer 1258 4 (#(4 7 #(entry-point) ())))
(1260 #f 1259 5 (#(4 20 #(resume-arg in out) ())))
(1261 #f 1260 14 ())
(1262 #f 1261 22 ())
(1264 start 1263 4 (#(4 7 #(structs-to-open) ())))
(1265 #f 1264 5 (#(4 11 #(structs-thunk) ())))
(1266 #f 1265 5 (#(4 59 #(arg) (#(28 51 #(b) ())))))
(1267 #f 1266 53 ())
(1268 make-built-in-structures 1263 12 (#(4 81 #(structs) (#(25 81 #(p) (#(45 81 #(s) ())))))))
(1269 #f 1268 33 ())
(1270 #f 1268 50 (#(4 23 #(name+struct) ())))
(1271 initialize-interaction-environment! 1263 28 (#(4 130 #(built-in-structures) (#(36 130 #(scheme for-syntax) ())))))
(1272 make-initial-package 1263 36 (#(4 87 #(built-in-structures structs-to-open) (#(66 87 #(p) ())))))
(1273 #f 1272 16 (#(4 14 #(name) ())))
(1274 make-env-for-syntax-promise 1263 44 (#(4 11 #(scheme) ())))
(1275 #f 1274 5 ())
(1277 inline-transform 1276 4 (#(4 69 #(form aux-names) (#(54 57 #(formals body) ())))))
(1278 #f 1277 55 (#(4 82 #(e r c) (#(12 82 #(args) ())))))
(1279 #f 1277 61 (#(4 28 #(e r c) ())))
(1280 make-substitution 1276 12 (#(4 27 #(r formals args) (#(24 27 #(subs) ())))))
(1281 #f 1280 25 (#(4 57 #(name) (#(21 57 #(probe) ())))))
(1282 substitute 1276 20 (#(4 205 #(form r) (#(57 186 #(temp##242) (#(146 186 #(keyword) ())))))))
(1283 #f 1282 126 (#(4 14 #(form) ())))
(1284 #f 1282 166 (#(4 15 #(form) ())))
(1285 qualified? 1276 28 (#(4 23 #(thing) ())))
(1286 qualified->name 1276 36 (#(4 20 #(q r) (#(8 20 #(recur) ())))))
(1287 recur 1286 9 (#(4 91 #(q) (#(38 84 #(name) ())))))
(1288 get-qualified-env 1276 44 (#(4 157 #(env parent) (#(21 157 #(binding) (#(50 123 #(s) ())))))))
(1289 name->qualified 1276 52 (#(4 87 #(name env) (#(35 63 #(symbol) (#(43 55 #(loop) ())))))))
(1290 loop 1289 44 (#(4 125 #(name) (#(14 125 #(parent) (#(38 122 #(gparent) ())))))))
(1291 qlookup 1276 60 (#(4 41 #(env parent symbol) (#(21 41 #(binding) ())))))
(1292 generic-lookup 1276 68 (#(4 97 #(env name) ())))
(1296 make-a-package 1295 4 (#(4 69 #(opens-thunk accesses-thunk for-syntax-thunk dir clauses names) ())))
(1297 #f 1296 23 ())
(1298 init-defpackage! 1295 12 (#(4 13 #(evaluator foo) ())))
(1299 loser 1295 20 (#(5 21 #(rest) ())))
(1300 *verify-later!* 1295 52 (#(4 6 #(thunk) ())))
(1301 verify-later! 1295 60 (#(4 11 #(thunk) ())))
(1302 set-verify-later! 1295 68 (#(4 9 #(proc) ())))
(1304 ensure-loaded 1303 4 (#(5 18 #(structs) ())))
(1305 #f 1304 9 (#(4 19 #(p) ())))
(1306 #f 1304 12 (#(4 14 #(stuff p) ())))
(1307 #f 1306 8 ())
(1308 #f 1307 7 (#(4 23 #(filename+scanned-forms) ())))
(1310 #f 1309 1 (#(14 432 #(the-objects get-location) ())))
(1311 get-location 1310 10 (#(4 7 #(loc) ())))
(1334 #f 1333 51 (#(4 105 #(input##245 rename##246 compare##247) (#(12 105 #(tail##244) (#(51 102 #(?exp) ()) #(21 40 #(temp##243) ())))))))
(1349 #f 1348 114 (#(4 102 #(form rename compare) (#(51 102 #(type-name component-name %definitely-name->enumerand %quote) ())))))
(1350 #f 1348 242 (#(4 88 #(form rename compare) (#(66 88 #(name parts conc %define %begin %quote) (#(70 88 #(loop##249) ())))))))
(1351 conc 1350 26 (#(5 33 #(things) ())))
(1352 #f 1351 17 (#(4 20 #(thing) ())))
(1353 loop##248 1350 71 (#(4 180 #(i p r) ())))
(1355 #f 1354 81 (#(4 799 #(input##264 rename##265 compare##266) (#(12 799 #(tail##263) (#(589 796 #(?id) (#(600 796 #(?type) (#(617 796 #(?constructor) (#(635 796 #(?arg) (#(653 796 #(?pred) (#(671 796 #(?more) ()))))))))))) #(472 578 #(temp##262) (#(487 576 #(temp##261) (#(502 574 #(temp##260) (#(551 570 #(temp##259) ()) #(521 540 #(temp##258) ()))))))) #(130 463 #(?id) (#(141 463 #(?type) (#(158 463 #(?constructor) (#(176 463 #(?arg) (#(203 463 #(?field) (#(230 463 #(?field-stuff) ()))))))))))) #(21 119 #(temp##255) (#(36 117 #(temp##254) (#(51 115 #(temp##253) (#(96 111 #(loop) ()) #(70 89 #(temp##250) ())))))))))))))
(1356 loop 1355 97 (#(4 62 #(l) (#(13 62 #(temp##252) (#(40 45 #(temp##251) ())))))))
(1357 #f 1355 181 (#(4 10 #(temp##256) ())))
(1358 #f 1355 208 (#(4 10 #(temp##257) ())))
(1359 #f 1355 378 (#(4 29 #(?arg) ())))
(1360 #f 1355 426 (#(4 13 #(?field ?field-stuff) ())))
(1361 #f 1354 263 (#(4 315 #(input##276 rename##277 compare##278) (#(12 315 #(tail##275) (#(94 312 #(?constructor) (#(105 312 #(?id) (#(119 312 #(?type) (#(146 312 #(?arg) (#(173 312 #(?arg-type) ()))))))))) #(21 83 #(temp##272) (#(36 81 #(temp##271) (#(51 79 #(temp##270) (#(62 77 #(loop) ())))))))))))))
(1362 loop 1361 63 (#(4 93 #(l) (#(13 93 #(temp##269) (#(40 76 #(temp##268) (#(55 74 #(temp##267) ())))))))))
(1363 #f 1361 124 (#(4 10 #(temp##273) ())))
(1364 #f 1361 151 (#(4 13 #(temp##274) ())))
(1365 #f 1354 391 (#(4 85 #(e r c) (#(63 85 #(%define-accessor %begin type id field-specs) (#(67 85 #(loop##280) ())))))))
(1366 loop##279 1365 68 (#(4 72 #(i field-specs ds) ())))
(1367 #f 1354 432 (#(4 728 #(input##289 rename##290 compare##291) (#(12 728 #(tail##288) (#(385 725 #(?id) (#(396 725 #(?index) (#(410 725 #(?accessor) (#(428 725 #(?modifier) ()))))))) #(304 374 #(temp##287) (#(319 372 #(temp##286) (#(334 370 #(temp##285) (#(349 368 #(temp##284) ()))))))) #(85 295 #(?id) (#(96 295 #(?index) (#(110 295 #(?accessor) ()))))) #(21 74 #(temp##283) (#(36 72 #(temp##282) (#(51 70 #(temp##281) ())))))))))))
(1381 #f 1380 215 (#(4 229 #(input##295 rename##296 compare##297) (#(12 229 #(tail##294) (#(76 226 #(?name) (#(87 226 #(?args) (#(95 226 #(?body) ()))))) #(21 62 #(temp##293) (#(40 45 #(temp##292) ())))))))))
(1382 #f 1380 390 (#(4 119 #(input##301 rename##302 compare##303) (#(12 119 #(tail##300) (#(68 116 #(?name) (#(79 116 #(?exp) ()))) #(21 57 #(temp##299) (#(36 55 #(temp##298) ())))))))))
(1383 #f 1380 431 (#(4 393 #(input##310 rename##311 compare##312) (#(12 393 #(tail##309) (#(302 390 #(?name) (#(313 390 #(?exp) ()))) #(236 291 #(temp##308) (#(268 287 #(temp##307) ()))) #(107 227 #(?name) (#(118 227 #(?exp) ()))) #(21 93 #(temp##306) (#(70 89 #(temp##305) ()) #(40 59 #(temp##304) ())))))))))
(1384 #f 1383 335 (#(4 57 #(?name) ())))
(1385 #f 1380 472 (#(4 350 #(input##316 rename##317 compare##318) (#(12 350 #(tail##315) (#(87 347 #(?name) (#(98 347 #(?exp) ()))) #(21 76 #(temp##314) (#(53 72 #(temp##313) ())))))))))
(1386 #f 1385 120 (#(4 29 #(?name) ())))
(1387 #f 1385 187 (#(4 165 #(?name) ())))
(1389 #f 1388 359 (#(4 219 #(input##322 rename##323 compare##324) (#(12 219 #(tail##321) (#(68 216 #(?name) (#(79 216 #(?sig) ()))) #(21 57 #(temp##320) (#(36 55 #(temp##319) ())))))))))
(1390 #f 1388 400 (#(4 469 #(input##334 rename##335 compare##336) (#(12 469 #(tail##333) (#(452 466 #(?name) (#(463 466 #(?sig) ()))) #(405 441 #(temp##332) (#(420 439 #(temp##331) ()))) #(323 396 #(?name) (#(337 396 #(?sig) ()))) #(207 312 #(temp##330) (#(222 310 #(temp##329) (#(241 293 #(temp##328) ()))))) #(137 198 #(?name) (#(151 198 #(?item) ()))) #(21 126 #(temp##327) (#(36 124 #(temp##326) (#(55 107 #(temp##325) ())))))))))))
(1391 #f 1390 380 (#(4 35 #(?sig) ())))
(1392 #f 1388 441 (#(4 46 #(e r c) (#(24 46 #(name items) (#(28 46 #(loop) ())))))))
(1393 loop 1392 29 (#(4 249 #(items plain others) (#(139 249 #(item) ())))))
(1394 #f 1388 472 (#(226 234 #(parse-package-clauses) ())))
(1395 #f 1394 178 (#(4 322 #(input##348 rename##349 compare##350) (#(12 322 #(tail##347) (#(100 319 #(?name) (#(120 319 #(?sig) (#(140 319 #(?keyword) (#(161 319 #(?stuff) ()))))))) #(21 77 #(temp##342) (#(58 73 #(loop) ()) #(36 51 #(loop) ())))))))))
(1396 loop 1395 37 (#(4 93 #(l) (#(13 93 #(temp##339) (#(40 76 #(temp##338) (#(55 74 #(temp##337) ())))))))))
(1397 loop 1395 59 (#(4 76 #(l) (#(13 76 #(temp##341) (#(40 59 #(temp##340) ())))))))
(1398 #f 1395 85 (#(4 10 #(temp##343) ())))
(1399 #f 1395 105 (#(4 13 #(temp##344) ())))
(1400 #f 1395 125 (#(4 10 #(temp##345) ())))
(1401 #f 1395 145 (#(4 10 #(temp##346) ())))
(1402 #f 1395 226 (#(4 13 #(?keyword ?stuff) ())))
(1403 #f 1395 278 (#(4 129 #(?sig ?name) ())))
(1404 parse-package-clauses 1394 227 (#(4 70 #(clauses rename compare) (#(42 70 #(%open %access %for-syntax) (#(46 70 #(loop) ())))))))
(1405 loop 1404 47 (#(4 351 #(clauses opens accesses for-syntaxes others) (#(143 351 #(keyword) ())))))
(1406 #f 1394 232 (#(4 45 #(form rename compare) (#(24 45 #(names clauses) ())))))
(1407 #f 1406 25 (#(4 288 #(opens accesses for-syntaxes others) (#(90 288 #(%make %lambda %cons %list %quote %a-package %file-name) ())))))
(1408 #f 1407 134 (#(4 37 #(a) ())))
(1415 #f 1414 271 (#(4 148 #(input##354 rename##355 compare##356) (#(12 148 #(tail##353) (#(87 145 #(?type) (#(98 145 #(?cod) ()))) #(21 76 #(temp##352) (#(53 72 #(temp##351) ())))))))))
(1438 #f 1435 494 (#(2929 2940 #(structs) ())))
-
