; Copyright (c) 1993 by Richard Kelsey and Jonathan Rees.  See file COPYING.


; Packages involved in building the initial system.


; Access to values from packages and structures 

(define-package ((environments environments-interface))
  (open scheme-level-2
	packages syntactic meta-types
	fluids
	locations	; contents
	signals)	; error
  (files (rts env)))

; EVAL and LOAD

(define-package ((evaluation evaluation-interface))
  (open scheme-level-2
	compiler
	packages        	;package-uid
	environments		;package-for-load
	closures		;make-closure
	vm-exposure		;invoke-closure
	scan			;noting-undefined-variables
	signals fluids)
  (files (rts eval)))

; Scheme = scheme-level-2 plus EVAL and friends

(define-module (make-scheme environments evaluation)
  (define-package ((scheme scheme-interface))
    (open scheme-level-2
	  environments
	  evaluation))
  scheme)


; Command processor.

(define-module (make-mini-command scheme) ;copied from debug-packages.scm
  (define-package ((mini-command (export command-processor)))
    (open scheme
	  signals conditions handle
	  display-conditions)
    (files (debug mini-command)))
  mini-command)


; For building systems.

(define-module (make-initial-system scheme command)

  (define-package ((initial-system (export start)))
    (open scheme
	  command
	  interfaces		;make-simple-interface
	  packages		;make-simple-package
	  environments		;with-interaction-environment, etc.
	  signals		;error
	  scheme-level-2-internal ;usual-resumer
	  conditions handle	;error? with-handler
	  vm-exposure		;primitive-catch - in case of error
	  exceptions)		;continuation-preview
    (files (env start)))

  initial-system)


; Your choice of evaluators:

(define-structure scheme (make-scheme environments evaluation))

; Your choice of command processors:

; (define-structure command (make-command scheme))    ;in more-packages.scm
(define-structure command (make-mini-command scheme))

(define-structure initial-system
  (make-initial-system scheme command))


; Load packages, following dependency (OPEN and ACCESS) links

(define-package ((ensures-loaded  ;Cf. (link-initial-system) and Makefile
		  (export ensure-loaded)))
  (open scheme-level-2
	packages
	packages-internal
	evaluation		;load
	filenames
	signals
	environments		;with-interaction-environment
	scan)			;scan-structures
  (files (env load-package)))


; Grumble.

;(define-syntax structure-ref
;  (syntax-rules ()
;    ((structure-ref struct name)
;     (*structure-ref struct 'name))))


; Things needed by the expression generated by REIFY-STRUCTURES.

(define-package ((for-reification for-reification-interface))
  (open packages packages-internal
	syntactic usual-macros
	inline))
